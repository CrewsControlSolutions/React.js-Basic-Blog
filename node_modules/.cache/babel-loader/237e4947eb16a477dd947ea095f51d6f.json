{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DeltaInsertOp_1 = require(\"./DeltaInsertOp\");\n\nvar value_types_1 = require(\"./value-types\");\n\nvar InsertData_1 = require(\"./InsertData\");\n\nvar OpAttributeSanitizer_1 = require(\"./OpAttributeSanitizer\");\n\nvar InsertOpDenormalizer_1 = require(\"./InsertOpDenormalizer\");\n\nvar InsertOpsConverter = function () {\n  function InsertOpsConverter() {}\n\n  InsertOpsConverter.convert = function (deltaOps, options) {\n    if (!Array.isArray(deltaOps)) {\n      return [];\n    }\n\n    var denormalizedOps = [].concat.apply([], deltaOps.map(InsertOpDenormalizer_1.InsertOpDenormalizer.denormalize));\n    var results = [];\n    var insertVal, attributes;\n\n    for (var _i = 0, denormalizedOps_1 = denormalizedOps; _i < denormalizedOps_1.length; _i++) {\n      var op = denormalizedOps_1[_i];\n\n      if (!op.insert) {\n        continue;\n      }\n\n      insertVal = InsertOpsConverter.convertInsertVal(op.insert, options);\n\n      if (!insertVal) {\n        continue;\n      }\n\n      attributes = OpAttributeSanitizer_1.OpAttributeSanitizer.sanitize(op.attributes, options);\n      results.push(new DeltaInsertOp_1.DeltaInsertOp(insertVal, attributes));\n    }\n\n    return results;\n  };\n\n  InsertOpsConverter.convertInsertVal = function (insertPropVal, sanitizeOptions) {\n    if (typeof insertPropVal === 'string') {\n      return new InsertData_1.InsertDataQuill(value_types_1.DataType.Text, insertPropVal);\n    }\n\n    if (!insertPropVal || typeof insertPropVal !== 'object') {\n      return null;\n    }\n\n    var keys = Object.keys(insertPropVal);\n\n    if (!keys.length) {\n      return null;\n    }\n\n    return value_types_1.DataType.Image in insertPropVal ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Image, OpAttributeSanitizer_1.OpAttributeSanitizer.sanitizeLinkUsingOptions(insertPropVal[value_types_1.DataType.Image] + '', sanitizeOptions)) : value_types_1.DataType.Video in insertPropVal ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Video, OpAttributeSanitizer_1.OpAttributeSanitizer.sanitizeLinkUsingOptions(insertPropVal[value_types_1.DataType.Video] + '', sanitizeOptions)) : value_types_1.DataType.Formula in insertPropVal ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Formula, insertPropVal[value_types_1.DataType.Formula]) : new InsertData_1.InsertDataCustom(keys[0], insertPropVal[keys[0]]);\n  };\n\n  return InsertOpsConverter;\n}();\n\nexports.InsertOpsConverter = InsertOpsConverter;","map":{"version":3,"sources":["/Users/mikecrews/Documents/TechAcademy/GitHub/React.js/blog-project/node_modules/quill-delta-to-html/dist/commonjs/InsertOpsConverter.js"],"names":["Object","defineProperty","exports","value","DeltaInsertOp_1","require","value_types_1","InsertData_1","OpAttributeSanitizer_1","InsertOpDenormalizer_1","InsertOpsConverter","convert","deltaOps","options","Array","isArray","denormalizedOps","concat","apply","map","InsertOpDenormalizer","denormalize","results","insertVal","attributes","_i","denormalizedOps_1","length","op","insert","convertInsertVal","OpAttributeSanitizer","sanitize","push","DeltaInsertOp","insertPropVal","sanitizeOptions","InsertDataQuill","DataType","Text","keys","Image","sanitizeLinkUsingOptions","Video","Formula","InsertDataCustom"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DeltaInsertOp_1 = require(\"./DeltaInsertOp\");\nvar value_types_1 = require(\"./value-types\");\nvar InsertData_1 = require(\"./InsertData\");\nvar OpAttributeSanitizer_1 = require(\"./OpAttributeSanitizer\");\nvar InsertOpDenormalizer_1 = require(\"./InsertOpDenormalizer\");\nvar InsertOpsConverter = (function () {\n    function InsertOpsConverter() {\n    }\n    InsertOpsConverter.convert = function (deltaOps, options) {\n        if (!Array.isArray(deltaOps)) {\n            return [];\n        }\n        var denormalizedOps = [].concat.apply([], deltaOps.map(InsertOpDenormalizer_1.InsertOpDenormalizer.denormalize));\n        var results = [];\n        var insertVal, attributes;\n        for (var _i = 0, denormalizedOps_1 = denormalizedOps; _i < denormalizedOps_1.length; _i++) {\n            var op = denormalizedOps_1[_i];\n            if (!op.insert) {\n                continue;\n            }\n            insertVal = InsertOpsConverter.convertInsertVal(op.insert, options);\n            if (!insertVal) {\n                continue;\n            }\n            attributes = OpAttributeSanitizer_1.OpAttributeSanitizer.sanitize(op.attributes, options);\n            results.push(new DeltaInsertOp_1.DeltaInsertOp(insertVal, attributes));\n        }\n        return results;\n    };\n    InsertOpsConverter.convertInsertVal = function (insertPropVal, sanitizeOptions) {\n        if (typeof insertPropVal === 'string') {\n            return new InsertData_1.InsertDataQuill(value_types_1.DataType.Text, insertPropVal);\n        }\n        if (!insertPropVal || typeof insertPropVal !== 'object') {\n            return null;\n        }\n        var keys = Object.keys(insertPropVal);\n        if (!keys.length) {\n            return null;\n        }\n        return value_types_1.DataType.Image in insertPropVal\n            ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Image, OpAttributeSanitizer_1.OpAttributeSanitizer.sanitizeLinkUsingOptions(insertPropVal[value_types_1.DataType.Image] + '', sanitizeOptions))\n            : value_types_1.DataType.Video in insertPropVal\n                ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Video, OpAttributeSanitizer_1.OpAttributeSanitizer.sanitizeLinkUsingOptions(insertPropVal[value_types_1.DataType.Video] + '', sanitizeOptions))\n                : value_types_1.DataType.Formula in insertPropVal\n                    ? new InsertData_1.InsertDataQuill(value_types_1.DataType.Formula, insertPropVal[value_types_1.DataType.Formula])\n                    :\n                        new InsertData_1.InsertDataCustom(keys[0], insertPropVal[keys[0]]);\n    };\n    return InsertOpsConverter;\n}());\nexports.InsertOpsConverter = InsertOpsConverter;\n"]},"metadata":{},"sourceType":"script"}