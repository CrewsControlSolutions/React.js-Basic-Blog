{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar firebase = _interopDefault(require('@firebase/app'));\n\nvar tslib = require('tslib');\n\nvar util = require('@firebase/util');\n\nvar logger$1 = require('@firebase/logger');\n\nvar component = require('@firebase/component');\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Wraps a DOM Storage object and:\r\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\r\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\r\n *\r\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\r\n * and one for localStorage.\r\n *\r\n * @constructor\r\n */\n\n\nvar DOMStorageWrapper =\n/** @class */\nfunction () {\n  /**\r\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\r\n   */\n  function DOMStorageWrapper(domStorage_) {\n    this.domStorage_ = domStorage_; // Use a prefix to avoid collisions with other stuff saved by the app.\n\n    this.prefix_ = 'firebase:';\n  }\n  /**\r\n   * @param {string} key The key to save the value under\r\n   * @param {?Object} value The value being stored, or null to remove the key.\r\n   */\n\n\n  DOMStorageWrapper.prototype.set = function (key, value) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), util.stringify(value));\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   * @return {*} The value that was stored under this key, or null\r\n   */\n\n\n  DOMStorageWrapper.prototype.get = function (key) {\n    var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n\n    if (storedVal == null) {\n      return null;\n    } else {\n      return util.jsonEval(storedVal);\n    }\n  };\n  /**\r\n   * @param {string} key\r\n   */\n\n\n  DOMStorageWrapper.prototype.remove = function (key) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  };\n  /**\r\n   * @param {string} name\r\n   * @return {string}\r\n   */\n\n\n  DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n    return this.prefix_ + name;\n  };\n\n  DOMStorageWrapper.prototype.toString = function () {\n    return this.domStorage_.toString();\n  };\n\n  return DOMStorageWrapper;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\r\n * (TODO: create interface for both to implement).\r\n *\r\n * @constructor\r\n */\n\n\nvar MemoryStorage =\n/** @class */\nfunction () {\n  function MemoryStorage() {\n    this.cache_ = {};\n    this.isInMemoryStorage = true;\n  }\n\n  MemoryStorage.prototype.set = function (key, value) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  };\n\n  MemoryStorage.prototype.get = function (key) {\n    if (util.contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n\n    return null;\n  };\n\n  MemoryStorage.prototype.remove = function (key) {\n    delete this.cache_[key];\n  };\n\n  return MemoryStorage;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\r\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\r\n * to reflect this type\r\n *\r\n * @param {string} domStorageName Name of the underlying storage object\r\n *   (e.g. 'localStorage' or 'sessionStorage').\r\n * @return {?} Turning off type information until a common interface is defined.\r\n */\n\n\nvar createStoragefor = function (domStorageName) {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (typeof window !== 'undefined' && typeof window[domStorageName] !== 'undefined') {\n      // Need to test cache. Just because it's here doesn't mean it works\n      var domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {} // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n\n\n  return new MemoryStorage();\n};\n/** A storage object that lasts across sessions */\n\n\nvar PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\n\nvar SessionStorage = createStoragefor('sessionStorage');\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar logClient = new logger$1.Logger('@firebase/database');\n/**\r\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\r\n * @type {function(): number} Generated ID.\r\n */\n\nvar LUIDGenerator = function () {\n  var id = 1;\n  return function () {\n    return id++;\n  };\n}();\n/**\r\n * Sha1 hash of the input string\r\n * @param {!string} str The string to hash\r\n * @return {!string} The resulting hash\r\n */\n\n\nvar sha1 = function (str) {\n  var utf8Bytes = util.stringToByteArray(str);\n  var sha1 = new util.Sha1();\n  sha1.update(utf8Bytes);\n  var sha1Bytes = sha1.digest();\n  return util.base64.encodeByteArray(sha1Bytes);\n};\n/**\r\n * @param {...*} varArgs\r\n * @return {string}\r\n * @private\r\n */\n\n\nvar buildLogMessage_ = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = '';\n\n  for (var i = 0; i < varArgs.length; i++) {\n    var arg = varArgs[i];\n\n    if (Array.isArray(arg) || arg && typeof arg === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof arg.length === 'number') {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += util.stringify(arg);\n    } else {\n      message += arg;\n    }\n\n    message += ' ';\n  }\n\n  return message;\n};\n/**\r\n * Use this for all debug messages in Firebase.\r\n * @type {?function(string)}\r\n */\n\n\nvar logger = null;\n/**\r\n * Flag to check for log availability on first log message\r\n * @type {boolean}\r\n * @private\r\n */\n\nvar firstLog_ = true;\n/**\r\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\r\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\r\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\r\n */\n\nvar enableLogging = function (logger_, persistent) {\n  util.assert(!persistent || logger_ === true || logger_ === false, \"Can't turn on custom loggers persistently.\");\n\n  if (logger_ === true) {\n    logClient.logLevel = logger$1.LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n/**\r\n *\r\n * @param {...(string|Arguments)} varArgs\r\n */\n\n\nvar log = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  if (firstLog_ === true) {\n    firstLog_ = false;\n\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    var message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n/**\r\n * @param {!string} prefix\r\n * @return {function(...[*])}\r\n */\n\n\nvar logWrapper = function (prefix) {\n  return function () {\n    var varArgs = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      varArgs[_i] = arguments[_i];\n    }\n\n    log.apply(void 0, tslib.__spread([prefix], varArgs));\n  };\n};\n/**\r\n * @param {...string} varArgs\r\n */\n\n\nvar error = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\n  logClient.error(message);\n};\n/**\r\n * @param {...string} varArgs\r\n */\n\n\nvar fatal = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = \"FIREBASE FATAL ERROR: \" + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\n  logClient.error(message);\n  throw new Error(message);\n};\n/**\r\n * @param {...*} varArgs\r\n */\n\n\nvar warn = function () {\n  var varArgs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    varArgs[_i] = arguments[_i];\n  }\n\n  var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, tslib.__spread(varArgs));\n  logClient.warn(message);\n};\n/**\r\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\r\n * does not use https.\r\n */\n\n\nvar warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('https:') !== -1) {\n    warn('Insecure Firebase access from a secure page. ' + 'Please use https in calls to new Firebase().');\n  }\n};\n/**\r\n * Returns true if data is NaN, or +/- Infinity.\r\n * @param {*} data\r\n * @return {boolean}\r\n */\n\n\nvar isInvalidJSONNumber = function (data) {\n  return typeof data === 'number' && (data !== data || // NaN\n  data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);\n};\n/**\r\n * @param {function()} fn\r\n */\n\n\nvar executeWhenDOMReady = function (fn) {\n  if (util.isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n    var called_1 = false;\n\n    var wrappedFn_1 = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn_1, Math.floor(10));\n        return;\n      }\n\n      if (!called_1) {\n        called_1 = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn_1, false); // fallback to onload.\n\n      window.addEventListener('load', wrappedFn_1, false); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (document.attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      document.attachEvent('onreadystatechange', function () {\n        if (document.readyState === 'complete') {\n          wrappedFn_1();\n        }\n      }); // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      window.attachEvent('onload', wrappedFn_1); // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n/**\r\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\r\n * @type {!string}\r\n */\n\n\nvar MIN_NAME = '[MIN_NAME]';\n/**\r\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\r\n * @type {!string}\r\n */\n\nvar MAX_NAME = '[MAX_NAME]';\n/**\r\n * Compares valid Firebase key names, plus min and max name\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number}\r\n */\n\nvar nameCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    var aAsInt = tryParseInt(a),\n        bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n/**\r\n * @param {!string} a\r\n * @param {!string} b\r\n * @return {!number} comparison result.\r\n */\n\n\nvar stringCompare = function (a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n/**\r\n * @param {string} key\r\n * @param {Object} obj\r\n * @return {*}\r\n */\n\n\nvar requireKey = function (key, obj) {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error('Missing required key (' + key + ') in object: ' + util.stringify(obj));\n  }\n};\n/**\r\n * @param {*} obj\r\n * @return {string}\r\n */\n\n\nvar ObjectToUniqueKey = function (obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return util.stringify(obj);\n  }\n\n  var keys = []; // eslint-disable-next-line guard-for-in\n\n  for (var k in obj) {\n    keys.push(k);\n  } // Export as json, but with the keys sorted.\n\n\n  keys.sort();\n  var key = '{';\n\n  for (var i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n\n    key += util.stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n/**\r\n * Splits a string into a number of smaller segments of maximum size\r\n * @param {!string} str The string\r\n * @param {!number} segsize The maximum number of chars in the string.\r\n * @return {Array.<string>} The string, split into appropriately-sized chunks\r\n */\n\n\nvar splitStringBySize = function (str, segsize) {\n  var len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  var dataSegs = [];\n\n  for (var c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n\n  return dataSegs;\n};\n/**\r\n * Apply a function to each (key, value) pair in an object or\r\n * apply a function to each (index, value) pair in an array\r\n * @param obj The object or array to iterate over\r\n * @param fn The function to apply\r\n */\n\n\nfunction each(obj, fn) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n/**\r\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\r\n * I made one modification at the end and removed the NaN / Infinity\r\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\r\n * @param {!number} v A double\r\n * @return {string}\r\n */\n\n\nvar doubleToIEEE754String = function (v) {\n  util.assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  var ebits = 11,\n      fbits = 52;\n  var bias = (1 << ebits - 1) - 1;\n  var s, e, f, ln, i; // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  } // Pack sign, exponent, fraction\n\n\n  var bits = [];\n\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  var str = bits.join(''); // Return the data as a hex string. --MJL\n\n  var hexByteString = '';\n\n  for (i = 0; i < 64; i += 8) {\n    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n\n    hexByteString = hexByteString + hexByte;\n  }\n\n  return hexByteString.toLowerCase();\n};\n/**\r\n * Used to detect if we're in a Chrome content script (which executes in an\r\n * isolated environment where long-polling doesn't work).\r\n * @return {boolean}\r\n */\n\n\nvar isChromeExtensionContentScript = function () {\n  return !!(typeof window === 'object' && window['chrome'] && window['chrome']['extension'] && !/^chrome/.test(window.location.href));\n};\n/**\r\n * Used to detect if we're in a Windows 8 Store app.\r\n * @return {boolean}\r\n */\n\n\nvar isWindowsStoreApp = function () {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\r\n * Converts a server error code to a Javascript Error\r\n * @param {!string} code\r\n * @param {!Query} query\r\n * @return {Error}\r\n */\n\n\nvar errorForServerCode = function (code, query) {\n  var reason = 'Unknown Error';\n\n  if (code === 'too_big') {\n    reason = 'The data requested exceeds the maximum size ' + 'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  error.code = code.toUpperCase();\n  return error;\n};\n/**\r\n * Used to test for integer-looking strings\r\n * @type {RegExp}\r\n * @private\r\n */\n\n\nvar INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n/**\r\n * If the string contains a 32-bit integer, return it.  Else return null.\r\n * @param {!string} str\r\n * @return {?number}\r\n */\n\nvar tryParseInt = function (str) {\n  if (INTEGER_REGEXP_.test(str)) {\n    var intVal = Number(str);\n\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n\n  return null;\n};\n/**\r\n * Helper to run some code but catch any exceptions and re-throw them later.\r\n * Useful for preventing user callbacks from breaking internal code.\r\n *\r\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\r\n * convenient (we don't have to try to figure out when is a safe point to\r\n * re-throw it), and the behavior seems reasonable:\r\n *\r\n * * If you aren't pausing on exceptions, you get an error in the console with\r\n *   the correct stack trace.\r\n * * If you're pausing on all exceptions, the debugger will pause on your\r\n *   exception and then again when we rethrow it.\r\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\r\n *   on us re-throwing it.\r\n *\r\n * @param {!function()} fn The code to guard.\r\n */\n\n\nvar exceptionGuard = function (fn) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(function () {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      var stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n/**\r\n * @return {boolean} true if we think we're currently being crawled.\r\n */\n\n\nvar beingCrawled = function () {\n  var userAgent = typeof window === 'object' && window['navigator'] && window['navigator']['userAgent'] || ''; // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n\n  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;\n};\n/**\r\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\r\n *\r\n * It is removed with clearTimeout() as normal.\r\n *\r\n * @param {Function} fn Function to run.\r\n * @param {number} time Milliseconds to wait before running.\r\n * @return {number|Object} The setTimeout() return value.\r\n */\n\n\nvar setTimeoutNonBlocking = function (fn, time) {\n  var timeout = setTimeout(fn, time); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  if (typeof timeout === 'object' && timeout['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    timeout['unref']();\n  }\n\n  return timeout;\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An immutable object representing a parsed path.  It's immutable so that you\r\n * can pass them around to other functions without worrying about them changing\r\n * it.\r\n */\n\n\nvar Path =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string|Array.<string>} pathOrString Path string to parse,\r\n   *      or another path, or the raw tokens array\r\n   * @param {number=} pieceNum\r\n   */\n  function Path(pathOrString, pieceNum) {\n    if (pieceNum === void 0) {\n      this.pieces_ = pathOrString.split('/'); // Remove empty pieces.\n\n      var copyTo = 0;\n\n      for (var i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n\n      this.pieces_.length = copyTo;\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString;\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  Object.defineProperty(Path, \"Empty\", {\n    /**\r\n     * Singleton to represent an empty path\r\n     *\r\n     * @const\r\n     */\n    get: function () {\n      return new Path('');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Path.prototype.getFront = function () {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    return this.pieces_[this.pieceNum_];\n  };\n  /**\r\n   * @return {number} The number of segments in this path\r\n   */\n\n\n  Path.prototype.getLength = function () {\n    return this.pieces_.length - this.pieceNum_;\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n\n\n  Path.prototype.popFront = function () {\n    var pieceNum = this.pieceNum_;\n\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n\n    return new Path(this.pieces_, pieceNum);\n  };\n  /**\r\n   * @return {?string}\r\n   */\n\n\n  Path.prototype.getBack = function () {\n    if (this.pieceNum_ < this.pieces_.length) {\n      return this.pieces_[this.pieces_.length - 1];\n    }\n\n    return null;\n  };\n\n  Path.prototype.toString = function () {\n    var pathString = '';\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  };\n\n  Path.prototype.toUrlEncodedString = function () {\n    var pathString = '';\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n      }\n    }\n\n    return pathString || '/';\n  };\n  /**\r\n   * Shallow copy of the parts of the path.\r\n   *\r\n   * @param {number=} begin\r\n   * @return {!Array<string>}\r\n   */\n\n\n  Path.prototype.slice = function (begin) {\n    if (begin === void 0) {\n      begin = 0;\n    }\n\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  };\n  /**\r\n   * @return {?Path}\r\n   */\n\n\n  Path.prototype.parent = function () {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    var pieces = [];\n\n    for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @param {string|!Path} childPathObj\r\n   * @return {!Path}\r\n   */\n\n\n  Path.prototype.child = function (childPathObj) {\n    var pieces = [];\n\n    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    if (childPathObj instanceof Path) {\n      for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      var childPieces = childPathObj.split('/');\n\n      for (var i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) {\n          pieces.push(childPieces[i]);\n        }\n      }\n    }\n\n    return new Path(pieces, 0);\n  };\n  /**\r\n   * @return {boolean} True if there are no segments in this path\r\n   */\n\n\n  Path.prototype.isEmpty = function () {\n    return this.pieceNum_ >= this.pieces_.length;\n  };\n  /**\r\n   * @param {!Path} outerPath\r\n   * @param {!Path} innerPath\r\n   * @return {!Path} The path from outerPath to innerPath\r\n   */\n\n\n  Path.relativePath = function (outerPath, innerPath) {\n    var outer = outerPath.getFront(),\n        inner = innerPath.getFront();\n\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error('INTERNAL ERROR: innerPath (' + innerPath + ') is not within ' + 'outerPath (' + outerPath + ')');\n    }\n  };\n  /**\r\n   * @param {!Path} left\r\n   * @param {!Path} right\r\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\r\n   */\n\n\n  Path.comparePaths = function (left, right) {\n    var leftKeys = left.slice();\n    var rightKeys = right.slice();\n\n    for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      var cmp = nameCompare(leftKeys[i], rightKeys[i]);\n\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n\n    if (leftKeys.length === rightKeys.length) {\n      return 0;\n    }\n\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  };\n  /**\r\n   *\r\n   * @param {Path} other\r\n   * @return {boolean} true if paths are the same.\r\n   */\n\n\n  Path.prototype.equals = function (other) {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   *\r\n   * @param {!Path} other\r\n   * @return {boolean} True if this path is a parent (or the same as) other\r\n   */\n\n\n  Path.prototype.contains = function (other) {\n    var i = this.pieceNum_;\n    var j = other.pieceNum_;\n\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n\n      ++i;\n      ++j;\n    }\n\n    return true;\n  };\n\n  return Path;\n}(); // end Path\n\n/**\r\n * Dynamic (mutable) path used to count path lengths.\r\n *\r\n * This class is used to efficiently check paths for valid\r\n * length (in UTF8 bytes) and depth (used in path validation).\r\n *\r\n * Throws Error exception if path is ever invalid.\r\n *\r\n * The definition of a path always begins with '/'.\r\n */\n\n\nvar ValidationPath =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Path} path Initial Path.\r\n   * @param {string} errorPrefix_ Prefix for any error messages.\r\n   */\n  function ValidationPath(path, errorPrefix_) {\n    this.errorPrefix_ = errorPrefix_;\n    /** @type {!Array<string>} */\n\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (var i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += util.stringLength(this.parts_[i]);\n    }\n\n    this.checkValid_();\n  }\n\n  Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\n    /** @const {number} Maximum key depth. */\n    get: function () {\n      return 32;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\n    /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n    get: function () {\n      return 768;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @param {string} child */\n\n  ValidationPath.prototype.push = function (child) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n\n    this.parts_.push(child);\n    this.byteLength_ += util.stringLength(child);\n    this.checkValid_();\n  };\n\n  ValidationPath.prototype.pop = function () {\n    var last = this.parts_.pop();\n    this.byteLength_ -= util.stringLength(last); // Un-count the previous '/'\n\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  };\n\n  ValidationPath.prototype.checkValid_ = function () {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(this.errorPrefix_ + 'has a key path longer than ' + ValidationPath.MAX_PATH_LENGTH_BYTES + ' bytes (' + this.byteLength_ + ').');\n    }\n\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(this.errorPrefix_ + 'path specified exceeds the maximum depth that can be written (' + ValidationPath.MAX_PATH_DEPTH + ') or object contains a cycle ' + this.toErrorString());\n    }\n  };\n  /**\r\n   * String for use in error messages - uses '.' notation for path.\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  ValidationPath.prototype.toErrorString = function () {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  };\n\n  return ValidationPath;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PROTOCOL_VERSION = '5';\nvar VERSION_PARAM = 'v';\nvar TRANSPORT_SESSION_PARAM = 's';\nvar REFERER_PARAM = 'r';\nvar FORGE_REF = 'f';\nvar FORGE_DOMAIN = 'firebaseio.com';\nvar LAST_SESSION_PARAM = 'ls';\nvar WEBSOCKET = 'websocket';\nvar LONG_POLLING = 'long_polling';\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A class that holds metadata about a Repo object\r\n *\r\n * @constructor\r\n */\n\nvar RepoInfo =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} host Hostname portion of the url for the repo\r\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\r\n   * @param {string} namespace The namespace represented by the repo\r\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\r\n   * @param {string=} persistenceKey Override the default session persistence storage key\r\n   */\n  function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey, includeNamespaceInQueryParams) {\n    if (persistenceKey === void 0) {\n      persistenceKey = '';\n    }\n\n    if (includeNamespaceInQueryParams === void 0) {\n      includeNamespaceInQueryParams = false;\n    }\n\n    this.secure = secure;\n    this.namespace = namespace;\n    this.webSocketOnly = webSocketOnly;\n    this.persistenceKey = persistenceKey;\n    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost = PersistentStorage.get('host:' + host) || this.host;\n  }\n\n  RepoInfo.prototype.needsQueryParam = function () {\n    return this.host !== this.internalHost || this.isCustomHost() || this.includeNamespaceInQueryParams;\n  };\n\n  RepoInfo.prototype.isCacheableHost = function () {\n    return this.internalHost.substr(0, 2) === 's-';\n  };\n\n  RepoInfo.prototype.isDemoHost = function () {\n    return this.domain === 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.isCustomHost = function () {\n    return this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com';\n  };\n\n  RepoInfo.prototype.updateHost = function (newHost) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  };\n  /**\r\n   * Returns the websocket URL for this repo\r\n   * @param {string} type of connection\r\n   * @param {Object} params list\r\n   * @return {string} The URL for this repo\r\n   */\n\n\n  RepoInfo.prototype.connectionURL = function (type, params) {\n    util.assert(typeof type === 'string', 'typeof type must == string');\n    util.assert(typeof params === 'object', 'typeof params must == object');\n    var connURL;\n\n    if (type === WEBSOCKET) {\n      connURL = (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL = (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    var pairs = [];\n    each(params, function (key, value) {\n      pairs.push(key + '=' + value);\n    });\n    return connURL + pairs.join('&');\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toString = function () {\n    var str = this.toURLString();\n\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n\n    return str;\n  };\n  /** @return {string} */\n\n\n  RepoInfo.prototype.toURLString = function () {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  };\n\n  return RepoInfo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!string} pathString\r\n * @return {string}\r\n */\n\n\nfunction decodePath(pathString) {\n  var pathStringDecoded = '';\n  var pieces = pathString.split('/');\n\n  for (var i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      var piece = pieces[i];\n\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n\n      pathStringDecoded += '/' + piece;\n    }\n  }\n\n  return pathStringDecoded;\n}\n/**\r\n * @param {!string} queryString\r\n * @return {!{[key:string]:string}} key value hash\r\n */\n\n\nfunction decodeQuery(queryString) {\n  var e_1, _a;\n\n  var results = {};\n\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n\n  try {\n    for (var _b = tslib.__values(queryString.split('&')), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var segment = _c.value;\n\n      if (segment.length === 0) {\n        continue;\n      }\n\n      var kv = segment.split('=');\n\n      if (kv.length === 2) {\n        results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n      } else {\n        warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return results;\n}\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{repoInfo: !RepoInfo, path: !Path}}\r\n */\n\n\nvar parseRepoInfo = function (dataURL) {\n  var parsedUrl = parseDatabaseURL(dataURL),\n      namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase') {\n    fatal(parsedUrl.host + ' is no longer supported. ' + 'Please use <YOUR FIREBASE>.firebaseio.com instead');\n  } // Catch common error of uninitialized namespace value.\n\n\n  if ((!namespace || namespace === 'undefined') && parsedUrl.domain !== 'localhost') {\n    fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n  return {\n    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly,\n    /*persistenceKey=*/\n    '',\n    /*includeNamespaceInQueryParams=*/\n    namespace !== parsedUrl.subdomain),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n/**\r\n *\r\n * @param {!string} dataURL\r\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\r\n */\n\n\nvar parseDatabaseURL = function (dataURL) {\n  // Default to empty strings in the event of a malformed string.\n  var host = '',\n      domain = '',\n      subdomain = '',\n      pathString = '',\n      namespace = ''; // Always default to SSL, unless otherwise specified.\n\n  var secure = true,\n      scheme = 'https',\n      port = 443; // Don't do any validation here. The caller is responsible for validating the result of parsing.\n\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    var colonInd = dataURL.indexOf('//');\n\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    } // Parse host, path, and query string.\n\n\n    var slashInd = dataURL.indexOf('/');\n\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n\n    var questionMarkInd = dataURL.indexOf('?');\n\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n\n    var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd))); // If we have a port, use scheme for determining if it's secure.\n\n    colonInd = host.indexOf(':');\n\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = dataURL.length;\n    }\n\n    var parts = host.split('.');\n\n    if (parts.length === 3) {\n      // Normalize namespaces to lowercase to share storage / connection.\n      domain = parts[1];\n      subdomain = parts[0].toLowerCase(); // We interpret the subdomain of a 3 component URL as the namespace name.\n\n      namespace = subdomain;\n    } else if (parts.length === 2) {\n      domain = parts[0];\n    } else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } // Always treat the value of the `ns` as the namespace name if it is present.\n\n\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host: host,\n    port: port,\n    domain: domain,\n    subdomain: subdomain,\n    secure: secure,\n    scheme: scheme,\n    pathString: pathString,\n    namespace: namespace\n  };\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * True for invalid Firebase keys\r\n * @type {RegExp}\r\n * @private\r\n */\n\n\nvar INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\r\n * True for invalid Firebase paths.\r\n * Allows '/' in paths.\r\n * @type {RegExp}\r\n * @private\r\n */\n\nvar INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\r\n * Maximum number of characters to allow in leaf value\r\n * @type {number}\r\n * @private\r\n */\n\nvar MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n/**\r\n * @param {*} key\r\n * @return {boolean}\r\n */\n\nvar isValidKey = function (key) {\n  return typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\n\n\nvar isValidPathString = function (pathString) {\n  return typeof pathString === 'string' && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);\n};\n/**\r\n * @param {string} pathString\r\n * @return {boolean}\r\n */\n\n\nvar isValidRootPathString = function (pathString) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n/**\r\n * @param {*} priority\r\n * @return {boolean}\r\n */\n\n\nvar isValidPriority = function (priority) {\n  return priority === null || typeof priority === 'string' || typeof priority === 'number' && !isInvalidJSONNumber(priority) || priority && typeof priority === 'object' && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  util.contains(priority, '.sv');\n};\n/**\r\n * Pre-validate a datum passed as an argument to Firebase function.\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\n\n\nvar validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(util.errorPrefix(fnName, argumentNumber, optional), data, path);\n};\n/**\r\n * Validate a data object client-side before sending to server.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {*} data\r\n * @param {!Path|!ValidationPath} path_\r\n */\n\n\nvar validateFirebaseData = function (errorPrefix, data, path_) {\n  var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n\n  if (typeof data === 'function') {\n    throw new Error(errorPrefix + 'contains a function ' + path.toErrorString() + ' with contents = ' + data.toString());\n  }\n\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\n  } // Check max leaf size, but try to avoid the utf8 conversion if we can.\n\n\n  if (typeof data === 'string' && data.length > MAX_LEAF_SIZE_ / 3 && util.stringLength(data) > MAX_LEAF_SIZE_) {\n    throw new Error(errorPrefix + 'contains a string greater than ' + MAX_LEAF_SIZE_ + ' utf8 bytes ' + path.toErrorString() + \" ('\" + data.substring(0, 50) + \"...')\");\n  } // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n\n\n  if (data && typeof data === 'object') {\n    var hasDotValue_1 = false;\n    var hasActualChild_1 = false;\n    each(data, function (key, value) {\n      if (key === '.value') {\n        hasDotValue_1 = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild_1 = true;\n\n        if (!isValidKey(key)) {\n          throw new Error(errorPrefix + ' contains an invalid key (' + key + ') ' + path.toErrorString() + '.  Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue_1 && hasActualChild_1) {\n      throw new Error(errorPrefix + ' contains \".value\" child ' + path.toErrorString() + ' in addition to actual children.');\n    }\n  }\n};\n/**\r\n * Pre-validate paths passed in the firebase function.\r\n *\r\n * @param {string} errorPrefix\r\n * @param {Array<!Path>} mergePaths\r\n */\n\n\nvar validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n  var i, curPath;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    var keys = curPath.slice();\n\n    for (var j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) ;else if (!isValidKey(keys[j])) {\n        throw new Error(errorPrefix + 'contains an invalid key (' + keys[j] + ') in path ' + curPath.toString() + '. Keys must be non-empty strings ' + 'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n      }\n    }\n  } // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n\n\n  mergePaths.sort(Path.comparePaths);\n  var prevPath = null;\n\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(errorPrefix + 'contains a path ' + prevPath.toString() + ' that is ancestor of another path ' + curPath.toString());\n    }\n\n    prevPath = curPath;\n  }\n};\n/**\r\n * pre-validate an object passed as an argument to firebase function (\r\n * must be an object - e.g. for firebase.update()).\r\n *\r\n * @param {string} fnName\r\n * @param {number} argumentNumber\r\n * @param {*} data\r\n * @param {!Path} path\r\n * @param {boolean} optional\r\n */\n\n\nvar validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  var errorPrefix = util.errorPrefix(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(errorPrefix + ' must be an object containing the children to replace.');\n  }\n\n  var mergePaths = [];\n  each(data, function (key, value) {\n    var curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(errorPrefix + \"contains an invalid value for '\" + curPath.toString() + \"', which must be a valid \" + 'Firebase priority (a string, finite number, server value, or null).');\n      }\n    }\n\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nvar validatePriority = function (fnName, argumentNumber, priority, optional) {\n  if (optional && priority === undefined) {\n    return;\n  }\n\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'is ' + priority.toString() + ', but must be a valid Firebase priority (a string, finite number, ' + 'server value, or null).');\n  } // Special case to allow importing data with a .sv.\n\n\n  if (!isValidPriority(priority)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid Firebase priority ' + '(a string, finite number, server value, or null).');\n  }\n};\n\nvar validateEventType = function (fnName, argumentNumber, eventType, optional) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n\n    default:\n      throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' + '\"child_changed\", or \"child_moved\".');\n  }\n};\n\nvar validateKey = function (fnName, argumentNumber, key, optional) {\n  if (optional && key === undefined) {\n    return;\n  }\n\n  if (!isValidKey(key)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid key = \"' + key + '\".  Firebase keys must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n  }\n};\n\nvar validatePathString = function (fnName, argumentNumber, pathString, optional) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'was an invalid path = \"' + pathString + '\". Paths must be non-empty strings and ' + 'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n  }\n};\n\nvar validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nvar validateWritablePath = function (fnName, path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nvar validateUrl = function (fnName, argumentNumber, parsedUrl) {\n  // TODO = Validate server better.\n  var pathString = parsedUrl.path.toString();\n\n  if (!(typeof parsedUrl.repoInfo.host === 'string') || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(':')[0] !== 'localhost' || pathString.length !== 0 && !isValidRootPathString(pathString)) {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, false) + 'must be a valid firebase URL and ' + 'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n  }\n};\n\nvar validateBoolean = function (fnName, argumentNumber, bool, optional) {\n  if (optional && bool === undefined) {\n    return;\n  }\n\n  if (typeof bool !== 'boolean') {\n    throw new Error(util.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n */\n\n\nvar OnDisconnect =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Repo} repo_\r\n   * @param {!Path} path_\r\n   */\n  function OnDisconnect(repo_, path_) {\n    this.repo_ = repo_;\n    this.path_ = path_;\n  }\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.cancel = function (onComplete) {\n    util.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    util.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.remove = function (onComplete) {\n    util.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    util.validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.set = function (value, onComplete) {\n    util.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    util.validateCallback('OnDisconnect.set', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} value\r\n   * @param {number|string|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n    util.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    util.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n    util.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' + 'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n    }\n\n    validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\n    util.validateCallback('OnDisconnect.update', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n\n  return OnDisconnect;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar TransactionResult =\n/** @class */\nfunction () {\n  /**\r\n   * A type for the resolve value of Firebase.transaction.\r\n   * @constructor\r\n   * @dict\r\n   * @param {boolean} committed\r\n   * @param {DataSnapshot} snapshot\r\n   */\n  function TransactionResult(committed, snapshot) {\n    this.committed = committed;\n    this.snapshot = snapshot;\n  } // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  TransactionResult.prototype.toJSON = function () {\n    util.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return {\n      committed: this.committed,\n      snapshot: this.snapshot.toJSON()\n    };\n  };\n\n  return TransactionResult;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Fancy ID generator that creates 20-character string identifiers with the\r\n * following properties:\r\n *\r\n * 1. They're based on timestamp so that they sort *after* any existing ids.\r\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\r\n *    collide with other clients' IDs.\r\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\r\n *    that will sort properly).\r\n * 4. They're monotonically increasing. Even if you generate more than one in\r\n *    the same timestamp, the latter ones will sort after the former ones. We do\r\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\r\n *    in the case of a timestamp collision).\r\n */\n\n\nvar nextPushId = function () {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'; // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n\n  var lastPushTime = 0; // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n\n  var lastRandChars = [];\n  return function (now) {\n    var duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n    var i;\n    var timeStampChars = new Array(8);\n\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64); // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n\n      now = Math.floor(now / 64);\n    }\n\n    util.assert(now === 0, 'Cannot push at time == 0');\n    var id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n\n      lastRandChars[i]++;\n    }\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    util.assert(id.length === 20, 'nextPushId: Length should be 20.');\n    return id;\n  };\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @param {!string} name\r\n * @param {!Node} node\r\n * @constructor\r\n * @struct\r\n */\n\n\nvar NamedNode =\n/** @class */\nfunction () {\n  function NamedNode(name, node) {\n    this.name = name;\n    this.node = node;\n  }\n  /**\r\n   *\r\n   * @param {!string} name\r\n   * @param {!Node} node\r\n   * @return {NamedNode}\r\n   */\n\n\n  NamedNode.Wrap = function (name, node) {\n    return new NamedNode(name, node);\n  };\n\n  return NamedNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @constructor\r\n */\n\n\nvar Index =\n/** @class */\nfunction () {\n  function Index() {}\n  /**\r\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\r\n   * this index\r\n   */\n\n\n  Index.prototype.getCompare = function () {\n    return this.compare.bind(this);\n  };\n  /**\r\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\r\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\r\n   *\r\n   * @param {!Node} oldNode\r\n   * @param {!Node} newNode\r\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\r\n   */\n\n\n  Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n    var oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    var newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  };\n  /**\r\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\r\n   * any other node wrapper, using this index\r\n   */\n\n\n  Index.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n\n  return Index;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __EMPTY_NODE;\n\nvar KeyIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(KeyIndex, _super);\n\n  function KeyIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n    get: function () {\n      return __EMPTY_NODE;\n    },\n    set: function (val) {\n      __EMPTY_NODE = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @inheritDoc\r\n   */\n\n  KeyIndex.prototype.compare = function (a, b) {\n    return nameCompare(a.name, b.name);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.isDefinedOn = function (node) {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw util.assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return false; // The key for a node never changes.\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  KeyIndex.prototype.maxPost = function () {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  KeyIndex.prototype.makePost = function (indexValue, name) {\n    util.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.'); // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  KeyIndex.prototype.toString = function () {\n    return '.key';\n  };\n\n  return KeyIndex;\n}(Index);\n\nvar KEY_INDEX = new KeyIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar MAX_NODE;\n\nfunction setMaxNode(val) {\n  MAX_NODE = val;\n}\n/**\r\n * @param {(!string|!number)} priority\r\n * @return {!string}\r\n */\n\n\nvar priorityHashText = function (priority) {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n/**\r\n * Validates that a priority snapshot Node is valid.\r\n *\r\n * @param {!Node} priorityNode\r\n */\n\n\nvar validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    var val = priorityNode.val();\n    util.assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && util.contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    util.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  util.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __childrenNodeConstructor;\n/**\r\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\r\n * implements Node and stores the value of the node (a string,\r\n * number, or boolean) accessible via getValue().\r\n */\n\n\nvar LeafNode =\n/** @class */\nfunction () {\n  /**\r\n   * @implements {Node}\r\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\r\n   *                                         The object type is possible in the event of a deferred value\r\n   * @param {!Node=} priorityNode_ The priority of this node.\r\n   */\n  function LeafNode(value_, priorityNode_) {\n    if (priorityNode_ === void 0) {\n      priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n\n    this.value_ = value_;\n    this.priorityNode_ = priorityNode_;\n    this.lazyHash_ = null;\n    util.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\n    get: function () {\n      return __childrenNodeConstructor;\n    },\n    set: function (val) {\n      __childrenNodeConstructor = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  LeafNode.prototype.isLeafNode = function () {\n    return true;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPriority = function () {\n    return this.priorityNode_;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updatePriority = function (newPriorityNode) {\n    return new LeafNode(this.value_, newPriorityNode);\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getChild = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.hasChild = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\n    return null;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      util.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.numChildren = function () {\n    return 0;\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.forEachChild = function (index, action) {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.val = function (exportFormat) {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  };\n  /** @inheritDoc */\n\n\n  LeafNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash = '';\n\n      if (!this.priorityNode_.isEmpty()) {\n        toHash += 'priority:' + priorityHashText(this.priorityNode_.val()) + ':';\n      }\n\n      var type = typeof this.value_;\n      toHash += type + ':';\n\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_);\n      } else {\n        toHash += this.value_;\n      }\n\n      this.lazyHash_ = sha1(toHash);\n    }\n\n    return this.lazyHash_;\n  };\n  /**\r\n   * Returns the value of the leaf node.\r\n   * @return {Object|string|number|boolean} The value of the node.\r\n   */\n\n\n  LeafNode.prototype.getValue = function () {\n    return this.value_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.compareTo = function (other) {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      util.assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other);\n    }\n  };\n  /**\r\n   * Comparison specifically for two leaf nodes\r\n   * @param {!LeafNode} otherLeaf\r\n   * @return {!number}\r\n   * @private\r\n   */\n\n\n  LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\n    var otherLeafType = typeof otherLeaf.value_;\n    var thisLeafType = typeof this.value_;\n    var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    util.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    util.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.withIndex = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.isIndexed = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LeafNode.prototype.equals = function (other) {\n    /**\r\n     * @inheritDoc\r\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      var otherLeaf = other;\n      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\r\n   * the same type, the comparison falls back to their value\r\n   * @type {Array.<!string>}\r\n   * @const\r\n   */\n\n\n  LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n  return LeafNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar nodeFromJSON;\nvar MAX_NODE$1;\n\nfunction setNodeFromJSON(val) {\n  nodeFromJSON = val;\n}\n\nfunction setMaxNode$1(val) {\n  MAX_NODE$1 = val;\n}\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\n\nvar PriorityIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PriorityIndex, _super);\n\n  function PriorityIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.compare = function (a, b) {\n    var aPriority = a.node.getPriority();\n    var bPriority = b.node.getPriority();\n    var indexCmp = aPriority.compareTo(bPriority);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.isDefinedOn = function (node) {\n    return !node.getPriority().isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PriorityIndex.prototype.maxPost = function () {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE$1));\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  PriorityIndex.prototype.makePost = function (indexValue, name) {\n    var priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  PriorityIndex.prototype.toString = function () {\n    return '.priority';\n  };\n\n  return PriorityIndex;\n}(Index);\n\nvar PRIORITY_INDEX = new PriorityIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An iterator over an LLRBNode.\r\n */\n\nvar SortedMapIterator =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V, T\r\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\r\n   * @param {?K} startKey\r\n   * @param {function(K, K): number} comparator\r\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\r\n   * @param {(function(K, V):T)=} resultGenerator_\r\n   */\n  function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n    if (resultGenerator_ === void 0) {\n      resultGenerator_ = null;\n    }\n\n    this.isReverse_ = isReverse_;\n    this.resultGenerator_ = resultGenerator_;\n    /** @private\r\n     * @type {Array.<!LLRBNode>}\r\n     */\n\n    this.nodeStack_ = [];\n    var cmp = 1;\n\n    while (!node.isEmpty()) {\n      node = node;\n      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse\n\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  SortedMapIterator.prototype.getNext = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    var node = this.nodeStack_.pop();\n    var result;\n\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = {\n        key: node.key,\n        value: node.value\n      };\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  };\n\n  SortedMapIterator.prototype.hasNext = function () {\n    return this.nodeStack_.length > 0;\n  };\n\n  SortedMapIterator.prototype.peek = function () {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    var node = this.nodeStack_[this.nodeStack_.length - 1];\n\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return {\n        key: node.key,\n        value: node.value\n      };\n    }\n  };\n\n  return SortedMapIterator;\n}();\n/**\r\n * Represents a node in a Left-leaning Red-Black tree.\r\n */\n\n\nvar LLRBNode =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V\r\n   * @param {!K} key Key associated with this node.\r\n   * @param {!V} value Value associated with this node.\r\n   * @param {?boolean} color Whether this node is red.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\r\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\r\n   */\n  function LLRBNode(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : SortedMap.EMPTY_NODE;\n    this.right = right != null ? right : SortedMap.EMPTY_NODE;\n  }\n  /**\r\n   * Returns a copy of the current node, optionally replacing pieces of it.\r\n   *\r\n   * @param {?K} key New key for the node, or null.\r\n   * @param {?V} value New value for the node, or null.\r\n   * @param {?boolean} color New color for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\r\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\r\n   * @return {!LLRBNode} The node copy.\r\n   */\n\n\n  LLRBNode.prototype.copy = function (key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n\n\n  LLRBNode.prototype.count = function () {\n    return this.left.count() + 1 + this.right.count();\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n\n\n  LLRBNode.prototype.isEmpty = function () {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   *   node.  If it returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  LLRBNode.prototype.inorderTraversal = function (action) {\n    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {*} True if traversal was aborted.\r\n   */\n\n\n  LLRBNode.prototype.reverseTraversal = function (action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  };\n  /**\r\n   * @return {!Object} The minimum node in the tree.\r\n   * @private\r\n   */\n\n\n  LLRBNode.prototype.min_ = function () {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min_();\n    }\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.minKey = function () {\n    return this.min_().key;\n  };\n  /**\r\n   * @return {!K} The maximum key in the tree.\r\n   */\n\n\n  LLRBNode.prototype.maxKey = function () {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Object} key Key to insert.\r\n   * @param {!Object} value Value to insert.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with the key/value added.\r\n   */\n\n\n  LLRBNode.prototype.insert = function (key, value, comparator) {\n    var n = this;\n    var cmp = comparator(key, n.key);\n\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\r\n   */\n\n\n  LLRBNode.prototype.removeMin_ = function () {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE;\n    }\n\n    var n = this;\n\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n\n    n = n.copy(null, null, null, n.left.removeMin_(), null);\n    return n.fixUp_();\n  };\n  /**\r\n   * @param {!Object} key The key of the item to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\r\n   */\n\n\n  LLRBNode.prototype.remove = function (key, comparator) {\n    var n, smallest;\n    n = this;\n\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE;\n        } else {\n          smallest = n.right.min_();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n        }\n      }\n\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n\n    return n.fixUp_();\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this is a RED node.\r\n   */\n\n\n  LLRBNode.prototype.isRed_ = function () {\n    return this.color;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree after performing any needed rotations.\r\n   */\n\n\n  LLRBNode.prototype.fixUp_ = function () {\n    var n = this;\n\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedLeft.\r\n   */\n\n\n  LLRBNode.prototype.moveRedLeft_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.right.left.isRed_()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight_());\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after moveRedRight.\r\n   */\n\n\n  LLRBNode.prototype.moveRedRight_ = function () {\n    var n = this.colorFlip_();\n\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n\n    return n;\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateLeft.\r\n   */\n\n\n  LLRBNode.prototype.rotateLeft_ = function () {\n    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after rotateRight.\r\n   */\n\n\n  LLRBNode.prototype.rotateRight_ = function () {\n    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  };\n  /**\r\n   * @private\r\n   * @return {!LLRBNode} New tree, after colorFlip.\r\n   */\n\n\n  LLRBNode.prototype.colorFlip_ = function () {\n    var left = this.left.copy(null, null, !this.left.color, null, null);\n    var right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  };\n  /**\r\n   * For testing.\r\n   *\r\n   * @private\r\n   * @return {boolean} True if all is well.\r\n   */\n\n\n  LLRBNode.prototype.checkMaxDepth_ = function () {\n    var blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n\n\n  LLRBNode.prototype.check_ = function () {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n    }\n\n    if (this.right.isRed_()) {\n      throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n    }\n\n    var blackDepth = this.left.check_();\n\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  };\n\n  LLRBNode.RED = true;\n  LLRBNode.BLACK = false;\n  return LLRBNode;\n}();\n/**\r\n * Represents an empty node (a leaf node in the Red-Black Tree).\r\n */\n\n\nvar LLRBEmptyNode =\n/** @class */\nfunction () {\n  function LLRBEmptyNode() {}\n  /**\r\n   * Returns a copy of the current node.\r\n   *\r\n   * @return {!LLRBEmptyNode} The node copy.\r\n   */\n\n\n  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n    return this;\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key/value added.\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBNode} New tree, with item added.\r\n   */\n\n\n  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n    return new LLRBNode(key, value, null);\n  };\n  /**\r\n   * Returns a copy of the tree, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @param {Comparator} comparator Comparator.\r\n   * @return {!LLRBEmptyNode} New tree, with item removed.\r\n   */\n\n\n  LLRBEmptyNode.prototype.remove = function (key, comparator) {\n    return this;\n  };\n  /**\r\n   * @return {number} The total number of nodes in the tree.\r\n   */\n\n\n  LLRBEmptyNode.prototype.count = function () {\n    return 0;\n  };\n  /**\r\n   * @return {boolean} True if the tree is empty.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isEmpty = function () {\n    return true;\n  };\n  /**\r\n   * Traverses the tree in key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * Traverses the tree in reverse key order and calls the specified action function\r\n   * for each node.\r\n   *\r\n   * @param {function(!K, !V)} action Callback function to be called for each\r\n   * node.  If it returns true, traversal is aborted.\r\n   * @return {boolean} True if traversal was aborted.\r\n   */\n\n\n  LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n    return false;\n  };\n  /**\r\n   * @return {null}\r\n   */\n\n\n  LLRBEmptyNode.prototype.minKey = function () {\n    return null;\n  };\n  /**\r\n   * @return {null}\r\n   */\n\n\n  LLRBEmptyNode.prototype.maxKey = function () {\n    return null;\n  };\n  /**\r\n   * @private\r\n   * @return {number} Not sure what this returns exactly. :-).\r\n   */\n\n\n  LLRBEmptyNode.prototype.check_ = function () {\n    return 0;\n  };\n  /**\r\n   * @private\r\n   * @return {boolean} Whether this node is red.\r\n   */\n\n\n  LLRBEmptyNode.prototype.isRed_ = function () {\n    return false;\n  };\n\n  return LLRBEmptyNode;\n}();\n/**\r\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\r\n * tree.\r\n */\n\n\nvar SortedMap =\n/** @class */\nfunction () {\n  /**\r\n   * @template K, V\r\n   * @param {function(K, K):number} comparator_ Key comparator.\r\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\r\n   */\n  function SortedMap(comparator_, root_) {\n    if (root_ === void 0) {\n      root_ = SortedMap.EMPTY_NODE;\n    }\n\n    this.comparator_ = comparator_;\n    this.root_ = root_;\n  }\n  /**\r\n   * Returns a copy of the map, with the specified key/value added or replaced.\r\n   * (TODO: We should perhaps rename this method to 'put')\r\n   *\r\n   * @param {!K} key Key to be added.\r\n   * @param {!V} value Value to be added.\r\n   * @return {!SortedMap.<K, V>} New map, with item added.\r\n   */\n\n\n  SortedMap.prototype.insert = function (key, value) {\n    return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns a copy of the map, with the specified key removed.\r\n   *\r\n   * @param {!K} key The key to remove.\r\n   * @return {!SortedMap.<K, V>} New map, with item removed.\r\n   */\n\n\n  SortedMap.prototype.remove = function (key) {\n    return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));\n  };\n  /**\r\n   * Returns the value of the node with the given key, or null.\r\n   *\r\n   * @param {!K} key The key to look up.\r\n   * @return {?V} The value of the node with the given key, or null if the\r\n   * key doesn't exist.\r\n   */\n\n\n  SortedMap.prototype.get = function (key) {\n    var cmp;\n    var node = this.root_;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\r\n   * @param {K} key The key to find the predecessor of\r\n   * @return {?K} The predecessor key.\r\n   */\n\n\n  SortedMap.prototype.getPredecessorKey = function (key) {\n    var cmp,\n        node = this.root_,\n        rightParent = null;\n\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n  };\n  /**\r\n   * @return {boolean} True if the map is empty.\r\n   */\n\n\n  SortedMap.prototype.isEmpty = function () {\n    return this.root_.isEmpty();\n  };\n  /**\r\n   * @return {number} The total number of nodes in the map.\r\n   */\n\n\n  SortedMap.prototype.count = function () {\n    return this.root_.count();\n  };\n  /**\r\n   * @return {?K} The minimum key in the map.\r\n   */\n\n\n  SortedMap.prototype.minKey = function () {\n    return this.root_.minKey();\n  };\n  /**\r\n   * @return {?K} The maximum key in the map.\r\n   */\n\n\n  SortedMap.prototype.maxKey = function () {\n    return this.root_.maxKey();\n  };\n  /**\r\n   * Traverses the map in key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!K, !V):*} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} The first truthy value returned by action, or the last falsey\r\n   *   value returned by action\r\n   */\n\n\n  SortedMap.prototype.inorderTraversal = function (action) {\n    return this.root_.inorderTraversal(action);\n  };\n  /**\r\n   * Traverses the map in reverse key order and calls the specified action function\r\n   * for each key/value pair.\r\n   *\r\n   * @param {function(!Object, !Object)} action Callback function to be called\r\n   * for each key/value pair.  If action returns true, traversal is aborted.\r\n   * @return {*} True if the traversal was aborted.\r\n   */\n\n\n  SortedMap.prototype.reverseTraversal = function (action) {\n    return this.root_.reverseTraversal(action);\n  };\n  /**\r\n   * Returns an iterator over the SortedMap.\r\n   * @template T\r\n   * @param {(function(K, V):T)=} resultGenerator\r\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\r\n   */\n\n\n  SortedMap.prototype.getIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n  };\n\n  SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n  };\n  /**\r\n   * Always use the same empty node, to reduce memory.\r\n   * @const\r\n   */\n\n\n  SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n  return SortedMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LOG_2 = Math.log(2);\n/**\r\n * @constructor\r\n */\n\nvar Base12Num =\n/** @class */\nfunction () {\n  /**\r\n   * @param {number} length\r\n   */\n  function Base12Num(length) {\n    var logBase2 = function (num) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return parseInt(Math.log(num) / LOG_2, 10);\n    };\n\n    var bitMask = function (bits) {\n      return parseInt(Array(bits + 1).join('1'), 2);\n    };\n\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    var mask = bitMask(this.count);\n    this.bits_ = length + 1 & mask;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  Base12Num.prototype.nextBitIsOne = function () {\n    //noinspection JSBitwiseOperatorUsage\n    var result = !(this.bits_ & 0x1 << this.current_);\n    this.current_--;\n    return result;\n  };\n\n  return Base12Num;\n}();\n/**\r\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\r\n * function\r\n *\r\n * Uses the algorithm described in the paper linked here:\r\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\r\n *\r\n * @template K, V\r\n * @param {Array.<!NamedNode>} childList Unsorted list of children\r\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\r\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\r\n *                                                        type is not NamedNode\r\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\r\n * @return {SortedMap.<K, V>}\r\n */\n\n\nvar buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n  childList.sort(cmp);\n\n  var buildBalancedTree = function (low, high) {\n    var length = high - low;\n    var namedNode;\n    var key;\n\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var middle = parseInt(length / 2, 10) + low;\n      var left = buildBalancedTree(low, middle);\n      var right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : namedNode;\n      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);\n    }\n  };\n\n  var buildFrom12Array = function (base12) {\n    var node = null;\n    var root = null;\n    var index = childList.length;\n\n    var buildPennant = function (chunkSize, color) {\n      var low = index - chunkSize;\n      var high = index;\n      index -= chunkSize;\n      var childTree = buildBalancedTree(low + 1, high);\n      var namedNode = childList[low];\n      var key = keyFn ? keyFn(namedNode) : namedNode;\n      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));\n    };\n\n    var attachPennant = function (pennant) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (var i = 0; i < base12.count; ++i) {\n      var isOne = base12.nextBitIsOne(); // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n\n      var chunkSize = Math.pow(2, base12.count - (i + 1));\n\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n\n    return root;\n  };\n\n  var base12 = new Base12Num(childList.length);\n  var root = buildFrom12Array(base12); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return new SortedMap(mapSortFn || cmp, root);\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _defaultIndexMap;\n\nvar fallbackObject = {};\n\nvar IndexMap =\n/** @class */\nfunction () {\n  function IndexMap(indexes_, indexSet_) {\n    this.indexes_ = indexes_;\n    this.indexSet_ = indexSet_;\n  }\n\n  Object.defineProperty(IndexMap, \"Default\", {\n    /**\r\n     * The default IndexMap for nodes without a priority\r\n     */\n    get: function () {\n      util.assert(fallbackObject && PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n      _defaultIndexMap = _defaultIndexMap || new IndexMap({\n        '.priority': fallbackObject\n      }, {\n        '.priority': PRIORITY_INDEX\n      });\n      return _defaultIndexMap;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  IndexMap.prototype.get = function (indexKey) {\n    var sortedMap = util.safeGet(this.indexes_, indexKey);\n\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  };\n\n  IndexMap.prototype.hasIndex = function (indexDefinition) {\n    return util.contains(this.indexSet_, indexDefinition.toString());\n  };\n\n  IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\n    util.assert(indexDefinition !== KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n    var childList = [];\n    var sawIndexedValue = false;\n    var iter = existingChildren.getIterator(NamedNode.Wrap);\n    var next = iter.getNext();\n\n    while (next) {\n      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n\n    var newIndex;\n\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n\n    var indexName = indexDefinition.toString();\n\n    var newIndexSet = tslib.__assign({}, this.indexSet_);\n\n    newIndexSet[indexName] = indexDefinition;\n\n    var newIndexes = tslib.__assign({}, this.indexes_);\n\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  };\n  /**\r\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\r\n   */\n\n\n  IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\n    var _this = this;\n\n    var newIndexes = util.map(this.indexes_, function (indexedChildren, indexName) {\n      var index = util.safeGet(_this.indexSet_, indexName);\n      util.assert(index, 'Missing index implementation for ' + indexName);\n\n      if (indexedChildren === fallbackObject) {\n        // Check to see if we need to index everything\n        if (index.isDefinedOn(namedNode.node)) {\n          // We need to build this index\n          var childList = [];\n          var iter = existingChildren.getIterator(NamedNode.Wrap);\n          var next = iter.getNext();\n\n          while (next) {\n            if (next.name !== namedNode.name) {\n              childList.push(next);\n            }\n\n            next = iter.getNext();\n          }\n\n          childList.push(namedNode);\n          return buildChildSet(childList, index.getCompare());\n        } else {\n          // No change, this remains a fallback\n          return fallbackObject;\n        }\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n        var newChildren = indexedChildren;\n\n        if (existingSnap) {\n          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        }\n\n        return newChildren.insert(namedNode, namedNode.node);\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n  /**\r\n   * Create a new IndexMap instance with the given value removed\r\n   */\n\n\n  IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\n    var newIndexes = util.map(this.indexes_, function (indexedChildren) {\n      if (indexedChildren === fallbackObject) {\n        // This is the fallback. Just return it, nothing to do in this case\n        return indexedChildren;\n      } else {\n        var existingSnap = existingChildren.get(namedNode.name);\n\n        if (existingSnap) {\n          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));\n        } else {\n          // No record of this child\n          return indexedChildren;\n        }\n      }\n    });\n    return new IndexMap(newIndexes, this.indexSet_);\n  };\n\n  return IndexMap;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction NAME_ONLY_COMPARATOR(left, right) {\n  return nameCompare(left.name, right.name);\n}\n\nfunction NAME_COMPARATOR(left, right) {\n  return nameCompare(left, right);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\n\nvar EMPTY_NODE;\n/**\r\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\r\n * (i.e. nodes with children).  It implements Node and stores the\r\n * list of children in the children property, sorted by child name.\r\n *\r\n * @constructor\r\n * @implements {Node}\r\n */\n\nvar ChildrenNode =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!SortedMap.<string, !Node>} children_ List of children\r\n   * of this node..\r\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\r\n   * @param {!IndexMap} indexMap_\r\n   */\n  function ChildrenNode(children_, priorityNode_, indexMap_) {\n    this.children_ = children_;\n    this.priorityNode_ = priorityNode_;\n    this.indexMap_ = indexMap_;\n    this.lazyHash_ = null;\n    /**\r\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\r\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\r\n     * class instead of an empty ChildrenNode.\r\n     */\n\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      util.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n    }\n  }\n\n  Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\n    get: function () {\n      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /** @inheritDoc */\n\n  ChildrenNode.prototype.isLeafNode = function () {\n    return false;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPriority = function () {\n    return this.priorityNode_ || EMPTY_NODE;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getImmediateChild = function (childName) {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      var child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getChild = function (path) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hasChild = function (childName) {\n    return this.children_.get(childName) !== null;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n    util.assert(newChildNode, 'We should always be passing snapshot nodes');\n\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      var namedNode = new NamedNode(childName, newChildNode);\n      var newChildren = void 0,\n          newIndexMap = void 0;\n\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.updateChild = function (path, newChildNode) {\n    var front = path.getFront();\n\n    if (front === null) {\n      return newChildNode;\n    } else {\n      util.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n      var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.isEmpty = function () {\n    return this.children_.isEmpty();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.numChildren = function () {\n    return this.children_.count();\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.val = function (exportFormat) {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    var obj = {};\n    var numKeys = 0,\n        maxKey = 0,\n        allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      obj[key] = childNode.val(exportFormat);\n      numKeys++;\n\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      var array = []; // eslint-disable-next-line guard-for-in\n\n      for (var key in obj) {\n        array[key] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n\n      return obj;\n    }\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.hash = function () {\n    if (this.lazyHash_ === null) {\n      var toHash_1 = '';\n\n      if (!this.getPriority().isEmpty()) {\n        toHash_1 += 'priority:' + priorityHashText(this.getPriority().val()) + ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        var childHash = childNode.hash();\n\n        if (childHash !== '') {\n          toHash_1 += ':' + key + ':' + childHash;\n        }\n      });\n      this.lazyHash_ = toHash_1 === '' ? '' : sha1(toHash_1);\n    }\n\n    return this.lazyHash_;\n  };\n  /** @inheritDoc */\n\n\n  ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      var predecessor = idx.getPredecessorKey(new NamedNode(childName, childNode));\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n\n\n  ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n\n\n  ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\n    var minKey = this.getFirstChildName(indexDefinition);\n\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Given an index, return the key name of the largest value we have, according to that index\r\n   * @param {!Index} indexDefinition\r\n   * @return {?string}\r\n   */\n\n\n  ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      var maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {?NamedNode}\r\n   */\n\n\n  ChildrenNode.prototype.getLastChild = function (indexDefinition) {\n    var maxKey = this.getLastChildName(indexDefinition);\n\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.forEachChild = function (index, action) {\n    var idx = this.resolveIndex_(index);\n\n    if (idx) {\n      return idx.inorderTraversal(function (wrappedNode) {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getIterator = function (indexDefinition) {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  };\n  /**\r\n   *\r\n   * @param {!NamedNode} startPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getIteratorFrom(startPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n  /**\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\n    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n  };\n  /**\r\n   * @param {!NamedNode} endPost\r\n   * @param {!Index} indexDefinition\r\n   * @return {!SortedMapIterator}\r\n   */\n\n\n  ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\n    var idx = this.resolveIndex_(indexDefinition);\n\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, function (key) {\n        return key;\n      });\n    } else {\n      var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);\n      var next = iterator.peek();\n\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n\n      return iterator;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.compareTo = function (other) {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE$2) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.withIndex = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {\n      return this;\n    } else {\n      var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.isIndexed = function (index) {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildrenNode.prototype.equals = function (other) {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      var otherChildrenNode = other;\n\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (this.children_.count() === otherChildrenNode.children_.count()) {\n        var thisIter = this.getIterator(PRIORITY_INDEX);\n        var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        var thisCurrent = thisIter.getNext();\n        var otherCurrent = otherIter.getNext();\n\n        while (thisCurrent && otherCurrent) {\n          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {\n            return false;\n          }\n\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  };\n  /**\r\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\r\n   * instead.\r\n   *\r\n   * @private\r\n   * @param {!Index} indexDefinition\r\n   * @return {?SortedMap.<NamedNode, Node>}\r\n   */\n\n\n  ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  };\n  /**\r\n   * @private\r\n   * @type {RegExp}\r\n   */\n\n\n  ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n  return ChildrenNode;\n}();\n/**\r\n * @constructor\r\n * @extends {ChildrenNode}\r\n * @private\r\n */\n\n\nvar MaxNode =\n/** @class */\nfunction (_super) {\n  tslib.__extends(MaxNode, _super);\n\n  function MaxNode() {\n    return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;\n  }\n\n  MaxNode.prototype.compareTo = function (other) {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  };\n\n  MaxNode.prototype.equals = function (other) {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  };\n\n  MaxNode.prototype.getPriority = function () {\n    return this;\n  };\n\n  MaxNode.prototype.getImmediateChild = function (childName) {\n    return ChildrenNode.EMPTY_NODE;\n  };\n\n  MaxNode.prototype.isEmpty = function () {\n    return false;\n  };\n\n  return MaxNode;\n}(ChildrenNode);\n/**\r\n * Marker that will sort higher than any other snapshot.\r\n * @type {!MAX_NODE}\r\n * @const\r\n */\n\n\nvar MAX_NODE$2 = new MaxNode();\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE$2)\n  }\n});\n/**\r\n * Reference Extensions\r\n */\n\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE$2);\nsetMaxNode$1(MAX_NODE$2);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar USE_HINZE = true;\n/**\r\n * Constructs a snapshot node representing the passed JSON and returns it.\r\n * @param {*} json JSON to create a node for.\r\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\r\n * passed JSON contains a .priority property.\r\n * @return {!Node}\r\n */\n\nfunction nodeFromJSON$1(json, priority) {\n  if (priority === void 0) {\n    priority = null;\n  }\n\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  util.assert(priority === null || typeof priority === 'string' || typeof priority === 'number' || typeof priority === 'object' && '.sv' in priority, 'Invalid priority type found: ' + typeof priority);\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  } // Valid leaf nodes include non-objects or server-value wrapper objects\n\n\n  if (typeof json !== 'object' || '.sv' in json) {\n    var jsonLeaf = json;\n    return new LeafNode(jsonLeaf, nodeFromJSON$1(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    var children_1 = [];\n    var childrenHavePriority_1 = false;\n    var hinzeJsonObj = json;\n    each(hinzeJsonObj, function (key, child) {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        var childNode = nodeFromJSON$1(child);\n\n        if (!childNode.isEmpty()) {\n          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n          children_1.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children_1.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function (namedNode) {\n      return namedNode.name;\n    }, NAME_COMPARATOR);\n\n    if (childrenHavePriority_1) {\n      var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), new IndexMap({\n        '.priority': sortedChildSet\n      }, {\n        '.priority': PRIORITY_INDEX\n      }));\n    } else {\n      return new ChildrenNode(childSet, nodeFromJSON$1(priority), IndexMap.Default);\n    }\n  } else {\n    var node_1 = ChildrenNode.EMPTY_NODE;\n    each(json, function (key, childData) {\n      if (util.contains(json, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          var childNode = nodeFromJSON$1(childData);\n\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node_1 = node_1.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n    return node_1.updatePriority(nodeFromJSON$1(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON$1);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @extends {Index}\r\n * @private\r\n */\n\nvar ValueIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ValueIndex, _super);\n\n  function ValueIndex() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.compare = function (a, b) {\n    var indexCmp = a.node.compareTo(b.node);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.isDefinedOn = function (node) {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n    return !oldNode.equals(newNode);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.minPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MIN;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueIndex.prototype.maxPost = function () {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return NamedNode.MAX;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {string} name\r\n   * @return {!NamedNode}\r\n   */\n\n\n  ValueIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    return new NamedNode(name, valueNode);\n  };\n  /**\r\n   * @return {!string} String representation for inclusion in a query spec\r\n   */\n\n\n  ValueIndex.prototype.toString = function () {\n    return '.value';\n  };\n\n  return ValueIndex;\n}(Index);\n\nvar VALUE_INDEX = new ValueIndex();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!Path} indexPath\r\n * @constructor\r\n * @extends {Index}\r\n */\n\nvar PathIndex =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PathIndex, _super);\n\n  function PathIndex(indexPath_) {\n    var _this = _super.call(this) || this;\n\n    _this.indexPath_ = indexPath_;\n    util.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n    return _this;\n  }\n  /**\r\n   * @param {!Node} snap\r\n   * @return {!Node}\r\n   * @protected\r\n   */\n\n\n  PathIndex.prototype.extractChild = function (snap) {\n    return snap.getChild(this.indexPath_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.isDefinedOn = function (node) {\n    return !node.getChild(this.indexPath_).isEmpty();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.compare = function (a, b) {\n    var aChild = this.extractChild(a.node);\n    var bChild = this.extractChild(b.node);\n    var indexCmp = aChild.compareTo(bChild);\n\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.makePost = function (indexValue, name) {\n    var valueNode = nodeFromJSON$1(indexValue);\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n    return new NamedNode(name, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.maxPost = function () {\n    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE$2);\n    return new NamedNode(MAX_NAME, node);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PathIndex.prototype.toString = function () {\n    return this.indexPath_.slice().join('/');\n  };\n\n  return PathIndex;\n}(Index);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\r\n * surfaces the public methods (val, forEach, etc.) we want to expose.\r\n */\n\n\nvar DataSnapshot =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Node} node_ A SnapshotNode to wrap.\r\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\r\n   * @param {!Index} index_ The iteration order for this snapshot\r\n   */\n  function DataSnapshot(node_, ref_, index_) {\n    this.node_ = node_;\n    this.ref_ = ref_;\n    this.index_ = index_;\n  }\n  /**\r\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\r\n   * empty.\r\n   *\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.val = function () {\n    util.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  };\n  /**\r\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\r\n   * the entire node contents.\r\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\r\n   */\n\n\n  DataSnapshot.prototype.exportVal = function () {\n    util.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n\n\n  DataSnapshot.prototype.toJSON = function () {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    util.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  };\n  /**\r\n   * Returns whether the snapshot contains a non-null value.\r\n   *\r\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\r\n   */\n\n\n  DataSnapshot.prototype.exists = function () {\n    util.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  };\n  /**\r\n   * Returns a DataSnapshot of the specified child node's contents.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {!DataSnapshot} DataSnapshot for child node.\r\n   */\n\n\n  DataSnapshot.prototype.child = function (childPathString) {\n    util.validateArgCount('DataSnapshot.child', 0, 1, arguments.length); // Ensure the childPath is a string (can be a number)\n\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    var childRef = this.ref_.child(childPath);\n    return new DataSnapshot(this.node_.getChild(childPath), childRef, PRIORITY_INDEX);\n  };\n  /**\r\n   * Returns whether the snapshot contains a child at the specified path.\r\n   *\r\n   * @param {!string} childPathString Path to a child.\r\n   * @return {boolean} Whether the child exists.\r\n   */\n\n\n  DataSnapshot.prototype.hasChild = function (childPathString) {\n    util.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n    var childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  };\n  /**\r\n   * Returns the priority of the object, or null if no priority was set.\r\n   *\r\n   * @return {string|number|null} The priority.\r\n   */\n\n\n  DataSnapshot.prototype.getPriority = function () {\n    util.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length); // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n\n    return this.node_.getPriority().val();\n  };\n  /**\r\n   * Iterates through child nodes and calls the specified action for each one.\r\n   *\r\n   * @param {function(!DataSnapshot)} action Callback function to be called\r\n   * for each child.\r\n   * @return {boolean} True if forEach was canceled by action returning true for\r\n   * one of the child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.forEach = function (action) {\n    var _this = this;\n\n    util.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    util.validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    var childrenNode = this.node_; // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n\n    return !!childrenNode.forEachChild(this.index_, function (key, node) {\n      return action(new DataSnapshot(node, _this.ref_.child(key), PRIORITY_INDEX));\n    });\n  };\n  /**\r\n   * Returns whether this DataSnapshot has children.\r\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\r\n   */\n\n\n  DataSnapshot.prototype.hasChildren = function () {\n    util.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"key\", {\n    get: function () {\n      return this.ref_.getKey();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns the number of children for this DataSnapshot.\r\n   * @return {number} The number of children that this DataSnapshot contains.\r\n   */\n\n  DataSnapshot.prototype.numChildren = function () {\n    util.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n    return this.node_.numChildren();\n  };\n  /**\r\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\r\n   */\n\n\n  DataSnapshot.prototype.getRef = function () {\n    util.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n    return this.ref_;\n  };\n\n  Object.defineProperty(DataSnapshot.prototype, \"ref\", {\n    get: function () {\n      return this.getRef();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return DataSnapshot;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Encapsulates the data needed to raise an event\r\n * @implements {Event}\r\n */\n\n\nvar DataEvent =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\r\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\r\n   * @param {!DataSnapshot} snapshot The data backing the event\r\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\r\n   */\n  function DataEvent(eventType, eventRegistration, snapshot, prevName) {\n    this.eventType = eventType;\n    this.eventRegistration = eventRegistration;\n    this.snapshot = snapshot;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getPath = function () {\n    var ref = this.snapshot.getRef();\n\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getEventType = function () {\n    return this.eventType;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  DataEvent.prototype.toString = function () {\n    return this.getPath().toString() + ':' + this.eventType + ':' + util.stringify(this.snapshot.exportVal());\n  };\n\n  return DataEvent;\n}();\n\nvar CancelEvent =\n/** @class */\nfunction () {\n  /**\r\n   * @param {EventRegistration} eventRegistration\r\n   * @param {Error} error\r\n   * @param {!Path} path\r\n   */\n  function CancelEvent(eventRegistration, error, path) {\n    this.eventRegistration = eventRegistration;\n    this.error = error;\n    this.path = path;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getPath = function () {\n    return this.path;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getEventType = function () {\n    return 'cancel';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.getEventRunner = function () {\n    return this.eventRegistration.getEventRunner(this);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  CancelEvent.prototype.toString = function () {\n    return this.path.toString() + ':cancel';\n  };\n\n  return CancelEvent;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents registration for 'value' events.\r\n */\n\n\nvar ValueEventRegistration =\n/** @class */\nfunction () {\n  /**\r\n   * @param {?function(!DataSnapshot)} callback_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {?Object} context_\r\n   */\n  function ValueEventRegistration(callback_, cancelCallback_, context_) {\n    this.callback_ = callback_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.respondsTo = function (eventType) {\n    return eventType === 'value';\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.createEvent = function (change, query) {\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent('value', this, new DataSnapshot(change.snapshotNode, query.getRef(), index));\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n\n    if (eventData.getEventType() === 'cancel') {\n      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_1 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_1.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_1 = this.callback_;\n      return function () {\n        cb_1.call(ctx, eventData.snapshot);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.matches = function (other) {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callback_ === this.callback_ && other.context_ === this.context_;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ValueEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callback_ !== null;\n  };\n\n  return ValueEventRegistration;\n}();\n/**\r\n * Represents the registration of 1 or more child_xxx events.\r\n *\r\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\r\n * register a group of callbacks together in the future.\r\n *\r\n * @constructor\r\n * @implements {EventRegistration}\r\n */\n\n\nvar ChildEventRegistration =\n/** @class */\nfunction () {\n  /**\r\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\r\n   * @param {?function(Error)} cancelCallback_\r\n   * @param {Object=} context_\r\n   */\n  function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\n    this.callbacks_ = callbacks_;\n    this.cancelCallback_ = cancelCallback_;\n    this.context_ = context_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.respondsTo = function (eventType) {\n    var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck = eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return util.contains(this.callbacks_, eventToCheck);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.createEvent = function (change, query) {\n    util.assert(change.childName != null, 'Child events should have a childName.');\n    var ref = query.getRef().child(\n    /** @type {!string} */\n    change.childName);\n    var index = query.getQueryParams().getIndex();\n    return new DataEvent(change.type, this, new DataSnapshot(change.snapshotNode, ref, index), change.prevName);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.getEventRunner = function (eventData) {\n    var ctx = this.context_;\n\n    if (eventData.getEventType() === 'cancel') {\n      util.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n      var cancelCB_2 = this.cancelCallback_;\n      return function () {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB_2.call(ctx, eventData.error);\n      };\n    } else {\n      var cb_2 = this.callbacks_[eventData.eventType];\n      return function () {\n        cb_2.call(ctx, eventData.snapshot, eventData.prevName);\n      };\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.matches = function (other) {\n    var _this = this;\n\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        var otherKeys = Object.keys(other.callbacks_);\n        var thisKeys = Object.keys(this.callbacks_);\n        var otherCount = otherKeys.length;\n        var thisCount = thisKeys.length;\n\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n          if (otherCount === 1) {\n            var otherKey = otherKeys[0];\n            var thisKey = thisKeys[0];\n            return thisKey === otherKey && (!other.callbacks_[otherKey] || !this.callbacks_[thisKey] || other.callbacks_[otherKey] === this.callbacks_[thisKey]);\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(function (eventType) {\n              return other.callbacks_[eventType] === _this.callbacks_[eventType];\n            });\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  ChildEventRegistration.prototype.hasAnyCallback = function () {\n    return this.callbacks_ !== null;\n  };\n\n  return ChildEventRegistration;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __referenceConstructor;\n/**\r\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\r\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\r\n *\r\n * Since every Firebase reference is a query, Firebase inherits from this object.\r\n */\n\n\nvar Query =\n/** @class */\nfunction () {\n  function Query(repo, path, queryParams_, orderByCalled_) {\n    this.repo = repo;\n    this.path = path;\n    this.queryParams_ = queryParams_;\n    this.orderByCalled_ = orderByCalled_;\n  }\n\n  Object.defineProperty(Query, \"__referenceConstructor\", {\n    get: function () {\n      util.assert(__referenceConstructor, 'Reference.ts has not been loaded');\n      return __referenceConstructor;\n    },\n    set: function (val) {\n      __referenceConstructor = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Validates start/end values for queries.\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n\n  Query.validateQueryEndpoints_ = function (params) {\n    var startNode = null;\n    var endNode = null;\n\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' + 'startAt(), endAt(), or equalTo().';\n      var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' + 'or equalTo() must be a string.';\n\n      if (params.hasStart()) {\n        var startName = params.getIndexStartName();\n\n        if (startName !== MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n\n      if (params.hasEnd()) {\n        var endName = params.getIndexEndName();\n\n        if (endName !== MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {\n        throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' + 'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\n      }\n    } else {\n      util.assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, 'unknown index type.');\n\n      if (startNode != null && typeof startNode === 'object' || endNode != null && typeof endNode === 'object') {\n        throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' + 'an object.');\n      }\n    }\n  };\n  /**\r\n   * Validates that limit* has been called with the correct combination of parameters\r\n   * @param {!QueryParams} params\r\n   * @private\r\n   */\n\n\n  Query.validateLimit_ = function (params) {\n    if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {\n      throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\n    }\n  };\n  /**\r\n   * Validates that no other order by call has been made\r\n   * @param {!string} fnName\r\n   * @private\r\n   */\n\n\n  Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   */\n\n\n  Query.prototype.getQueryParams = function () {\n    return this.queryParams_;\n  };\n  /**\r\n   * @return {!Reference}\r\n   */\n\n\n  Query.prototype.getRef = function () {\n    util.validateArgCount('Query.ref', 0, 0, arguments.length); // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n\n    return new Query.__referenceConstructor(this.repo, this.path);\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @param {!function(DataSnapshot, string=)} callback\r\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\r\n   * @param {Object=} context\r\n   * @return {!function(DataSnapshot, string=)}\r\n   */\n\n\n  Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\n    util.validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    util.validateCallback('Query.on', 2, callback, false);\n    var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      var callbacks = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n\n    return callback;\n  };\n  /**\r\n   * @param {!function(!DataSnapshot)} callback\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n\n\n  Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\n    var container = new ValueEventRegistration(callback, cancelCallback || null, context || null);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\r\n   * @param {?function(Error)} cancelCallback\r\n   * @param {?Object} context\r\n   * @protected\r\n   */\n\n\n  Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\n    var container = new ChildEventRegistration(callbacks, cancelCallback, context);\n    this.repo.addEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * @param {string=} eventType\r\n   * @param {(function(!DataSnapshot, ?string=))=} callback\r\n   * @param {Object=} context\r\n   */\n\n\n  Query.prototype.off = function (eventType, callback, context) {\n    util.validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    util.validateCallback('Query.off', 2, callback, true);\n    util.validateContextObject('Query.off', 3, context, true);\n    var container = null;\n    var callbacks = null;\n\n    if (eventType === 'value') {\n      var valueCallback = callback || null;\n      container = new ValueEventRegistration(valueCallback, null, context || null);\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n\n    this.repo.removeEventCallbackForQuery(this, container);\n  };\n  /**\r\n   * Attaches a listener, waits for the first event, and then removes the listener\r\n   * @param {!string} eventType\r\n   * @param {!function(!DataSnapshot, string=)} userCallback\r\n   * @param failureCallbackOrContext\r\n   * @param context\r\n   * @return {!firebase.Promise}\r\n   */\n\n\n  Query.prototype.once = function (eventType, userCallback, failureCallbackOrContext, context) {\n    var _this = this;\n\n    util.validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    util.validateCallback('Query.once', 2, userCallback, true);\n    var ret = Query.getCancelAndContextArgs_('Query.once', failureCallbackOrContext, context); // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n\n    var firstCall = true;\n    var deferred = new util.Deferred(); // A dummy error handler in case a user wasn't expecting promises\n\n    deferred.promise.catch(function () {});\n\n    var onceCallback = function (snapshot) {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n\n        _this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(eventType, onceCallback,\n    /*cancel=*/\n    function (err) {\n      _this.off(eventType, onceCallback);\n\n      if (ret.cancel) {\n        ret.cancel.bind(ret.context)(err);\n      }\n\n      deferred.reject(err);\n    });\n    return deferred.promise;\n  };\n  /**\r\n   * Set a limit and anchor it to the start of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.limitToFirst = function (limit) {\n    util.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToFirst: First argument must be a positive integer.');\n    }\n\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n\n    return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Set a limit and anchor it to the end of the window.\r\n   * @param {!number} limit\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.limitToLast = function (limit) {\n    util.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n\n    if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n      throw new Error('Query.limitToLast: First argument must be a positive integer.');\n    }\n\n    if (this.queryParams_.hasLimit()) {\n      throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' + 'limitToFirst, or limitToLast).');\n    }\n\n    return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\n  };\n  /**\r\n   * Given a child path, return a new query ordered by the specified grandchild path.\r\n   * @param {!string} path\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByChild = function (path) {\n    util.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n\n    if (path === '$key') {\n      throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\n    } else if (path === '$priority') {\n      throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\n    } else if (path === '$value') {\n      throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\n    }\n\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    var parsedPath = new Path(path);\n\n    if (parsedPath.isEmpty()) {\n      throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\n    }\n\n    var index = new PathIndex(parsedPath);\n    var newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the KeyIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByKey = function () {\n    util.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    var newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the PriorityIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByPriority = function () {\n    util.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    var newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * Return a new query ordered by the ValueIndex\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.orderByValue = function () {\n    util.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    var newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams,\n    /*orderByCalled=*/\n    true);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.startAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    util.validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n    var newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' + 'or equalTo).');\n    } // Calling with no params tells us to start at the beginning.\n\n\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * @param {number|string|boolean|null} value\r\n   * @param {?string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.endAt = function (value, name) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    util.validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n    var newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  };\n  /**\r\n   * Load the selection of children with exactly the specified value, and, optionally,\r\n   * the specified name.\r\n   * @param {number|string|boolean|null} value\r\n   * @param {string=} name\r\n   * @return {!Query}\r\n   */\n\n\n  Query.prototype.equalTo = function (value, name) {\n    util.validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n\n    if (this.queryParams_.hasStart()) {\n      throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' + 'equalTo).');\n    }\n\n    if (this.queryParams_.hasEnd()) {\n      throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' + 'equalTo).');\n    }\n\n    return this.startAt(value, name).endAt(value, name);\n  };\n  /**\r\n   * @return {!string} URL for this location.\r\n   */\n\n\n  Query.prototype.toString = function () {\n    util.validateArgCount('Query.toString', 0, 0, arguments.length);\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }; // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n\n\n  Query.prototype.toJSON = function () {\n    // An optional spacer argument is unnecessary for a string.\n    util.validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  };\n  /**\r\n   * An object representation of the query parameters used by this Query.\r\n   * @return {!Object}\r\n   */\n\n\n  Query.prototype.queryObject = function () {\n    return this.queryParams_.getQueryObject();\n  };\n  /**\r\n   * @return {!string}\r\n   */\n\n\n  Query.prototype.queryIdentifier = function () {\n    var obj = this.queryObject();\n    var id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  };\n  /**\r\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\r\n   * @param {Query} other\r\n   * @return {boolean}\r\n   */\n\n\n  Query.prototype.isEqual = function (other) {\n    util.validateArgCount('Query.isEqual', 1, 1, arguments.length);\n\n    if (!(other instanceof Query)) {\n      var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    var sameRepo = this.repo === other.repo;\n    var samePath = this.path.equals(other.path);\n    var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\n    return sameRepo && samePath && sameQueryIdentifier;\n  };\n  /**\r\n   * Helper used by .on and .once to extract the context and or cancel arguments.\r\n   * @param {!string} fnName The function name (on or once)\r\n   * @param {(function(Error)|Object)=} cancelOrContext\r\n   * @param {Object=} context\r\n   * @return {{cancel: ?function(Error), context: ?Object}}\r\n   * @private\r\n   */\n\n\n  Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\n    var ret = {\n      cancel: null,\n      context: null\n    };\n\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext;\n      util.validateCallback(fnName, 3, ret.cancel, true);\n      ret.context = context;\n      util.validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext;\n      } else {\n        throw new Error(util.errorPrefix(fnName, 3, true) + ' must either be a cancel callback or a context object.');\n      }\n    }\n\n    return ret;\n  };\n\n  Object.defineProperty(Query.prototype, \"ref\", {\n    get: function () {\n      return this.getRef();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Query;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ExistingValueProvider =\n/** @class */\nfunction () {\n  function ExistingValueProvider(node_) {\n    this.node_ = node_;\n  }\n\n  ExistingValueProvider.prototype.getImmediateChild = function (childName) {\n    var child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  };\n\n  ExistingValueProvider.prototype.node = function () {\n    return this.node_;\n  };\n\n  return ExistingValueProvider;\n}();\n\nvar DeferredValueProvider =\n/** @class */\nfunction () {\n  function DeferredValueProvider(syncTree, path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  DeferredValueProvider.prototype.getImmediateChild = function (childName) {\n    var childPath = this.path_.child(childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  };\n\n  DeferredValueProvider.prototype.node = function () {\n    return this.syncTree_.calcCompleteEventCache(this.path_);\n  };\n\n  return DeferredValueProvider;\n}();\n/**\r\n * Generate placeholders for deferred values.\r\n * @param {?Object} values\r\n * @return {!Object}\r\n */\n\n\nvar generateWithValues = function (values) {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n/**\r\n * Value to use when firing local events. When writing server values, fire\r\n * local events with an approximate value, otherwise return value as-is.\r\n * @param {(Object|string|number|boolean)} value\r\n * @param {!Object} serverValues\r\n * @return {!(string|number|boolean)}\r\n */\n\n\nvar resolveDeferredLeafValue = function (value, existingVal, serverValues) {\n  if (!value || typeof value !== 'object') {\n    return value;\n  }\n\n  util.assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal);\n  } else {\n    util.assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nvar resolveScalarDeferredValue = function (op, existing, serverValues) {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'];\n\n    default:\n      util.assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nvar resolveComplexDeferredValue = function (op, existing, unused) {\n  if (!op.hasOwnProperty('increment')) {\n    util.assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n\n  var delta = op['increment'];\n\n  if (typeof delta !== 'number') {\n    util.assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  var existingNode = existing.node();\n  util.assert(existingNode !== null && typeof existingNode !== 'undefined', 'Expected ChildrenNode.EMPTY_NODE for nulls'); // Incrementing a non-number sets the value to the incremented amount\n\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  var leaf = existingNode;\n  var existingVal = leaf.getValue();\n\n  if (typeof existingVal !== 'number') {\n    return delta;\n  } // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n\n\n  return existingVal + delta;\n};\n/**\r\n * Recursively replace all deferred values and priorities in the tree with the\r\n * specified generated replacement values.\r\n * @param {!Path} path path to which write is relative\r\n * @param {!Node} node new data written at path\r\n * @param {!SyncTree} syncTree current data\r\n * @param {!Object} serverValues\r\n * @return {!SparseSnapshotTree}\r\n */\n\n\nvar resolveDeferredValueTree = function (path, node, syncTree, serverValues) {\n  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);\n};\n/**\r\n * Recursively replace all deferred values and priorities in the node with the\r\n * specified generated replacement values.  If there are no server values in the node,\r\n * it'll be returned as-is.\r\n * @param {!Node} node\r\n * @param {!Object} serverValues\r\n * @return {!Node}\r\n */\n\n\nvar resolveDeferredValueSnapshot = function (node, existing, serverValues) {\n  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);\n};\n\nfunction resolveDeferredValue(node, existingVal, serverValues) {\n  var rawPri = node.getPriority().val();\n  var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild('.priority'), serverValues);\n  var newNode;\n\n  if (node.isLeafNode()) {\n    var leafNode = node;\n    var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);\n\n    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {\n      return new LeafNode(value, nodeFromJSON$1(priority));\n    } else {\n      return node;\n    }\n  } else {\n    var childrenNode = node;\n    newNode = childrenNode;\n\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n\n    childrenNode.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n      var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);\n\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper class to store a sparse set of snapshots.\r\n */\n\n\nvar SparseSnapshotTree =\n/** @class */\nfunction () {\n  function SparseSnapshotTree() {\n    this.value = null;\n    this.children = new Map();\n  }\n  /**\r\n   * Gets the node stored at the given path if one exists.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @return The retrieved node, or null.\r\n   */\n\n\n  SparseSnapshotTree.prototype.find = function (path) {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      var childKey = path.getFront();\n      path = path.popFront();\n\n      if (this.children.has(childKey)) {\n        var childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Stores the given node at the specified path. If there is already a node\r\n   * at a shallower path, it merges the new data into that snapshot node.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @param data The new data, or null.\r\n   */\n\n\n  SparseSnapshotTree.prototype.remember = function (path, data) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      var childKey = path.getFront();\n\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      var child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  };\n  /**\r\n   * Purge the data at path from the cache.\r\n   *\r\n   * @param path Path to look up snapshot for.\r\n   * @return True if this node should now be removed.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forget = function (path) {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          var value = this.value;\n          this.value = null;\n          var self_1 = this;\n          value.forEachChild(PRIORITY_INDEX, function (key, tree) {\n            self_1.remember(new Path(key), tree);\n          });\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        var childKey = path.getFront();\n        path = path.popFront();\n\n        if (this.children.has(childKey)) {\n          var safeToRemove = this.children.get(childKey).forget(path);\n\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  };\n  /**\r\n   * Recursively iterates through all of the stored tree and calls the\r\n   * callback on each one.\r\n   *\r\n   * @param prefixPath Path to look up node for.\r\n   * @param func The function to invoke for each tree.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild(function (key, tree) {\n        var path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  };\n  /**\r\n   * Iterates through each immediate child and triggers the callback.\r\n   *\r\n   * @param func The function to invoke for each child.\r\n   */\n\n\n  SparseSnapshotTree.prototype.forEachChild = function (func) {\n    this.children.forEach(function (tree, key) {\n      func(key, tree);\n    });\n  };\n\n  return SparseSnapshotTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @enum\r\n */\n\n\nvar OperationType;\n\n(function (OperationType) {\n  OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n  OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n  OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n  OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType || (OperationType = {}));\n/**\r\n * @param {boolean} fromUser\r\n * @param {boolean} fromServer\r\n * @param {?string} queryId\r\n * @param {boolean} tagged\r\n * @constructor\r\n */\n\n\nvar OperationSource =\n/** @class */\nfunction () {\n  function OperationSource(fromUser, fromServer, queryId, tagged) {\n    this.fromUser = fromUser;\n    this.fromServer = fromServer;\n    this.queryId = queryId;\n    this.tagged = tagged;\n    util.assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n\n\n  OperationSource.User = new OperationSource(\n  /*fromUser=*/\n  true, false, null,\n  /*tagged=*/\n  false);\n  /**\r\n   * @const\r\n   * @type {!OperationSource}\r\n   */\n\n  OperationSource.Server = new OperationSource(false,\n  /*fromServer=*/\n  true, null,\n  /*tagged=*/\n  false);\n  /**\r\n   * @param {string} queryId\r\n   * @return {!OperationSource}\r\n   */\n\n  OperationSource.forServerTaggedQuery = function (queryId) {\n    return new OperationSource(false,\n    /*fromServer=*/\n    true, queryId,\n    /*tagged=*/\n    true);\n  };\n\n  return OperationSource;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar AckUserWrite =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\r\n   * @param {!boolean} revert\r\n   */\n  function AckUserWrite(\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  affectedTree,\n  /** @inheritDoc */\n  revert) {\n    this.path = path;\n    this.affectedTree = affectedTree;\n    this.revert = revert;\n    /** @inheritDoc */\n\n    this.type = OperationType.ACK_USER_WRITE;\n    /** @inheritDoc */\n\n    this.source = OperationSource.User;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  AckUserWrite.prototype.operationForChild = function (childName) {\n    if (!this.path.isEmpty()) {\n      util.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\n      return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\n    } else if (this.affectedTree.value != null) {\n      util.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.'); // All child locations are affected as well; just return same operation.\n\n      return this;\n    } else {\n      var childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  };\n\n  return AckUserWrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar emptyChildrenSingleton;\n/**\r\n * Singleton empty children collection.\r\n *\r\n * @const\r\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\r\n */\n\nvar EmptyChildren = function () {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap(stringCompare);\n  }\n\n  return emptyChildrenSingleton;\n};\n/**\r\n * A tree with immutable elements.\r\n */\n\n\nvar ImmutableTree =\n/** @class */\nfunction () {\n  /**\r\n   * @template T\r\n   * @param {?T} value\r\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\r\n   */\n  function ImmutableTree(value, children) {\n    if (children === void 0) {\n      children = EmptyChildren();\n    }\n\n    this.value = value;\n    this.children = children;\n  }\n  /**\r\n   * @template T\r\n   * @param {!Object.<string, !T>} obj\r\n   * @return {!ImmutableTree.<!T>}\r\n   */\n\n\n  ImmutableTree.fromObject = function (obj) {\n    var tree = ImmutableTree.Empty;\n    each(obj, function (childPath, childSnap) {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  };\n  /**\r\n   * True if the value is empty and there are no children\r\n   * @return {boolean}\r\n   */\n\n\n  ImmutableTree.prototype.isEmpty = function () {\n    return this.value === null && this.children.isEmpty();\n  };\n  /**\r\n   * Given a path and predicate, return the first node and the path to that node\r\n   * where the predicate returns true.\r\n   *\r\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\r\n   * on the way back out, it may be better to pass down a pathSoFar obj.\r\n   *\r\n   * @param {!Path} relativePath The remainder of the path\r\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\r\n   *   node\r\n   * @return {?{path:!Path, value:!T}}\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n    if (this.value != null && predicate(this.value)) {\n      return {\n        path: Path.Empty,\n        value: this.value\n      };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        var front = relativePath.getFront();\n        var child = this.children.get(front);\n\n        if (child !== null) {\n          var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\n\n          if (childExistingPathAndValue != null) {\n            var fullPath = new Path(front).child(childExistingPathAndValue.path);\n            return {\n              path: fullPath,\n              value: childExistingPathAndValue.value\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   * Find, if it exists, the shortest subpath of the given path that points a defined\r\n   * value in the tree\r\n   * @param {!Path} relativePath\r\n   * @return {?{path: !Path, value: !T}}\r\n   */\n\n\n  ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n    return this.findRootMostMatchingPathAndValue(relativePath, function () {\n      return true;\n    });\n  };\n  /**\r\n   * @param {!Path} relativePath\r\n   * @return {!ImmutableTree.<T>} The subtree at the given path\r\n   */\n\n\n  ImmutableTree.prototype.subtree = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      var front = relativePath.getFront();\n      var childTree = this.children.get(front);\n\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Sets a value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to set value at.\r\n   * @param {?T} toSet Value to set.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.set = function (relativePath, toSet) {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.set(relativePath.popFront(), toSet);\n      var newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Removes the value at the specified path.\r\n   *\r\n   * @param {!Path} relativePath Path to value to remove.\r\n   * @return {!ImmutableTree.<T>} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.remove = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n\n      if (child) {\n        var newChild = child.remove(relativePath.popFront());\n        var newChildren = void 0;\n\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  };\n  /**\r\n   * Gets a value from the tree.\r\n   *\r\n   * @param {!Path} relativePath Path to get value for.\r\n   * @return {?T} Value at path, or null.\r\n   */\n\n\n  ImmutableTree.prototype.get = function (relativePath) {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front);\n\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Replace the subtree at the specified path with the given new tree.\r\n   *\r\n   * @param {!Path} relativePath Path to replace subtree for.\r\n   * @param {!ImmutableTree} newTree New tree.\r\n   * @return {!ImmutableTree} Resulting tree.\r\n   */\n\n\n  ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      var front = relativePath.getFront();\n      var child = this.children.get(front) || ImmutableTree.Empty;\n      var newChild = child.setTree(relativePath.popFront(), newTree);\n      var newChildren = void 0;\n\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n\n      return new ImmutableTree(this.value, newChildren);\n    }\n  };\n  /**\r\n   * Performs a depth first fold on this tree. Transforms a tree into a single\r\n   * value, given a function that operates on the path to a node, an optional\r\n   * current value, and a map of child names to folded subtrees\r\n   * @template V\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   */\n\n\n  ImmutableTree.prototype.fold = function (fn) {\n    return this.fold_(Path.Empty, fn);\n  };\n  /**\r\n   * Recursive helper for public-facing fold() method\r\n   * @template V\r\n   * @param {!Path} pathSoFar\r\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\r\n   * @return {V}\r\n   * @private\r\n   */\n\n\n  ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n    var accum = {};\n    this.children.inorderTraversal(function (childKey, childTree) {\n      accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n    });\n    return fn(pathSoFar, this.value, accum);\n  };\n  /**\r\n   * Find the first matching value on the given path. Return the result of applying f to it.\r\n   * @template V\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T):?V} f\r\n   * @return {?V}\r\n   */\n\n\n  ImmutableTree.prototype.findOnPath = function (path, f) {\n    return this.findOnPath_(path, Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n    var result = this.value ? f(pathSoFar, this.value) : false;\n\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        var front = pathToFollow.getFront();\n        var nextChild = this.children.get(front);\n\n        if (nextChild) {\n          return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\n        } else {\n          return null;\n        }\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!function(!Path, !T)} f\r\n   * @returns {!ImmutableTree.<T>}\r\n   */\n\n\n  ImmutableTree.prototype.foreachOnPath = function (path, f) {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n\n      var front = pathToFollow.getFront();\n      var nextChild = this.children.get(front);\n\n      if (nextChild) {\n        return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  };\n  /**\r\n   * Calls the given function for each node in the tree that has a value.\r\n   *\r\n   * @param {function(!Path, !T)} f A function to be called with\r\n   *   the path from the root of the tree to a node, and the value at that node.\r\n   *   Called in depth-first order.\r\n   */\n\n\n  ImmutableTree.prototype.foreach = function (f) {\n    this.foreach_(Path.Empty, f);\n  };\n\n  ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  };\n  /**\r\n   *\r\n   * @param {function(string, !T)} f\r\n   */\n\n\n  ImmutableTree.prototype.foreachChild = function (f) {\n    this.children.inorderTraversal(function (childName, childTree) {\n      if (childTree.value) {\n        f(childName, childTree.value);\n      }\n    });\n  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  ImmutableTree.Empty = new ImmutableTree(null);\n  return ImmutableTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar ListenComplete =\n/** @class */\nfunction () {\n  function ListenComplete(source, path) {\n    this.source = source;\n    this.path = path;\n    /** @inheritDoc */\n\n    this.type = OperationType.LISTEN_COMPLETE;\n  }\n\n  ListenComplete.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  };\n\n  return ListenComplete;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!Node} snap\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar Overwrite =\n/** @class */\nfunction () {\n  function Overwrite(source, path, snap) {\n    this.source = source;\n    this.path = path;\n    this.snap = snap;\n    /** @inheritDoc */\n\n    this.type = OperationType.OVERWRITE;\n  }\n\n  Overwrite.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      return new Overwrite(this.source, Path.Empty, this.snap.getImmediateChild(childName));\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  };\n\n  return Overwrite;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param {!OperationSource} source\r\n * @param {!Path} path\r\n * @param {!ImmutableTree.<!Node>} children\r\n * @constructor\r\n * @implements {Operation}\r\n */\n\n\nvar Merge =\n/** @class */\nfunction () {\n  function Merge(\n  /** @inheritDoc */\n  source,\n  /** @inheritDoc */\n  path,\n  /** @inheritDoc */\n  children) {\n    this.source = source;\n    this.path = path;\n    this.children = children;\n    /** @inheritDoc */\n\n    this.type = OperationType.MERGE;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.operationForChild = function (childName) {\n    if (this.path.isEmpty()) {\n      var childTree = this.children.subtree(new Path(childName));\n\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      util.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  Merge.prototype.toString = function () {\n    return 'Operation(' + this.path + ': ' + this.source.toString() + ' merge: ' + this.children.toString() + ')';\n  };\n\n  return Merge;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\r\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\r\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\r\n * whether a node potentially had children removed due to a filter.\r\n */\n\n\nvar CacheNode =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Node} node_\r\n   * @param {boolean} fullyInitialized_\r\n   * @param {boolean} filtered_\r\n   */\n  function CacheNode(node_, fullyInitialized_, filtered_) {\n    this.node_ = node_;\n    this.fullyInitialized_ = fullyInitialized_;\n    this.filtered_ = filtered_;\n  }\n  /**\r\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isFullyInitialized = function () {\n    return this.fullyInitialized_;\n  };\n  /**\r\n   * Returns whether this node is potentially missing children due to a filter applied to the node\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isFiltered = function () {\n    return this.filtered_;\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isCompleteForPath = function (path) {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    var childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!string} key\r\n   * @return {boolean}\r\n   */\n\n\n  CacheNode.prototype.isCompleteForChild = function (key) {\n    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);\n  };\n  /**\r\n   * @return {!Node}\r\n   */\n\n\n  CacheNode.prototype.getNode = function () {\n    return this.node_;\n  };\n\n  return CacheNode;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Stores the data we have cached for a view.\r\n *\r\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\r\n *\r\n * @constructor\r\n */\n\n\nvar ViewCache =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!CacheNode} eventCache_\r\n   * @param {!CacheNode} serverCache_\r\n   */\n  function ViewCache(eventCache_, serverCache_) {\n    this.eventCache_ = eventCache_;\n    this.serverCache_ = serverCache_;\n  }\n  /**\r\n   * @param {!Node} eventSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n\n\n  ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\n    return new ViewCache(new CacheNode(eventSnap, complete, filtered), this.serverCache_);\n  };\n  /**\r\n   * @param {!Node} serverSnap\r\n   * @param {boolean} complete\r\n   * @param {boolean} filtered\r\n   * @return {!ViewCache}\r\n   */\n\n\n  ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\n    return new ViewCache(this.eventCache_, new CacheNode(serverSnap, complete, filtered));\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n\n\n  ViewCache.prototype.getEventCache = function () {\n    return this.eventCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  ViewCache.prototype.getCompleteEventSnap = function () {\n    return this.eventCache_.isFullyInitialized() ? this.eventCache_.getNode() : null;\n  };\n  /**\r\n   * @return {!CacheNode}\r\n   */\n\n\n  ViewCache.prototype.getServerCache = function () {\n    return this.serverCache_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  ViewCache.prototype.getCompleteServerSnap = function () {\n    return this.serverCache_.isFullyInitialized() ? this.serverCache_.getNode() : null;\n  };\n  /**\r\n   * @const\r\n   * @type {ViewCache}\r\n   */\n\n\n  ViewCache.Empty = new ViewCache(new CacheNode(ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/\n  false,\n  /*filtered=*/\n  false), new CacheNode(ChildrenNode.EMPTY_NODE,\n  /*fullyInitialized=*/\n  false,\n  /*filtered=*/\n  false));\n  return ViewCache;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @struct\r\n * @param {!string} type The event type\r\n * @param {!Node} snapshotNode The data\r\n * @param {string=} childName The name for this child, if it's a child event\r\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\r\n * @param {string=} prevName The name for the previous child, if applicable\r\n */\n\n\nvar Change =\n/** @class */\nfunction () {\n  function Change(type, snapshotNode, childName, oldSnap, prevName) {\n    this.type = type;\n    this.snapshotNode = snapshotNode;\n    this.childName = childName;\n    this.oldSnap = oldSnap;\n    this.prevName = prevName;\n  }\n  /**\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.valueChange = function (snapshot) {\n    return new Change(Change.VALUE, snapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childAddedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childRemovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} newSnapshot\r\n   * @param {!Node} oldSnapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  };\n  /**\r\n   * @param {string} childKey\r\n   * @param {!Node} snapshot\r\n   * @return {!Change}\r\n   */\n\n\n  Change.childMovedChange = function (childKey, snapshot) {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }; //event types\n\n  /** Event type for a child added */\n\n\n  Change.CHILD_ADDED = 'child_added';\n  /** Event type for a child removed */\n\n  Change.CHILD_REMOVED = 'child_removed';\n  /** Event type for a child changed */\n\n  Change.CHILD_CHANGED = 'child_changed';\n  /** Event type for a child moved */\n\n  Change.CHILD_MOVED = 'child_moved';\n  /** Event type for a value change */\n\n  Change.VALUE = 'value';\n  return Change;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n * @param {!Index} index\r\n */\n\n\nvar IndexedFilter =\n/** @class */\nfunction () {\n  function IndexedFilter(index_) {\n    this.index_ = index_;\n  }\n\n  IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    util.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n    var oldChild = snap.getImmediateChild(key); // Check if anything actually changed.\n\n    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, oldChild));\n        } else {\n          util.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(Change.childAddedChange(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(Change.childChangedChange(key, newChild, oldChild));\n      }\n    }\n\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(Change.childRemovedChange(key, childNode));\n          }\n        });\n      }\n\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n          if (oldSnap.hasChild(key)) {\n            var oldChild = oldSnap.getImmediateChild(key);\n\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(Change.childChangedChange(key, childNode, oldChild));\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(Change.childAddedChange(key, childNode));\n          }\n        });\n      }\n    }\n\n    return newSnap.withIndex(this.index_);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.filtersNodes = function () {\n    return false;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.getIndexedFilter = function () {\n    return this;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  IndexedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n\n  return IndexedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ChildChangeAccumulator =\n/** @class */\nfunction () {\n  function ChildChangeAccumulator() {\n    this.changeMap = new Map();\n  }\n\n  ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n    var type = change.type;\n    var childKey = change.childName;\n    util.assert(type === Change.CHILD_ADDED || type === Change.CHILD_CHANGED || type === Change.CHILD_REMOVED, 'Only child changes supported for tracking');\n    util.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n    var oldChange = this.changeMap.get(childKey);\n\n    if (oldChange) {\n      var oldType = oldChange.type;\n\n      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\n        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode));\n      } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_ADDED) {\n        this.changeMap.delete(childKey);\n      } else if (type === Change.CHILD_REMOVED && oldType === Change.CHILD_CHANGED) {\n        this.changeMap.set(childKey, Change.childRemovedChange(childKey, oldChange.oldSnap));\n      } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_ADDED) {\n        this.changeMap.set(childKey, Change.childAddedChange(childKey, change.snapshotNode));\n      } else if (type === Change.CHILD_CHANGED && oldType === Change.CHILD_CHANGED) {\n        this.changeMap.set(childKey, Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap));\n      } else {\n        throw util.assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  };\n\n  ChildChangeAccumulator.prototype.getChanges = function () {\n    return Array.from(this.changeMap.values());\n  };\n\n  return ChildChangeAccumulator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of CompleteChildSource that never returns any additional children\r\n *\r\n * @private\r\n * @constructor\r\n * @implements CompleteChildSource\r\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\n\n\nvar NoCompleteChildSource_ =\n/** @class */\nfunction () {\n  function NoCompleteChildSource_() {}\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\n    return null;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\n    return null;\n  };\n\n  return NoCompleteChildSource_;\n}();\n/**\r\n * Singleton instance.\r\n * @const\r\n * @type {!CompleteChildSource}\r\n */\n\n\nvar NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\r\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\r\n * old event caches available to calculate complete children.\r\n *\r\n *\r\n * @implements CompleteChildSource\r\n */\n\nvar WriteTreeCompleteChildSource =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!WriteTreeRef} writes_\r\n   * @param {!ViewCache} viewCache_\r\n   * @param {?Node} optCompleteServerCache_\r\n   */\n  function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\n    if (optCompleteServerCache_ === void 0) {\n      optCompleteServerCache_ = null;\n    }\n\n    this.writes_ = writes_;\n    this.viewCache_ = viewCache_;\n    this.optCompleteServerCache_ = optCompleteServerCache_;\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\n    var node = this.viewCache_.getEventCache();\n\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\n    var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : this.viewCache_.getCompleteServerSnap();\n    var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\n\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  };\n\n  return WriteTreeCompleteChildSource;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @constructor\r\n * @struct\r\n */\n\n\nvar ProcessorResult =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Array.<!Change>} changes\r\n   */\n  function ProcessorResult(viewCache, changes) {\n    this.viewCache = viewCache;\n    this.changes = changes;\n  }\n\n  return ProcessorResult;\n}();\n/**\r\n * @constructor\r\n */\n\n\nvar ViewProcessor =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!NodeFilter} filter_\r\n   */\n  function ViewProcessor(filter_) {\n    this.filter_ = filter_;\n  }\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   */\n\n\n  ViewProcessor.prototype.assertIndexed = function (viewCache) {\n    util.assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\n    util.assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @return {!ProcessorResult}\r\n   */\n\n\n  ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\n    var accumulator = new ChildChangeAccumulator();\n    var newViewCache, filterServerNode;\n\n    if (operation.type === OperationType.OVERWRITE) {\n      var overwrite = operation;\n\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n      } else {\n        util.assert(overwrite.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n\n        filterServerNode = overwrite.source.tagged || oldViewCache.getServerCache().isFiltered() && !overwrite.path.isEmpty();\n        newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      var merge = operation;\n\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n      } else {\n        util.assert(merge.source.fromServer, 'Unknown source.'); // We filter the node if it's a tagged update or the node has been previously filtered\n\n        filterServerNode = merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      var ackUserWrite = operation;\n\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n      } else {\n        newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\n    } else {\n      throw util.assertionError('Unknown operation type: ' + operation.type);\n    }\n\n    var changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!ViewCache} newViewCache\r\n   * @param {!Array.<!Change>} accumulator\r\n   * @private\r\n   */\n\n\n  ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\n    var eventSnap = newViewCache.getEventCache();\n\n    if (eventSnap.isFullyInitialized()) {\n      var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n\n      if (accumulator.length > 0 || !oldViewCache.getEventCache().isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(\n      /** @type {!Node} */\n      oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {\n        accumulator.push(Change.valueChange(\n        /** @type {!Node} */\n        newViewCache.getCompleteEventSnap()));\n      }\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} changePath\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!CompleteChildSource} source\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\n    var oldEventSnap = viewCache.getEventCache();\n\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      var newEventCache = void 0,\n          serverNode = void 0;\n\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        util.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\n\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          var serverCache = viewCache.getCompleteServerSnap();\n          var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;\n          var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\n        } else {\n          var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n          newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\n        }\n      } else {\n        var childKey = changePath.getFront();\n\n        if (childKey === '.priority') {\n          util.assert(changePath.getLength() === 1, \"Can't have a priority with additional path components\");\n          var oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode(); // we might have overwrites for this priority\n\n          var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\n\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          var childChangePath = changePath.popFront(); // update child\n\n          var newEventChild = void 0;\n\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\n\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n          }\n\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n\n      return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\n    }\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n    var oldServerSnap = oldViewCache.getServerCache();\n    var newServerCache;\n    var serverFilter = filterServerNode ? this.filter_ : this.filter_.getIndexedFilter();\n\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n    } else {\n      var childKey = changePath.getFront();\n\n      if (!oldServerSnap.isCompleteForPath(changePath) && changePath.getLength() > 1) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n\n      var childChangePath = changePath.popFront();\n      var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      var newChildNode = childNode.updateChild(childChangePath, changedSnap);\n\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n      } else {\n        newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);\n      }\n    }\n\n    var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\n    var source = new WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n    return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} oldViewCache\r\n   * @param {!Path} changePath\r\n   * @param {!Node} changedSnap\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n    var oldEventSnap = oldViewCache.getEventCache();\n    var newViewCache, newEventCache;\n    var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\n      newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\n    } else {\n      var childKey = changePath.getFront();\n\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\n        newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n      } else {\n        var childChangePath = changePath.popFront();\n        var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        var newChild = void 0;\n\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          var childNode = source.getCompleteChild(childKey);\n\n          if (childNode != null) {\n            if (childChangePath.getBack() === '.priority' && childNode.getChild(childChangePath.parent()).isEmpty()) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n\n        if (!oldChild.equals(newChild)) {\n          var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n          newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n\n    return newViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {string} childKey\r\n   * @return {boolean}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n    var _this = this; // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n\n\n    var curViewCache = viewCache;\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    changedChildren.foreach(function (relativePath, childNode) {\n      var writePath = path.child(relativePath);\n\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!Node} node\r\n   * @param {ImmutableTree.<!Node>} merge\r\n   * @return {!Node}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyMerge_ = function (node, merge) {\n    merge.foreach(function (relativePath, childNode) {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!ImmutableTree.<!Node>} changedChildren\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache\r\n   * @param {boolean} filterServerNode\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n    var _this = this; // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n\n\n    if (viewCache.getServerCache().getNode().isEmpty() && !viewCache.getServerCache().isFullyInitialized()) {\n      return viewCache;\n    } // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n\n\n    var curViewCache = viewCache;\n    var viewMergeTree;\n\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n\n    var serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (serverNode.hasChild(childKey)) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n\n        var newChild = _this.applyMerge_(serverChild, childTree);\n\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\n      var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) && childMergeTree.value == null;\n\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);\n\n        var newChild = _this.applyMerge_(serverChild, childMergeTree);\n\n        curViewCache = _this.applyServerOverwrite_(curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n      }\n    });\n    return curViewCache;\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} ackPath\r\n   * @param {!ImmutableTree<!boolean>} affectedTree\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    } // Only filter server node if it is currently filtered\n\n\n    var filterServerNode = viewCache.getServerCache().isFiltered(); // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n\n    var serverCache = viewCache.getServerCache();\n\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (ackPath.isEmpty() && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {\n        return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        var changedChildren_1 = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, function (name, node) {\n          changedChildren_1 = changedChildren_1.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      var changedChildren_2 = ImmutableTree.Empty;\n      affectedTree.foreach(function (mergePath, value) {\n        var serverCachePath = ackPath.child(mergePath);\n\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n        }\n      });\n      return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\n    }\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\n    var oldServerNode = viewCache.getServerCache();\n    var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\n    return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);\n  };\n  /**\r\n   * @param {!ViewCache} viewCache\r\n   * @param {!Path} path\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @param {!ChildChangeAccumulator} accumulator\r\n   * @return {!ViewCache}\r\n   * @private\r\n   */\n\n\n  ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\n    var complete;\n\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n      var oldEventCache = viewCache.getEventCache().getNode();\n      var newEventCache = void 0;\n\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        var newNode = void 0;\n\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n        } else {\n          var serverChildren = viewCache.getServerCache().getNode();\n          util.assert(serverChildren instanceof ChildrenNode, 'serverChildren would be complete if leaf node');\n          newNode = writesCache.calcCompleteEventChildren(serverChildren);\n        }\n\n        newNode = newNode;\n        newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\n      } else {\n        var childKey = path.getFront();\n        var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n\n        if (newChild == null && viewCache.getServerCache().isCompleteForChild(childKey)) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\n        } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\n        } else {\n          newEventCache = oldEventCache;\n        }\n\n        if (newEventCache.isEmpty() && viewCache.getServerCache().isFullyInitialized()) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\n          }\n        }\n      }\n\n      complete = viewCache.getServerCache().isFullyInitialized() || writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\n    }\n  };\n\n  return ViewProcessor;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\r\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\r\n * for details.\r\n *\r\n * @constructor\r\n */\n\n\nvar EventGenerator =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   */\n  function EventGenerator(query_) {\n    this.query_ = query_;\n    /**\r\n     * @private\r\n     * @type {!Index}\r\n     */\n\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n  /**\r\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\r\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\r\n   *\r\n   * Notes:\r\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\r\n   *    our index.\r\n   *  - prevName will be calculated based on the index ordering.\r\n   *\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {!Array.<!EventRegistration>} eventRegistrations\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n    var _this = this;\n\n    var events = [];\n    var moves = [];\n    changes.forEach(function (change) {\n      if (change.type === Change.CHILD_CHANGED && _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n        moves.push(Change.childMovedChange(change.childName, change.snapshotNode));\n      }\n    });\n    this.generateEventsForType_(events, Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n    this.generateEventsForType_(events, Change.VALUE, changes, eventRegistrations, eventCache);\n    return events;\n  };\n  /**\r\n   * Given changes of a single change type, generate the corresponding events.\r\n   *\r\n   * @param {!Array.<!Event>} events\r\n   * @param {!string} eventType\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Array.<!EventRegistration>} registrations\r\n   * @param {!Node} eventCache\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n    var _this = this;\n\n    var filteredChanges = changes.filter(function (change) {\n      return change.type === eventType;\n    });\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(function (change) {\n      var materializedChange = _this.materializeSingleChange_(change, eventCache);\n\n      registrations.forEach(function (registration) {\n        if (registration.respondsTo(change.type)) {\n          events.push(registration.createEvent(materializedChange, _this.query_));\n        }\n      });\n    });\n  };\n  /**\r\n   * @param {!Change} change\r\n   * @param {!Node} eventCache\r\n   * @return {!Change}\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n      /** @type {!string} */\n      change.childName, change.snapshotNode, this.index_);\n      return change;\n    }\n  };\n  /**\r\n   * @param {!Change} a\r\n   * @param {!Change} b\r\n   * @return {number}\r\n   * @private\r\n   */\n\n\n  EventGenerator.prototype.compareChanges_ = function (a, b) {\n    if (a.childName == null || b.childName == null) {\n      throw util.assertionError('Should only compare child_ events.');\n    }\n\n    var aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    var bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  };\n\n  return EventGenerator;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A view represents a specific location and query that has 1 or more event registrations.\r\n *\r\n * It does several things:\r\n *  - Maintains the list of event registrations for this location/query.\r\n *  - Maintains a cache of the data visible for this location/query.\r\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\r\n *    registrations returns the set of events to be raised.\r\n * @constructor\r\n */\n\n\nvar View =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param {!Query} query_\r\n   * @param {!ViewCache} initialViewCache\r\n   */\n  function View(query_, initialViewCache) {\n    this.query_ = query_;\n    this.eventRegistrations_ = [];\n    var params = this.query_.getQueryParams();\n    var indexFilter = new IndexedFilter(params.getIndex());\n    var filter = params.getNodeFilter();\n    /**\r\n     * @type {ViewProcessor}\r\n     * @private\r\n     */\n\n    this.processor_ = new ViewProcessor(filter);\n    var initialServerCache = initialViewCache.getServerCache();\n    var initialEventCache = initialViewCache.getEventCache(); // Don't filter server node with other filter than index, wait for tagged listen\n\n    var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n    var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n    var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n    var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n    /**\r\n     * @type {!ViewCache}\r\n     * @private\r\n     */\n\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n    /**\r\n     * @type {!EventGenerator}\r\n     * @private\r\n     */\n\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n  /**\r\n   * @return {!Query}\r\n   */\n\n\n  View.prototype.getQuery = function () {\n    return this.query_;\n  };\n  /**\r\n   * @return {?Node}\r\n   */\n\n\n  View.prototype.getServerCache = function () {\n    return this.viewCache_.getServerCache().getNode();\n  };\n  /**\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  View.prototype.getCompleteServerCache = function (path) {\n    var cache = this.viewCache_.getCompleteServerSnap();\n\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {\n        return cache.getChild(path);\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  View.prototype.isEmpty = function () {\n    return this.eventRegistrations_.length === 0;\n  };\n  /**\r\n   * @param {!EventRegistration} eventRegistration\r\n   */\n\n\n  View.prototype.addEventRegistration = function (eventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  };\n  /**\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\r\n   */\n\n\n  View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\n    var cancelEvents = [];\n\n    if (cancelError) {\n      util.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n      var path_1 = this.query_.path;\n      this.eventRegistrations_.forEach(function (registration) {\n        cancelError\n        /** @type {!Error} */\n        = cancelError;\n        var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      var remaining = [];\n\n      for (var i = 0; i < this.eventRegistrations_.length; ++i) {\n        var existing = this.eventRegistrations_[i];\n\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n\n    return cancelEvents;\n  };\n  /**\r\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\r\n   *\r\n   * @param {!Operation} operation\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} completeServerCache\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\n    if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {\n      util.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\n      util.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\n    }\n\n    var oldViewCache = this.viewCache_;\n    var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\n    this.processor_.assertIndexed(result.viewCache);\n    util.assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n    this.viewCache_ = result.viewCache;\n    return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\n  };\n  /**\r\n   * @param {!EventRegistration} registration\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.getInitialEvents = function (registration) {\n    var eventSnap = this.viewCache_.getEventCache();\n    var initialChanges = [];\n\n    if (!eventSnap.getNode().isLeafNode()) {\n      var eventNode = eventSnap.getNode();\n      eventNode.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n\n    return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\n  };\n  /**\r\n   * @private\r\n   * @param {!Array.<!Change>} changes\r\n   * @param {!Node} eventCache\r\n   * @param {EventRegistration=} eventRegistration\r\n   * @return {!Array.<!Event>}\r\n   */\n\n\n  View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\n    var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\n  };\n\n  return View;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar __referenceConstructor$1;\n/**\r\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\r\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\r\n * and user writes (set, transaction, update).\r\n *\r\n * It's responsible for:\r\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\r\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\r\n *    applyUserOverwrite, etc.)\r\n */\n\n\nvar SyncPoint =\n/** @class */\nfunction () {\n  function SyncPoint() {\n    /**\r\n     * The Views being tracked at this location in the tree, stored as a map where the key is a\r\n     * queryId and the value is the View for that query.\r\n     *\r\n     * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\r\n     */\n    this.views = new Map();\n  }\n\n  Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\n    get: function () {\n      util.assert(__referenceConstructor$1, 'Reference.ts has not been loaded');\n      return __referenceConstructor$1;\n    },\n    set: function (val) {\n      util.assert(!__referenceConstructor$1, '__referenceConstructor has already been defined');\n      __referenceConstructor$1 = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SyncPoint.prototype.isEmpty = function () {\n    return this.views.size === 0;\n  };\n\n  SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\n    var e_1, _a;\n\n    var queryId = operation.source.queryId;\n\n    if (queryId !== null) {\n      var view = this.views.get(queryId);\n      util.assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(operation, writesCache, optCompleteServerCache);\n    } else {\n      var events = [];\n\n      try {\n        for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var view = _c.value;\n          events = events.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return events;\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @param {!Query} query\r\n   * @param {!EventRegistration} eventRegistration\r\n   * @param {!WriteTreeRef} writesCache\r\n   * @param {?Node} serverCache Complete server cache, if we have it.\r\n   * @param {boolean} serverCacheComplete\r\n   * @return {!Array.<!Event>} Events to raise.\r\n   */\n\n\n  SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n    var queryId = query.queryIdentifier();\n    var view = this.views.get(queryId);\n\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\n      var eventCacheComplete = false;\n\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n\n      var viewCache = new ViewCache(new CacheNode(\n      /** @type {!Node} */\n      eventCache, eventCacheComplete, false), new CacheNode(\n      /** @type {!Node} */\n      serverCache, serverCacheComplete, false));\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    } // This is guaranteed to exist now, we just created anything that was missing\n\n\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  };\n  /**\r\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\r\n   *\r\n   * If query is the default query, we'll check all views for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\r\n   *\r\n   * @param {!Query} query\r\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\r\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\r\n   */\n\n\n  SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var e_2, _a;\n\n    var queryId = query.queryIdentifier();\n    var removed = [];\n    var cancelEvents = [];\n    var hadCompleteView = this.hasCompleteView();\n\n    if (queryId === 'default') {\n      try {\n        // When you do ref.off(...), we search all views for the registration to remove.\n        for (var _b = tslib.__values(this.views.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var _d = tslib.__read(_c.value, 2),\n              viewQueryId = _d[0],\n              view = _d[1];\n\n          cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n\n          if (view.isEmpty()) {\n            this.views.delete(viewQueryId); // We'll deal with complete views later.\n\n            if (!view.getQuery().getQueryParams().loadsAllData()) {\n              removed.push(view.getQuery());\n            }\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      var view = this.views.get(queryId);\n\n      if (view) {\n        cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n\n        if (view.isEmpty()) {\n          this.views.delete(queryId); // We'll deal with complete views later.\n\n          if (!view.getQuery().getQueryParams().loadsAllData()) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\n    }\n\n    return {\n      removed: removed,\n      events: cancelEvents\n    };\n  };\n\n  SyncPoint.prototype.getQueryViews = function () {\n    var e_3, _a;\n\n    var result = [];\n\n    try {\n      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n\n        if (!view.getQuery().getQueryParams().loadsAllData()) {\n          result.push(view);\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return result;\n  };\n  /**\r\n   * @param path The path to the desired complete snapshot\r\n   * @return A complete cache, if it exists\r\n   */\n\n\n  SyncPoint.prototype.getCompleteServerCache = function (path) {\n    var e_4, _a;\n\n    var serverCache = null;\n\n    try {\n      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n        serverCache = serverCache || view.getCompleteServerCache(path);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n\n    return serverCache;\n  };\n\n  SyncPoint.prototype.viewForQuery = function (query) {\n    var params = query.getQueryParams();\n\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      var queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  };\n\n  SyncPoint.prototype.viewExistsForQuery = function (query) {\n    return this.viewForQuery(query) != null;\n  };\n\n  SyncPoint.prototype.hasCompleteView = function () {\n    return this.getCompleteView() != null;\n  };\n\n  SyncPoint.prototype.getCompleteView = function () {\n    var e_5, _a;\n\n    try {\n      for (var _b = tslib.__values(this.views.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var view = _c.value;\n\n        if (view.getQuery().getQueryParams().loadsAllData()) {\n          return view;\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n\n    return null;\n  };\n\n  return SyncPoint;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\r\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\r\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\r\n * to reflect the write added.\r\n */\n\n\nvar CompoundWrite =\n/** @class */\nfunction () {\n  function CompoundWrite(writeTree_) {\n    this.writeTree_ = writeTree_;\n  }\n\n  CompoundWrite.prototype.addWrite = function (path, node) {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n\n      if (rootmost != null) {\n        var rootMostPath = rootmost.path;\n        var value = rootmost.value;\n        var relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        var subtree = new ImmutableTree(node);\n        var newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  };\n\n  CompoundWrite.prototype.addWrites = function (path, updates) {\n    var newWrite = this;\n    each(updates, function (childKey, node) {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  };\n  /**\r\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\r\n   * location, which must be removed by calling this method with that path.\r\n   *\r\n   * @param path The path at which a write and all deeper writes should be removed\r\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\r\n   */\n\n\n  CompoundWrite.prototype.removeWrite = function (path) {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      var newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  };\n  /**\r\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\r\n   * considered \"complete\".\r\n   *\r\n   * @param path The path to check for\r\n   * @return Whether there is a complete write at that path\r\n   */\n\n\n  CompoundWrite.prototype.hasCompleteWrite = function (path) {\n    return this.getCompleteNode(path) != null;\n  };\n  /**\r\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\r\n   * writes from deeper paths, but will return child nodes from a more shallow path.\r\n   *\r\n   * @param path The path to get a complete write\r\n   * @return The node if complete at that path, or null otherwise.\r\n   */\n\n\n  CompoundWrite.prototype.getCompleteNode = function (path) {\n    var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n\n    if (rootmost != null) {\n      return this.writeTree_.get(rootmost.path).getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  };\n  /**\r\n   * Returns all children that are guaranteed to be a complete overwrite.\r\n   *\r\n   * @return A list of all complete children.\r\n   */\n\n\n  CompoundWrite.prototype.getCompleteChildren = function () {\n    var children = [];\n    var node = this.writeTree_.value;\n\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        node.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n          children.push(new NamedNode(childName, childNode));\n        });\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal(function (childName, childTree) {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n\n    return children;\n  };\n\n  CompoundWrite.prototype.childCompoundWrite = function (path) {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      var shadowingNode = this.getCompleteNode(path);\n\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  };\n  /**\r\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\r\n   * @return Whether this CompoundWrite is empty\r\n   */\n\n\n  CompoundWrite.prototype.isEmpty = function () {\n    return this.writeTree_.isEmpty();\n  };\n  /**\r\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\r\n   * node\r\n   * @param node The node to apply this CompoundWrite to\r\n   * @return The node with all writes applied\r\n   */\n\n\n  CompoundWrite.prototype.apply = function (node) {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  };\n\n  CompoundWrite.Empty = new CompoundWrite(new ImmutableTree(null));\n  return CompoundWrite;\n}();\n\nfunction applySubtreeWrite(relativePath, writeTree, node) {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    var priorityWrite_1 = null;\n    writeTree.children.inorderTraversal(function (childKey, childTree) {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        util.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n        priorityWrite_1 = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    }); // If there was a priority write, we only apply it if the node is not empty\n\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\n    }\n\n    return node;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\r\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\r\n * and addMerge(), and removed with removeWrite().\r\n *\r\n * @constructor\r\n */\n\n\nvar WriteTree =\n/** @class */\nfunction () {\n  function WriteTree() {\n    /**\r\n     * A tree tracking the result of applying all visible writes.  This does not include transactions with\r\n     * applyLocally=false or writes that are completely shadowed by other writes.\r\n     *\r\n     * @type {!CompoundWrite}\r\n     * @private\r\n     */\n    this.visibleWrites_ = CompoundWrite.Empty;\n    /**\r\n     * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\r\n     * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\r\n     * used by transactions).\r\n     *\r\n     * @type {!Array.<!WriteRecord>}\r\n     * @private\r\n     */\n\n    this.allWrites_ = [];\n    this.lastWriteId_ = -1;\n  }\n  /**\r\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {!WriteTreeRef}\r\n   */\n\n\n  WriteTree.prototype.childWrites = function (path) {\n    return new WriteTreeRef(path, this);\n  };\n  /**\r\n   * Record a new overwrite from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Node} snap\r\n   * @param {!number} writeId\r\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\r\n   */\n\n\n  WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n    util.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    this.allWrites_.push({\n      path: path,\n      snap: snap,\n      writeId: writeId,\n      visible: visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * Record a new merge from user code.\r\n   *\r\n   * @param {!Path} path\r\n   * @param {!Object.<string, !Node>} changedChildren\r\n   * @param {!number} writeId\r\n   */\n\n\n  WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n    util.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n    this.allWrites_.push({\n      path: path,\n      children: changedChildren,\n      writeId: writeId,\n      visible: true\n    });\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  };\n  /**\r\n   * @param {!number} writeId\r\n   * @return {?WriteRecord}\r\n   */\n\n\n  WriteTree.prototype.getWrite = function (writeId) {\n    for (var i = 0; i < this.allWrites_.length; i++) {\n      var record = this.allWrites_[i];\n\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\r\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\r\n   *\r\n   * @param {!number} writeId\r\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\r\n   * events as a result).\r\n   */\n\n\n  WriteTree.prototype.removeWrite = function (writeId) {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n    var _this = this;\n\n    var idx = this.allWrites_.findIndex(function (s) {\n      return s.writeId === writeId;\n    });\n    util.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    var writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n    var removedWriteWasVisible = writeToRemove.visible;\n    var removedWriteOverlapsWithOtherWrites = false;\n    var i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      var currentWrite = this.allWrites_[i];\n\n      if (currentWrite.visible) {\n        if (i >= idx && this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n      } else {\n        var children = writeToRemove.children;\n        each(children, function (childName) {\n          _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n        });\n      }\n\n      return true;\n    }\n  };\n  /**\r\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\r\n   * No server data is considered.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.getCompleteWriteData = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\r\n   * writes), attempt to calculate a complete snapshot for the given path\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (completeServerCache == null && !subMerge.hasCompleteWrite(Path.Empty)) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (!includeHiddenWrites && completeServerCache == null && !merge.hasCompleteWrite(Path.Empty)) {\n          return null;\n        } else {\n          var filter = function (write) {\n            return (write.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write.writeId)) && (write.path.contains(treePath) || treePath.contains(write.path));\n          };\n\n          var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n          var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  };\n  /**\r\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\r\n   * Used when creating new views, to pre-fill their complete event children snapshot.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n    var completeChildren = ChildrenNode.EMPTY_NODE;\n    var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, function (childName, childSnap) {\n          completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n        });\n      }\n\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(PRIORITY_INDEX, function (childName, childNode) {\n        var node = merge_1.childCompoundWrite(new Path(childName)).apply(childNode);\n        completeChildren = completeChildren.updateImmediateChild(childName, node);\n      }); // Add any complete children we have from the set\n\n      merge_1.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      var merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(function (namedNode) {\n        completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n      });\n      return completeChildren;\n    }\n  };\n  /**\r\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\r\n   * applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!Path} childPath\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n    util.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n    var path = treePath.child(childPath);\n\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      var childMerge = this.visibleWrites_.childCompoundWrite(path);\n\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!Path} treePath\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n    var path = treePath.child(childKey);\n    var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        var childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n      } else {\n        return null;\n      }\n    }\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   */\n\n\n  WriteTree.prototype.shadowingWrite = function (path) {\n    return this.visibleWrites_.getCompleteNode(path);\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window.\r\n   */\n\n\n  WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n    var toIterate;\n    var merge = this.visibleWrites_.childCompoundWrite(treePath);\n    var shadowingNode = merge.getCompleteNode(Path.Empty);\n\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n\n    toIterate = toIterate.withIndex(index);\n\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      var nodes = [];\n      var cmp = index.getCompare();\n      var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);\n      var next = iter.getNext();\n\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n\n        next = iter.getNext();\n      }\n\n      return nodes;\n    } else {\n      return [];\n    }\n  };\n\n  WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (var childName in writeRecord.children) {\n        if (writeRecord.children.hasOwnProperty(childName) && writeRecord.path.child(childName).contains(path)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  };\n  /**\r\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\r\n   */\n\n\n  WriteTree.prototype.resetTree_ = function () {\n    this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path.Empty);\n\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  };\n  /**\r\n   * The default filter used when constructing the tree. Keep everything that's visible.\r\n   */\n\n\n  WriteTree.DefaultFilter_ = function (write) {\n    return write.visible;\n  };\n  /**\r\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\r\n   * event data at that path.\r\n   */\n\n\n  WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n    var compoundWrite = CompoundWrite.Empty;\n\n    for (var i = 0; i < writes.length; ++i) {\n      var write = writes[i]; // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n\n      if (filter(write)) {\n        var writePath = write.path;\n        var relativePath = void 0;\n\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(Path.Empty, write.snap.getChild(relativePath));\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(Path.Empty, write.children);\n            } else {\n              var child = util.safeGet(write.children, relativePath.getFront());\n\n              if (child) {\n                // There exists a child in this node that matches the root path\n                var deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          }\n        } else {\n          throw util.assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n\n    return compoundWrite;\n  };\n\n  return WriteTree;\n}();\n/**\r\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\r\n * just proxy to the underlying WriteTree.\r\n *\r\n * @constructor\r\n */\n\n\nvar WriteTreeRef =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Path} path\r\n   * @param {!WriteTree} writeTree\r\n   */\n  function WriteTreeRef(path, writeTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n  /**\r\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\r\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\r\n   * can lead to a more expensive calculation.\r\n   *\r\n   * @param {?Node} completeServerCache\r\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\r\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n    return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n  };\n  /**\r\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\r\n   * mix of the given server data and write data.\r\n   *\r\n   * @param {?ChildrenNode} completeServerChildren\r\n   * @return {!ChildrenNode}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n    return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n  };\n  /**\r\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\r\n   * if anything, needs to be applied to the event cache.\r\n   *\r\n   * Possibilities:\r\n   *\r\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\r\n   *\r\n   * 2. Some write is completely shadowing. No events to be raised\r\n   *\r\n   * 3. Is partially shadowed. Events should be raised\r\n   *\r\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\r\n   *\r\n   * @param {!Path} path\r\n   * @param {?Node} existingEventSnap\r\n   * @param {?Node} existingServerSnap\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n  };\n  /**\r\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\r\n   * a higher path, this will return the child of that write relative to the write and this path.\r\n   * Returns null if there is no write at this path.\r\n   *\r\n   * @param {!Path} path\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.shadowingWrite = function (path) {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  };\n  /**\r\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\r\n   * the window, but may now be in the window\r\n   *\r\n   * @param {?Node} completeServerData\r\n   * @param {!NamedNode} startPost\r\n   * @param {!number} count\r\n   * @param {boolean} reverse\r\n   * @param {!Index} index\r\n   * @return {!Array.<!NamedNode>}\r\n   */\n\n\n  WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n    return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n  };\n  /**\r\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\r\n   * complete child for this ChildKey.\r\n   *\r\n   * @param {!string} childKey\r\n   * @param {!CacheNode} existingServerCache\r\n   * @return {?Node}\r\n   */\n\n\n  WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n    return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n  };\n  /**\r\n   * Return a WriteTreeRef for a child.\r\n   *\r\n   * @param {string} childName\r\n   * @return {!WriteTreeRef}\r\n   */\n\n\n  WriteTreeRef.prototype.child = function (childName) {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  };\n\n  return WriteTreeRef;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * SyncTree is the central class for managing event callback registration, data caching, views\r\n * (query processing), and event generation.  There are typically two SyncTree instances for\r\n * each Repo, one for the normal Firebase data, and one for the .info data.\r\n *\r\n * It has a number of responsibilities, including:\r\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\r\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\r\n *    (applyUserOverwrite(), applyUserMerge()).\r\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\r\n *    applyServerMerge()).\r\n *  - Generating user-facing events for server and user changes (all of the apply* methods\r\n *    return the set of events that need to be raised as a result).\r\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\r\n *    to the correct set of paths and queries to satisfy the current set of user event\r\n *    callbacks (listens are started/stopped using the provided listenProvider).\r\n *\r\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\r\n * events are returned to the caller rather than raised synchronously.\r\n *\r\n * @constructor\r\n */\n\n\nvar SyncTree =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\r\n   *   to server data.\r\n   */\n  function SyncTree(listenProvider_) {\n    this.listenProvider_ = listenProvider_;\n    /**\r\n     * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\r\n     */\n\n    this.syncPointTree_ = ImmutableTree.Empty;\n    /**\r\n     * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\r\n     */\n\n    this.pendingWriteTree_ = new WriteTree();\n    this.tagToQueryMap = new Map();\n    this.queryToTagMap = new Map();\n  }\n  /**\r\n   * Apply the data changes for a user-generated set() or transaction() call.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.User, path, newData));\n    }\n  };\n  /**\r\n   * Apply the data from a user-generated update() call\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.User, path, changeTree));\n  };\n  /**\r\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\r\n   *\r\n   * @param revert True if the given write failed and needs to be reverted\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n    if (revert === void 0) {\n      revert = false;\n    }\n\n    var write = this.pendingWriteTree_.getWrite(writeId);\n    var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      var affectedTree_1 = ImmutableTree.Empty;\n\n      if (write.snap != null) {\n        // overwrite\n        affectedTree_1 = affectedTree_1.set(Path.Empty, true);\n      } else {\n        each(write.children, function (pathString, node) {\n          affectedTree_1 = affectedTree_1.set(new Path(pathString), node);\n        });\n      }\n\n      return this.applyOperationToSyncPoints_(new AckUserWrite(write.path, affectedTree_1, revert));\n    }\n  };\n  /**\r\n   * Apply new server data for the specified path..\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n    return this.applyOperationToSyncPoints_(new Overwrite(OperationSource.Server, path, newData));\n  };\n  /**\r\n   * Apply new server data to be merged in at the specified path.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n    var changeTree = ImmutableTree.fromObject(changedChildren);\n    return this.applyOperationToSyncPoints_(new Merge(OperationSource.Server, path, changeTree));\n  };\n  /**\r\n   * Apply a listen complete for a query\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyListenComplete = function (path) {\n    return this.applyOperationToSyncPoints_(new ListenComplete(OperationSource.Server, path));\n  };\n  /**\r\n   * Apply new server data for the specified tagged query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey != null) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new Overwrite(OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  };\n  /**\r\n   * Apply server data to be merged in for the specified tagged query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var changeTree = ImmutableTree.fromObject(changedChildren);\n      var op = new Merge(OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Apply a listen complete for a tagged query\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n    var queryKey = this.queryKeyForTag_(tag);\n\n    if (queryKey) {\n      var r = SyncTree.parseQueryKey_(queryKey);\n      var queryPath = r.path,\n          queryId = r.queryId;\n      var relativePath = Path.relativePath(queryPath, path);\n      var op = new ListenComplete(OperationSource.forServerTaggedQuery(queryId), relativePath);\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  };\n  /**\r\n   * Add an event callback for the specified query.\r\n   *\r\n   * @return Events to raise.\r\n   */\n\n\n  SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n    var path = query.path;\n    var serverCache = null;\n    var foundAncestorDefaultView = false; // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n\n    this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n      var relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView = foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    var syncPoint = this.syncPointTree_.get(path);\n\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView = foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    var serverCacheComplete;\n\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      var subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild(function (childName, childSyncPoint) {\n        var completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(childName, completeCache);\n        }\n      });\n    }\n\n    var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      var queryKey = SyncTree.makeQueryKey_(query);\n      util.assert(!this.queryToTagMap.has(queryKey), 'View does not exist, but we have a tag');\n      var tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n\n    var writesCache = this.pendingWriteTree_.childWrites(path);\n    var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      var view\n      /** @type !View */\n      = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n\n    return events;\n  };\n  /**\r\n   * Remove event callback(s).\r\n   *\r\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\r\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\r\n   *\r\n   * @param eventRegistration If null, all callbacks are removed.\r\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\r\n   * @return Cancel events, if cancelError was provided.\r\n   */\n\n\n  SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n    var _this = this; // Find the syncPoint first. Then deal with whether or not it has matching listeners\n\n\n    var path = query.path;\n    var maybeSyncPoint = this.syncPointTree_.get(path);\n    var cancelEvents = []; // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n\n    if (maybeSyncPoint && (query.queryIdentifier() === 'default' || maybeSyncPoint.viewExistsForQuery(query))) {\n      /**\r\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\r\n       */\n      var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n\n      var removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events; // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n\n      var removingDefault = -1 !== removed.findIndex(function (query) {\n        return query.getQueryParams().loadsAllData();\n      });\n      var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n        return parentSyncPoint.hasCompleteView();\n      });\n\n      if (removingDefault && !covered) {\n        var subtree = this.syncPointTree_.subtree(path); // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          var newViews = this.collectDistinctViewsForSubTree_(subtree); // Ok, we've collected all the listens we need. Set them up.\n\n          for (var i = 0; i < newViews.length; ++i) {\n            var view = newViews[i],\n                newQuery = view.getQuery();\n            var listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n          }\n        }\n      } // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n\n\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          var defaultTag = null;\n          this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n        } else {\n          removed.forEach(function (queryToRemove) {\n            var tagToRemove = _this.queryToTagMap.get(SyncTree.makeQueryKey_(queryToRemove));\n\n            _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n          });\n        }\n      } // Now, clear all of the tags we're tracking for the removed listens\n\n\n      this.removeTags_(removed);\n    }\n\n    return cancelEvents;\n  };\n  /**\r\n   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\r\n   * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\r\n   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\r\n   *     <incremented total> as the write is applied locally and then acknowledged at the server.\r\n   *\r\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\r\n   *\r\n   * @param path The path to the data we want\r\n   * @param writeIdsToExclude A specific set to be excluded\r\n   */\n\n\n  SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n    var includeHiddenSets = true;\n    var writeTree = this.pendingWriteTree_;\n    var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n      var relativePath = Path.relativePath(pathSoFar, path);\n      var serverCache = syncPoint.getCompleteServerCache(relativePath);\n\n      if (serverCache) {\n        return serverCache;\n      }\n    });\n    return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n  };\n  /**\r\n   * This collapses multiple unfiltered views into a single view, since we only need a single\r\n   * listener for them.\r\n   */\n\n\n  SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n    return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n      if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n        var completeView = maybeChildSyncPoint.getCompleteView();\n        return [completeView];\n      } else {\n        // No complete view here, flatten any deeper listens into an array\n        var views_1 = [];\n\n        if (maybeChildSyncPoint) {\n          views_1 = maybeChildSyncPoint.getQueryViews();\n        }\n\n        each(childMap, function (_key, childViews) {\n          views_1 = views_1.concat(childViews);\n        });\n        return views_1;\n      }\n    });\n  };\n\n  SyncTree.prototype.removeTags_ = function (queries) {\n    for (var j = 0; j < queries.length; ++j) {\n      var removedQuery = queries[j];\n\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        var removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  };\n  /**\r\n   * Normalizes a query to a query we send the server for listening\r\n   *\r\n   * @return The normalized query\r\n   */\n\n\n  SyncTree.queryForListening_ = function (query) {\n    if (query.getQueryParams().loadsAllData() && !query.getQueryParams().isDefault()) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef();\n    } else {\n      return query;\n    }\n  };\n  /**\r\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\r\n   *\r\n   * @return This method can return events to support synchronous data sources\r\n   */\n\n\n  SyncTree.prototype.setupListener_ = function (query, view) {\n    var path = query.path;\n    var tag = this.tagForQuery_(query);\n    var listener = this.createListenerForView_(view);\n    var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n    var subtree = this.syncPointTree_.subtree(path); // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n\n    if (tag) {\n      util.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n        if (!relativePath.isEmpty() && maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          return [maybeChildSyncPoint.getCompleteView().getQuery()];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          var queries_1 = [];\n\n          if (maybeChildSyncPoint) {\n            queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) {\n              return view.getQuery();\n            }));\n          }\n\n          each(childMap, function (_key, childQueries) {\n            queries_1 = queries_1.concat(childQueries);\n          });\n          return queries_1;\n        }\n      });\n\n      for (var i = 0; i < queriesToStop.length; ++i) {\n        var queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n      }\n    }\n\n    return events;\n  };\n\n  SyncTree.prototype.createListenerForView_ = function (view) {\n    var _this = this;\n\n    var query = view.getQuery();\n    var tag = this.tagForQuery_(query);\n    return {\n      hashFn: function () {\n        var cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: function (status) {\n        if (status === 'ok') {\n          if (tag) {\n            return _this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return _this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          var error = errorForServerCode(status, query);\n          return _this.removeEventRegistration(query,\n          /*eventRegistration*/\n          null, error);\n        }\n      }\n    };\n  };\n  /**\r\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\r\n   */\n\n\n  SyncTree.makeQueryKey_ = function (query) {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  };\n  /**\r\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\r\n   */\n\n\n  SyncTree.parseQueryKey_ = function (queryKey) {\n    var splitIndex = queryKey.indexOf('$');\n    util.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  };\n  /**\r\n   * Return the query associated with the given tag, if we have one\r\n   */\n\n\n  SyncTree.prototype.queryKeyForTag_ = function (tag) {\n    return this.tagToQueryMap.get(tag);\n  };\n  /**\r\n   * Return the tag associated with the given query.\r\n   */\n\n\n  SyncTree.prototype.tagForQuery_ = function (query) {\n    var queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  };\n  /**\r\n   * Static accessor for query tags.\r\n   */\n\n\n  SyncTree.getNextQueryTag_ = function () {\n    return SyncTree.nextQueryTag_++;\n  };\n  /**\r\n   * A helper method to apply tagged operations\r\n   */\n\n\n  SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n    var syncPoint = this.syncPointTree_.get(queryPath);\n    util.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(operation, writesCache,\n    /*serverCache=*/\n    null);\n  };\n  /**\r\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\r\n   *\r\n   * NOTES:\r\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\r\n   *\r\n   * - We call applyOperation() on each SyncPoint passing three things:\r\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\r\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\r\n   *   3. A snapshot Node with cached server data, if we have it.\r\n   *\r\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\r\n   */\n\n\n  SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n    return this.applyOperationHelper_(operation, this.syncPointTree_,\n    /*serverCache=*/\n    null, this.pendingWriteTree_.childWrites(Path.Empty));\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   */\n\n\n  SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n    } else {\n      var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      var events = [];\n      var childName = operation.path.getFront();\n      var childOperation = operation.operationForChild(childName);\n      var childTree = syncPointTree.children.get(childName);\n\n      if (childTree && childOperation) {\n        var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n        var childWritesCache = writesCache.child(childName);\n        events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n\n      if (syncPoint) {\n        events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n      }\n\n      return events;\n    }\n  };\n  /**\r\n   * Recursive helper for applyOperationToSyncPoints_\r\n   */\n\n\n  SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n    var _this = this;\n\n    var syncPoint = syncPointTree.get(Path.Empty); // If we don't have cached server data, see if we can get it from this SyncPoint.\n\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    var events = [];\n    syncPointTree.children.inorderTraversal(function (childName, childTree) {\n      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;\n      var childWritesCache = writesCache.child(childName);\n      var childOperation = operation.operationForChild(childName);\n\n      if (childOperation) {\n        events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n    }\n\n    return events;\n  };\n  /**\r\n   * Static tracker for next query tag.\r\n   */\n\n\n  SyncTree.nextQueryTag_ = 1;\n  return SyncTree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\r\n *\r\n * @constructor\r\n */\n\n\nvar SnapshotHolder =\n/** @class */\nfunction () {\n  function SnapshotHolder() {\n    this.rootNode_ = ChildrenNode.EMPTY_NODE;\n  }\n\n  SnapshotHolder.prototype.getNode = function (path) {\n    return this.rootNode_.getChild(path);\n  };\n\n  SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  };\n\n  return SnapshotHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Abstraction around FirebaseApp's token fetching capabilities.\r\n */\n\n\nvar AuthTokenProvider =\n/** @class */\nfunction () {\n  function AuthTokenProvider(app_, authProvider_) {\n    var _this = this;\n\n    this.app_ = app_;\n    this.authProvider_ = authProvider_;\n    this.auth_ = null;\n    this.auth_ = authProvider_.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth_) {\n      authProvider_.get().then(function (auth) {\n        return _this.auth_ = auth;\n      });\n    }\n  }\n  /**\r\n   * @param {boolean} forceRefresh\r\n   * @return {!Promise<FirebaseAuthTokenData>}\r\n   */\n\n\n  AuthTokenProvider.prototype.getToken = function (forceRefresh) {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(function (error) {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  };\n\n  AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(function () {\n        return listener(null);\n      }, 0);\n      this.authProvider_.get().then(function (auth) {\n        return auth.addAuthTokenListener(listener);\n      });\n    }\n  };\n\n  AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n    this.authProvider_.get().then(function (auth) {\n      return auth.removeAuthTokenListener(listener);\n    });\n  };\n\n  AuthTokenProvider.prototype.notifyForInvalidToken = function () {\n    var errorMessage = 'Provided authentication credentials for the app named \"' + this.app_.name + '\" are invalid. This usually indicates your app was not ' + 'initialized correctly. ';\n\n    if ('credential' in this.app_.options) {\n      errorMessage += 'Make sure the \"credential\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage += 'Make sure the \"serviceAccount\" property provided to initializeApp() ' + 'is authorized to access the specified \"databaseURL\" and is from the correct ' + 'project.';\n    } else {\n      errorMessage += 'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' + 'initializeApp() match the values provided for your app at ' + 'https://console.firebase.google.com/.';\n    }\n\n    warn(errorMessage);\n  };\n\n  return AuthTokenProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Tracks a collection of stats.\r\n *\r\n * @constructor\r\n */\n\n\nvar StatsCollection =\n/** @class */\nfunction () {\n  function StatsCollection() {\n    this.counters_ = {};\n  }\n\n  StatsCollection.prototype.incrementCounter = function (name, amount) {\n    if (amount === void 0) {\n      amount = 1;\n    }\n\n    if (!util.contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  };\n\n  StatsCollection.prototype.get = function () {\n    return util.deepCopy(this.counters_);\n  };\n\n  return StatsCollection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar StatsManager =\n/** @class */\nfunction () {\n  function StatsManager() {}\n\n  StatsManager.getCollection = function (repoInfo) {\n    var hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  };\n\n  StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\n    var hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString];\n  };\n\n  StatsManager.collections_ = {};\n  StatsManager.reporters_ = {};\n  return StatsManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the delta from the previous call to get stats.\r\n *\r\n * @param collection_ The collection to \"listen\" to.\r\n * @constructor\r\n */\n\n\nvar StatsListener =\n/** @class */\nfunction () {\n  function StatsListener(collection_) {\n    this.collection_ = collection_;\n    this.last_ = null;\n  }\n\n  StatsListener.prototype.get = function () {\n    var newStats = this.collection_.get();\n\n    var delta = tslib.__assign({}, newStats);\n\n    if (this.last_) {\n      each(this.last_, function (stat, value) {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n\n    this.last_ = newStats;\n    return delta;\n  };\n\n  return StatsListener;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\n\n\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000; // We'll continue to report stats on average every 5 minutes.\n\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n/**\r\n * @constructor\r\n */\n\nvar StatsReporter =\n/** @class */\nfunction () {\n  /**\r\n   * @param collection\r\n   * @param server_\r\n   */\n  function StatsReporter(collection, server_) {\n    this.server_ = server_;\n    this.statsToReport_ = {};\n    this.statsListener_ = new StatsListener(collection);\n    var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  StatsReporter.prototype.includeStat = function (stat) {\n    this.statsToReport_[stat] = true;\n  };\n\n  StatsReporter.prototype.reportStats_ = function () {\n    var _this = this;\n\n    var stats = this.statsListener_.get();\n    var reportedStats = {};\n    var haveStatsToReport = false;\n    each(stats, function (stat, value) {\n      if (value > 0 && util.contains(_this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    } // queue our next run.\n\n\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n  };\n\n  return StatsReporter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * The event queue serves a few purposes:\r\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\r\n *    events being queued.\r\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\r\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\r\n *    left off, ensuring that the events are still raised synchronously and in order.\r\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\r\n *    events are raised synchronously.\r\n *\r\n * NOTE: This can all go away if/when we move to async events.\r\n *\r\n * @constructor\r\n */\n\n\nvar EventQueue =\n/** @class */\nfunction () {\n  function EventQueue() {\n    /**\r\n     * @private\r\n     * @type {!Array.<EventList>}\r\n     */\n    this.eventLists_ = [];\n    /**\r\n     * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\r\n     * @private\r\n     * @type {!number}\r\n     */\n\n    this.recursionDepth_ = 0;\n  }\n  /**\r\n   * @param {!Array.<Event>} eventDataList The new events to queue.\r\n   */\n\n\n  EventQueue.prototype.queueEvents = function (eventDataList) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    var currList = null;\n\n    for (var i = 0; i < eventDataList.length; i++) {\n      var eventData = eventDataList[i];\n      var eventPath = eventData.getPath();\n\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\r\n   * for the specified path.\r\n   *\r\n   * It is assumed that the new events are all for the specified path.\r\n   *\r\n   * @param {!Path} path The path to raise events for.\r\n   * @param {!Array.<Event>} eventDataList The new events to raise.\r\n   */\n\n\n  EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.equals(path);\n    });\n  };\n  /**\r\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\r\n   * locations related to the specified change path (i.e. all ancestors and descendants).\r\n   *\r\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\r\n   *\r\n   * @param {!Path} changedPath The path to raise events for.\r\n   * @param {!Array.<!Event>} eventDataList The events to raise\r\n   */\n\n\n  EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  };\n  /**\r\n   * @param {!function(!Path):boolean} predicate\r\n   * @private\r\n   */\n\n\n  EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\n    this.recursionDepth_++;\n    var sentAll = true;\n\n    for (var i = 0; i < this.eventLists_.length; i++) {\n      var eventList = this.eventLists_[i];\n\n      if (eventList) {\n        var eventPath = eventList.getPath();\n\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  };\n\n  return EventQueue;\n}();\n/**\r\n * @param {!Path} path\r\n * @constructor\r\n */\n\n\nvar EventList =\n/** @class */\nfunction () {\n  function EventList(path_) {\n    this.path_ = path_;\n    /**\r\n     * @type {!Array.<Event>}\r\n     * @private\r\n     */\n\n    this.events_ = [];\n  }\n  /**\r\n   * @param {!Event} eventData\r\n   */\n\n\n  EventList.prototype.add = function (eventData) {\n    this.events_.push(eventData);\n  };\n  /**\r\n   * Iterates through the list and raises each event\r\n   */\n\n\n  EventList.prototype.raise = function () {\n    for (var i = 0; i < this.events_.length; i++) {\n      var eventData = this.events_[i];\n\n      if (eventData !== null) {\n        this.events_[i] = null;\n        var eventFn = eventData.getEventRunner();\n\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n\n        exceptionGuard(eventFn);\n      }\n    }\n  };\n  /**\r\n   * @return {!Path}\r\n   */\n\n\n  EventList.prototype.getPath = function () {\n    return this.path_;\n  };\n\n  return EventList;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Base class to be used if you want to emit events. Call the constructor with\r\n * the set of allowed event names.\r\n */\n\n\nvar EventEmitter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!Array.<string>} allowedEvents_\r\n   */\n  function EventEmitter(allowedEvents_) {\n    this.allowedEvents_ = allowedEvents_;\n    this.listeners_ = {};\n    util.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n  }\n  /**\r\n   * To be called by derived classes to trigger events.\r\n   * @param {!string} eventType\r\n   * @param {...*} varArgs\r\n   */\n\n\n  EventEmitter.prototype.trigger = function (eventType) {\n    var varArgs = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      varArgs[_i - 1] = arguments[_i];\n    }\n\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      var listeners = tslib.__spread(this.listeners_[eventType]);\n\n      for (var i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  };\n\n  EventEmitter.prototype.on = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({\n      callback: callback,\n      context: context\n    });\n    var eventData = this.getInitialEvent(eventType);\n\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  };\n\n  EventEmitter.prototype.off = function (eventType, callback, context) {\n    this.validateEventType_(eventType);\n    var listeners = this.listeners_[eventType] || [];\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  };\n\n  EventEmitter.prototype.validateEventType_ = function (eventType) {\n    util.assert(this.allowedEvents_.find(function (et) {\n      return et === eventType;\n    }), 'Unknown event: ' + eventType);\n  };\n\n  return EventEmitter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @extends {EventEmitter}\r\n */\n\n\nvar VisibilityMonitor =\n/** @class */\nfunction (_super) {\n  tslib.__extends(VisibilityMonitor, _super);\n\n  function VisibilityMonitor() {\n    var _this = _super.call(this, ['visible']) || this;\n\n    var hidden;\n    var visibilityChange;\n\n    if (typeof document !== 'undefined' && typeof document.addEventListener !== 'undefined') {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    } // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n\n\n    _this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(visibilityChange, function () {\n        var visible = !document[hidden];\n\n        if (visible !== _this.visible_) {\n          _this.visible_ = visible;\n\n          _this.trigger('visible', visible);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  VisibilityMonitor.getInstance = function () {\n    return new VisibilityMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n\n\n  VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n    util.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  };\n\n  return VisibilityMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Monitors online state (as reported by window.online/offline events).\r\n *\r\n * The expectation is that this could have many false positives (thinks we are online\r\n * when we're not), but no false negatives.  So we can safely use it to determine when\r\n * we definitely cannot reach the internet.\r\n *\r\n * @extends {EventEmitter}\r\n */\n\n\nvar OnlineMonitor =\n/** @class */\nfunction (_super) {\n  tslib.__extends(OnlineMonitor, _super);\n\n  function OnlineMonitor() {\n    var _this = _super.call(this, ['online']) || this;\n\n    _this.online_ = true; // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n\n    if (typeof window !== 'undefined' && typeof window.addEventListener !== 'undefined' && !util.isMobileCordova()) {\n      window.addEventListener('online', function () {\n        if (!_this.online_) {\n          _this.online_ = true;\n\n          _this.trigger('online', true);\n        }\n      }, false);\n      window.addEventListener('offline', function () {\n        if (_this.online_) {\n          _this.online_ = false;\n\n          _this.trigger('online', false);\n        }\n      }, false);\n    }\n\n    return _this;\n  }\n\n  OnlineMonitor.getInstance = function () {\n    return new OnlineMonitor();\n  };\n  /**\r\n   * @param {!string} eventType\r\n   * @return {Array.<boolean>}\r\n   */\n\n\n  OnlineMonitor.prototype.getInitialEvent = function (eventType) {\n    util.assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  OnlineMonitor.prototype.currentlyOnline = function () {\n    return this.online_;\n  };\n\n  return OnlineMonitor;\n}(EventEmitter);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class ensures the packets from the server arrive in order\r\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\r\n * @constructor\r\n */\n\n\nvar PacketReceiver =\n/** @class */\nfunction () {\n  /**\r\n   * @param onMessage_\r\n   */\n  function PacketReceiver(onMessage_) {\n    this.onMessage_ = onMessage_;\n    this.pendingResponses = [];\n    this.currentResponseNum = 0;\n    this.closeAfterResponse = -1;\n    this.onClose = null;\n  }\n\n  PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  };\n  /**\r\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\r\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\r\n   * browsers will respond in the same order as the requests we sent\r\n   * @param {number} requestNum\r\n   * @param {Array} data\r\n   */\n\n\n  PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n    var _this = this;\n\n    this.pendingResponses[requestNum] = data;\n\n    var _loop_1 = function () {\n      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n      delete this_1.pendingResponses[this_1.currentResponseNum];\n\n      var _loop_2 = function (i) {\n        if (toProcess[i]) {\n          exceptionGuard(function () {\n            _this.onMessage_(toProcess[i]);\n          });\n        }\n      };\n\n      for (var i = 0; i < toProcess.length; ++i) {\n        _loop_2(i);\n      }\n\n      if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n        if (this_1.onClose) {\n          this_1.onClose();\n          this_1.onClose = null;\n        }\n\n        return \"break\";\n      }\n\n      this_1.currentResponseNum++;\n    };\n\n    var this_1 = this;\n\n    while (this.pendingResponses[this.currentResponseNum]) {\n      var state_1 = _loop_1();\n\n      if (state_1 === \"break\") break;\n    }\n  };\n\n  return PacketReceiver;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// URL query parameters associated with longpolling\n\n\nvar FIREBASE_LONGPOLL_START_PARAM = 'start';\nvar FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nvar FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nvar FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nvar FIREBASE_LONGPOLL_ID_PARAM = 'id';\nvar FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nvar FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nvar FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nvar FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nvar FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nvar FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nvar FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe'; //Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\n\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\n\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\r\n * Keepalive period\r\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\r\n * length of 30 seconds that we can't exceed.\r\n * @const\r\n * @type {number}\r\n */\n\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\r\n * How long to wait before aborting a long-polling connection attempt.\r\n * @const\r\n * @type {number}\r\n */\n\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\r\n * This class manages a single long-polling connection.\r\n *\r\n * @constructor\r\n * @implements {Transport}\r\n */\n\nvar BrowserPollConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} connId An identifier for this connection, used for logging\r\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\r\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\r\n   *                                         transport session\r\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\r\n   *                                     connection previously\r\n   */\n  function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.repoInfo = repoInfo;\n    this.transportSessionId = transportSessionId;\n    this.lastSessionId = lastSessionId;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.everConnected_ = false;\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n\n    this.urlFn = function (params) {\n      return repoInfo.connectionURL(LONG_POLLING, params);\n    };\n  }\n  /**\r\n   *\r\n   * @param {function(Object)} onMessage Callback when messages arrive\r\n   * @param {function()} onDisconnect Callback with connection lost.\r\n   */\n\n\n  BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n    this.connectTimeoutTimer_ = setTimeout(function () {\n      _this.log_('Timed out trying to connect.'); // Make sure we clear the host cache\n\n\n      _this.onClosed_();\n\n      _this.connectTimeoutTimer_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)); // Ensure we delay the creation of the iframe until the DOM is loaded.\n\n    executeWhenDOMReady(function () {\n      if (_this.isClosed_) {\n        return;\n      } //Set up a callback that gets triggered once a connection is set up.\n\n\n      _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a = tslib.__read(args, 5),\n            command = _a[0],\n            arg1 = _a[1],\n            arg2 = _a[2],\n            arg3 = _a[3],\n            arg4 = _a[4];\n\n        _this.incrementIncomingBytes_(args);\n\n        if (!_this.scriptTagHolder) {\n          return; // we closed the connection.\n        }\n\n        if (_this.connectTimeoutTimer_) {\n          clearTimeout(_this.connectTimeoutTimer_);\n          _this.connectTimeoutTimer_ = null;\n        }\n\n        _this.everConnected_ = true;\n\n        if (command === FIREBASE_LONGPOLL_START_PARAM) {\n          _this.id = arg1;\n          _this.password = arg2;\n        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n          // Don't clear the host cache. We got a response from the server, so we know it's reachable\n          if (arg1) {\n            // We aren't expecting any more data (other than what the server's already in the process of sending us\n            // through our already open polls), so don't send any more.\n            _this.scriptTagHolder.sendNewPolls = false; // arg1 in this case is the last response number sent by the server. We should try to receive\n            // all of the responses up to this one before closing\n\n            _this.myPacketOrderer.closeAfter(arg1, function () {\n              _this.onClosed_();\n            });\n          } else {\n            _this.onClosed_();\n          }\n        } else {\n          throw new Error('Unrecognized command received: ' + command);\n        }\n      }, function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _a = tslib.__read(args, 2),\n            pN = _a[0],\n            data = _a[1];\n\n        _this.incrementIncomingBytes_(args);\n\n        _this.myPacketOrderer.handleResponse(pN, data);\n      }, function () {\n        _this.onClosed_();\n      }, _this.urlFn); //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n\n      if (_this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n      if (_this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\n      }\n\n      if (_this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;\n      }\n\n      if (typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n\n      var connectURL = _this.urlFn(urlParams);\n\n      _this.log_('Connecting via long-poll to ' + connectURL);\n\n      _this.scriptTagHolder.addTag(connectURL, function () {\n        /* do nothing */\n      });\n    });\n  };\n  /**\r\n   * Call this when a handshake has completed successfully and we want to consider the connection established\r\n   */\n\n\n  BrowserPollConnection.prototype.start = function () {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  };\n  /**\r\n   * Forces long polling to be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceAllow = function () {\n    BrowserPollConnection.forceAllow_ = true;\n  };\n  /**\r\n   * Forces longpolling to not be considered as a potential transport\r\n   */\n\n\n  BrowserPollConnection.forceDisallow = function () {\n    BrowserPollConnection.forceDisallow_ = true;\n  }; // Static method, use string literal so it can be accessed in a generic way\n\n\n  BrowserPollConnection.isAvailable = function () {\n    if (util.isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return !BrowserPollConnection.forceDisallow_ && typeof document !== 'undefined' && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();\n    }\n  };\n  /**\r\n   * No-op for polling\r\n   */\n\n\n  BrowserPollConnection.prototype.markConnectionHealthy = function () {};\n  /**\r\n   * Stops polling and cleans up the iframe\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    } //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n\n\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  };\n  /**\r\n   * Triggered when this transport is closed\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\r\n   * that we've left.\r\n   */\n\n\n  BrowserPollConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\r\n   * broken into chunks (since URLs have a small maximum length).\r\n   * @param {!Object} data The JSON data to transmit.\r\n   */\n\n\n  BrowserPollConnection.prototype.send = function (data) {\n    var dataStr = util.stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //first, lets get the base64-encoded data\n\n    var base64data = util.base64Encode(dataStr); //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE); //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n      this.curSegmentNum++;\n    }\n  };\n  /**\r\n   * This is how we notify the server that we're leaving.\r\n   * We aren't able to send requests with DHTML on a window close event, but we can\r\n   * trigger XHR requests in some browsers (everything but Opera basically).\r\n   * @param {!string} id\r\n   * @param {!string} pw\r\n   */\n\n\n  BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n    if (util.isNodeSdk()) {\n      return;\n    }\n\n    this.myDisconnFrame = document.createElement('iframe');\n    var urlParams = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n    document.body.appendChild(this.myDisconnFrame);\n  };\n  /**\r\n   * Used to track the bytes received by this client\r\n   * @param {*} args\r\n   * @private\r\n   */\n\n\n  BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    var bytesReceived = util.stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  };\n\n  return BrowserPollConnection;\n}();\n/*********************************************************************************************\r\n * A wrapper around an iframe that is used as a long-polling script holder.\r\n * @constructor\r\n *********************************************************************************************/\n\n\nvar FirebaseIFrameScriptHolder =\n/** @class */\nfunction () {\n  /**\r\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\r\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\r\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\r\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\r\n   */\n  function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n    this.onDisconnect = onDisconnect;\n    this.urlFn = urlFn; //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n    //problems in some browsers.\n\n    this.outstandingRequests = new Set(); //A queue of the pending segments waiting for transmission to the server.\n\n    this.pendingSegs = []; //A serial number. We use this for two things:\n    // 1) A way to ensure the browser doesn't cache responses to polls\n    // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n    //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n    //    JSONP code in the order it was added to the iframe.\n\n    this.currentSerial = Math.floor(Math.random() * 100000000); // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n    // incoming data from the server that we're waiting for).\n\n    this.sendNewPolls = true;\n\n    if (!util.isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB; //Create an iframe for us to add script tags to.\n\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_(); // Set the iframe's contents.\n\n      var script = ''; // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n\n      if (this.myIFrame.src && this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n        var currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n\n      var iframeContents = '<html><body>' + script + '</body></html>';\n\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n\n        if (e.stack) {\n          log(e.stack);\n        }\n\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n  /**\r\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\r\n   * actually use.\r\n   * @private\r\n   * @return {Element}\r\n   */\n\n\n  FirebaseIFrameScriptHolder.createIFrame_ = function () {\n    var iframe = document.createElement('iframe');\n    iframe.style.display = 'none'; // This is necessary in order to initialize the document inside the iframe\n\n    if (document.body) {\n      document.body.appendChild(iframe);\n\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        var a = iframe.contentWindow.document;\n\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        var domain = document.domain;\n        iframe.src = \"javascript:void((function(){document.open();document.domain='\" + domain + \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    } // Get the document of the iframe in a browser-specific way.\n\n\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if (iframe.document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = iframe.document; //others?\n    }\n\n    return iframe;\n  };\n  /**\r\n   * Cancel all outstanding queries and remove the frame.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.close = function () {\n    var _this = this; //Mark this iframe as dead, so no new requests are sent.\n\n\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(function () {\n        if (_this.myIFrame !== null) {\n          document.body.removeChild(_this.myIFrame);\n          _this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    } // Protect from being called recursively.\n\n\n    var onDisconnect = this.onDisconnect;\n\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  };\n  /**\r\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\r\n   * @param {!string} id - The ID of this connection\r\n   * @param {!string} pw - The password for this connection\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true; //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n\n    while (this.newRequest_()) {}\n  };\n  /**\r\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\r\n   * too many outstanding requests and we are still alive.\r\n   *\r\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\r\n   * needed.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {\n      //construct our url\n      this.currentSerial++;\n      var urlParams = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      var theURL = this.urlFn(urlParams); //Now add as much data as we can.\n\n      var curDataString = '';\n      var i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        var nextSeg = this.pendingSegs[0];\n\n        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {\n          //great, the segment will fit. Lets append it.\n          var theSeg = this.pendingSegs.shift();\n          curDataString = curDataString + '&' + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + '=' + theSeg.seg + '&' + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + '=' + theSeg.ts + '&' + FIREBASE_LONGPOLL_DATA_PARAM + i + '=' + theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\r\n   * Queue a packet for transmission to the server.\r\n   * @param segnum - A sequential id for this packet segment used for reassembly\r\n   * @param totalsegs - The total number of segments in this packet\r\n   * @param data - The data for this segment.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({\n      seg: segnum,\n      ts: totalsegs,\n      d: data\n    }); //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n\n    if (this.alive) {\n      this.newRequest_();\n    }\n  };\n  /**\r\n   * Add a script tag for a regular long-poll request.\r\n   * @param {!string} url - The URL of the script tag.\r\n   * @param {!number} serial - The serial number of the request.\r\n   * @private\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n    var _this = this; //remember that we sent this request.\n\n\n    this.outstandingRequests.add(serial);\n\n    var doNewRequest = function () {\n      _this.outstandingRequests.delete(serial);\n\n      _this.newRequest_();\n    }; // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n\n\n    var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n\n    var readyStateCB = function () {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout); // Trigger a new request so we can continue receiving data.\n\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  };\n  /**\r\n   * Add an arbitrary script tag to the iframe.\r\n   * @param {!string} url - The URL for the script tag source.\r\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\r\n   */\n\n\n  FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n    var _this = this;\n\n    if (util.isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(function () {\n        try {\n          // if we're already closed, don't add this poll\n          if (!_this.sendNewPolls) {\n            return;\n          }\n\n          var newScript_1 = _this.myIFrame.doc.createElement('script');\n\n          newScript_1.type = 'text/javascript';\n          newScript_1.async = true;\n          newScript_1.src = url; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          newScript_1.onload = newScript_1.onreadystatechange = function () {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            var rstate = newScript_1.readyState;\n\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript_1.onload = newScript_1.onreadystatechange = null;\n\n              if (newScript_1.parentNode) {\n                newScript_1.parentNode.removeChild(newScript_1);\n              }\n\n              loadCB();\n            }\n          };\n\n          newScript_1.onerror = function () {\n            log('Long-poll script failed to load: ' + url);\n            _this.sendNewPolls = false;\n\n            _this.close();\n          };\n\n          _this.myIFrame.doc.body.appendChild(newScript_1);\n        } catch (e) {// TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  };\n\n  return FirebaseIFrameScriptHolder;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** The semver (www.semver.org) version of the SDK. */\n\n\nvar SDK_VERSION = ''; // SDK_VERSION should be set before any database instance is created\n\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nvar WebSocketImpl = null;\n\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n/**\r\n * Create a new websocket connection with the given callbacks.\r\n * @constructor\r\n * @implements {Transport}\r\n */\n\n\nvar WebSocketConnection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {string} connId identifier for this transport\r\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n   */\n  function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n    this.connId = connId;\n    this.keepaliveTimer = null;\n    this.frames = null;\n    this.totalFrames = 0;\n    this.bytesSent = 0;\n    this.bytesReceived = 0;\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\n  }\n  /**\r\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\r\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\r\n   *                                         session\r\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\r\n   * @return {string} connection url\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\n    var urlParams = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (!util.isNodeSdk() && typeof location !== 'undefined' && location.href && location.href.indexOf(FORGE_DOMAIN) !== -1) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  };\n  /**\r\n   *\r\n   * @param onMessage Callback when messages arrive\r\n   * @param onDisconnect Callback with connection lost.\r\n   */\n\n\n  WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\n    var _this = this;\n\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n    this.log_('Websocket connecting to ' + this.connURL);\n    this.everConnected_ = false; // Assume failure until proven otherwise.\n\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (util.isNodeSdk()) {\n        var device = util.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node'; // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n\n        var options = {\n          headers: {\n            'User-Agent': \"Firebase/\" + PROTOCOL_VERSION + \"/\" + SDK_VERSION + \"/\" + process.platform + \"/\" + device\n          }\n        }; // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n\n        var env = process['env'];\n        var proxy = this.connURL.indexOf('wss://') === 0 ? env['HTTPS_PROXY'] || env['https_proxy'] : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = {\n            origin: proxy\n          };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        this.mySock = new WebSocketImpl(this.connURL);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      var error = e.message || e.data;\n\n      if (error) {\n        this.log_(error);\n      }\n\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = function () {\n      _this.log_('Websocket connected.');\n\n      _this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = function () {\n      _this.log_('Websocket connection was disconnected.');\n\n      _this.mySock = null;\n\n      _this.onClosed_();\n    };\n\n    this.mySock.onmessage = function (m) {\n      _this.handleIncomingFrame(m);\n    };\n\n    this.mySock.onerror = function (e) {\n      _this.log_('WebSocket error.  Closing connection.'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      var error = e.message || e.data;\n\n      if (error) {\n        _this.log_(error);\n      }\n\n      _this.onClosed_();\n    };\n  };\n  /**\r\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\r\n   */\n\n\n  WebSocketConnection.prototype.start = function () {};\n\n  WebSocketConnection.forceDisallow = function () {\n    WebSocketConnection.forceDisallow_ = true;\n  };\n\n  WebSocketConnection.isAvailable = function () {\n    var isOldAndroid = false;\n\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection.forceDisallow_;\n  };\n  /**\r\n   * Returns true if we previously failed to connect with this transport.\r\n   * @return {boolean}\r\n   */\n\n\n  WebSocketConnection.previouslyFailed = function () {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return PersistentStorage.isInMemoryStorage || PersistentStorage.get('previous_websocket_failure') === true;\n  };\n\n  WebSocketConnection.prototype.markConnectionHealthy = function () {\n    PersistentStorage.remove('previous_websocket_failure');\n  };\n\n  WebSocketConnection.prototype.appendFrame_ = function (data) {\n    this.frames.push(data);\n\n    if (this.frames.length === this.totalFrames) {\n      var fullMess = this.frames.join('');\n      this.frames = null;\n      var jsonMess = util.jsonEval(fullMess); //handle the message\n\n      this.onMessage(jsonMess);\n    }\n  };\n  /**\r\n   * @param {number} frameCount The number of frames we are expecting from the server\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  };\n  /**\r\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\r\n   * @param {!String} data\r\n   * @return {?String} Any remaining data to be process, or null if there is none\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.extractFrameCount_ = function (data) {\n    util.assert(this.frames === null, 'We already have a frame buffer'); // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n\n    if (data.length <= 6) {\n      var frameCount = Number(data);\n\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n\n    this.handleNewFrameCount_(1);\n    return data;\n  };\n  /**\r\n   * Process a websocket frame that has arrived from the server.\r\n   * @param mess The frame data\r\n   */\n\n\n  WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n\n    var data = mess['data'];\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      var remainingData = this.extractFrameCount_(data);\n\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  };\n  /**\r\n   * Send a message to the server\r\n   * @param {Object} data The JSON object to transmit\r\n   */\n\n\n  WebSocketConnection.prototype.send = function (data) {\n    this.resetKeepAlive();\n    var dataStr = util.stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length); //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE); //Send the length header\n\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    } //Send the actual data in segments.\n\n\n    for (var i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  };\n\n  WebSocketConnection.prototype.shutdown_ = function () {\n    this.isClosed_ = true;\n\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  };\n\n  WebSocketConnection.prototype.onClosed_ = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_(); // since this is an internal close, trigger the close listener\n\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  };\n  /**\r\n   * External-facing close handler.\r\n   * Close the websocket and kill the connection.\r\n   */\n\n\n  WebSocketConnection.prototype.close = function () {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  };\n  /**\r\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\r\n   * the last activity.\r\n   */\n\n\n  WebSocketConnection.prototype.resetKeepAlive = function () {\n    var _this = this;\n\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(function () {\n      //If there has been no websocket activity for a while, send a no-op\n      if (_this.mySock) {\n        _this.sendString_('0');\n      }\n\n      _this.resetKeepAlive(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n  };\n  /**\r\n   * Send a string over the websocket.\r\n   *\r\n   * @param {string} str String to send.\r\n   * @private\r\n   */\n\n\n  WebSocketConnection.prototype.sendString_ = function (str) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  };\n  /**\r\n   * Number of response before we consider the connection \"healthy.\"\r\n   * @type {number}\r\n   */\n\n\n  WebSocketConnection.responsesRequiredToBeHealthy = 2;\n  /**\r\n   * Time to wait for the connection te become healthy before giving up.\r\n   * @type {number}\r\n   */\n\n  WebSocketConnection.healthyTimeout = 30000;\n  return WebSocketConnection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\r\n * lifecycle.\r\n *\r\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\r\n * they are available.\r\n * @constructor\r\n */\n\n\nvar TransportManager =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\r\n   */\n  function TransportManager(repoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\n    /**\r\n     * @const\r\n     * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\r\n     */\n    get: function () {\n      return [BrowserPollConnection, WebSocketConnection];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * @param {!RepoInfo} repoInfo\r\n   * @private\r\n   */\n\n  TransportManager.prototype.initTransports_ = function (repoInfo) {\n    var e_1, _a;\n\n    var isWebSocketsAvailable = WebSocketConnection && WebSocketConnection['isAvailable']();\n    var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      var transports = this.transports_ = [];\n\n      try {\n        for (var _b = tslib.__values(TransportManager.ALL_TRANSPORTS), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var transport = _c.value;\n\n          if (transport && transport['isAvailable']()) {\n            transports.push(transport);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\r\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\r\n   * initial transport to use\r\n   */\n\n\n  TransportManager.prototype.initialTransport = function () {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  };\n  /**\r\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\r\n   * transport, or null\r\n   */\n\n\n  TransportManager.prototype.upgradeTransport = function () {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  };\n\n  return TransportManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Abort upgrade attempt if it takes longer than 60s.\n\n\nvar UPGRADE_TIMEOUT = 60000; // For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\n\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000; // If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\n\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nvar MESSAGE_TYPE = 't';\nvar MESSAGE_DATA = 'd';\nvar CONTROL_SHUTDOWN = 's';\nvar CONTROL_RESET = 'r';\nvar CONTROL_ERROR = 'e';\nvar CONTROL_PONG = 'o';\nvar SWITCH_ACK = 'a';\nvar END_TRANSMISSION = 'n';\nvar PING = 'p';\nvar SERVER_HELLO = 'h';\n/**\r\n * Creates a new real-time connection to the server using whichever method works\r\n * best in the current browser.\r\n *\r\n * @constructor\r\n */\n\nvar Connection =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!string} id - an id for this connection\r\n   * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\r\n   * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\r\n   * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\r\n   * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\r\n   * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\r\n   * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\r\n   */\n  function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n    this.id = id;\n    this.repoInfo_ = repoInfo_;\n    this.onMessage_ = onMessage_;\n    this.onReady_ = onReady_;\n    this.onDisconnect_ = onDisconnect_;\n    this.onKill_ = onKill_;\n    this.lastSessionId = lastSessionId;\n    this.connectionCount = 0;\n    this.pendingDataMessages = [];\n    this.state_ = 0\n    /* CONNECTING */\n    ;\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n  /**\r\n   * Starts a connection attempt\r\n   * @private\r\n   */\n\n\n  Connection.prototype.start_ = function () {\n    var _this = this;\n\n    var conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessageReceived = this.connReceiver_(this.conn_);\n    var onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n    /*\r\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\r\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\r\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\r\n     * still have the context of your originating frame.\r\n     */\n\n    setTimeout(function () {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n    var healthyTimeoutMS = conn['healthyTimeout'] || 0;\n\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(function () {\n        _this.healthyTimeout_ = null;\n\n        if (!_this.isHealthy_) {\n          if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');\n\n            _this.isHealthy_ = true;\n\n            _this.conn_.markConnectionHealthy();\n          } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n            _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.'); // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n\n          } else {\n            _this.log_('Closing unhealthy connection after timeout.');\n\n            _this.close();\n          }\n        } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      }, Math.floor(healthyTimeoutMS));\n    }\n  };\n  /**\r\n   * @return {!string}\r\n   * @private\r\n   */\n\n\n  Connection.prototype.nextTransportId_ = function () {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  };\n\n  Connection.prototype.disconnReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (everConnected) {\n      if (conn === _this.conn_) {\n        _this.onConnectionLost_(everConnected);\n      } else if (conn === _this.secondaryConn_) {\n        _this.log_('Secondary connection lost.');\n\n        _this.onSecondaryConnectionLost_();\n      } else {\n        _this.log_('closing an old connection');\n      }\n    };\n  };\n\n  Connection.prototype.connReceiver_ = function (conn) {\n    var _this = this;\n\n    return function (message) {\n      if (_this.state_ !== 2\n      /* DISCONNECTED */\n      ) {\n        if (conn === _this.rx_) {\n          _this.onPrimaryMessageReceived_(message);\n        } else if (conn === _this.secondaryConn_) {\n          _this.onSecondaryMessageReceived_(message);\n        } else {\n          _this.log_('message on old connection');\n        }\n      }\n    };\n  };\n  /**\r\n   *\r\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\r\n   */\n\n\n  Connection.prototype.sendRequest = function (dataMsg) {\n    // wrap in a data message envelope and send it on\n    var msg = {\n      t: 'd',\n      d: dataMsg\n    };\n    this.sendData_(msg);\n  };\n\n  Connection.prototype.tryCleanupConnection = function () {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null; // the server will shutdown the old connection\n    }\n  };\n\n  Connection.prototype.onSecondaryControl_ = function (controlData) {\n    if (MESSAGE_TYPE in controlData) {\n      var cmd = controlData[MESSAGE_TYPE];\n\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close(); // If we were already using this connection for something, than we need to fully close\n\n        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  };\n\n  Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onSecondaryControl_(data);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  };\n\n  Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n\n  Connection.prototype.proceedWithUpgrade_ = function () {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start(); // send ack\n\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({\n      t: 'c',\n      d: {\n        t: SWITCH_ACK,\n        d: {}\n      }\n    }); // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n\n    this.log_('Ending transmission on primary');\n    this.conn_.send({\n      t: 'c',\n      d: {\n        t: END_TRANSMISSION,\n        d: {}\n      }\n    });\n    this.tx_ = this.secondaryConn_;\n    this.tryCleanupConnection();\n  };\n\n  Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    var layer = requireKey('t', parsedData);\n    var data = requireKey('d', parsedData);\n\n    if (layer === 'c') {\n      this.onControl_(data);\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  };\n\n  Connection.prototype.onDataMessage_ = function (message) {\n    this.onPrimaryResponse_(); // We don't do anything with data messages, just kick them up a level\n\n    this.onMessage_(message);\n  };\n\n  Connection.prototype.onPrimaryResponse_ = function () {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  };\n\n  Connection.prototype.onControl_ = function (controlData) {\n    var cmd = requireKey(MESSAGE_TYPE, controlData);\n\n    if (MESSAGE_DATA in controlData) {\n      var payload = controlData[MESSAGE_DATA];\n\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(payload);\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n\n        for (var i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @param {Object} handshake The handshake data returned from the server\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onHandshake_ = function (handshake) {\n    var timestamp = handshake.ts;\n    var version = handshake.v;\n    var host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host); // if we've already closed the connection, then don't bother trying to progress further\n\n    if (this.state_ === 0\n    /* CONNECTING */\n    ) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      } // TODO: do we want to upgrade? when? maybe a delay?\n\n\n      this.tryStartUpgrade_();\n    }\n  };\n\n  Connection.prototype.tryStartUpgrade_ = function () {\n    var conn = this.transportManager_.upgradeTransport();\n\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  };\n\n  Connection.prototype.startUpgrade_ = function (conn) {\n    var _this = this;\n\n    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId); // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n\n    this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n    var onMessage = this.connReceiver_(this.secondaryConn_);\n    var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect); // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n\n    setTimeoutNonBlocking(function () {\n      if (_this.secondaryConn_) {\n        _this.log_('Timed out trying to upgrade.');\n\n        _this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  };\n\n  Connection.prototype.onReset_ = function (host) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host); // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n\n    if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  };\n\n  Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\n    var _this = this;\n\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = 1\n    /* CONNECTED */\n    ;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    } // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n\n\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(function () {\n        _this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  };\n\n  Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.log_('sending ping on primary.');\n      this.sendData_({\n        t: 'c',\n        d: {\n          t: PING,\n          d: {}\n        }\n      });\n    }\n  };\n\n  Connection.prototype.onSecondaryConnectionLost_ = function () {\n    var conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  };\n  /**\r\n   *\r\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\r\n   * we should flush the host cache\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onConnectionLost_ = function (everConnected) {\n    this.conn_ = null; // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n\n    if (!everConnected && this.state_ === 0\n    /* CONNECTING */\n    ) {\n      this.log_('Realtime connection failed.'); // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host); // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === 1\n    /* CONNECTED */\n    ) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  };\n  /**\r\n   *\r\n   * @param {string} reason\r\n   * @private\r\n   */\n\n\n  Connection.prototype.onConnectionShutdown_ = function (reason) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    } // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n\n\n    this.onDisconnect_ = null;\n    this.close();\n  };\n\n  Connection.prototype.sendData_ = function (data) {\n    if (this.state_ !== 1\n    /* CONNECTED */\n    ) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  };\n  /**\r\n   * Cleans up this connection, calling the appropriate callbacks\r\n   */\n\n\n  Connection.prototype.close = function () {\n    if (this.state_ !== 2\n    /* DISCONNECTED */\n    ) {\n      this.log_('Closing realtime connection.');\n      this.state_ = 2\n      /* DISCONNECTED */\n      ;\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  };\n  /**\r\n   *\r\n   * @private\r\n   */\n\n\n  Connection.prototype.closeConnections_ = function () {\n    this.log_('Shutting down all connections');\n\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  };\n\n  return Connection;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Interface defining the set of actions that can be performed against the Firebase server\r\n * (basically corresponds to our wire protocol).\r\n *\r\n * @interface\r\n */\n\n\nvar ServerActions =\n/** @class */\nfunction () {\n  function ServerActions() {}\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   * @param {string=} hash\r\n   */\n\n\n  ServerActions.prototype.put = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, ?string)} onComplete\r\n   * @param {string=} hash\r\n   */\n\n\n  ServerActions.prototype.merge = function (pathString, data, onComplete, hash) {};\n  /**\r\n   * Refreshes the auth token for the current connection.\r\n   * @param {string} token The authentication token\r\n   */\n\n\n  ServerActions.prototype.refreshAuthToken = function (token) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {*} data\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) {};\n  /**\r\n   * @param {string} pathString\r\n   * @param {function(string, string)=} onComplete\r\n   */\n\n\n  ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) {};\n  /**\r\n   * @param {Object.<string, *>} stats\r\n   */\n\n\n  ServerActions.prototype.reportStats = function (stats) {};\n\n  return ServerActions;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RECONNECT_MIN_DELAY = 1000;\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\n\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\n\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\n\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill'; // If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\n\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\n/**\r\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\r\n *\r\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\r\n * in quotes to make sure the closure compiler does not minify them.\r\n */\n\nvar PersistentConnection =\n/** @class */\nfunction (_super) {\n  tslib.__extends(PersistentConnection, _super);\n  /**\r\n   * @implements {ServerActions}\r\n   * @param repoInfo_ Data about the namespace we are connecting to\r\n   * @param onDataUpdate_ A callback for new data from the server\r\n   */\n\n\n  function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.onConnectStatus_ = onConnectStatus_;\n    _this.onServerInfoUpdate_ = onServerInfoUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    _this.authOverride_ = authOverride_; // Used for diagnostic logging.\n\n    _this.id = PersistentConnection.nextPersistentConnectionId_++;\n    _this.log_ = logWrapper('p:' + _this.id + ':');\n    _this.interruptReasons_ = {};\n    /** Map<path, Map<queryId, ListenSpec>> */\n\n    _this.listens = new Map();\n    _this.outstandingPuts_ = [];\n    _this.outstandingPutCount_ = 0;\n    _this.onDisconnectRequestQueue_ = [];\n    _this.connected_ = false;\n    _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n    _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n    _this.securityDebugCallback_ = null;\n    _this.lastSessionId = null;\n    _this.establishConnectionTimer_ = null;\n    _this.visible_ = false; // Before we get connected, we keep a queue of pending messages to send.\n\n    _this.requestCBHash_ = {};\n    _this.requestNumber_ = 0;\n    _this.realtime_ = null;\n    _this.authToken_ = null;\n    _this.forceTokenRefresh_ = false;\n    _this.invalidAuthTokenCount_ = 0;\n    _this.firstConnection_ = true;\n    _this.lastConnectionAttemptTime_ = null;\n    _this.lastConnectionEstablishedTime_ = null;\n\n    if (authOverride_ && !util.isNodeSdk()) {\n      throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n    }\n\n    _this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\n    }\n\n    return _this;\n  }\n\n  PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\n    var curReqNum = ++this.requestNumber_;\n    var msg = {\n      r: curReqNum,\n      a: action,\n      b: body\n    };\n    this.log_(util.stringify(msg));\n    util.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n    this.realtime_.sendRequest(msg);\n\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var queryId = query.queryIdentifier();\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n\n    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\n    util.assert(!this.listens.get(pathString).has(queryId), 'listen() called twice for same path/queryId.');\n    var listenSpec = {\n      onComplete: onComplete,\n      hashFn: currentHashFn,\n      query: query,\n      tag: tag\n    };\n    this.listens.get(pathString).set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  };\n\n  PersistentConnection.prototype.sendListen_ = function (listenSpec) {\n    var _this = this;\n\n    var query = listenSpec.query;\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'q'; // Only bother to send query if it's non-default.\n\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[\n    /*hash*/\n    'h'] = listenSpec.hashFn();\n    this.sendRequest(action, req, function (message) {\n      var payload = message[\n      /*data*/\n      'd'];\n      var status = message[\n      /*status*/\n      's']; // print warnings in any case...\n\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId); // only trigger actions if the listen hasn't been removed and readded\n\n\n      if (currentListenSpec === listenSpec) {\n        _this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          _this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  };\n\n  PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\n    if (payload && typeof payload === 'object' && util.contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      var warnings = util.safeGet(payload, 'w');\n\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        var indexSpec = '\".indexOn\": \"' + query.getQueryParams().getIndex().toString() + '\"';\n        var indexPath = query.path.toString();\n        warn(\"Using an unspecified index. Your data will be downloaded and \" + (\"filtered on the client. Consider adding \" + indexSpec + \" at \") + (indexPath + \" to your security rules for better performance.\"));\n      }\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.refreshAuthToken = function (token) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, function () {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  };\n\n  PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    var isFirebaseSecret = credential && credential.length === 40;\n\n    if (isFirebaseSecret || util.isAdmin(credential)) {\n      this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  };\n  /**\r\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\r\n   * a auth revoked (the connection is closed).\r\n   */\n\n\n  PersistentConnection.prototype.tryAuth = function () {\n    var _this = this;\n\n    if (this.connected_ && this.authToken_) {\n      var token_1 = this.authToken_;\n      var authMethod = util.isValidFormat(token_1) ? 'auth' : 'gauth';\n      var requestData = {\n        cred: token_1\n      };\n\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n\n      this.sendRequest(authMethod, requestData, function (res) {\n        var status = res[\n        /*status*/\n        's'];\n        var data = res[\n        /*data*/\n        'd'] || 'error';\n\n        if (_this.authToken_ === token_1) {\n          if (status === 'ok') {\n            _this.invalidAuthTokenCount_ = 0;\n          } else {\n            // Triggers reconnect and force refresh for auth token\n            _this.onAuthRevoked_(status, data);\n          }\n        }\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.unlisten = function (query, tag) {\n    var pathString = query.path.toString();\n    var queryId = query.queryIdentifier();\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n    util.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\n    var listen = this.removeListen_(pathString, queryId);\n\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  };\n\n  PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n    var req = {\n      /*path*/\n      p: pathString\n    };\n    var action = 'n'; // Only bother sending queryId if it's non-default.\n\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'o',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'om',\n        data: data,\n        onComplete: onComplete\n      });\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString: pathString,\n        action: 'oc',\n        data: null,\n        onComplete: onComplete\n      });\n    }\n  };\n\n  PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, function (response) {\n      if (onComplete) {\n        setTimeout(function () {\n          onComplete(response[\n          /*status*/\n          's'], response[\n          /* data */\n          'd']);\n        }, Math.floor(0));\n      }\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  };\n\n  PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\n    var request = {\n      /*path*/\n      p: pathString,\n\n      /*data*/\n      d: data\n    };\n\n    if (hash !== undefined) {\n      request[\n      /*hash*/\n      'h'] = hash;\n    } // TODO: Only keep track of the most recent put for a given path?\n\n\n    this.outstandingPuts_.push({\n      action: action,\n      request: request,\n      onComplete: onComplete\n    });\n    this.outstandingPutCount_++;\n    var index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  };\n\n  PersistentConnection.prototype.sendPut_ = function (index) {\n    var _this = this;\n\n    var action = this.outstandingPuts_[index].action;\n    var request = this.outstandingPuts_[index].request;\n    var onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n    this.sendRequest(action, request, function (message) {\n      _this.log_(action + ' response', message);\n\n      delete _this.outstandingPuts_[index];\n      _this.outstandingPutCount_--; // Clean up array occasionally.\n\n      if (_this.outstandingPutCount_ === 0) {\n        _this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(message[\n        /*status*/\n        's'], message[\n        /* data */\n        'd']);\n      }\n    });\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  PersistentConnection.prototype.reportStats = function (stats) {\n    var _this = this; // If we're not connected, we just drop the stats.\n\n\n    if (this.connected_) {\n      var request = {\n        /*counters*/\n        c: stats\n      };\n      this.log_('reportStats', request);\n      this.sendRequest(\n      /*stats*/\n      's', request, function (result) {\n        var status = result[\n        /*status*/\n        's'];\n\n        if (status !== 'ok') {\n          var errorReason = result[\n          /* data */\n          'd'];\n\n          _this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  };\n\n  PersistentConnection.prototype.onDataMessage_ = function (message) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + util.stringify(message));\n      var reqNum = message['r'];\n      var onResponse = this.requestCBHash_[reqNum];\n\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[\n        /*body*/\n        'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'], message['b']);\n    }\n  };\n\n  PersistentConnection.prototype.onDataPush_ = function (action, body) {\n    this.log_('handleServerMessage', action, body);\n\n    if (action === 'd') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge*/\n      false, body['t']);\n    } else if (action === 'm') {\n      this.onDataUpdate_(body[\n      /*path*/\n      'p'], body[\n      /*data*/\n      'd'],\n      /*isMerge=*/\n      true, body['t']);\n    } else if (action === 'c') {\n      this.onListenRevoked_(body[\n      /*path*/\n      'p'], body[\n      /*query*/\n      'q']);\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(body[\n      /*status code*/\n      's'], body[\n      /* explanation */\n      'd']);\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error('Unrecognized action received from server: ' + util.stringify(action) + '\\nAre you using the latest client?');\n    }\n  };\n\n  PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  };\n\n  PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\n    var _this = this;\n\n    util.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    } // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n\n    this.establishConnectionTimer_ = setTimeout(function () {\n      _this.establishConnectionTimer_ = null;\n\n      _this.establishConnection_(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    }, Math.floor(timeout));\n  };\n\n  PersistentConnection.prototype.onVisible_ = function (visible) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n\n    this.visible_ = visible;\n  };\n\n  PersistentConnection.prototype.onOnline_ = function (online) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null; // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n\n    this.cancelSentTransactions_(); // Clear out the pending requests.\n\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n      var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n      reconnectDelay = Math.random() * reconnectDelay;\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay); // Adjust reconnect delay for next time.\n\n      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n    }\n\n    this.onConnectStatus_(false);\n  };\n\n  PersistentConnection.prototype.establishConnection_ = function () {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      var onDataMessage_1 = this.onDataMessage_.bind(this);\n      var onReady_1 = this.onReady_.bind(this);\n      var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\n      var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      var self_1 = this;\n      var lastSessionId_1 = this.lastSessionId;\n      var canceled_1 = false;\n      var connection_1 = null;\n\n      var closeFn_1 = function () {\n        if (connection_1) {\n          connection_1.close();\n        } else {\n          canceled_1 = true;\n          onDisconnect_1();\n        }\n      };\n\n      var sendRequestFn = function (msg) {\n        util.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\n        connection_1.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn_1,\n        sendRequest: sendRequestFn\n      };\n      var forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false; // First fetch auth token, and establish connection after fetching the token was successful\n\n      this.authTokenProvider_.getToken(forceRefresh).then(function (result) {\n        if (!canceled_1) {\n          log('getToken() completed. Creating connection.');\n          self_1.authToken_ = result && result.accessToken;\n          connection_1 = new Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1,\n          /* onKill= */\n          function (reason) {\n            warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\n            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          }, lastSessionId_1);\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      }).then(null, function (error) {\n        self_1.log_('Failed to get token: ' + error);\n\n        if (!canceled_1) {\n          if (util.CONSTANTS.NODE_ADMIN) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n\n          closeFn_1();\n        }\n      });\n    }\n  };\n\n  PersistentConnection.prototype.interrupt = function (reason) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.resume = function (reason) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n\n    if (util.isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  };\n\n  PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\n    var delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({\n      serverTimeOffset: delta\n    });\n  };\n\n  PersistentConnection.prototype.cancelSentTransactions_ = function () {\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      var put = this.outstandingPuts_[i];\n\n      if (put &&\n      /*hash*/\n      'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    } // Clean up array occasionally.\n\n\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  };\n\n  PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    var queryId;\n\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(function (q) {\n        return ObjectToUniqueKey(q);\n      }).join('$');\n    }\n\n    var listen = this.removeListen_(pathString, queryId);\n\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  };\n\n  PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\n    var normalizedPathString = new Path(pathString).toString(); // normalize path.\n\n    var listen;\n\n    if (this.listens.has(normalizedPathString)) {\n      var map = this.listens.get(normalizedPathString);\n      listen = map.get(queryId);\n      map.delete(queryId);\n\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n\n    return listen;\n  };\n\n  PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS; // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  };\n\n  PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n      }\n    }\n  };\n\n  PersistentConnection.prototype.restoreState_ = function () {\n    var e_1, _a, e_2, _b; //Re-authenticate ourselves if we have a credential stored.\n\n\n    this.tryAuth();\n\n    try {\n      // Puts depend on having received the corresponding data update from the server before they complete, so we must\n      // make sure to send listens before puts.\n      for (var _c = tslib.__values(this.listens.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var queries = _d.value;\n\n        try {\n          for (var _e = (e_2 = void 0, tslib.__values(queries.values())), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var listenSpec = _f.value;\n            this.sendListen_(listenSpec);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    for (var i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      var request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n    }\n  };\n  /**\r\n   * Sends client stats for first connection\r\n   */\n\n\n  PersistentConnection.prototype.sendConnectStats_ = function () {\n    var stats = {};\n    var clientName = 'js';\n\n    if (util.CONSTANTS.NODE_ADMIN) {\n      clientName = 'admin_node';\n    } else if (util.CONSTANTS.NODE_CLIENT) {\n      clientName = 'node';\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (util.isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (util.isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n\n    this.reportStats(stats);\n  };\n\n  PersistentConnection.prototype.shouldReconnect_ = function () {\n    var online = OnlineMonitor.getInstance().currentlyOnline();\n    return util.isEmpty(this.interruptReasons_) && online;\n  };\n\n  PersistentConnection.nextPersistentConnectionId_ = 0;\n  /**\r\n   * Counter for number of connections created. Mainly used for tagging in the logs\r\n   */\n\n  PersistentConnection.nextConnectionId_ = 0;\n  return PersistentConnection;\n}(ServerActions);\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An implementation of ServerActions that communicates with the server via REST requests.\r\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\r\n * persistent connection (using WebSockets or long-polling)\r\n */\n\n\nvar ReadonlyRestClient =\n/** @class */\nfunction (_super) {\n  tslib.__extends(ReadonlyRestClient, _super);\n  /**\r\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\r\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\r\n   * @param {AuthTokenProvider} authTokenProvider_\r\n   * @implements {ServerActions}\r\n   */\n\n\n  function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\n    var _this = _super.call(this) || this;\n\n    _this.repoInfo_ = repoInfo_;\n    _this.onDataUpdate_ = onDataUpdate_;\n    _this.authTokenProvider_ = authTokenProvider_;\n    /** @private {function(...[*])} */\n\n    _this.log_ = logWrapper('p:rest:');\n    /**\r\n     * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\r\n     * that's been removed. :-/\r\n     *\r\n     * @private {!Object.<string, !Object>}\r\n     */\n\n    _this.listens_ = {};\n    return _this;\n  }\n\n  ReadonlyRestClient.prototype.reportStats = function (stats) {\n    throw new Error('Method not implemented.');\n  };\n  /**\r\n   * @param {!Query} query\r\n   * @param {?number=} tag\r\n   * @return {string}\r\n   * @private\r\n   */\n\n\n  ReadonlyRestClient.getListenId_ = function (query, tag) {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      util.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\n      return query.path.toString();\n    }\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n    var _this = this;\n\n    var pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier()); // Mark this listener so we can tell if it's removed.\n\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    var thisListen = {};\n    this.listens_[listenId] = thisListen;\n    var queryStringParameters = query.getQueryParams().toRestQueryStringParameters();\n    this.restRequest_(pathString + '.json', queryStringParameters, function (error, result) {\n      var data = result;\n\n      if (error === 404) {\n        data = null;\n        error = null;\n      }\n\n      if (error === null) {\n        _this.onDataUpdate_(pathString, data,\n        /*isMerge=*/\n        false, tag);\n      }\n\n      if (util.safeGet(_this.listens_, listenId) === thisListen) {\n        var status_1;\n\n        if (!error) {\n          status_1 = 'ok';\n        } else if (error === 401) {\n          status_1 = 'permission_denied';\n        } else {\n          status_1 = 'rest_error:' + error;\n        }\n\n        onComplete(status_1, null);\n      }\n    });\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.unlisten = function (query, tag) {\n    var listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  };\n  /** @inheritDoc */\n\n\n  ReadonlyRestClient.prototype.refreshAuthToken = function (token) {// no-op since we just always call getToken.\n  };\n  /**\r\n   * Performs a REST request to the given path, with the provided query string parameters,\r\n   * and any auth credentials we have.\r\n   *\r\n   * @param {!string} pathString\r\n   * @param {!Object.<string, *>} queryStringParameters\r\n   * @param {?function(?number, *=)} callback\r\n   * @private\r\n   */\n\n\n  ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\n    var _this = this;\n\n    if (queryStringParameters === void 0) {\n      queryStringParameters = {};\n    }\n\n    queryStringParameters['format'] = 'export';\n    this.authTokenProvider_.getToken(\n    /*forceRefresh=*/\n    false).then(function (authTokenData) {\n      var authToken = authTokenData && authTokenData.accessToken;\n\n      if (authToken) {\n        queryStringParameters['auth'] = authToken;\n      }\n\n      var url = (_this.repoInfo_.secure ? 'https://' : 'http://') + _this.repoInfo_.host + pathString + '?' + 'ns=' + _this.repoInfo_.namespace + util.querystring(queryStringParameters);\n\n      _this.log_('Sending REST request for ' + url);\n\n      var xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = function () {\n        if (callback && xhr.readyState === 4) {\n          _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n\n          var res = null;\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = util.jsonEval(xhr.responseText);\n            } catch (e) {\n              warn('Failed to parse JSON response for ' + url + ': ' + xhr.responseText);\n            }\n\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn('Got unsuccessful REST response for ' + url + ' Status: ' + xhr.status);\n            }\n\n            callback(xhr.status);\n          }\n\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url,\n      /*asynchronous=*/\n      true);\n      xhr.send();\n    });\n  };\n\n  return ReadonlyRestClient;\n}(ServerActions);\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar INTERRUPT_REASON = 'repo_interrupt';\n/**\r\n * A connection to a single data repository.\r\n */\n\nvar Repo =\n/** @class */\nfunction () {\n  function Repo(repoInfo_, forceRestClient, app, authProvider) {\n    var _this = this;\n\n    this.repoInfo_ = repoInfo_;\n    this.app = app;\n    this.dataUpdateCount = 0;\n    this.statsListener_ = null;\n    this.eventQueue_ = new EventQueue();\n    this.nextWriteId_ = 1;\n    this.interceptServerDataCallback_ = null;\n    /** A list of data pieces and paths to be set when this client disconnects. */\n\n    this.onDisconnect_ = new SparseSnapshotTree(); // TODO: This should be @private but it's used by test_access.js and internal.js\n\n    this.persistentConnection_ = null;\n    var authTokenProvider = new AuthTokenProvider(app, authProvider);\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider); // Minor hack: Fire onConnect immediately, since there's no actual connection.\n\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      var authOverride = app.options['databaseAuthVariableOverride']; // Validate authOverride\n\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n        }\n\n        try {\n          util.stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(function (token) {\n      _this.server_.refreshAuthToken(token);\n    }); // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n\n    this.statsReporter_ = StatsManager.getOrCreateReporter(repoInfo_, function () {\n      return new StatsReporter(_this.stats_, _this.server_);\n    });\n    this.transactionsInit_(); // Used for .info.\n\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: function (query, tag, currentHashFn, onComplete) {\n        var infoEvents = [];\n\n        var node = _this.infoData_.getNode(query.path); // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n\n\n        if (!node.isEmpty()) {\n          infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\n          setTimeout(function () {\n            onComplete('ok');\n          }, 0);\n        }\n\n        return infoEvents;\n      },\n      stopListening: function () {}\n    });\n    this.updateInfo_('connected', false);\n    this.serverSyncTree_ = new SyncTree({\n      startListening: function (query, tag, currentHashFn, onComplete) {\n        _this.server_.listen(query, currentHashFn, tag, function (status, data) {\n          var events = onComplete(status, data);\n\n          _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        }); // No synchronous events for network-backed sync trees\n\n\n        return [];\n      },\n      stopListening: function (query, tag) {\n        _this.server_.unlisten(query, tag);\n      }\n    });\n  }\n  /**\r\n   * @return The URL corresponding to the root of this Firebase.\r\n   */\n\n\n  Repo.prototype.toString = function () {\n    return (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host;\n  };\n  /**\r\n   * @return The namespace represented by the repo.\r\n   */\n\n\n  Repo.prototype.name = function () {\n    return this.repoInfo_.namespace;\n  };\n  /**\r\n   * @return The time in milliseconds, taking the server offset into account if we have one.\r\n   */\n\n\n  Repo.prototype.serverTime = function () {\n    var offsetNode = this.infoData_.getNode(new Path('.info/serverTimeOffset'));\n    var offset = offsetNode.val() || 0;\n    return new Date().getTime() + offset;\n  };\n  /**\r\n   * Generate ServerValues using some variables from the repo object.\r\n   */\n\n\n  Repo.prototype.generateServerValues = function () {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  };\n  /**\r\n   * Called by realtime when we get new messages from the server.\r\n   */\n\n\n  Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\n    // For testing.\n    this.dataUpdateCount++;\n    var path = new Path(pathString);\n    data = this.interceptServerDataCallback_ ? this.interceptServerDataCallback_(pathString, data) : data;\n    var events = [];\n\n    if (tag) {\n      if (isMerge) {\n        var taggedChildren = util.map(data, function (raw) {\n          return nodeFromJSON$1(raw);\n        });\n        events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\n      } else {\n        var taggedSnap = nodeFromJSON$1(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\n      }\n    } else if (isMerge) {\n      var changedChildren = util.map(data, function (raw) {\n        return nodeFromJSON$1(raw);\n      });\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      var snap = nodeFromJSON$1(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n\n    var affectedPath = path;\n\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }; // TODO: This should be @private but it's used by test_access.js and internal.js\n\n\n  Repo.prototype.interceptServerData_ = function (callback) {\n    this.interceptServerDataCallback_ = callback;\n  };\n\n  Repo.prototype.onConnectStatus_ = function (connectStatus) {\n    this.updateInfo_('connected', connectStatus);\n\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  };\n\n  Repo.prototype.onServerInfoUpdate_ = function (updates) {\n    var _this = this;\n\n    each(updates, function (key, value) {\n      _this.updateInfo_(key, value);\n    });\n  };\n\n  Repo.prototype.updateInfo_ = function (pathString, value) {\n    var path = new Path('/.info/' + pathString);\n    var newNode = nodeFromJSON$1(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  };\n\n  Repo.prototype.getNextWriteId_ = function () {\n    return this.nextWriteId_++;\n  };\n\n  Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\n    var _this = this;\n\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    }); // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, newPriority);\n    var existing = this.serverSyncTree_.calcCompleteEventCache(path);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);\n    var writeId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(path.toString(), newNodeUnresolved.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      var success = status === 'ok';\n\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\n\n      _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n    var affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath); // We queued the events above, so just flush the queue here\n\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  };\n\n  Repo.prototype.update = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n\n    this.log_('update', {\n      path: path.toString(),\n      value: childrenToMerge\n    }); // Start with our existing data and merge each child into it.\n\n    var empty = true;\n    var serverValues = this.generateServerValues();\n    var changedChildren = {};\n    each(childrenToMerge, function (changedKey, changedValue) {\n      empty = false;\n      changedChildren[changedKey] = resolveDeferredValueTree(path.child(changedKey), nodeFromJSON$1(changedValue), _this.serverSyncTree_, serverValues);\n    });\n\n    if (!empty) {\n      var writeId_1 = this.getNextWriteId_();\n      var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\n        var success = status === 'ok';\n\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\n\n        var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\n\n        _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n\n        _this.callOnCompleteCallback(onComplete, status, errorReason);\n      });\n      each(childrenToMerge, function (changedPath) {\n        var affectedPath = _this.abortTransactions_(path.child(changedPath));\n\n        _this.rerunTransactions_(affectedPath);\n      }); // We queued the events above, so just flush the queue here\n\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  };\n  /**\r\n   * Applies all of the changes stored up in the onDisconnect_ tree.\r\n   */\n\n\n  Repo.prototype.runOnDisconnectEvents_ = function () {\n    var _this = this;\n\n    this.log_('onDisconnectEvents');\n    var serverValues = this.generateServerValues();\n    var resolvedOnDisconnectTree = new SparseSnapshotTree();\n    this.onDisconnect_.forEachTree(Path.Empty, function (path, node) {\n      var resolved = resolveDeferredValueTree(path, node, _this.serverSyncTree_, serverValues);\n      resolvedOnDisconnectTree.remember(path, resolved);\n    });\n    var events = [];\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, function (path, snap) {\n      events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\n\n      var affectedPath = _this.abortTransactions_(path);\n\n      _this.rerunTransactions_(affectedPath);\n    });\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  };\n\n  Repo.prototype.onDisconnectCancel = function (path, onComplete) {\n    var _this = this;\n\n    this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.forget(path);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\n    var _this = this;\n\n    var newNode = nodeFromJSON$1(value);\n    this.server_.onDisconnectPut(path.toString(), newNode.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\n    var _this = this;\n\n    var newNode = nodeFromJSON$1(value, priority);\n    this.server_.onDisconnectPut(path.toString(), newNode.val(\n    /*export=*/\n    true), function (status, errorReason) {\n      if (status === 'ok') {\n        _this.onDisconnect_.remember(path, newNode);\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\n    var _this = this;\n\n    if (util.isEmpty(childrenToMerge)) {\n      log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\n      if (status === 'ok') {\n        each(childrenToMerge, function (childName, childNode) {\n          var newChildNode = nodeFromJSON$1(childNode);\n\n          _this.onDisconnect_.remember(path.child(childName), newChildNode);\n        });\n      }\n\n      _this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  };\n\n  Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\n    var events;\n\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\n    }\n\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n\n  Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    var events;\n\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\n    }\n\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  };\n\n  Repo.prototype.interrupt = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  };\n\n  Repo.prototype.resume = function () {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  };\n\n  Repo.prototype.stats = function (showDelta) {\n    if (showDelta === void 0) {\n      showDelta = false;\n    }\n\n    if (typeof console === 'undefined') {\n      return;\n    }\n\n    var stats;\n\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\n      return Math.max(currentValue.length, previousValue);\n    }, 0);\n    each(stats, function (stat, value) {\n      var paddedStat = stat; // pad stat names to be the same length (plus 2 extra spaces).\n\n      for (var i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n\n      console.log(paddedStat + value);\n    });\n  };\n\n  Repo.prototype.statsIncrementCounter = function (metric) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  };\n\n  Repo.prototype.log_ = function () {\n    var varArgs = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      varArgs[_i] = arguments[_i];\n    }\n\n    var prefix = '';\n\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n\n    log.apply(void 0, tslib.__spread([prefix], varArgs));\n  };\n\n  Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\n    if (callback) {\n      exceptionGuard(function () {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          var code = (status || 'error').toUpperCase();\n          var message = code;\n\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n\n          var error = new Error(message); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          error.code = code;\n          callback(error);\n        }\n      });\n    }\n  };\n\n  Object.defineProperty(Repo.prototype, \"database\", {\n    get: function () {\n      return this.__database || (this.__database = new Database(this));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Repo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\n\n\nvar RangedFilter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function RangedFilter(params) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n  /**\r\n   * @return {!NamedNode}\r\n   */\n\n\n  RangedFilter.prototype.getStartPost = function () {\n    return this.startPost_;\n  };\n  /**\r\n   * @return {!NamedNode}\r\n   */\n\n\n  RangedFilter.prototype.getEndPost = function () {\n    return this.endPost_;\n  };\n  /**\r\n   * @param {!NamedNode} node\r\n   * @return {boolean}\r\n   */\n\n\n  RangedFilter.prototype.matches = function (node) {\n    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n\n    var filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    var self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, function (key, childNode) {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.getIndexedFilter = function () {\n    return this.indexedFilter_;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  RangedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n\n\n  RangedFilter.getStartPost_ = function (params) {\n    if (params.hasStart()) {\n      var startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  };\n  /**\r\n   * @param {!QueryParams} params\r\n   * @return {!NamedNode}\r\n   * @private\r\n   */\n\n\n  RangedFilter.getEndPost_ = function (params) {\n    if (params.hasEnd()) {\n      var endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  };\n\n  return RangedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\r\n *\r\n * @constructor\r\n * @implements {NodeFilter}\r\n */\n\n\nvar LimitedFilter =\n/** @class */\nfunction () {\n  /**\r\n   * @param {!QueryParams} params\r\n   */\n  function LimitedFilter(params) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    } else {\n      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n    }\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n    var filtered;\n\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_); // anchor to the startPost, endPost, or last element as appropriate\n\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n        } else {\n          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n        }\n\n        var count = 0;\n\n        while (iterator.hasNext() && count < this.limit_) {\n          var next = iterator.getNext();\n          var inRange = void 0;\n\n          if (this.reverse_) {\n            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_); // Don't support priorities on queries\n\n        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n        var startPost = void 0;\n        var endPost = void 0;\n        var cmp = void 0;\n        var iterator = void 0;\n\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          var indexCompare_1 = this.index_.getCompare();\n\n          cmp = function (a, b) {\n            return indexCompare_1(b, a);\n          };\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        var count = 0;\n        var foundStartPost = false;\n\n        while (iterator.hasNext()) {\n          var next = iterator.getNext();\n\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n\n          var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);\n          }\n        }\n      }\n    }\n\n    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n    // Don't support priorities on queries\n    return oldSnap;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.filtersNodes = function () {\n    return true;\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.getIndexedFilter = function () {\n    return this.rangedFilter_.getIndexedFilter();\n  };\n  /**\r\n   * @inheritDoc\r\n   */\n\n\n  LimitedFilter.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @param {!Node} snap\r\n   * @param {string} childKey\r\n   * @param {!Node} childSnap\r\n   * @param {!CompleteChildSource} source\r\n   * @param {?ChildChangeAccumulator} changeAccumulator\r\n   * @return {!Node}\r\n   * @private\r\n   */\n\n\n  LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\n    // TODO: rename all cache stuff etc to general snap terminology\n    var cmp;\n\n    if (this.reverse_) {\n      var indexCmp_1 = this.index_.getCompare();\n\n      cmp = function (a, b) {\n        return indexCmp_1(b, a);\n      };\n    } else {\n      cmp = this.index_.getCompare();\n    }\n\n    var oldEventCache = snap;\n    util.assert(oldEventCache.numChildren() === this.limit_, '');\n    var newChildNamedNode = new NamedNode(childKey, childSnap);\n    var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);\n    var inRange = this.rangedFilter_.matches(newChildNamedNode);\n\n    if (oldEventCache.hasChild(childKey)) {\n      var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n\n      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n      }\n\n      var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childChangedChange(childKey, childSnap, oldChildSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(childKey, oldChildSnap));\n        }\n\n        var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);\n        var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(Change.childAddedChange(nextChild.name, nextChild.node));\n          }\n\n          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\n          changeAccumulator.trackChildChange(Change.childAddedChange(childKey, childSnap));\n        }\n\n        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  };\n\n  return LimitedFilter;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\r\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\r\n * user-facing API level, so it is not done here.\r\n * @constructor\r\n */\n\n\nvar QueryParams =\n/** @class */\nfunction () {\n  function QueryParams() {\n    this.limitSet_ = false;\n    this.startSet_ = false;\n    this.startNameSet_ = false;\n    this.endSet_ = false;\n    this.endNameSet_ = false;\n    this.limit_ = 0;\n    this.viewFrom_ = '';\n    this.indexStartValue_ = null;\n    this.indexStartName_ = '';\n    this.indexEndValue_ = null;\n    this.indexEndName_ = '';\n    this.index_ = PRIORITY_INDEX;\n  }\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasStart = function () {\n    return this.startSet_;\n  };\n  /**\r\n   * @return {boolean} True if it would return from left.\r\n   */\n\n\n  QueryParams.prototype.isViewFromLeft = function () {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    }\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartValue = function () {\n    util.assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  };\n  /**\r\n   * Only valid to call if hasStart() returns true.\r\n   * Returns the starting key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexStartName = function () {\n    util.assert(this.startSet_, 'Only valid if start has been set');\n\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasEnd = function () {\n    return this.endSet_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * @return {*}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndValue = function () {\n    util.assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  };\n  /**\r\n   * Only valid to call if hasEnd() returns true.\r\n   * Returns the end key name for the range defined by these query parameters\r\n   * @return {!string}\r\n   */\n\n\n  QueryParams.prototype.getIndexEndName = function () {\n    util.assert(this.endSet_, 'Only valid if end has been set');\n\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.hasLimit = function () {\n    return this.limitSet_;\n  };\n  /**\r\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\r\n   */\n\n\n  QueryParams.prototype.hasAnchoredLimit = function () {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  };\n  /**\r\n   * Only valid to call if hasLimit() returns true\r\n   * @return {!number}\r\n   */\n\n\n  QueryParams.prototype.getLimit = function () {\n    util.assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  };\n  /**\r\n   * @return {!Index}\r\n   */\n\n\n  QueryParams.prototype.getIndex = function () {\n    return this.index_;\n  };\n  /**\r\n   * @return {!QueryParams}\r\n   * @private\r\n   */\n\n\n  QueryParams.prototype.copy_ = function () {\n    var copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limit = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToFirst = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  };\n  /**\r\n   * @param {!number} newLimit\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.limitToLast = function (newLimit) {\n    var newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.startAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.startSet_ = true;\n\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n\n    newParams.indexStartValue_ = indexValue;\n\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {*} indexValue\r\n   * @param {?string=} key\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.endAt = function (indexValue, key) {\n    var newParams = this.copy_();\n    newParams.endSet_ = true;\n\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n\n    newParams.indexEndValue_ = indexValue;\n\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n\n    return newParams;\n  };\n  /**\r\n   * @param {!Index} index\r\n   * @return {!QueryParams}\r\n   */\n\n\n  QueryParams.prototype.orderBy = function (index) {\n    var newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  };\n  /**\r\n   * @return {!Object}\r\n   */\n\n\n  QueryParams.prototype.getQueryObject = function () {\n    var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    var obj = {};\n\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      var viewFrom = this.viewFrom_;\n\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    } // For now, priority index is the default, so we only specify if it's some other index\n\n\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n\n    return obj;\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.loadsAllData = function () {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  };\n  /**\r\n   * @return {boolean}\r\n   */\n\n\n  QueryParams.prototype.isDefault = function () {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  };\n  /**\r\n   * @return {!NodeFilter}\r\n   */\n\n\n  QueryParams.prototype.getNodeFilter = function () {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  };\n  /**\r\n   * Returns a set of REST query string parameters representing this query.\r\n   *\r\n   * @return {!Object.<string,*>} query string parameters\r\n   */\n\n\n  QueryParams.prototype.toRestQueryStringParameters = function () {\n    var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    var qs = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    var orderBy;\n\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      util.assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n\n    qs[REST_CONSTANTS.ORDER_BY] = util.stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = util.stringify(this.indexStartValue_);\n\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + util.stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = util.stringify(this.indexEndValue_);\n\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + util.stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  };\n  /**\r\n   * Wire Protocol Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n\n  QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n  /**\r\n   * REST Query Constants\r\n   * @const\r\n   * @enum {string}\r\n   * @private\r\n   */\n\n  QueryParams.REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n  /**\r\n   * Default, empty query parameters\r\n   * @type {!QueryParams}\r\n   * @const\r\n   */\n\n  QueryParams.DEFAULT = new QueryParams();\n  return QueryParams;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Reference =\n/** @class */\nfunction (_super) {\n  tslib.__extends(Reference, _super);\n  /**\r\n   * Call options:\r\n   *   new Reference(Repo, Path) or\r\n   *   new Reference(url: string, string|RepoManager)\r\n   *\r\n   * Externally - this is the firebase.database.Reference type.\r\n   *\r\n   * @param {!Repo} repo\r\n   * @param {(!Path)} path\r\n   * @extends {Query}\r\n   */\n\n\n  function Reference(repo, path) {\n    var _this = this;\n\n    if (!(repo instanceof Repo)) {\n      throw new Error('new Reference() no longer supported - use app.database().');\n    } // call Query's constructor, passing in the repo and path.\n\n\n    _this = _super.call(this, repo, path, QueryParams.DEFAULT, false) || this;\n    return _this;\n  }\n  /** @return {?string} */\n\n\n  Reference.prototype.getKey = function () {\n    util.validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) {\n      return null;\n    } else {\n      return this.path.getBack();\n    }\n  };\n  /**\r\n   * @param {!(string|Path)} pathString\r\n   * @return {!Reference}\r\n   */\n\n\n  Reference.prototype.child = function (pathString) {\n    util.validateArgCount('Reference.child', 1, 1, arguments.length);\n\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  };\n  /** @return {?Reference} */\n\n\n  Reference.prototype.getParent = function () {\n    util.validateArgCount('Reference.parent', 0, 0, arguments.length);\n    var parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  };\n  /** @return {!Reference} */\n\n\n  Reference.prototype.getRoot = function () {\n    util.validateArgCount('Reference.root', 0, 0, arguments.length);\n    var ref = this;\n\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n\n    return ref;\n  };\n  /** @return {!Database} */\n\n\n  Reference.prototype.databaseProp = function () {\n    return this.repo.database;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.set = function (newVal, onComplete) {\n    util.validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    util.validateCallback('Reference.set', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path, newVal,\n    /*priority=*/\n    null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {!Object} objectToMerge\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.update = function (objectToMerge, onComplete) {\n    util.validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      var newObjectToMerge = {};\n\n      for (var i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n\n      objectToMerge = newObjectToMerge;\n      warn('Passing an Array to Firebase.update() is deprecated. ' + 'Use set() if you want to overwrite the existing data, or ' + 'an Object with integer keys if you really do want to ' + 'only update some of the children.');\n    }\n\n    validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\n    util.validateCallback('Reference.update', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*} newVal\r\n   * @param {string|number|null} newPriority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\n    util.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    util.validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.setWithPriority failed: ' + this.getKey() + ' is a read-only object.';\n    }\n\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.remove = function (onComplete) {\n    util.validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    util.validateCallback('Reference.remove', 1, onComplete, true);\n    return this.set(null, onComplete);\n  };\n  /**\r\n   * @param {function(*):*} transactionUpdate\r\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\r\n   * @param {boolean=} applyLocally\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\n    util.validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    util.validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    util.validateCallback('Reference.transaction', 2, onComplete, true); // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.transaction failed: ' + this.getKey() + ' is a read-only object.';\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    var deferred = new util.Deferred();\n\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(function () {});\n    }\n\n    var promiseComplete = function (error, committed, snapshot) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n\n    this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\n    return deferred.promise;\n  };\n  /**\r\n   * @param {string|number|null} priority\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Promise}\r\n   */\n\n\n  Reference.prototype.setPriority = function (priority, onComplete) {\n    util.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    util.validateCallback('Reference.setPriority', 2, onComplete, true);\n    var deferred = new util.Deferred();\n    this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\n    return deferred.promise;\n  };\n  /**\r\n   * @param {*=} value\r\n   * @param {function(?Error)=} onComplete\r\n   * @return {!Reference}\r\n   */\n\n\n  Reference.prototype.push = function (value, onComplete) {\n    util.validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    util.validateCallback('Reference.push', 2, onComplete, true);\n    var now = this.repo.serverTime();\n    var name = nextPushId(now); // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n\n    var thennablePushRef = this.child(name);\n    var pushRef = this.child(name);\n    var promise;\n\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(function () {\n        return pushRef;\n      });\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(function () {});\n    }\n\n    return thennablePushRef;\n  };\n  /**\r\n   * @return {!OnDisconnect}\r\n   */\n\n\n  Reference.prototype.onDisconnect = function () {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  };\n\n  Object.defineProperty(Reference.prototype, \"database\", {\n    get: function () {\n      return this.databaseProp();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"key\", {\n    get: function () {\n      return this.getKey();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    get: function () {\n      return this.getParent();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"root\", {\n    get: function () {\n      return this.getRoot();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Reference;\n}(Query);\n/**\r\n * Define reference constructor in various modules\r\n *\r\n * We are doing this here to avoid several circular\r\n * dependency issues\r\n */\n\n\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Node in a Tree.\r\n */\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode() {\n    // TODO: Consider making accessors that create children and value lazily or\n    // separate Internal / Leaf 'types'.\n    this.children = {};\n    this.childCount = 0;\n    this.value = null;\n  }\n\n  return TreeNode;\n}();\n/**\r\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\r\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\r\n * children.\r\n */\n\n\nvar Tree =\n/** @class */\nfunction () {\n  /**\r\n   * @template T\r\n   * @param {string=} name_ Optional name of the node.\r\n   * @param {Tree=} parent_ Optional parent node.\r\n   * @param {TreeNode=} node_ Optional node to wrap.\r\n   */\n  function Tree(name_, parent_, node_) {\n    if (name_ === void 0) {\n      name_ = '';\n    }\n\n    if (parent_ === void 0) {\n      parent_ = null;\n    }\n\n    if (node_ === void 0) {\n      node_ = new TreeNode();\n    }\n\n    this.name_ = name_;\n    this.parent_ = parent_;\n    this.node_ = node_;\n  }\n  /**\r\n   * Returns a sub-Tree for the given path.\r\n   *\r\n   * @param {!(string|Path)} pathObj Path to look up.\r\n   * @return {!Tree.<T>} Tree for path.\r\n   */\n\n\n  Tree.prototype.subTree = function (pathObj) {\n    // TODO: Require pathObj to be Path?\n    var path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    var child = this,\n        next = path.getFront();\n\n    while (next !== null) {\n      var childNode = util.safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n      next = path.getFront();\n    }\n\n    return child;\n  };\n  /**\r\n   * Returns the data associated with this tree node.\r\n   *\r\n   * @return {?T} The data or null if no data exists.\r\n   */\n\n\n  Tree.prototype.getValue = function () {\n    return this.node_.value;\n  };\n  /**\r\n   * Sets data to this tree node.\r\n   *\r\n   * @param {!T} value Value to set.\r\n   */\n\n\n  Tree.prototype.setValue = function (value) {\n    util.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  };\n  /**\r\n   * Clears the contents of the tree node (its value and all children).\r\n   */\n\n\n  Tree.prototype.clear = function () {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  };\n  /**\r\n   * @return {boolean} Whether the tree has any children.\r\n   */\n\n\n  Tree.prototype.hasChildren = function () {\n    return this.node_.childCount > 0;\n  };\n  /**\r\n   * @return {boolean} Whether the tree is empty (no value or children).\r\n   */\n\n\n  Tree.prototype.isEmpty = function () {\n    return this.getValue() === null && !this.hasChildren();\n  };\n  /**\r\n   * Calls action for each child of this tree node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n\n\n  Tree.prototype.forEachChild = function (action) {\n    var _this = this;\n\n    each(this.node_.children, function (child, childTree) {\n      action(new Tree(child, _this, childTree));\n    });\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\r\n   *   false.\r\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\r\n   *   parent.\r\n   */\n\n\n  Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n\n    this.forEachChild(function (child) {\n      child.forEachDescendant(action,\n      /*includeSelf=*/\n      true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  };\n  /**\r\n   * Calls action on each ancestor node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\r\n   *   true to abort.\r\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\r\n   * @return {boolean} true if the action callback returned true.\r\n   */\n\n\n  Tree.prototype.forEachAncestor = function (action, includeSelf) {\n    var node = includeSelf ? this : this.parent();\n\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n\n      node = node.parent();\n    }\n\n    return false;\n  };\n  /**\r\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\r\n   * is found, action is called on it and traversal does not continue inside the node.\r\n   * Action is *not* called on this node.\r\n   *\r\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\r\n   */\n\n\n  Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\n    this.forEachChild(function (child) {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  };\n  /**\r\n   * @return {!Path} The path of this tree node, as a Path.\r\n   */\n\n\n  Tree.prototype.path = function () {\n    return new Path(this.parent_ === null ? this.name_ : this.parent_.path() + '/' + this.name_);\n  };\n  /**\r\n   * @return {string} The name of the tree node.\r\n   */\n\n\n  Tree.prototype.name = function () {\n    return this.name_;\n  };\n  /**\r\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\r\n   */\n\n\n  Tree.prototype.parent = function () {\n    return this.parent_;\n  };\n  /**\r\n   * Adds or removes this child from its parent based on whether it's empty or not.\r\n   *\r\n   * @private\r\n   */\n\n\n  Tree.prototype.updateParents_ = function () {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  };\n  /**\r\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\r\n   *\r\n   * @param {string} childName The name of the child to update.\r\n   * @param {!Tree.<T>} child The child to update.\r\n   * @private\r\n   */\n\n\n  Tree.prototype.updateChild_ = function (childName, child) {\n    var childEmpty = child.isEmpty();\n    var childExists = util.contains(this.node_.children, childName);\n\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  };\n\n  return Tree;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\r\n * @enum {number}\r\n */\n\n\nvar TransactionStatus;\n\n(function (TransactionStatus) {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\"; // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n\n  TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\"; // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n\n  TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\"; // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n\n  TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\"; // Temporary state used to mark transactions that need to be aborted.\n\n  TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\n})(TransactionStatus || (TransactionStatus = {}));\n/**\r\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\r\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\r\n * @type {number}\r\n * @const\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.MAX_TRANSACTION_RETRIES_ = 25;\n/**\r\n * Setup the transaction data structures\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nRepo.prototype.transactionsInit_ = function () {\n  /**\r\n   * Stores queues of outstanding transactions for Firebase locations.\r\n   *\r\n   * @type {!Tree.<Array.<!Transaction>>}\r\n   * @private\r\n   */\n  this.transactionQueueTree_ = new Tree();\n};\n/**\r\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\r\n *\r\n * @param {!Path} path Path at which to do transaction.\r\n * @param {function(*):*} transactionUpdate Update callback.\r\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\r\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\r\n */\n\n\nRepo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\n  this.log_('transaction on ' + path); // Add a watch to make sure we get server updates.\n\n  var valueCallback = function () {};\n\n  var watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n\n  var unwatcher = function () {\n    watchRef.off('value', valueCallback);\n  }; // Initialize transaction.\n\n\n  var transaction = {\n    path: path,\n    update: transactionUpdate,\n    onComplete: onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally: applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher: unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  }; // Run transaction initially.\n\n  var currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  var newVal = transaction.update(currentState.val());\n\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      var snapshot = new DataSnapshot(transaction.currentInputSnapshot, new Reference(this, transaction.path), PRIORITY_INDEX);\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path); // Mark as run and add to our queue.\n\n    transaction.status = TransactionStatus.RUN;\n    var queueNode = this.transactionQueueTree_.subTree(path);\n    var nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n    queueNode.setValue(nodeQueue); // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n\n    var priorityForNode = void 0;\n\n    if (typeof newVal === 'object' && newVal !== null && util.contains(newVal, '.priority')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = util.safeGet(newVal, '.priority');\n      util.assert(isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' + 'Priority must be a valid string, finite number, server value, or null.');\n    } else {\n      var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) || ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    priorityForNode\n    /** @type {null|number|string} */\n    = priorityForNode;\n    var serverValues = this.generateServerValues();\n    var newNodeUnresolved = nodeFromJSON$1(newVal, priorityForNode);\n    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n    var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    this.sendReadyTransactions_();\n  }\n};\n/**\r\n * @param {!Path} path\r\n * @param {Array.<number>=} excludeSets A specific set to exclude\r\n * @return {Node}\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.getLatestState_ = function (path, excludeSets) {\n  return this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) || ChildrenNode.EMPTY_NODE;\n};\n/**\r\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\r\n * complete.\r\n *\r\n * Externally it's called with no arguments, but it calls itself recursively with a particular\r\n * transactionQueueTree node to recurse through the tree.\r\n *\r\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.sendReadyTransactions_ = function (node) {\n  var _this = this;\n\n  if (node === void 0) {\n    node = this.transactionQueueTree_;\n  } // Before recursing, make sure any completed transactions are removed.\n\n\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    var queue = this.buildTransactionQueue_(node);\n    util.assert(queue.length > 0, 'Sending zero length transaction queue');\n    var allRun = queue.every(function (transaction) {\n      return transaction.status === TransactionStatus.RUN;\n    }); // If they're all run (and not sent), we can send them.  Else, we must wait.\n\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(function (childNode) {\n      _this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n/**\r\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\r\n *\r\n * @param {!Path} path The location of the queue.\r\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.sendTransactionQueue_ = function (path, queue) {\n  var _this = this; // Mark transactions as sent and increment retry count!\n\n\n  var setsToIgnore = queue.map(function (txn) {\n    return txn.currentWriteId;\n  });\n  var latestState = this.getLatestState_(path, setsToIgnore);\n  var snapToSend = latestState;\n  var latestHash = latestState.hash();\n\n  for (var i = 0; i < queue.length; i++) {\n    var txn = queue[i];\n    util.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    var relativePath = Path.relativePath(path, txn.path); // If we've gotten to this point, the output snapshot must be defined.\n\n    snapToSend = snapToSend.updateChild(relativePath\n    /** @type {!Node} */\n    , txn.currentOutputSnapshotRaw);\n  }\n\n  var dataToSend = snapToSend.val(true);\n  var pathToSend = path; // Send the put.\n\n  this.server_.put(pathToSend.toString(), dataToSend, function (status) {\n    _this.log_('transaction put response', {\n      path: pathToSend.toString(),\n      status: status\n    });\n\n    var events = [];\n\n    if (status === 'ok') {\n      // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n      // the callback could trigger more transactions or sets.\n      var callbacks = [];\n\n      for (var i = 0; i < queue.length; i++) {\n        queue[i].status = TransactionStatus.COMPLETED;\n        events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\n\n        if (queue[i].onComplete) {\n          // We never unset the output snapshot, and given that this transaction is complete, it should be set\n          var node = queue[i].currentOutputSnapshotResolved;\n          var ref = new Reference(_this, queue[i].path);\n          var snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\n        }\n\n        queue[i].unwatcher();\n      } // Now remove the completed transactions.\n\n\n      _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path)); // There may be pending transactions that we can now send.\n\n\n      _this.sendReadyTransactions_();\n\n      _this.eventQueue_.raiseEventsForChangedPath(path, events); // Finally, trigger onComplete callbacks.\n\n\n      for (var i = 0; i < callbacks.length; i++) {\n        exceptionGuard(callbacks[i]);\n      }\n    } else {\n      // transactions are no longer sent.  Update their status appropriately.\n      if (status === 'datastale') {\n        for (var i = 0; i < queue.length; i++) {\n          if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n          } else {\n            queue[i].status = TransactionStatus.RUN;\n          }\n        }\n      } else {\n        warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n\n        for (var i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.NEEDS_ABORT;\n          queue[i].abortReason = status;\n        }\n      }\n\n      _this.rerunTransactions_(path);\n    }\n  }, latestHash);\n};\n/**\r\n * Finds all transactions dependent on the data at changedPath and reruns them.\r\n *\r\n * Should be called any time cached data changes.\r\n *\r\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\r\n * be raised for.\r\n *\r\n * @param {!Path} changedPath The path in mergedData that changed.\r\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.rerunTransactions_ = function (changedPath) {\n  var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  var path = rootMostTransactionNode.path();\n  var queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n  return path;\n};\n/**\r\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\r\n *\r\n * @param {Array.<Transaction>} queue The queue of transactions to run.\r\n * @param {!Path} path The path the queue is for.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.rerunTransactionQueue_ = function (queue, path) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  } // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n\n\n  var callbacks = [];\n  var events = []; // Ignore all of the sets we're going to re-run.\n\n  var txnsToRerun = queue.filter(function (q) {\n    return q.status === TransactionStatus.RUN;\n  });\n  var setsToIgnore = txnsToRerun.map(function (q) {\n    return q.currentWriteId;\n  });\n\n  for (var i = 0; i < queue.length; i++) {\n    var transaction = queue[i];\n    var relativePath = Path.relativePath(path, transaction.path);\n    var abortTransaction = false,\n        abortReason = void 0;\n    util.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n    } else if (transaction.status === TransactionStatus.RUN) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (transaction.retryCount >= Repo.MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n      } else {\n        // This code reruns a transaction\n        var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\n        transaction.currentInputSnapshot = currentNode;\n        var newData = queue[i].update(currentNode.val());\n\n        if (newData !== undefined) {\n          validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n          var newDataNode = nodeFromJSON$1(newData);\n          var hasExplicitPriority = typeof newData === 'object' && newData != null && util.contains(newData, '.priority');\n\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          var oldWriteId = transaction.currentWriteId;\n          var serverValues = this.generateServerValues();\n          var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_(); // Mutates setsToIgnore in place\n\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n          events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n        }\n      }\n    }\n\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED; // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          var ref = new Reference(this, queue[i].path); // We set this field immediately, so it's safe to cast to an actual snapshot\n\n          var lastInput\n          /** @type {!Node} */\n          = queue[i].currentInputSnapshot;\n          var snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\n        }\n      }\n    }\n  } // Clean up completed transactions.\n\n\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_); // Now fire callbacks, now that we're in a good, known state.\n\n  for (var i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  } // Try to send the transaction result to the server.\n\n\n  this.sendReadyTransactions_();\n};\n/**\r\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\r\n * the node for the given path if there are no pending transactions on any ancestor.\r\n *\r\n * @param {!Path} path The location to start at.\r\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.getAncestorTransactionNode_ = function (path) {\n  var front; // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n\n  var transactionNode = this.transactionQueueTree_;\n  front = path.getFront();\n\n  while (front !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n    front = path.getFront();\n  }\n\n  return transactionNode;\n};\n/**\r\n * Builds the queue of all transactions at or below the specified transactionNode.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} transactionNode\r\n * @return {Array.<Transaction>} The generated queue.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.buildTransactionQueue_ = function (transactionNode) {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  var transactionQueue = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue); // Sort them by the order the transactions were created.\n\n  transactionQueue.sort(function (a, b) {\n    return a.order - b.order;\n  });\n  return transactionQueue;\n};\n/**\r\n * @param {!Tree.<Array.<Transaction>>} node\r\n * @param {Array.<Transaction>} queue\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\n  var _this = this;\n\n  var nodeQueue = node.getValue();\n\n  if (nodeQueue !== null) {\n    for (var i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(function (child) {\n    _this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n/**\r\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\r\n *\r\n * @param {!Tree.<Array.<!Transaction>>} node\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\n  var _this = this;\n\n  var queue = node.getValue();\n\n  if (queue) {\n    var to = 0;\n\n    for (var from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(function (childNode) {\n    _this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n/**\r\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\r\n * since we consider them incompatible with transactions.\r\n *\r\n * @param {!Path} path Path for which we want to abort related transactions.\r\n * @return {!Path}\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.abortTransactions_ = function (path) {\n  var _this = this;\n\n  var affectedPath = this.getAncestorTransactionNode_(path).path();\n  var transactionNode = this.transactionQueueTree_.subTree(path);\n  transactionNode.forEachAncestor(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  this.abortTransactionsOnNode_(transactionNode);\n  transactionNode.forEachDescendant(function (node) {\n    _this.abortTransactionsOnNode_(node);\n  });\n  return affectedPath;\n};\n/**\r\n * Abort transactions stored in this transaction queue node.\r\n *\r\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\r\n * @private\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nRepo.prototype.abortTransactionsOnNode_ = function (node) {\n  var queue = node.getValue();\n\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    var callbacks = []; // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n\n    var events = [];\n    var lastSent = -1;\n\n    for (var i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ;else if (queue[i].status === TransactionStatus.SENT) {\n        util.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n        lastSent = i; // Mark transaction for abort when it comes back.\n\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        util.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort'); // We can abort it immediately.\n\n        queue[i].unwatcher();\n        events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\n\n        if (queue[i].onComplete) {\n          var snapshot = null;\n          callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\n        }\n      }\n    }\n\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    } // Now fire the callbacks.\n\n\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n\n    for (var i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** @const {string} */\n\n\nvar DATABASE_URL_OPTION = 'databaseURL';\n/**\r\n * This variable is also defined in the firebase node.js admin SDK. Before\r\n * modifying this definition, consult the definition in:\r\n *\r\n * https://github.com/firebase/firebase-admin-node\r\n *\r\n * and make sure the two are consistent.\r\n */\n\nvar FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nvar _staticInstance;\n/**\r\n * Creates and caches Repo instances.\r\n */\n\n\nvar RepoManager =\n/** @class */\nfunction () {\n  function RepoManager() {\n    /**\r\n     * @private {!Object.<string, Object<string, !fb.core.Repo>>}\r\n     */\n    this.repos_ = {};\n    /**\r\n     * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\r\n     * @private {boolean}\r\n     */\n\n    this.useRestClient_ = false;\n  }\n\n  RepoManager.getInstance = function () {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n\n    return _staticInstance;\n  }; // TODO(koss): Remove these functions unless used in tests?\n\n\n  RepoManager.prototype.interrupt = function () {\n    var e_1, _a, e_2, _b;\n\n    try {\n      for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var appName = _d.value;\n\n        try {\n          for (var _e = (e_2 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var dbUrl = _f.value;\n            this.repos_[appName][dbUrl].interrupt();\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  RepoManager.prototype.resume = function () {\n    var e_3, _a, e_4, _b;\n\n    try {\n      for (var _c = tslib.__values(Object.keys(this.repos_)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var appName = _d.value;\n\n        try {\n          for (var _e = (e_4 = void 0, tslib.__values(Object.keys(this.repos_[appName]))), _f = _e.next(); !_f.done; _f = _e.next()) {\n            var dbUrl = _f.value;\n            this.repos_[appName][dbUrl].resume();\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  /**\r\n   * This function should only ever be called to CREATE a new database instance.\r\n   *\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Database}\r\n   */\n\n\n  RepoManager.prototype.databaseFromApp = function (app, authProvider, url) {\n    var dbUrl = url || app.options[DATABASE_URL_OPTION];\n\n    if (dbUrl === undefined) {\n      fatal(\"Can't determine Firebase Database URL.  Be sure to include \" + DATABASE_URL_OPTION + ' option when calling firebase.initializeApp().');\n    }\n\n    var parsedUrl = parseRepoInfo(dbUrl);\n    var repoInfo = parsedUrl.repoInfo;\n    var dbEmulatorHost = undefined;\n\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n\n    if (dbEmulatorHost) {\n      dbUrl = \"http://\" + dbEmulatorHost + \"?ns=\" + repoInfo.namespace;\n      parsedUrl = parseRepoInfo(dbUrl);\n      repoInfo = parsedUrl.repoInfo;\n    }\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n\n    if (!parsedUrl.path.isEmpty()) {\n      fatal('Database URL must point to the root of a Firebase Database ' + '(not including a child path).');\n    }\n\n    var repo = this.createRepo(repoInfo, app, authProvider);\n    return repo.database;\n  };\n  /**\r\n   * Remove the repo and make sure it is disconnected.\r\n   *\r\n   * @param {!Repo} repo\r\n   */\n\n\n  RepoManager.prototype.deleteRepo = function (repo) {\n    var appRepos = util.safeGet(this.repos_, repo.app.name); // This should never happen...\n\n    if (!appRepos || util.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n    }\n\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  };\n  /**\r\n   * Ensures a repo doesn't already exist and then creates one using the\r\n   * provided app.\r\n   *\r\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\r\n   * @param {!FirebaseApp} app\r\n   * @return {!Repo} The Repo object for the specified server / repoName.\r\n   */\n\n\n  RepoManager.prototype.createRepo = function (repoInfo, app, authProvider) {\n    var appRepos = util.safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    var repo = util.safeGet(appRepos, repoInfo.toURLString());\n\n    if (repo) {\n      fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n    }\n\n    repo = new Repo(repoInfo, this.useRestClient_, app, authProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n    return repo;\n  };\n  /**\r\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\r\n   * @param {boolean} forceRestClient\r\n   */\n\n\n  RepoManager.prototype.forceRestClient = function (forceRestClient) {\n    this.useRestClient_ = forceRestClient;\n  };\n\n  return RepoManager;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Class representing a firebase database.\r\n * @implements {FirebaseService}\r\n */\n\n\nvar Database =\n/** @class */\nfunction () {\n  /**\r\n   * The constructor should not be called by users of our public API.\r\n   * @param {!Repo} repo_\r\n   */\n  function Database(repo_) {\n    this.repo_ = repo_;\n\n    if (!(repo_ instanceof Repo)) {\n      fatal(\"Don't call new Database() directly - please use firebase.database().\");\n    }\n    /** @type {Reference} */\n\n\n    this.root_ = new Reference(repo_, Path.Empty);\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  Object.defineProperty(Database.prototype, \"app\", {\n    get: function () {\n      return this.repo_.app;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Database.prototype.ref = function (path) {\n    this.checkDeleted_('ref');\n    util.validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  };\n  /**\r\n   * Returns a reference to the root or the path specified in url.\r\n   * We throw a exception if the url is not in the same domain as the\r\n   * current repo.\r\n   * @param {string} url\r\n   * @return {!Reference} Firebase reference.\r\n   */\n\n\n  Database.prototype.refFromURL = function (url) {\n    /** @const {string} */\n    var apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    util.validateArgCount(apiName, 1, 1, arguments.length);\n    var parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n    var repoInfo = parsedURL.repoInfo;\n\n    if (repoInfo.host !== this.repo_.repoInfo_.host) {\n      fatal(apiName + ': Host name does not match the current database: ' + '(found ' + repoInfo.host + ' but expected ' + this.repo_.repoInfo_.host + ')');\n    }\n\n    return this.ref(parsedURL.path.toString());\n  };\n  /**\r\n   * @param {string} apiName\r\n   */\n\n\n  Database.prototype.checkDeleted_ = function (apiName) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }; // Make individual repo go offline.\n\n\n  Database.prototype.goOffline = function () {\n    util.validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  };\n\n  Database.prototype.goOnline = function () {\n    util.validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  };\n\n  Database.ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    },\n    increment: function (delta) {\n      return {\n        '.sv': {\n          'increment': delta\n        }\n      };\n    }\n  };\n  return Database;\n}();\n\nvar DatabaseInternals =\n/** @class */\nfunction () {\n  /** @param {!Database} database */\n  function DatabaseInternals(database) {\n    this.database = database;\n  }\n  /** @return {Promise<void>} */\n\n\n  DatabaseInternals.prototype.delete = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.database.checkDeleted_('delete'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        RepoManager.getInstance().deleteRepo(this.database.repo_); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        this.database.repo_ = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        this.database.root_ = null;\n        this.database.INTERNAL = null;\n        this.database = null;\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  return DatabaseInternals;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * INTERNAL methods for internal-use only (tests, etc.).\r\n *\r\n * Customers shouldn't use these or else should be aware that they could break at any time.\r\n *\r\n * @const\r\n */\n\n\nvar forceLongPolling = function () {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nvar forceWebSockets = function () {\n  BrowserPollConnection.forceDisallow();\n};\n/* Used by App Manager */\n\n\nvar isWebSocketsAvailable = function () {\n  return WebSocketConnection['isAvailable']();\n};\n\nvar setSecurityDebugCallback = function (ref, callback) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ref.repo.persistentConnection_.securityDebugCallback_ = callback;\n};\n\nvar stats = function (ref, showDelta) {\n  ref.repo.stats(showDelta);\n};\n\nvar statsIncrementCounter = function (ref, metric) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nvar dataUpdateCount = function (ref) {\n  return ref.repo.dataUpdateCount;\n};\n\nvar interceptServerData = function (ref, callback) {\n  return ref.repo.interceptServerData_(callback);\n};\n\nvar INTERNAL = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  forceLongPolling: forceLongPolling,\n  forceWebSockets: forceWebSockets,\n  isWebSocketsAvailable: isWebSocketsAvailable,\n  setSecurityDebugCallback: setSecurityDebugCallback,\n  stats: stats,\n  statsIncrementCounter: statsIncrementCounter,\n  dataUpdateCount: dataUpdateCount,\n  interceptServerData: interceptServerData\n});\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar DataConnection = PersistentConnection;\n/**\r\n * @param {!string} pathString\r\n * @param {function(*)} onComplete\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nPersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n  this.sendRequest('q', {\n    p: pathString\n  }, onComplete);\n};\n/**\r\n * @param {*} data\r\n * @param {function(*)} onEcho\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nPersistentConnection.prototype.echo = function (data, onEcho) {\n  this.sendRequest('echo', {\n    d: data\n  }, onEcho);\n}; // RealTimeConnection properties that we use in tests.\n\n\nvar RealTimeConnection = Connection;\n/**\r\n * @param {function(): string} newHash\r\n * @return {function()}\r\n */\n\nvar hijackHash = function (newHash) {\n  var oldPut = PersistentConnection.prototype.put;\n\n  PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n/**\r\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\r\n */\n\n\nvar ConnectionTarget = RepoInfo;\n/**\r\n * @param {!Query} query\r\n * @return {!string}\r\n */\n\nvar queryIdentifier = function (query) {\n  return query.queryIdentifier();\n};\n/**\r\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\r\n *\r\n * @param {boolean} forceRestClient\r\n */\n\n\nvar forceRestClient = function (forceRestClient) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n\nvar TEST_ACCESS = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  DataConnection: DataConnection,\n  RealTimeConnection: RealTimeConnection,\n  hijackHash: hijackHash,\n  ConnectionTarget: ConnectionTarget,\n  queryIdentifier: queryIdentifier,\n  forceRestClient: forceRestClient\n});\nvar name = \"@firebase/database\";\nvar version = \"0.6.1\";\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ServerValue = Database.ServerValue;\n\nfunction registerDatabase(instance) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION); // Register the Database Service with the 'firebase' namespace.\n\n  var namespace = instance.INTERNAL.registerComponent(new component.Component('database', function (container, url) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider('auth-internal');\n    return RepoManager.getInstance().databaseFromApp(app, authProvider, url);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps( // firebase.database namespace properties\n  {\n    Reference: Reference,\n    Query: Query,\n    Database: Database,\n    DataSnapshot: DataSnapshot,\n    enableLogging: enableLogging,\n    INTERNAL: INTERNAL,\n    ServerValue: ServerValue,\n    TEST_ACCESS: TEST_ACCESS\n  }).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n\n  if (util.isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\nexports.DataSnapshot = DataSnapshot;\nexports.Database = Database;\nexports.OnDisconnect = OnDisconnect;\nexports.Query = Query;\nexports.Reference = Reference;\nexports.ServerValue = ServerValue;\nexports.enableLogging = enableLogging;\nexports.registerDatabase = registerDatabase;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;AAUA;AAAA;AAAA;;;;AAOE,6BAAoBA,WAApB,EAAwC;AAApB,mCAAoB;;AALhC,mBAAU,WAAV;AAKoC;;;;;;;AAM5CC,8CAAIC,GAAJ,EAAiBC,KAAjB,EAAsC;AACpC,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,WAAKH,WAAL,CAAiBI,UAAjB,CAA4B,KAAKC,aAAL,CAAmBH,GAAnB,CAA5B;AACD,KAFD,MAEO;AACL,WAAKF,WAAL,CAAiBM,OAAjB,CAAyB,KAAKD,aAAL,CAAmBH,GAAnB,CAAzB,EAAkDK,eAAUJ,KAAVI,CAAlD;AACD;AACF,GAND;;;;;;;AAYAN,8CAAIC,GAAJ,EAAe;AACb,QAAMM,SAAS,GAAG,KAAKR,WAAL,CAAiBS,OAAjB,CAAyB,KAAKJ,aAAL,CAAmBH,GAAnB,CAAzB,CAAlB;;AACA,QAAIM,SAAS,IAAI,IAAjB,EAAuB;AACrB,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAOE,cAASF,SAATE,CAAP;AACD;AACF,GAPD;;;;;;AAYAT,iDAAOC,GAAP,EAAkB;AAChB,SAAKF,WAAL,CAAiBI,UAAjB,CAA4B,KAAKC,aAAL,CAAmBH,GAAnB,CAA5B;AACD,GAFD;;;;;;;AAUAD,wDAAcU,IAAd,EAA0B;AACxB,WAAO,KAAKC,OAAL,GAAeD,IAAtB;AACD,GAFD;;AAIAV;AACE,WAAO,KAAKD,WAAL,CAAiBa,QAAjB,EAAP;AACD,GAFD;;AAGF;AAAC,CAtDD;AC7BA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;AAMA;AAAA;AAAA;AAAA;AACU,kBAAmC,EAAnC;AAqBR,6BAAoB,IAApB;AACD;;AApBCC,0CAAIZ,GAAJ,EAAiBC,KAAjB,EAAsC;AACpC,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,aAAO,KAAKY,MAAL,CAAYb,GAAZ,CAAP;AACD,KAFD,MAEO;AACL,WAAKa,MAAL,CAAYb,GAAZ,IAAmBC,KAAnB;AACD;AACF,GAND;;AAQAW,0CAAIZ,GAAJ,EAAe;AACb,QAAIc,cAAS,KAAKD,MAAdC,EAAsBd,GAAtBc,CAAJ,EAAgC;AAC9B,aAAO,KAAKD,MAAL,CAAYb,GAAZ,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GALD;;AAOAY,6CAAOZ,GAAP,EAAkB;AAChB,WAAO,KAAKa,MAAL,CAAYb,GAAZ,CAAP;AACD,GAFD;;AAKF;AAAC,CAvBD;ACzBA;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;AASA,IAAMe,gBAAgB,GAAG,UACvBC,cADuB,EACD;AAEtB,MAAI;;;AAGF,QACE,OAAOC,MAAP,KAAkB,WAAlB,IACA,OAAOA,MAAM,CAACD,cAAD,CAAb,KAAkC,WAFpC,EAGE;;AAEA,UAAME,UAAU,GAAGD,MAAM,CAACD,cAAD,CAAzB;AACAE,gBAAU,CAACd,OAAX,CAAmB,mBAAnB,EAAwC,OAAxC;AACAc,gBAAU,CAAChB,UAAX,CAAsB,mBAAtB;AACA,aAAO,IAAIH,iBAAJ,CAAsBmB,UAAtB,CAAP;AACD;AACF,GAbD,CAaE,OAAOC,CAAP,EAAU,CAAE,CAfQ;;;;AAmBtB,SAAO,IAAIP,aAAJ,EAAP;AACD,CArBD;AAuBA;;;AACO,IAAMQ,iBAAiB,GAAGL,gBAAgB,CAAC,cAAD,CAA1C;AAEP;;AACO,IAAMM,cAAc,GAAGN,gBAAgB,CAAC,gBAAD,CAAvC;AC1DP;;;;;;;;;;;;;;;;;AAiCA,IAAMO,SAAS,GAAG,IAAIC,eAAJ,CAAW,oBAAX,CAAlB;AAEA;;;;;AAIO,IAAMC,aAAa,GAAkB;AAC1C,MAAIC,EAAE,GAAG,CAAT;AACA,SAAO;AACL,WAAOA,EAAE,EAAT;AACD,GAFD;AAGD,CAL0C,EAApC;AAOP;;;;;;;AAKO,IAAMC,IAAI,GAAG,UAASC,GAAT,EAAoB;AACtC,MAAMC,SAAS,GAAGC,uBAAkBF,GAAlBE,CAAlB;AACA,MAAMH,IAAI,GAAG,IAAII,SAAJ,EAAb;AACAJ,MAAI,CAACK,MAAL,CAAYH,SAAZ;AACA,MAAMI,SAAS,GAAGN,IAAI,CAACO,MAAL,EAAlB;AACA,SAAOC,YAAOC,eAAPD,CAAuBF,SAAvBE,CAAP;AACD,CANM;AAQP;;;;;;;AAKA,IAAME,gBAAgB,GAAG;AAAS;;OAAA,yCAAqB;AAArBC;;;AAChC,MAAIC,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAME,GAAG,GAAGJ,OAAO,CAACE,CAAD,CAAnB;;AACA,QACEG,KAAK,CAACC,OAAN,CAAcF,GAAd,KACCA,GAAG,IACF,OAAOA,GAAP,KAAe,QADhB;AAGC,WAAQA,GAAW,CAACD,MAApB,KAA+B,QALnC,EAME;AACAF,aAAO,IAAIF,gBAAgB,CAACQ,KAAjB,CAAuB,IAAvB,EAA6BH,GAA7B,CAAX;AACD,KARD,MAQO,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAClCH,aAAO,IAAIjC,eAAUoC,GAAVpC,CAAX;AACD,KAFM,MAEA;AACLiC,aAAO,IAAIG,GAAX;AACD;;AACDH,WAAO,IAAI,GAAX;AACD;;AAED,SAAOA,OAAP;AACD,CArBD;AAuBA;;;;;;AAIO,IAAIO,MAAM,GAAiC,IAA3C;AAEP;;;;;;AAKA,IAAIC,SAAS,GAAG,IAAhB;AAEA;;;;;;IAKaC,aAAa,GAAG,UAC3BC,OAD2B,EAE3BC,UAF2B,EAEP;AAEpBC,cACE,CAACD,UAAD,IAAeD,OAAO,KAAK,IAA3B,IAAmCA,OAAO,KAAK,KADjDE,EAEE,4CAFFA;;AAIA,MAAIF,OAAO,KAAK,IAAhB,EAAsB;AACpB1B,aAAS,CAAC6B,QAAV,GAAqBC,kBAASC,OAA9B;AACAR,UAAM,GAAGvB,SAAS,CAACgC,GAAV,CAAcC,IAAd,CAAmBjC,SAAnB,CAAT;;AACA,QAAI2B,UAAJ,EAAgB;AACd5B,oBAAc,CAACmC,GAAf,CAAmB,iBAAnB,EAAsC,IAAtC;AACD;AACF,GAND,MAMO,IAAI,OAAOR,OAAP,KAAmB,UAAvB,EAAmC;AACxCH,UAAM,GAAGG,OAAT;AACD,GAFM,MAEA;AACLH,UAAM,GAAG,IAAT;AACAxB,kBAAc,CAACoC,MAAf,CAAsB,iBAAtB;AACD;AACH;AAEA;;;;;;AAIO,IAAMH,GAAG,GAAG;AAAS;;OAAA,yCAAqB;AAArBjB;;;AAC1B,MAAIS,SAAS,KAAK,IAAlB,EAAwB;AACtBA,aAAS,GAAG,KAAZ;;AACA,QAAID,MAAM,KAAK,IAAX,IAAmBxB,cAAc,CAACqC,GAAf,CAAmB,iBAAnB,MAA0C,IAAjE,EAAuE;AACrEX,mBAAa,CAAC,IAAD,CAAb;AACD;AACF;;AAED,MAAIF,MAAJ,EAAY;AACV,QAAMP,OAAO,GAAGF,gBAAgB,CAACQ,KAAjB,CAAuB,IAAvB,EAA6BP,OAA7B,CAAhB;AACAQ,UAAM,CAACP,OAAD,CAAN;AACD;AACF,CAZM;AAcP;;;;;;AAIO,IAAMqB,UAAU,GAAG,UACxBC,MADwB,EACV;AAEd,SAAO;AAAS;;SAAA,yCAAqB;AAArBvB;;;AACdiB,OAAG,MAAH,CAAG,MAAH,EAAGO,gBAACD,MAAD,GAAYvB,OAAZ,CAAH;AACD,GAFD;AAGD,CANM;AAQP;;;;;AAGO,IAAMyB,KAAK,GAAG;AAAS;;OAAA,yCAAoB;AAApBzB;;;AAC5B,MAAMC,OAAO,GAAG,8BAA8BF,gBAAgB,MAAhB,CAAgB,MAAhB,EAAgByB,eAAIxB,OAAJ,CAAhB,CAA9C;AACAf,WAAS,CAACwC,KAAV,CAAgBxB,OAAhB;AACD,CAHM;AAKP;;;;;AAGO,IAAMyB,KAAK,GAAG;AAAS;;OAAA,yCAAoB;AAApB1B;;;AAC5B,MAAMC,OAAO,GAAG,2BAAyBF,gBAAgB,MAAhB,CAAgB,MAAhB,EAAgByB,eAAIxB,OAAJ,CAAhB,CAAzC;AACAf,WAAS,CAACwC,KAAV,CAAgBxB,OAAhB;AACA,QAAM,IAAI0B,KAAJ,CAAU1B,OAAV,CAAN;AACD,CAJM;AAMP;;;;;AAGO,IAAM2B,IAAI,GAAG;AAAS;;OAAA,yCAAqB;AAArB5B;;;AAC3B,MAAMC,OAAO,GAAG,uBAAuBF,gBAAgB,MAAhB,CAAgB,MAAhB,EAAgByB,eAAIxB,OAAJ,CAAhB,CAAvC;AACAf,WAAS,CAAC2C,IAAV,CAAe3B,OAAf;AACD,CAHM;AAKP;;;;;;AAIO,IAAM4B,kBAAkB,GAAG;;AAEhC,MACE,OAAOjD,MAAP,KAAkB,WAAlB,IACAA,MAAM,CAACkD,QADP,IAEAlD,MAAM,CAACkD,QAAP,CAAgBC,QAFhB,IAGAnD,MAAM,CAACkD,QAAP,CAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC,QAAjC,MAA+C,CAAC,CAJlD,EAKE;AACAJ,QAAI,CACF,kDACE,8CAFA,CAAJ;AAID;AACF,CAbM;AA0BP;;;;;;;AAKO,IAAMK,mBAAmB,GAAG,UAASC,IAAT,EAAsB;AACvD,SACE,OAAOA,IAAP,KAAgB,QAAhB,KACCA,IAAI,KAAKA,IAAT,IAAa;AACZA,MAAI,KAAKC,MAAM,CAACC,iBADjB,IAECF,IAAI,KAAKC,MAAM,CAACE,iBAHlB,CADF;AAMD,CAPM;AASP;;;;;AAGO,IAAMC,mBAAmB,GAAG,UAASC,EAAT,EAAuB;AACxD,MAAIC,oBAAeC,QAAQ,CAACC,UAAT,KAAwB,UAA3C,EAAuD;AACrDH,MAAE;AACH,GAFD,MAEO;;;AAIL,QAAII,QAAM,GAAG,KAAb;;AACA,QAAMC,WAAS,GAAG;AAChB,UAAI,CAACH,QAAQ,CAACI,IAAd,EAAoB;AAClBC,kBAAU,CAACF,WAAD,EAAYG,IAAI,CAACC,KAAL,CAAW,EAAX,CAAZ,CAAV;AACA;AACD;;AAED,UAAI,CAACL,QAAL,EAAa;AACXA,gBAAM,GAAG,IAAT;AACAJ,UAAE;AACH;AACF,KAVD;;AAYA,QAAIE,QAAQ,CAACQ,gBAAb,EAA+B;AAC7BR,cAAQ,CAACQ,gBAAT,CAA0B,kBAA1B,EAA8CL,WAA9C,EAAyD,KAAzD,EAD6B;;AAG7BhE,YAAM,CAACqE,gBAAP,CAAwB,MAAxB,EAAgCL,WAAhC,EAA2C,KAA3C,EAH6B;AAK9B,KALD,MAKO,IAAKH,QAAgB,CAACS,WAAtB,EAAmC;;;AAGvCT,cAAgB,CAACS,WAAjB,CAA6B,oBAA7B,EAAmD;AAClD,YAAIT,QAAQ,CAACC,UAAT,KAAwB,UAA5B,EAAwC;AACtCE,qBAAS;AACV;AACF,OAJA,EAHuC;;;AAUvChE,YAAc,CAACsE,WAAf,CAA2B,QAA3B,EAAqCN,WAArC,EAVuC;;;AAezC;AACF;AACF,CA1CM;AA4CP;;;;;;AAIO,IAAMO,QAAQ,GAAG,YAAjB;AAEP;;;;;AAIO,IAAMC,QAAQ,GAAG,YAAjB;AAEP;;;;;;;AAMO,IAAMC,WAAW,GAAG,UAASC,CAAT,EAAoBC,CAApB,EAA6B;AACtD,MAAID,CAAC,KAAKC,CAAV,EAAa;AACX,WAAO,CAAP;AACD,GAFD,MAEO,IAAID,CAAC,KAAKH,QAAN,IAAkBI,CAAC,KAAKH,QAA5B,EAAsC;AAC3C,WAAO,CAAC,CAAR;AACD,GAFM,MAEA,IAAIG,CAAC,KAAKJ,QAAN,IAAkBG,CAAC,KAAKF,QAA5B,EAAsC;AAC3C,WAAO,CAAP;AACD,GAFM,MAEA;AACL,QAAMI,MAAM,GAAGC,WAAW,CAACH,CAAD,CAA1B;AAAA,QACEI,MAAM,GAAGD,WAAW,CAACF,CAAD,CADtB;;AAGA,QAAIC,MAAM,KAAK,IAAf,EAAqB;AACnB,UAAIE,MAAM,KAAK,IAAf,EAAqB;AACnB,eAAOF,MAAM,GAAGE,MAAT,KAAoB,CAApB,GAAwBJ,CAAC,CAACnD,MAAF,GAAWoD,CAAC,CAACpD,MAArC,GAA8CqD,MAAM,GAAGE,MAA9D;AACD,OAFD,MAEO;AACL,eAAO,CAAC,CAAR;AACD;AACF,KAND,MAMO,IAAIA,MAAM,KAAK,IAAf,EAAqB;AAC1B,aAAO,CAAP;AACD,KAFM,MAEA;AACL,aAAOJ,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAApB;AACD;AACF;AACF,CAvBM;AAyBP;;;;;;;AAKO,IAAMI,aAAa,GAAG,UAASL,CAAT,EAAoBC,CAApB,EAA6B;AACxD,MAAID,CAAC,KAAKC,CAAV,EAAa;AACX,WAAO,CAAP;AACD,GAFD,MAEO,IAAID,CAAC,GAAGC,CAAR,EAAW;AAChB,WAAO,CAAC,CAAR;AACD,GAFM,MAEA;AACL,WAAO,CAAP;AACD;AACF,CARM;AAUP;;;;;;;AAKO,IAAMK,UAAU,GAAG,UACxBjG,GADwB,EAExBkG,GAFwB,EAEK;AAE7B,MAAIA,GAAG,IAAIlG,GAAG,IAAIkG,GAAlB,EAAuB;AACrB,WAAOA,GAAG,CAAClG,GAAD,CAAV;AACD,GAFD,MAEO;AACL,UAAM,IAAIgE,KAAJ,CACJ,2BAA2BhE,GAA3B,GAAiC,eAAjC,GAAmDK,eAAU6F,GAAV7F,CAD/C,CAAN;AAGD;AACF,CAXM;AAaP;;;;;;AAIO,IAAM8F,iBAAiB,GAAG,UAASD,GAAT,EAAqB;AACpD,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAvC,EAA6C;AAC3C,WAAO7F,eAAU6F,GAAV7F,CAAP;AACD;;AAED,MAAM+F,IAAI,GAAG,EAAb,CALoD;;AAOpD,OAAK,IAAMC,CAAX,IAAgBH,GAAhB,EAAqB;AACnBE,QAAI,CAACE,IAAL,CAAUD,CAAV;AACD,GATmD;;;AAYpDD,MAAI,CAACG,IAAL;AACA,MAAIvG,GAAG,GAAG,GAAV;;AACA,OAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6D,IAAI,CAAC5D,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,QAAIA,CAAC,KAAK,CAAV,EAAa;AACXvC,SAAG,IAAI,GAAP;AACD;;AACDA,OAAG,IAAIK,eAAU+F,IAAI,CAAC7D,CAAD,CAAdlC,CAAP;AACAL,OAAG,IAAI,GAAP;AACAA,OAAG,IAAImG,iBAAiB,CAACD,GAAG,CAACE,IAAI,CAAC7D,CAAD,CAAL,CAAJ,CAAxB;AACD;;AAEDvC,KAAG,IAAI,GAAP;AACA,SAAOA,GAAP;AACD,CAzBM;AA2BP;;;;;;;;AAMO,IAAMwG,iBAAiB,GAAG,UAC/B7E,GAD+B,EAE/B8E,OAF+B,EAEhB;AAEf,MAAMC,GAAG,GAAG/E,GAAG,CAACa,MAAhB;;AAEA,MAAIkE,GAAG,IAAID,OAAX,EAAoB;AAClB,WAAO,CAAC9E,GAAD,CAAP;AACD;;AAED,MAAMgF,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,IAAIH,OAA9B,EAAuC;AACrC,QAAIG,CAAC,GAAGH,OAAJ,GAAcC,GAAlB,EAAuB;AACrBC,cAAQ,CAACL,IAAT,CAAc3E,GAAG,CAACkF,SAAJ,CAAcD,CAAd,EAAiBF,GAAjB,CAAd;AACD,KAFD,MAEO;AACLC,cAAQ,CAACL,IAAT,CAAc3E,GAAG,CAACkF,SAAJ,CAAcD,CAAd,EAAiBA,CAAC,GAAGH,OAArB,CAAd;AACD;AACF;;AACD,SAAOE,QAAP;AACD,CAnBM;AAqBP;;;;;;;;SAMgBG,KAAKZ,KAAatB,IAAmC;AACnE,OAAK,IAAM5E,GAAX,IAAkBkG,GAAlB,EAAuB;AACrB,QAAIA,GAAG,CAACa,cAAJ,CAAmB/G,GAAnB,CAAJ,EAA6B;AAC3B4E,QAAE,CAAC5E,GAAD,EAAMkG,GAAG,CAAClG,GAAD,CAAT,CAAF;AACD;AACF;AACF;AAeD;;;;;;;;;AAOO,IAAMgH,qBAAqB,GAAG,UAASC,CAAT,EAAkB;AACrD/D,cAAO,CAACoB,mBAAmB,CAAC2C,CAAD,CAA3B/D,EAAgC,qBAAhCA,EADqD,CACE;;AAEvD,MAAMgE,KAAK,GAAG,EAAd;AAAA,MACEC,KAAK,GAAG,EADV;AAEA,MAAMC,IAAI,GAAG,CAAC,KAAMF,KAAK,GAAG,CAAf,IAAqB,CAAlC;AACA,MAAIG,CAAJ,EAAOlG,CAAP,EAAUmG,CAAV,EAAaC,EAAb,EAAiBhF,CAAjB,CANqD;;;AAUrD,MAAI0E,CAAC,KAAK,CAAV,EAAa;AACX9F,KAAC,GAAG,CAAJ;AACAmG,KAAC,GAAG,CAAJ;AACAD,KAAC,GAAG,IAAIJ,CAAJ,KAAU,CAACO,QAAX,GAAsB,CAAtB,GAA0B,CAA9B;AACD,GAJD,MAIO;AACLH,KAAC,GAAGJ,CAAC,GAAG,CAAR;AACAA,KAAC,GAAG7B,IAAI,CAACqC,GAAL,CAASR,CAAT,CAAJ;;AAEA,QAAIA,CAAC,IAAI7B,IAAI,CAACsC,GAAL,CAAS,CAAT,EAAY,IAAIN,IAAhB,CAAT,EAAgC;;AAE9BG,QAAE,GAAGnC,IAAI,CAACuC,GAAL,CAASvC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAAC9B,GAAL,CAAS2D,CAAT,IAAc7B,IAAI,CAACwC,GAA9B,CAAT,EAA6CR,IAA7C,CAAL;AACAjG,OAAC,GAAGoG,EAAE,GAAGH,IAAT;AACAE,OAAC,GAAGlC,IAAI,CAACyC,KAAL,CAAWZ,CAAC,GAAG7B,IAAI,CAACsC,GAAL,CAAS,CAAT,EAAYP,KAAK,GAAGI,EAApB,CAAJ,GAA8BnC,IAAI,CAACsC,GAAL,CAAS,CAAT,EAAYP,KAAZ,CAAzC,CAAJ;AACD,KALD,MAKO;;AAELhG,OAAC,GAAG,CAAJ;AACAmG,OAAC,GAAGlC,IAAI,CAACyC,KAAL,CAAWZ,CAAC,GAAG7B,IAAI,CAACsC,GAAL,CAAS,CAAT,EAAY,IAAIN,IAAJ,GAAWD,KAAvB,CAAf,CAAJ;AACD;AACF,GA5BoD;;;AA+BrD,MAAMW,IAAI,GAAG,EAAb;;AACA,OAAKvF,CAAC,GAAG4E,KAAT,EAAgB5E,CAAhB,EAAmBA,CAAC,IAAI,CAAxB,EAA2B;AACzBuF,QAAI,CAACxB,IAAL,CAAUgB,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAtB;AACAA,KAAC,GAAGlC,IAAI,CAACC,KAAL,CAAWiC,CAAC,GAAG,CAAf,CAAJ;AACD;;AACD,OAAK/E,CAAC,GAAG2E,KAAT,EAAgB3E,CAAhB,EAAmBA,CAAC,IAAI,CAAxB,EAA2B;AACzBuF,QAAI,CAACxB,IAAL,CAAUnF,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAY,CAAtB;AACAA,KAAC,GAAGiE,IAAI,CAACC,KAAL,CAAWlE,CAAC,GAAG,CAAf,CAAJ;AACD;;AACD2G,MAAI,CAACxB,IAAL,CAAUe,CAAC,GAAG,CAAH,GAAO,CAAlB;AACAS,MAAI,CAACC,OAAL;AACA,MAAMpG,GAAG,GAAGmG,IAAI,CAACE,IAAL,CAAU,EAAV,CAAZ,CA1CqD;;AA6CrD,MAAIC,aAAa,GAAG,EAApB;;AACA,OAAK1F,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,IAAI,CAAzB,EAA4B;AAC1B,QAAI2F,OAAO,GAAGC,QAAQ,CAACxG,GAAG,CAACyG,MAAJ,CAAW7F,CAAX,EAAc,CAAd,CAAD,EAAmB,CAAnB,CAAR,CAA8B5B,QAA9B,CAAuC,EAAvC,CAAd;;AACA,QAAIuH,OAAO,CAAC1F,MAAR,KAAmB,CAAvB,EAA0B;AACxB0F,aAAO,GAAG,MAAMA,OAAhB;AACD;;AACDD,iBAAa,GAAGA,aAAa,GAAGC,OAAhC;AACD;;AACD,SAAOD,aAAa,CAACI,WAAd,EAAP;AACD,CAtDM;AAwDP;;;;;;;AAKO,IAAMC,8BAA8B,GAAG;AAC5C,SAAO,CAAC,EACN,OAAOrH,MAAP,KAAkB,QAAlB,IACAA,MAAM,CAAC,QAAD,CADN,IAEAA,MAAM,CAAC,QAAD,CAAN,CAAiB,WAAjB,CAFA,IAGA,CAAC,UAAUsH,IAAV,CAAetH,MAAM,CAACkD,QAAP,CAAgBqE,IAA/B,CAJK,CAAR;AAMD,CAPM;AASP;;;;;;AAIO,IAAMC,iBAAiB,GAAG;;AAE/B,SAAO,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,EAAf,KAAsB,QAA5D;AACD,CAHM;AAKP;;;;;;;;AAMO,IAAMC,kBAAkB,GAAG,UAASC,IAAT,EAAuBC,KAAvB,EAAmC;AACnE,MAAIC,MAAM,GAAG,eAAb;;AACA,MAAIF,IAAI,KAAK,SAAb,EAAwB;AACtBE,UAAM,GACJ,iDACA,6CAFF;AAGD,GAJD,MAIO,IAAIF,IAAI,KAAK,mBAAb,EAAkC;AACvCE,UAAM,GAAG,4DAAT;AACD,GAFM,MAEA,IAAIF,IAAI,KAAK,aAAb,EAA4B;AACjCE,UAAM,GAAG,4BAAT;AACD;;AAED,MAAMjF,KAAK,GAAG,IAAIE,KAAJ,CACZ6E,IAAI,GAAG,MAAP,GAAgBC,KAAK,CAACE,IAAN,CAAWrI,QAAX,EAAhB,GAAwC,IAAxC,GAA+CoI,MADnC,CAAd,CAZmE;;AAgBlEjF,OAAa,CAAC+E,IAAd,GAAqBA,IAAI,CAACI,WAAL,EAArB;AACD,SAAOnF,KAAP;AACD,CAlBM;AAoBP;;;;;;;AAKO,IAAMoF,eAAe,GAAG,IAAIC,MAAJ,CAAW,mBAAX,CAAxB;AAEP;;;;;;AAKO,IAAMrD,WAAW,GAAG,UAASnE,GAAT,EAAoB;AAC7C,MAAIuH,eAAe,CAACX,IAAhB,CAAqB5G,GAArB,CAAJ,EAA+B;AAC7B,QAAMyH,MAAM,GAAG5E,MAAM,CAAC7C,GAAD,CAArB;;AACA,QAAIyH,MAAM,IAAI,CAAC,UAAX,IAAyBA,MAAM,IAAI,UAAvC,EAAmD;AACjD,aAAOA,MAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CARM;AAUP;;;;;;;;;;;;;;;;;;;AAiBO,IAAMC,cAAc,GAAG,UAASzE,EAAT,EAAuB;AACnD,MAAI;AACFA,MAAE;AACH,GAFD,CAEE,OAAOzD,CAAP,EAAU;;AAEVgE,cAAU,CAAC;;;;;AAKT,UAAMmE,KAAK,GAAGnI,CAAC,CAACmI,KAAF,IAAW,EAAzB;AACArF,UAAI,CAAC,wCAAD,EAA2CqF,KAA3C,CAAJ;AACA,YAAMnI,CAAN;AACD,KARS,EAQPiE,IAAI,CAACC,KAAL,CAAW,CAAX,CARO,CAAV;AASD;AACF,CAfM;AAoCP;;;;;AAGO,IAAMkE,YAAY,GAAG;AAC1B,MAAMC,SAAS,GACZ,OAAOvI,MAAP,KAAkB,QAAlB,IACCA,MAAM,CAAC,WAAD,CADP,IAECA,MAAM,CAAC,WAAD,CAAN,CAAoB,WAApB,CAFF,IAGA,EAJF,CAD0B;;;;;AAW1B,SACEuI,SAAS,CAACC,MAAV,CACE,0FADF,KAEK,CAHP;AAKD,CAhBM;AAiCP;;;;;;;;;;;AASO,IAAMC,qBAAqB,GAAG,UACnC9E,EADmC,EAEnC+E,IAFmC,EAEvB;AAEZ,MAAMC,OAAO,GAAoBzE,UAAU,CAACP,EAAD,EAAK+E,IAAL,CAA3C,CAFY;;AAIZ,MAAI,OAAOC,OAAP,KAAmB,QAAnB,IAAgCA,OAAe,CAAC,OAAD,CAAnD,EAA8D;;AAE3DA,WAAe,CAAC,OAAD,CAAf;AACF;;AACD,SAAOA,OAAP;AACD,CAXM;AC1pBP;;;;;;;;;;;;;;;;;AAmBA;;;;;;;AAMA;AAAA;AAAA;;;;;;AAkBE,gBAAYC,YAAZ,EAA6CC,QAA7C,EAA8D;AAC5D,QAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AACvB,WAAKC,OAAL,GAAgBF,YAAuB,CAACG,KAAxB,CAA8B,GAA9B,CAAhB,CADuB;;AAIvB,UAAIC,MAAM,GAAG,CAAb;;AACA,WAAK,IAAI1H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwH,OAAL,CAAavH,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAI,KAAKwH,OAAL,CAAaxH,CAAb,EAAgBC,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,eAAKuH,OAAL,CAAaE,MAAb,IAAuB,KAAKF,OAAL,CAAaxH,CAAb,CAAvB;AACA0H,gBAAM;AACP;AACF;;AACD,WAAKF,OAAL,CAAavH,MAAb,GAAsByH,MAAtB;AAEA,WAAKC,SAAL,GAAiB,CAAjB;AACD,KAdD,MAcO;AACL,WAAKH,OAAL,GAAeF,YAAf;AACA,WAAKK,SAAL,GAAiBJ,QAAjB;AACD;AACF;;AA5BDK,wBAAWC,IAAX,EAAW,OAAX,EAAgB;;;;;;SAAhB;AACE,aAAO,IAAIA,IAAJ,CAAS,EAAT,CAAP;AACD,KAFe;oBAAA;;AAAA,GAAhB;;AA8BAA;AACE,QAAI,KAAKF,SAAL,IAAkB,KAAKH,OAAL,CAAavH,MAAnC,EAA2C;AACzC,aAAO,IAAP;AACD;;AAED,WAAO,KAAKuH,OAAL,CAAa,KAAKG,SAAlB,CAAP;AACD,GAND;;;;;;AAWAE;AACE,WAAO,KAAKL,OAAL,CAAavH,MAAb,GAAsB,KAAK0H,SAAlC;AACD,GAFD;;;;;;AAOAE;AACE,QAAIN,QAAQ,GAAG,KAAKI,SAApB;;AACA,QAAIJ,QAAQ,GAAG,KAAKC,OAAL,CAAavH,MAA5B,EAAoC;AAClCsH,cAAQ;AACT;;AACD,WAAO,IAAIM,IAAJ,CAAS,KAAKL,OAAd,EAAuBD,QAAvB,CAAP;AACD,GAND;;;;;;AAWAM;AACE,QAAI,KAAKF,SAAL,GAAiB,KAAKH,OAAL,CAAavH,MAAlC,EAA0C;AACxC,aAAO,KAAKuH,OAAL,CAAa,KAAKA,OAAL,CAAavH,MAAb,GAAsB,CAAnC,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GAND;;AAQA4H;AACE,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAI9H,CAAC,GAAG,KAAK2H,SAAlB,EAA6B3H,CAAC,GAAG,KAAKwH,OAAL,CAAavH,MAA9C,EAAsDD,CAAC,EAAvD,EAA2D;AACzD,UAAI,KAAKwH,OAAL,CAAaxH,CAAb,MAAoB,EAAxB,EAA4B;AAC1B8H,kBAAU,IAAI,MAAM,KAAKN,OAAL,CAAaxH,CAAb,CAApB;AACD;AACF;;AAED,WAAO8H,UAAU,IAAI,GAArB;AACD,GATD;;AAWAD;AACE,QAAIC,UAAU,GAAG,EAAjB;;AACA,SAAK,IAAI9H,CAAC,GAAG,KAAK2H,SAAlB,EAA6B3H,CAAC,GAAG,KAAKwH,OAAL,CAAavH,MAA9C,EAAsDD,CAAC,EAAvD,EAA2D;AACzD,UAAI,KAAKwH,OAAL,CAAaxH,CAAb,MAAoB,EAAxB,EAA4B;AAC1B8H,kBAAU,IAAI,MAAMC,kBAAkB,CAACC,MAAM,CAAC,KAAKR,OAAL,CAAaxH,CAAb,CAAD,CAAP,CAAtC;AACD;AACF;;AAED,WAAO8H,UAAU,IAAI,GAArB;AACD,GATD;;;;;;;;;AAiBAD,mCAAMI,KAAN,EAAuB;AAAjB;AAAAA;AAAiB;;AACrB,WAAO,KAAKT,OAAL,CAAaU,KAAb,CAAmB,KAAKP,SAAL,GAAiBM,KAApC,CAAP;AACD,GAFD;;;;;;AAOAJ;AACE,QAAI,KAAKF,SAAL,IAAkB,KAAKH,OAAL,CAAavH,MAAnC,EAA2C;AACzC,aAAO,IAAP;AACD;;AAED,QAAMkI,MAAM,GAAG,EAAf;;AACA,SAAK,IAAInI,CAAC,GAAG,KAAK2H,SAAlB,EAA6B3H,CAAC,GAAG,KAAKwH,OAAL,CAAavH,MAAb,GAAsB,CAAvD,EAA0DD,CAAC,EAA3D,EAA+D;AAC7DmI,YAAM,CAACpE,IAAP,CAAY,KAAKyD,OAAL,CAAaxH,CAAb,CAAZ;AACD;;AAED,WAAO,IAAI6H,IAAJ,CAASM,MAAT,EAAiB,CAAjB,CAAP;AACD,GAXD;;;;;;;AAiBAN,mCAAMO,YAAN,EAAiC;AAC/B,QAAMD,MAAM,GAAG,EAAf;;AACA,SAAK,IAAInI,CAAC,GAAG,KAAK2H,SAAlB,EAA6B3H,CAAC,GAAG,KAAKwH,OAAL,CAAavH,MAA9C,EAAsDD,CAAC,EAAvD,EAA2D;AACzDmI,YAAM,CAACpE,IAAP,CAAY,KAAKyD,OAAL,CAAaxH,CAAb,CAAZ;AACD;;AAED,QAAIoI,YAAY,YAAYP,IAA5B,EAAkC;AAChC,WACE,IAAI7H,CAAC,GAAGoI,YAAY,CAACT,SADvB,EAEE3H,CAAC,GAAGoI,YAAY,CAACZ,OAAb,CAAqBvH,MAF3B,EAGED,CAAC,EAHH,EAIE;AACAmI,cAAM,CAACpE,IAAP,CAAYqE,YAAY,CAACZ,OAAb,CAAqBxH,CAArB,CAAZ;AACD;AACF,KARD,MAQO;AACL,UAAMqI,WAAW,GAAGD,YAAY,CAACX,KAAb,CAAmB,GAAnB,CAApB;;AACA,WAAK,IAAIzH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqI,WAAW,CAACpI,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,YAAIqI,WAAW,CAACrI,CAAD,CAAX,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7BkI,gBAAM,CAACpE,IAAP,CAAYsE,WAAW,CAACrI,CAAD,CAAvB;AACD;AACF;AACF;;AAED,WAAO,IAAI6H,IAAJ,CAASM,MAAT,EAAiB,CAAjB,CAAP;AACD,GAxBD;;;;;;AA6BAN;AACE,WAAO,KAAKF,SAAL,IAAkB,KAAKH,OAAL,CAAavH,MAAtC;AACD,GAFD;;;;;;;;AASO4H,sBAAP,UAAoBS,SAApB,EAAqCC,SAArC,EAAoD;AAClD,QAAMC,KAAK,GAAGF,SAAS,CAACG,QAAV,EAAd;AAAA,QACEC,KAAK,GAAGH,SAAS,CAACE,QAAV,EADV;;AAEA,QAAID,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAOD,SAAP;AACD,KAFD,MAEO,IAAIC,KAAK,KAAKE,KAAd,EAAqB;AAC1B,aAAOb,IAAI,CAACc,YAAL,CAAkBL,SAAS,CAACM,QAAV,EAAlB,EAAwCL,SAAS,CAACK,QAAV,EAAxC,CAAP;AACD,KAFM,MAEA;AACL,YAAM,IAAInH,KAAJ,CACJ,gCACE8G,SADF,GAEE,kBAFF,GAGE,aAHF,GAIED,SAJF,GAKE,GANE,CAAN;AAQD;AACF,GAjBM;;;;;;;;AAwBAT,sBAAP,UAAoBgB,IAApB,EAAgCC,KAAhC,EAA2C;AACzC,QAAMC,QAAQ,GAAGF,IAAI,CAACX,KAAL,EAAjB;AACA,QAAMc,SAAS,GAAGF,KAAK,CAACZ,KAAN,EAAlB;;AACA,SAAK,IAAIlI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+I,QAAQ,CAAC9I,MAAb,IAAuBD,CAAC,GAAGgJ,SAAS,CAAC/I,MAArD,EAA6DD,CAAC,EAA9D,EAAkE;AAChE,UAAMiJ,GAAG,GAAG9F,WAAW,CAAC4F,QAAQ,CAAC/I,CAAD,CAAT,EAAcgJ,SAAS,CAAChJ,CAAD,CAAvB,CAAvB;;AACA,UAAIiJ,GAAG,KAAK,CAAZ,EAAe;AACb,eAAOA,GAAP;AACD;AACF;;AACD,QAAIF,QAAQ,CAAC9I,MAAT,KAAoB+I,SAAS,CAAC/I,MAAlC,EAA0C;AACxC,aAAO,CAAP;AACD;;AACD,WAAO8I,QAAQ,CAAC9I,MAAT,GAAkB+I,SAAS,CAAC/I,MAA5B,GAAqC,CAAC,CAAtC,GAA0C,CAAjD;AACD,GAbM;;;;;;;;AAoBP4H,oCAAOqB,KAAP,EAAkB;AAChB,QAAI,KAAKC,SAAL,OAAqBD,KAAK,CAACC,SAAN,EAAzB,EAA4C;AAC1C,aAAO,KAAP;AACD;;AAED,SACE,IAAInJ,CAAC,GAAG,KAAK2H,SAAb,EAAwByB,CAAC,GAAGF,KAAK,CAACvB,SADpC,EAEE3H,CAAC,IAAI,KAAKwH,OAAL,CAAavH,MAFpB,EAGED,CAAC,IAAIoJ,CAAC,EAHR,EAIE;AACA,UAAI,KAAK5B,OAAL,CAAaxH,CAAb,MAAoBkJ,KAAK,CAAC1B,OAAN,CAAc4B,CAAd,CAAxB,EAA0C;AACxC,eAAO,KAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD,GAhBD;;;;;;;;AAuBAvB,sCAASqB,KAAT,EAAoB;AAClB,QAAIlJ,CAAC,GAAG,KAAK2H,SAAb;AACA,QAAIyB,CAAC,GAAGF,KAAK,CAACvB,SAAd;;AACA,QAAI,KAAKwB,SAAL,KAAmBD,KAAK,CAACC,SAAN,EAAvB,EAA0C;AACxC,aAAO,KAAP;AACD;;AACD,WAAOnJ,CAAC,GAAG,KAAKwH,OAAL,CAAavH,MAAxB,EAAgC;AAC9B,UAAI,KAAKuH,OAAL,CAAaxH,CAAb,MAAoBkJ,KAAK,CAAC1B,OAAN,CAAc4B,CAAd,CAAxB,EAA0C;AACxC,eAAO,KAAP;AACD;;AACD,QAAEpJ,CAAF;AACA,QAAEoJ,CAAF;AACD;;AACD,WAAO,IAAP;AACD,GAdD;;AAeF;AAxPA,I,CAwPC;;AAED;;;;;;;;;;;;AAUA;AAAA;AAAA;;;;;AAUE,0BAAY3C,IAAZ,EAAgC4C,YAAhC,EAAoD;AAApB;;;AAE9B,SAAKC,MAAL,GAAc7C,IAAI,CAACyB,KAAL,EAAd;;;AAEA,SAAKqB,WAAL,GAAmB1G,IAAI,CAAC2G,GAAL,CAAS,CAAT,EAAY,KAAKF,MAAL,CAAYrJ,MAAxB,CAAnB;;AAEA,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKsJ,MAAL,CAAYrJ,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,WAAKuJ,WAAL,IAAoBE,kBAAa,KAAKH,MAAL,CAAYtJ,CAAZ,CAAbyJ,CAApB;AACD;;AACD,SAAKC,WAAL;AACD;;AAGD9B,wBAAW+B,cAAX,EAAW,gBAAX,EAAyB;;SAAzB;AACE,aAAO,EAAP;AACD,KAFwB;oBAAA;;AAAA,GAAzB;AAKA/B,wBAAW+B,cAAX,EAAW,uBAAX,EAAgC;;SAAhC;AACE,aAAO,GAAP;AACD,KAF+B;oBAAA;;AAAA,GAAhC;;;AAKAA,4CAAKC,KAAL,EAAkB;;AAEhB,QAAI,KAAKN,MAAL,CAAYrJ,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,WAAKsJ,WAAL,IAAoB,CAApB;AACD;;AACD,SAAKD,MAAL,CAAYvF,IAAZ,CAAiB6F,KAAjB;AACA,SAAKL,WAAL,IAAoBE,kBAAaG,KAAbH,CAApB;AACA,SAAKC,WAAL;AACD,GARD;;AAUAC;AACE,QAAME,IAAI,GAAG,KAAKP,MAAL,CAAYQ,GAAZ,EAAb;AACA,SAAKP,WAAL,IAAoBE,kBAAaI,IAAbJ,CAApB,CAFF;;AAIE,QAAI,KAAKH,MAAL,CAAYrJ,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,WAAKsJ,WAAL,IAAoB,CAApB;AACD;AACF,GAPD;;AASQI,yCAAR;AACE,QAAI,KAAKJ,WAAL,GAAmBI,cAAc,CAACI,qBAAtC,EAA6D;AAC3D,YAAM,IAAItI,KAAJ,CACJ,KAAK4H,YAAL,GACE,6BADF,GAEEM,cAAc,CAACI,qBAFjB,GAGE,UAHF,GAIE,KAAKR,WAJP,GAKE,IANE,CAAN;AAQD;;AACD,QAAI,KAAKD,MAAL,CAAYrJ,MAAZ,GAAqB0J,cAAc,CAACK,cAAxC,EAAwD;AACtD,YAAM,IAAIvI,KAAJ,CACJ,KAAK4H,YAAL,GACE,gEADF,GAEEM,cAAc,CAACK,cAFjB,GAGE,+BAHF,GAIE,KAAKC,aAAL,EALE,CAAN;AAOD;AACF,GApBO;;;;;;;;AA2BRN;AACE,QAAI,KAAKL,MAAL,CAAYrJ,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,aAAO,EAAP;AACD;;AACD,WAAO,kBAAkB,KAAKqJ,MAAL,CAAY7D,IAAZ,CAAiB,GAAjB,CAAlB,GAA0C,GAAjD;AACD,GALD;;AAMF;AAAC,CArFD;AC7RA;;;;;;;;;;;;;;;;;;AAiBO,IAAMyE,gBAAgB,GAAG,GAAzB;AAEA,IAAMC,aAAa,GAAG,GAAtB;AAEA,IAAMC,uBAAuB,GAAG,GAAhC;AAEA,IAAMC,aAAa,GAAG,GAAtB;AAEA,IAAMC,SAAS,GAAG,GAAlB;AAEA,IAAMC,YAAY,GAAG,gBAArB;AAEA,IAAMC,kBAAkB,GAAG,IAA3B;AAEA,IAAMC,SAAS,GAAG,WAAlB;AAEA,IAAMC,YAAY,GAAG,cAArB;ACjCP;;;;;;;;;;;;;;;;;AAsBA;;;;;;AAKA;AAAA;AAAA;;;;;;;;AAYE,oBACEC,IADF,EAESC,MAFT,EAGSC,SAHT,EAISC,aAJT,EAKSC,cALT,EAMSC,6BANT,EAMuD;AAD9C;AAAAD;AAA2B;;AAC3B;AAAAC;AAA8C;;AAJ9C;AACA;AACA;AACA;AACA;AAEP,SAAKL,IAAL,GAAYA,IAAI,CAAC7E,WAAL,EAAZ;AACA,SAAKmF,MAAL,GAAc,KAAKN,IAAL,CAAU9E,MAAV,CAAiB,KAAK8E,IAAL,CAAU7I,OAAV,CAAkB,GAAlB,IAAyB,CAA1C,CAAd;AACA,SAAKoJ,YAAL,GACGrM,iBAAiB,CAACsC,GAAlB,CAAsB,UAAUwJ,IAAhC,KAAoD,KAAKA,IAD5D;AAED;;AAEDQ;AACE,WACE,KAAKR,IAAL,KAAc,KAAKO,YAAnB,IACA,KAAKE,YAAL,EADA,IAEA,KAAKJ,6BAHP;AAKD,GAND;;AAQAG;AACE,WAAO,KAAKD,YAAL,CAAkBrF,MAAlB,CAAyB,CAAzB,EAA4B,CAA5B,MAAmC,IAA1C;AACD,GAFD;;AAIAsF;AACE,WAAO,KAAKF,MAAL,KAAgB,qBAAvB;AACD,GAFD;;AAIAE;AACE,WACE,KAAKF,MAAL,KAAgB,gBAAhB,IAAoC,KAAKA,MAAL,KAAgB,qBADtD;AAGD,GAJD;;AAMAE,4CAAWE,OAAX,EAA0B;AACxB,QAAIA,OAAO,KAAK,KAAKH,YAArB,EAAmC;AACjC,WAAKA,YAAL,GAAoBG,OAApB;;AACA,UAAI,KAAKC,eAAL,EAAJ,EAA4B;AAC1BzM,yBAAiB,CAACoC,GAAlB,CAAsB,UAAU,KAAK0J,IAArC,EAA2C,KAAKO,YAAhD;AACD;AACF;AACF,GAPD;;;;;;;;;AAeAC,+CAAcI,IAAd,EAA4BC,MAA5B,EAA2D;AACzD7K,gBAAO,OAAO4K,IAAP,KAAgB,QAAvB5K,EAAiC,4BAAjCA;AACAA,gBAAO,OAAO6K,MAAP,KAAkB,QAAzB7K,EAAmC,8BAAnCA;AAEA,QAAI8K,OAAJ;;AACA,QAAIF,IAAI,KAAKd,SAAb,EAAwB;AACtBgB,aAAO,GACL,CAAC,KAAKb,MAAL,GAAc,QAAd,GAAyB,OAA1B,IAAqC,KAAKM,YAA1C,GAAyD,OAD3D;AAED,KAHD,MAGO,IAAIK,IAAI,KAAKb,YAAb,EAA2B;AAChCe,aAAO,GACL,CAAC,KAAKb,MAAL,GAAc,UAAd,GAA2B,SAA5B,IAAyC,KAAKM,YAA9C,GAA6D,OAD/D;AAED,KAHM,MAGA;AACL,YAAM,IAAIzJ,KAAJ,CAAU,8BAA8B8J,IAAxC,CAAN;AACD;;AACD,QAAI,KAAKG,eAAL,EAAJ,EAA4B;AAC1BF,YAAM,CAAC,IAAD,CAAN,GAAe,KAAKX,SAApB;AACD;;AAED,QAAMc,KAAK,GAAa,EAAxB;AAEApH,QAAI,CAACiH,MAAD,EAAS,UAAC/N,GAAD,EAAcC,KAAd,EAA2B;AACtCiO,WAAK,CAAC5H,IAAN,CAAWtG,GAAG,GAAG,GAAN,GAAYC,KAAvB;AACD,KAFG,CAAJ;AAIA,WAAO+N,OAAO,GAAGE,KAAK,CAAClG,IAAN,CAAW,GAAX,CAAjB;AACD,GAzBD;;;;AA4BA0F;AACE,QAAI/L,GAAG,GAAG,KAAKwM,WAAL,EAAV;;AACA,QAAI,KAAKb,cAAT,EAAyB;AACvB3L,SAAG,IAAI,MAAM,KAAK2L,cAAX,GAA4B,GAAnC;AACD;;AACD,WAAO3L,GAAP;AACD,GAND;;;;AASA+L;AACE,WAAO,CAAC,KAAKP,MAAL,GAAc,UAAd,GAA2B,SAA5B,IAAyC,KAAKD,IAArD;AACD,GAFD;;AAGF;AAAC,CAvGD;AC3BA;;;;;;;;;;;;;;;;;AAqBA;;;;;;AAIA,SAASkB,UAAT,CAAoB/D,UAApB,EAAsC;AACpC,MAAIgE,iBAAiB,GAAG,EAAxB;AACA,MAAM3D,MAAM,GAAGL,UAAU,CAACL,KAAX,CAAiB,GAAjB,CAAf;;AACA,OAAK,IAAIzH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmI,MAAM,CAAClI,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,QAAImI,MAAM,CAACnI,CAAD,CAAN,CAAUC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAI8L,KAAK,GAAG5D,MAAM,CAACnI,CAAD,CAAlB;;AACA,UAAI;AACF+L,aAAK,GAAGC,kBAAkB,CAACD,KAAK,CAACE,OAAN,CAAc,KAAd,EAAqB,GAArB,CAAD,CAA1B;AACD,OAFD,CAEE,OAAOrN,CAAP,EAAU,CAAE;;AACdkN,uBAAiB,IAAI,MAAMC,KAA3B;AACD;AACF;;AACD,SAAOD,iBAAP;AACD;AAED;;;;;;AAIA,SAASI,WAAT,CAAqBC,WAArB,EAAwC;;;AACtC,MAAMC,OAAO,GAAG,EAAhB;;AACA,MAAID,WAAW,CAACE,MAAZ,CAAmB,CAAnB,MAA0B,GAA9B,EAAmC;AACjCF,eAAW,GAAGA,WAAW,CAAC7H,SAAZ,CAAsB,CAAtB,CAAd;AACD;;;AACD,SAAsB,mCAAW,CAACmD,KAAZ,CAAkB,GAAlB,IAAsB6E,cAA5C,EAA4C,QAA5C,EAA4CA,cAA5C,EAA8C;AAAzC,UAAMC,OAAO,WAAb;;AACH,UAAIA,OAAO,CAACtM,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACD;;AACD,UAAMuM,EAAE,GAAGD,OAAO,CAAC9E,KAAR,CAAc,GAAd,CAAX;;AACA,UAAI+E,EAAE,CAACvM,MAAH,KAAc,CAAlB,EAAqB;AACnBmM,eAAO,CAACJ,kBAAkB,CAACQ,EAAE,CAAC,CAAD,CAAH,CAAnB,CAAP,GAAqCR,kBAAkB,CAACQ,EAAE,CAAC,CAAD,CAAH,CAAvD;AACD,OAFD,MAEO;AACL9K,YAAI,CAAC,4BAA0B6K,OAA1B,GAAiC,cAAjC,GAAgDJ,WAAhD,GAA2D,GAA5D,CAAJ;AACD;AACF;;;;;;;;;;;;;AACD,SAAOC,OAAP;AACD;AAED;;;;;;;AAKO,IAAMK,aAAa,GAAG,UAC3BC,OAD2B,EACZ;AAEf,MAAMC,SAAS,GAAGC,gBAAgB,CAACF,OAAD,CAAlC;AAAA,MACE7B,SAAS,GAAG8B,SAAS,CAAC9B,SADxB;;AAGA,MAAI8B,SAAS,CAAC1B,MAAV,KAAqB,UAAzB,EAAqC;AACnCzJ,SAAK,CACHmL,SAAS,CAAChC,IAAV,GACE,2BADF,GAEE,mDAHC,CAAL;AAKD,GAXc;;;AAcf,MACE,CAAC,CAACE,SAAD,IAAcA,SAAS,KAAK,WAA7B,KACA8B,SAAS,CAAC1B,MAAV,KAAqB,WAFvB,EAGE;AACAzJ,SAAK,CACH,8EADG,CAAL;AAGD;;AAED,MAAI,CAACmL,SAAS,CAAC/B,MAAf,EAAuB;AACrBjJ,sBAAkB;AACnB;;AAED,MAAMmJ,aAAa,GAAG6B,SAAS,CAACE,MAAV,KAAqB,IAArB,IAA6BF,SAAS,CAACE,MAAV,KAAqB,KAAxE;AAEA,SAAO;AACLC,YAAQ,EAAE,IAAI3B,QAAJ,CACRwB,SAAS,CAAChC,IADF,EAERgC,SAAS,CAAC/B,MAFF,EAGRC,SAHQ,EAIRC,aAJQ;;AAKY,MALZ;;AAM2BD,aAAS,KAAK8B,SAAS,CAACI,SANnD,CADL;AASLtG,QAAI,EAAE,IAAIoB,IAAJ,CAAS8E,SAAS,CAAC7E,UAAnB;AATD,GAAP;AAWD,CAzCM;AA2CP;;;;;;;AAKO,IAAM8E,gBAAgB,GAAG,UAC9BF,OAD8B,EACf;;AAYf,MAAI/B,IAAI,GAAG,EAAX;AAAA,MACEM,MAAM,GAAG,EADX;AAAA,MAEE8B,SAAS,GAAG,EAFd;AAAA,MAGEjF,UAAU,GAAG,EAHf;AAAA,MAIE+C,SAAS,GAAG,EAJd,CAZe;;AAmBf,MAAID,MAAM,GAAG,IAAb;AAAA,MACEiC,MAAM,GAAG,OADX;AAAA,MAEEG,IAAI,GAAG,GAFT,CAnBe;;AAwBf,MAAI,OAAON,OAAP,KAAmB,QAAvB,EAAiC;;AAE/B,QAAIO,QAAQ,GAAGP,OAAO,CAAC5K,OAAR,CAAgB,IAAhB,CAAf;;AACA,QAAImL,QAAQ,IAAI,CAAhB,EAAmB;AACjBJ,YAAM,GAAGH,OAAO,CAACpI,SAAR,CAAkB,CAAlB,EAAqB2I,QAAQ,GAAG,CAAhC,CAAT;AACAP,aAAO,GAAGA,OAAO,CAACpI,SAAR,CAAkB2I,QAAQ,GAAG,CAA7B,CAAV;AACD,KAN8B;;;AAS/B,QAAIC,QAAQ,GAAGR,OAAO,CAAC5K,OAAR,CAAgB,GAAhB,CAAf;;AACA,QAAIoL,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnBA,cAAQ,GAAGR,OAAO,CAACzM,MAAnB;AACD;;AACD,QAAIkN,eAAe,GAAGT,OAAO,CAAC5K,OAAR,CAAgB,GAAhB,CAAtB;;AACA,QAAIqL,eAAe,KAAK,CAAC,CAAzB,EAA4B;AAC1BA,qBAAe,GAAGT,OAAO,CAACzM,MAA1B;AACD;;AACD0K,QAAI,GAAG+B,OAAO,CAACpI,SAAR,CAAkB,CAAlB,EAAqBzB,IAAI,CAACuC,GAAL,CAAS8H,QAAT,EAAmBC,eAAnB,CAArB,CAAP;;AACA,QAAID,QAAQ,GAAGC,eAAf,EAAgC;;AAE9BrF,gBAAU,GAAG+D,UAAU,CAACa,OAAO,CAACpI,SAAR,CAAkB4I,QAAlB,EAA4BC,eAA5B,CAAD,CAAvB;AACD;;AACD,QAAMC,WAAW,GAAGlB,WAAW,CAC7BQ,OAAO,CAACpI,SAAR,CAAkBzB,IAAI,CAACuC,GAAL,CAASsH,OAAO,CAACzM,MAAjB,EAAyBkN,eAAzB,CAAlB,CAD6B,CAA/B,CAtB+B;;AA2B/BF,YAAQ,GAAGtC,IAAI,CAAC7I,OAAL,CAAa,GAAb,CAAX;;AACA,QAAImL,QAAQ,IAAI,CAAhB,EAAmB;AACjBrC,YAAM,GAAGiC,MAAM,KAAK,OAAX,IAAsBA,MAAM,KAAK,KAA1C;AACAG,UAAI,GAAGpH,QAAQ,CAAC+E,IAAI,CAACrG,SAAL,CAAe2I,QAAQ,GAAG,CAA1B,CAAD,EAA+B,EAA/B,CAAf;AACD,KAHD,MAGO;AACLA,cAAQ,GAAGP,OAAO,CAACzM,MAAnB;AACD;;AAED,QAAMoN,KAAK,GAAG1C,IAAI,CAAClD,KAAL,CAAW,GAAX,CAAd;;AACA,QAAI4F,KAAK,CAACpN,MAAN,KAAiB,CAArB,EAAwB;;AAEtBgL,YAAM,GAAGoC,KAAK,CAAC,CAAD,CAAd;AACAN,eAAS,GAAGM,KAAK,CAAC,CAAD,CAAL,CAASvH,WAAT,EAAZ,CAHsB;;AAKtB+E,eAAS,GAAGkC,SAAZ;AACD,KAND,MAMO,IAAIM,KAAK,CAACpN,MAAN,KAAiB,CAArB,EAAwB;AAC7BgL,YAAM,GAAGoC,KAAK,CAAC,CAAD,CAAd;AACD,KAFM,MAEA,IAAIA,KAAK,CAAC,CAAD,CAAL,CAASnF,KAAT,CAAe,CAAf,EAAkB+E,QAAlB,EAA4BnH,WAA5B,OAA8C,WAAlD,EAA+D;AACpEmF,YAAM,GAAG,WAAT;AACD,KA9C8B;;;AAgD/B,QAAI,QAAQmC,WAAZ,EAAyB;AACvBvC,eAAS,GAAGuC,WAAW,CAAC,IAAD,CAAvB;AACD;AACF;;AAED,SAAO;AACLzC,QAAI,MADC;AAELqC,QAAI,MAFC;AAGL/B,UAAM,QAHD;AAIL8B,aAAS,WAJJ;AAKLnC,UAAM,QALD;AAMLiC,UAAM,QAND;AAOL/E,cAAU,YAPL;AAQL+C,aAAS;AARJ,GAAP;AAUD,CAxFM;ACpHP;;;;;;;;;;;;;;;;;AA4BA;;;;;;;AAKO,IAAMyC,kBAAkB,GAAG,gCAA3B;AAEP;;;;;;;AAMO,IAAMC,mBAAmB,GAAG,8BAA5B;AAEP;;;;;;AAKO,IAAMC,cAAc,GAAG,KAAK,IAAL,GAAY,IAAnC;AAEP;;;;;AAIO,IAAMC,UAAU,GAAG,UAAShQ,GAAT,EAAqB;AAC7C,SACE,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACwC,MAAJ,KAAe,CAA1C,IAA+C,CAACqN,kBAAkB,CAACtH,IAAnB,CAAwBvI,GAAxB,CADlD;AAGD,CAJM;AAMP;;;;;;AAIO,IAAMiQ,iBAAiB,GAAG,UAAS5F,UAAT,EAA2B;AAC1D,SACE,OAAOA,UAAP,KAAsB,QAAtB,IACAA,UAAU,CAAC7H,MAAX,KAAsB,CADtB,IAEA,CAACsN,mBAAmB,CAACvH,IAApB,CAAyB8B,UAAzB,CAHH;AAKD,CANM;AAQP;;;;;;AAIO,IAAM6F,qBAAqB,GAAG,UAAS7F,UAAT,EAA2B;AAC9D,MAAIA,UAAJ,EAAgB;;AAEdA,cAAU,GAAGA,UAAU,CAACmE,OAAX,CAAmB,kBAAnB,EAAuC,GAAvC,CAAb;AACD;;AAED,SAAOyB,iBAAiB,CAAC5F,UAAD,CAAxB;AACD,CAPM;AASP;;;;;;AAIO,IAAM8F,eAAe,GAAG,UAASC,QAAT,EAA0B;AACvD,SACEA,QAAQ,KAAK,IAAb,IACA,OAAOA,QAAP,KAAoB,QADpB,IAEC,OAAOA,QAAP,KAAoB,QAApB,IAAgC,CAAC9L,mBAAmB,CAAC8L,QAAD,CAFrD,IAGCA,QAAQ,IACP,OAAOA,QAAP,KAAoB,QADrB;AAGCtP,gBAASsP,QAATtP,EAA0B,KAA1BA,CAPJ;AASD,CAVM;AAYP;;;;;;;;;;;AASO,IAAMuP,uBAAuB,GAAG,UACrCC,MADqC,EAErCC,cAFqC,EAGrChM,IAHqC,EAIrCyE,IAJqC,EAKrCwH,QALqC,EAKpB;AAEjB,MAAIA,QAAQ,IAAIjM,IAAI,KAAKkM,SAAzB,EAAoC;AAClC;AACD;;AAEDC,sBAAoB,CAClBC,iBAAeL,MAAfK,EAAuBJ,cAAvBI,EAAuCH,QAAvCG,CADkB,EAElBpM,IAFkB,EAGlByE,IAHkB,CAApB;AAKD,CAhBM;AAkBP;;;;;;;;;AAOO,IAAM0H,oBAAoB,GAAG,UAClCE,WADkC,EAElCrM,IAFkC,EAGlCsM,KAHkC,EAGN;AAE5B,MAAM7H,IAAI,GACR6H,KAAK,YAAYzG,IAAjB,GAAwB,IAAI8B,cAAJ,CAAmB2E,KAAnB,EAA0BD,WAA1B,CAAxB,GAAiEC,KADnE;;AAGA,MAAItM,IAAI,KAAKkM,SAAb,EAAwB;AACtB,UAAM,IAAIzM,KAAJ,CAAU4M,WAAW,GAAG,qBAAd,GAAsC5H,IAAI,CAACwD,aAAL,EAAhD,CAAN;AACD;;AACD,MAAI,OAAOjI,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAIP,KAAJ,CACJ4M,WAAW,GACT,sBADF,GAEE5H,IAAI,CAACwD,aAAL,EAFF,GAGE,mBAHF,GAIEjI,IAAI,CAAC5D,QAAL,EALE,CAAN;AAOD;;AACD,MAAI2D,mBAAmB,CAACC,IAAD,CAAvB,EAA+B;AAC7B,UAAM,IAAIP,KAAJ,CACJ4M,WAAW,GAAG,WAAd,GAA4BrM,IAAI,CAAC5D,QAAL,EAA5B,GAA8C,GAA9C,GAAoDqI,IAAI,CAACwD,aAAL,EADhD,CAAN;AAGD,GArB2B;;;AAwB5B,MACE,OAAOjI,IAAP,KAAgB,QAAhB,IACAA,IAAI,CAAC/B,MAAL,GAAcuN,cAAc,GAAG,CAD/B,IAEA/D,kBAAazH,IAAbyH,IAAqB+D,cAHvB,EAIE;AACA,UAAM,IAAI/L,KAAJ,CACJ4M,WAAW,GACT,iCADF,GAEEb,cAFF,GAGE,cAHF,GAIE/G,IAAI,CAACwD,aAAL,EAJF,GAKE,KALF,GAMEjI,IAAI,CAACsC,SAAL,CAAe,CAAf,EAAkB,EAAlB,CANF,GAOE,OARE,CAAN;AAUD,GAvC2B;;;;AA2C5B,MAAItC,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AACpC,QAAIuM,aAAW,GAAG,KAAlB;AACA,QAAIC,gBAAc,GAAG,KAArB;AACAjK,QAAI,CAACvC,IAAD,EAAO,UAACvE,GAAD,EAAcC,KAAd,EAA4B;AACrC,UAAID,GAAG,KAAK,QAAZ,EAAsB;AACpB8Q,qBAAW,GAAG,IAAd;AACD,OAFD,MAEO,IAAI9Q,GAAG,KAAK,WAAR,IAAuBA,GAAG,KAAK,KAAnC,EAA0C;AAC/C+Q,wBAAc,GAAG,IAAjB;;AACA,YAAI,CAACf,UAAU,CAAChQ,GAAD,CAAf,EAAsB;AACpB,gBAAM,IAAIgE,KAAJ,CACJ4M,WAAW,GACT,4BADF,GAEE5Q,GAFF,GAGE,IAHF,GAIEgJ,IAAI,CAACwD,aAAL,EAJF,GAKE,oCALF,GAME,oDAPE,CAAN;AASD;AACF;;AAEDxD,UAAI,CAAC1C,IAAL,CAAUtG,GAAV;AACA0Q,0BAAoB,CAACE,WAAD,EAAc3Q,KAAd,EAAqB+I,IAArB,CAApB;AACAA,UAAI,CAACqD,GAAL;AACD,KArBG,CAAJ;;AAuBA,QAAIyE,aAAW,IAAIC,gBAAnB,EAAmC;AACjC,YAAM,IAAI/M,KAAJ,CACJ4M,WAAW,GACT,2BADF,GAEE5H,IAAI,CAACwD,aAAL,EAFF,GAGE,kCAJE,CAAN;AAMD;AACF;AACF,CAjFM;AAmFP;;;;;;;;AAMO,IAAMwE,0BAA0B,GAAG,UACxCJ,WADwC,EAExCK,UAFwC,EAEtB;AAElB,MAAI1O,CAAJ,EAAO2O,OAAP;;AACA,OAAK3O,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG0O,UAAU,CAACzO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC2O,WAAO,GAAGD,UAAU,CAAC1O,CAAD,CAApB;AACA,QAAM6D,IAAI,GAAG8K,OAAO,CAACzG,KAAR,EAAb;;AACA,SAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvF,IAAI,CAAC5D,MAAzB,EAAiCmJ,CAAC,EAAlC,EAAsC;AACpC,UAAIvF,IAAI,CAACuF,CAAD,CAAJ,KAAY,WAAZ,IAA2BA,CAAC,KAAKvF,IAAI,CAAC5D,MAAL,GAAc,CAAnD,EAAsD,CAAtD,KAEO,IAAI,CAACwN,UAAU,CAAC5J,IAAI,CAACuF,CAAD,CAAL,CAAf,EAA0B;AAC/B,cAAM,IAAI3H,KAAJ,CACJ4M,WAAW,GACT,2BADF,GAEExK,IAAI,CAACuF,CAAD,CAFN,GAGE,YAHF,GAIEuF,OAAO,CAACvQ,QAAR,EAJF,GAKE,mCALF,GAME,oDAPE,CAAN;AASD;AACF;AACF,GArBiB;;;;;AA0BlBsQ,YAAU,CAAC1K,IAAX,CAAgB6D,IAAI,CAAC+G,YAArB;AACA,MAAIC,QAAQ,GAAgB,IAA5B;;AACA,OAAK7O,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG0O,UAAU,CAACzO,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC2O,WAAO,GAAGD,UAAU,CAAC1O,CAAD,CAApB;;AACA,QAAI6O,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,CAACtQ,QAAT,CAAkBoQ,OAAlB,CAAzB,EAAqD;AACnD,YAAM,IAAIlN,KAAJ,CACJ4M,WAAW,GACT,kBADF,GAEEQ,QAAQ,CAACzQ,QAAT,EAFF,GAGE,oCAHF,GAIEuQ,OAAO,CAACvQ,QAAR,EALE,CAAN;AAOD;;AACDyQ,YAAQ,GAAGF,OAAX;AACD;AACF,CA3CM;AA6CP;;;;;;;;;;;;AAUO,IAAMG,4BAA4B,GAAG,UAC1Cf,MAD0C,EAE1CC,cAF0C,EAG1ChM,IAH0C,EAI1CyE,IAJ0C,EAK1CwH,QAL0C,EAKzB;AAEjB,MAAIA,QAAQ,IAAIjM,IAAI,KAAKkM,SAAzB,EAAoC;AAClC;AACD;;AAED,MAAMG,WAAW,GAAGD,iBAAeL,MAAfK,EAAuBJ,cAAvBI,EAAuCH,QAAvCG,CAApB;;AAEA,MAAI,EAAEpM,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA1B,KAAuC7B,KAAK,CAACC,OAAN,CAAc4B,IAAd,CAA3C,EAAgE;AAC9D,UAAM,IAAIP,KAAJ,CACJ4M,WAAW,GAAG,wDADV,CAAN;AAGD;;AAED,MAAMK,UAAU,GAAW,EAA3B;AACAnK,MAAI,CAACvC,IAAD,EAAO,UAACvE,GAAD,EAAcC,KAAd,EAA4B;AACrC,QAAMiR,OAAO,GAAG,IAAI9G,IAAJ,CAASpK,GAAT,CAAhB;AACA0Q,wBAAoB,CAACE,WAAD,EAAc3Q,KAAd,EAAqB+I,IAAI,CAACmD,KAAL,CAAW+E,OAAX,CAArB,CAApB;;AACA,QAAIA,OAAO,CAACI,OAAR,OAAsB,WAA1B,EAAuC;AACrC,UAAI,CAACnB,eAAe,CAAClQ,KAAD,CAApB,EAA6B;AAC3B,cAAM,IAAI+D,KAAJ,CACJ4M,WAAW,GACT,iCADF,GAEEM,OAAO,CAACvQ,QAAR,EAFF,GAGE,2BAHF,GAIE,qEALE,CAAN;AAOD;AACF;;AACDsQ,cAAU,CAAC3K,IAAX,CAAgB4K,OAAhB;AACD,GAfG,CAAJ;AAgBAF,4BAA0B,CAACJ,WAAD,EAAcK,UAAd,CAA1B;AACD,CArCM;;AAuCA,IAAMM,gBAAgB,GAAG,UAC9BjB,MAD8B,EAE9BC,cAF8B,EAG9BH,QAH8B,EAI9BI,QAJ8B,EAIb;AAEjB,MAAIA,QAAQ,IAAIJ,QAAQ,KAAKK,SAA7B,EAAwC;AACtC;AACD;;AACD,MAAInM,mBAAmB,CAAC8L,QAAD,CAAvB,EAAmC;AACjC,UAAM,IAAIpM,KAAJ,CACJ2M,iBAAeL,MAAfK,EAAuBJ,cAAvBI,EAAuCH,QAAvCG,IACE,KADFA,GAEEP,QAAQ,CAACzP,QAAT,EAFFgQ,GAGE,oEAHFA,GAIE,yBALE,CAAN;AAOD,GAbgB;;;AAejB,MAAI,CAACR,eAAe,CAACC,QAAD,CAApB,EAAgC;AAC9B,UAAM,IAAIpM,KAAJ,CACJ2M,iBAAeL,MAAfK,EAAuBJ,cAAvBI,EAAuCH,QAAvCG,IACE,oCADFA,GAEE,mDAHE,CAAN;AAKD;AACF,CA1BM;;AA4BA,IAAMa,iBAAiB,GAAG,UAC/BlB,MAD+B,EAE/BC,cAF+B,EAG/BkB,SAH+B,EAI/BjB,QAJ+B,EAId;AAEjB,MAAIA,QAAQ,IAAIiB,SAAS,KAAKhB,SAA9B,EAAyC;AACvC;AACD;;AAED,UAAQgB,SAAR;AACE,SAAK,OAAL;AACA,SAAK,aAAL;AACA,SAAK,eAAL;AACA,SAAK,eAAL;AACA,SAAK,aAAL;AACE;;AACF;AACE,YAAM,IAAIzN,KAAJ,CACJ2M,iBAAeL,MAAfK,EAAuBJ,cAAvBI,EAAuCH,QAAvCG,IACE,wEADFA,GAEE,oCAHE,CAAN;AARJ;AAcD,CAxBM;;AA0BA,IAAMe,WAAW,GAAG,UACzBpB,MADyB,EAEzBC,cAFyB,EAGzBvQ,GAHyB,EAIzBwQ,QAJyB,EAIR;AAEjB,MAAIA,QAAQ,IAAIxQ,GAAG,KAAKyQ,SAAxB,EAAmC;AACjC;AACD;;AACD,MAAI,CAACT,UAAU,CAAChQ,GAAD,CAAf,EAAsB;AACpB,UAAM,IAAIgE,KAAJ,CACJ2M,iBAAeL,MAAfK,EAAuBJ,cAAvBI,EAAuCH,QAAvCG,IACE,wBADFA,GAEE3Q,GAFF2Q,GAGE,kDAHFA,GAIE,kDALE,CAAN;AAOD;AACF,CAlBM;;AAoBA,IAAMgB,kBAAkB,GAAG,UAChCrB,MADgC,EAEhCC,cAFgC,EAGhClG,UAHgC,EAIhCmG,QAJgC,EAIf;AAEjB,MAAIA,QAAQ,IAAInG,UAAU,KAAKoG,SAA/B,EAA0C;AACxC;AACD;;AAED,MAAI,CAACR,iBAAiB,CAAC5F,UAAD,CAAtB,EAAoC;AAClC,UAAM,IAAIrG,KAAJ,CACJ2M,iBAAeL,MAAfK,EAAuBJ,cAAvBI,EAAuCH,QAAvCG,IACE,yBADFA,GAEEtG,UAFFsG,GAGE,yCAHFA,GAIE,2CALE,CAAN;AAOD;AACF,CAnBM;;AAqBA,IAAMiB,sBAAsB,GAAG,UACpCtB,MADoC,EAEpCC,cAFoC,EAGpClG,UAHoC,EAIpCmG,QAJoC,EAInB;AAEjB,MAAInG,UAAJ,EAAgB;;AAEdA,cAAU,GAAGA,UAAU,CAACmE,OAAX,CAAmB,kBAAnB,EAAuC,GAAvC,CAAb;AACD;;AAEDmD,oBAAkB,CAACrB,MAAD,EAASC,cAAT,EAAyBlG,UAAzB,EAAqCmG,QAArC,CAAlB;AACD,CAZM;;AAcA,IAAMqB,oBAAoB,GAAG,UAASvB,MAAT,EAAyBtH,IAAzB,EAAmC;AACrE,MAAIA,IAAI,CAACgC,QAAL,OAAoB,OAAxB,EAAiC;AAC/B,UAAM,IAAIhH,KAAJ,CAAUsM,MAAM,GAAG,2CAAnB,CAAN;AACD;AACF,CAJM;;AAMA,IAAMwB,WAAW,GAAG,UACzBxB,MADyB,EAEzBC,cAFyB,EAGzBrB,SAHyB,EAGoB;;AAG7C,MAAM7E,UAAU,GAAG6E,SAAS,CAAClG,IAAV,CAAerI,QAAf,EAAnB;;AACA,MACE,EAAE,OAAOuO,SAAS,CAACG,QAAV,CAAmBnC,IAA1B,KAAmC,QAArC,KACAgC,SAAS,CAACG,QAAV,CAAmBnC,IAAnB,CAAwB1K,MAAxB,KAAmC,CADnC,IAEC,CAACwN,UAAU,CAACd,SAAS,CAACG,QAAV,CAAmBjC,SAApB,CAAX,IACC8B,SAAS,CAACG,QAAV,CAAmBnC,IAAnB,CAAwBlD,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,MAA0C,WAH5C,IAICK,UAAU,CAAC7H,MAAX,KAAsB,CAAtB,IAA2B,CAAC0N,qBAAqB,CAAC7F,UAAD,CALpD,EAME;AACA,UAAM,IAAIrG,KAAJ,CACJ2M,iBAAeL,MAAfK,EAAuBJ,cAAvBI,EAAuC,KAAvCA,IACE,mCADFA,GAEE,qDAHE,CAAN;AAKD;AACF,CApBM;;AAuCA,IAAMoB,eAAe,GAAG,UAC7BzB,MAD6B,EAE7BC,cAF6B,EAG7ByB,IAH6B,EAI7BxB,QAJ6B,EAIZ;AAEjB,MAAIA,QAAQ,IAAIwB,IAAI,KAAKvB,SAAzB,EAAoC;AAClC;AACD;;AACD,MAAI,OAAOuB,IAAP,KAAgB,SAApB,EAA+B;AAC7B,UAAM,IAAIhO,KAAJ,CACJ2M,iBAAeL,MAAfK,EAAuBJ,cAAvBI,EAAuCH,QAAvCG,IAAmD,oBAD/C,CAAN;AAGD;AACF,CAdM;ACxdP;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;AAQE,wBAAoBsB,KAApB,EAAyCpB,KAAzC,EAAoD;AAAhC;AAAqB;AAAe;;;;;;;AAMxDqB,4CAAOC,UAAP,EAA6C;AAC3CC,0BAAiB,qBAAjBA,EAAwC,CAAxCA,EAA2C,CAA3CA,EAA8CC,SAAS,CAAC7P,MAAxD4P;AACAE,0BAAiB,qBAAjBA,EAAwC,CAAxCA,EAA2CH,UAA3CG,EAAuD,IAAvDA;AACA,QAAMC,QAAQ,GAAG,IAAIC,aAAJ,EAAjB;AACA,SAAKP,KAAL,CAAWQ,kBAAX,CACE,KAAK5B,KADP,EAEE0B,QAAQ,CAACG,YAAT,CAAsBP,UAAtB,CAFF;AAIA,WAAOI,QAAQ,CAACI,OAAhB;AACD,GATD;;;;;;;AAeAT,4CAAOC,UAAP,EAA6C;AAC3CC,0BAAiB,qBAAjBA,EAAwC,CAAxCA,EAA2C,CAA3CA,EAA8CC,SAAS,CAAC7P,MAAxD4P;AACAP,wBAAoB,CAAC,qBAAD,EAAwB,KAAKhB,KAA7B,CAApB;AACAyB,0BAAiB,qBAAjBA,EAAwC,CAAxCA,EAA2CH,UAA3CG,EAAuD,IAAvDA;AACA,QAAMC,QAAQ,GAAG,IAAIC,aAAJ,EAAjB;AACA,SAAKP,KAAL,CAAWW,eAAX,CACE,KAAK/B,KADP,EAEE,IAFF,EAGE0B,QAAQ,CAACG,YAAT,CAAsBP,UAAtB,CAHF;AAKA,WAAOI,QAAQ,CAACI,OAAhB;AACD,GAXD;;;;;;;;AAkBAT,yCAAIjS,KAAJ,EAAoBkS,UAApB,EAA0D;AACxDC,0BAAiB,kBAAjBA,EAAqC,CAArCA,EAAwC,CAAxCA,EAA2CC,SAAS,CAAC7P,MAArD4P;AACAP,wBAAoB,CAAC,kBAAD,EAAqB,KAAKhB,KAA1B,CAApB;AACAR,2BAAuB,CAAC,kBAAD,EAAqB,CAArB,EAAwBpQ,KAAxB,EAA+B,KAAK4Q,KAApC,EAA2C,KAA3C,CAAvB;AACAyB,0BAAiB,kBAAjBA,EAAqC,CAArCA,EAAwCH,UAAxCG,EAAoD,IAApDA;AACA,QAAMC,QAAQ,GAAG,IAAIC,aAAJ,EAAjB;AACA,SAAKP,KAAL,CAAWW,eAAX,CACE,KAAK/B,KADP,EAEE5Q,KAFF,EAGEsS,QAAQ,CAACG,YAAT,CAAsBP,UAAtB,CAHF;AAKA,WAAOI,QAAQ,CAACI,OAAhB;AACD,GAZD;;;;;;;;;AAoBAT,qDACEjS,KADF,EAEEmQ,QAFF,EAGE+B,UAHF,EAGwC;AAEtCC,0BAAiB,8BAAjBA,EAAiD,CAAjDA,EAAoD,CAApDA,EAAuDC,SAAS,CAAC7P,MAAjE4P;AACAP,wBAAoB,CAAC,8BAAD,EAAiC,KAAKhB,KAAtC,CAApB;AACAR,2BAAuB,CACrB,8BADqB,EAErB,CAFqB,EAGrBpQ,KAHqB,EAIrB,KAAK4Q,KAJgB,EAKrB,KALqB,CAAvB;AAOAU,oBAAgB,CAAC,8BAAD,EAAiC,CAAjC,EAAoCnB,QAApC,EAA8C,KAA9C,CAAhB;AACAkC,0BAAiB,8BAAjBA,EAAiD,CAAjDA,EAAoDH,UAApDG,EAAgE,IAAhEA;AAEA,QAAMC,QAAQ,GAAG,IAAIC,aAAJ,EAAjB;AACA,SAAKP,KAAL,CAAWY,2BAAX,CACE,KAAKhC,KADP,EAEE5Q,KAFF,EAGEmQ,QAHF,EAIEmC,QAAQ,CAACG,YAAT,CAAsBP,UAAtB,CAJF;AAMA,WAAOI,QAAQ,CAACI,OAAhB;AACD,GAzBD;;;;;;;;AAgCAT,4CACEY,aADF,EAEEX,UAFF,EAEwC;AAEtCC,0BAAiB,qBAAjBA,EAAwC,CAAxCA,EAA2C,CAA3CA,EAA8CC,SAAS,CAAC7P,MAAxD4P;AACAP,wBAAoB,CAAC,qBAAD,EAAwB,KAAKhB,KAA7B,CAApB;;AACA,QAAInO,KAAK,CAACC,OAAN,CAAcmQ,aAAd,CAAJ,EAAkC;AAChC,UAAMC,gBAAgB,GAA6B,EAAnD;;AACA,WAAK,IAAIxQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuQ,aAAa,CAACtQ,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7CwQ,wBAAgB,CAAC,KAAKxQ,CAAN,CAAhB,GAA2BuQ,aAAa,CAACvQ,CAAD,CAAxC;AACD;;AACDuQ,mBAAa,GAAGC,gBAAhB;AACA9O,UAAI,CACF,yHACE,0GAFA,CAAJ;AAID;;AACDoN,gCAA4B,CAC1B,qBAD0B,EAE1B,CAF0B,EAG1ByB,aAH0B,EAI1B,KAAKjC,KAJqB,EAK1B,KAL0B,CAA5B;AAOAyB,0BAAiB,qBAAjBA,EAAwC,CAAxCA,EAA2CH,UAA3CG,EAAuD,IAAvDA;AACA,QAAMC,QAAQ,GAAG,IAAIC,aAAJ,EAAjB;AACA,SAAKP,KAAL,CAAWe,kBAAX,CACE,KAAKnC,KADP,EAEEiC,aAFF,EAGEP,QAAQ,CAACG,YAAT,CAAsBP,UAAtB,CAHF;AAKA,WAAOI,QAAQ,CAACI,OAAhB;AACD,GAhCD;;AAiCF;AAAC;AClKD;;;;;;;;;;;;;;;;;;AAoBA;AAAA;AAAA;;;;;;;;AAQE,6BAAmBM,SAAnB,EAA8CC,QAA9C,EAAoE;AAAjD;AAA2B;AAA0B,GAR1E;;;;AAYEC;AACEf,0BAAiB,0BAAjBA,EAA6C,CAA7CA,EAAgD,CAAhDA,EAAmDC,SAAS,CAAC7P,MAA7D4P;AACA,WAAO;AAAEa,eAAS,EAAE,KAAKA,SAAlB;AAA6BC,cAAQ,EAAE,KAAKA,QAAL,CAAcE,MAAd;AAAvC,KAAP;AACD,GAHD;;AAIF;AAAC,CAhBD;ACpBA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;AAcO,IAAMC,UAAU,GAAI;;AAEzB,MAAMC,UAAU,GACd,kEADF,CAFyB;;;AAOzB,MAAIC,YAAY,GAAG,CAAnB,CAPyB;;;;;AAazB,MAAMC,aAAa,GAAa,EAAhC;AAEA,SAAO,UAASC,GAAT,EAAoB;AACzB,QAAMC,aAAa,GAAGD,GAAG,KAAKF,YAA9B;AACAA,gBAAY,GAAGE,GAAf;AAEA,QAAIlR,CAAJ;AACA,QAAMoR,cAAc,GAAG,IAAIjR,KAAJ,CAAU,CAAV,CAAvB;;AACA,SAAKH,CAAC,GAAG,CAAT,EAAYA,CAAC,IAAI,CAAjB,EAAoBA,CAAC,EAArB,EAAyB;AACvBoR,oBAAc,CAACpR,CAAD,CAAd,GAAoB+Q,UAAU,CAAC1E,MAAX,CAAkB6E,GAAG,GAAG,EAAxB,CAApB,CADuB;;;AAIvBA,SAAG,GAAGrO,IAAI,CAACC,KAAL,CAAWoO,GAAG,GAAG,EAAjB,CAAN;AACD;;AACDvQ,gBAAOuQ,GAAG,KAAK,CAAfvQ,EAAkB,0BAAlBA;AAEA,QAAIzB,EAAE,GAAGkS,cAAc,CAAC3L,IAAf,CAAoB,EAApB,CAAT;;AAEA,QAAI,CAAC0L,aAAL,EAAoB;AAClB,WAAKnR,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACvBiR,qBAAa,CAACjR,CAAD,CAAb,GAAmB6C,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACwO,MAAL,KAAgB,EAA3B,CAAnB;AACD;AACF,KAJD,MAIO;;;AAGL,WAAKrR,CAAC,GAAG,EAAT,EAAaA,CAAC,IAAI,CAAL,IAAUiR,aAAa,CAACjR,CAAD,CAAb,KAAqB,EAA5C,EAAgDA,CAAC,EAAjD,EAAqD;AACnDiR,qBAAa,CAACjR,CAAD,CAAb,GAAmB,CAAnB;AACD;;AACDiR,mBAAa,CAACjR,CAAD,CAAb;AACD;;AACD,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACvBd,QAAE,IAAI6R,UAAU,CAAC1E,MAAX,CAAkB4E,aAAa,CAACjR,CAAD,CAA/B,CAAN;AACD;;AACDW,gBAAOzB,EAAE,CAACe,MAAH,KAAc,EAArBU,EAAyB,kCAAzBA;AAEA,WAAOzB,EAAP;AACD,GAlCD;AAmCD,CAlDyB,EAAnB;ACjCP;;;;;;;;;;;;;;;;;AAyJA;;;;;;;;;AAOA;AAAA;AAAA;AACE,qBAAmBhB,IAAnB,EAAwCoT,IAAxC,EAAkD;AAA/B;AAAqB;AAAc;;;;;;;;;AAQ/CC,mBAAP,UAAYrT,IAAZ,EAA0BoT,IAA1B,EAAoC;AAClC,WAAO,IAAIC,SAAJ,CAAcrT,IAAd,EAAoBoT,IAApB,CAAP;AACD,GAFM;;AAGT;AAAC,CAZD;AChKA;;;;;;;;;;;;;;;;;AAqBA;;;;;;AAIA;AAAA;AAAA;AAAA,oBA8DC;;;;;;;AA5CCE;AACE,WAAO,KAAKC,OAAL,CAAazQ,IAAb,CAAkB,IAAlB,CAAP;AACD,GAFD;;;;;;;;;;;AAYAwQ,kDAAoBE,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,QAAMC,UAAU,GAAG,IAAIL,SAAJ,CAActO,QAAd,EAAwByO,OAAxB,CAAnB;AACA,QAAMG,UAAU,GAAG,IAAIN,SAAJ,CAActO,QAAd,EAAwB0O,OAAxB,CAAnB;AACA,WAAO,KAAKF,OAAL,CAAaG,UAAb,EAAyBC,UAAzB,MAAyC,CAAhD;AACD,GAJD;;;;;;;AAUAL;;AAEE,WAAQD,SAAiB,CAACO,GAA1B;AACD,GAHD;;AAsBF;AAAC,CA9DD;ACzBA;;;;;;;;;;;;;;;;;;AAuBA,IAAIC,YAAJ;;AAEA;AAAA;AAAA;AAA8BC;;AAA9B;;AAqEC;;AApECpK,wBAAWqK,QAAX,EAAW,cAAX,EAAuB;SAAvB;AACE,aAAOF,YAAP;AACD,KAFsB;SAIvB,UAAwBG,GAAxB,EAA2B;AACzBH,kBAAY,GAAGG,GAAf;AACD,KANsB;oBAAA;;AAAA,GAAvB;;;;;AAWAD,yCAAQ7O,CAAR,EAAsBC,CAAtB,EAAkC;AAChC,WAAOF,WAAW,CAACC,CAAC,CAAClF,IAAH,EAASmF,CAAC,CAACnF,IAAX,CAAlB;AACD,GAFD;;;;;;AAOA+T,6CAAYX,IAAZ,EAAsB;;;AAGpB,UAAMa,oBAAe,iDAAfA,CAAN;AACD,GAJD;;;;;;AASAF,qDAAoBP,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,WAAO,KAAP,CAD8C,CACjC;AACd,GAFD;;;;;;AAOAM;;AAEE,WAAQV,SAAiB,CAACO,GAA1B;AACD,GAHD;;;;;;AAQAG;;;AAGE,WAAO,IAAIV,SAAJ,CAAcrO,QAAd,EAAwB6O,YAAxB,CAAP;AACD,GAJD;;;;;;;;AAWAE,0CAASG,UAAT,EAA6BlU,IAA7B,EAAyC;AACvCyC,gBACE,OAAOyR,UAAP,KAAsB,QADxBzR,EAEE,8CAFFA,EADuC;;AAMvC,WAAO,IAAI4Q,SAAJ,CAAca,UAAd,EAA0BL,YAA1B,CAAP;AACD,GAPD;;;;;;AAYAE;AACE,WAAO,MAAP;AACD,GAFD;;AAGF;AArEA,EAA8BT,KAA9B;;AAuEO,IAAMa,SAAS,GAAG,IAAIJ,QAAJ,EAAlB;AChGP;;;;;;;;;;;;;;;;;AAuBA,IAAIK,QAAJ;;SAEgBC,WAAWL,KAAS;AAClCI,UAAQ,GAAGJ,GAAX;AACD;AAED;;;;;;AAIO,IAAMM,gBAAgB,GAAG,UAAS3E,QAAT,EAAkC;AAChE,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,WAAO,YAAYpJ,qBAAqB,CAACoJ,QAAD,CAAxC;AACD,GAFD,MAEO;AACL,WAAO,YAAYA,QAAnB;AACD;AACF,CANM;AAQP;;;;;;;AAKO,IAAM4E,oBAAoB,GAAG,UAASC,YAAT,EAA2B;AAC7D,MAAIA,YAAY,CAACC,UAAb,EAAJ,EAA+B;AAC7B,QAAMT,GAAG,GAAGQ,YAAY,CAACR,GAAb,EAAZ;AACAvR,gBACE,OAAOuR,GAAP,KAAe,QAAf,IACE,OAAOA,GAAP,KAAe,QADjB,IAEG,OAAOA,GAAP,KAAe,QAAf,IAA2B3T,cAAS2T,GAAT3T,EAA2B,KAA3BA,CAHhCoC,EAIE,sCAJFA;AAMD,GARD,MAQO;AACLA,gBACE+R,YAAY,KAAKJ,QAAjB,IAA6BI,YAAY,CAACE,OAAb,EAD/BjS,EAEE,8BAFFA;AAID,GAd4D;;;AAgB7DA,cACE+R,YAAY,KAAKJ,QAAjB,IAA6BI,YAAY,CAACG,WAAb,GAA2BD,OAA3B,EAD/BjS,EAEE,oDAFFA;AAID,CApBM;AC9CP;;;;;;;;;;;;;;;;;;AA0BA,IAAImS,yBAAJ;AAEA;;;;;;;AAKA;AAAA;AAAA;;;;;;;AAyBE,oBACmBC,MADnB,EAEUC,aAFV,EAE6E;AAAnE;AAAAA,sBAAsBC,QAAQ,CAACH,yBAAT,CAAmCI,UAAzD;AAAmE;;AAD1D;AACT;AAVF,qBAA2B,IAA3B;AAYNvS,gBACE,KAAKoS,MAAL,KAAgB7E,SAAhB,IAA6B,KAAK6E,MAAL,KAAgB,IAD/CpS,EAEE,0DAFFA;AAKA8R,wBAAoB,CAAC,KAAKO,aAAN,CAApB;AACD;;AAlCDpL,wBAAWqL,QAAX,EAAW,2BAAX,EAAoC;SAIpC;AACE,aAAOH,yBAAP;AACD,KANmC;SAApC,UAAqCZ,GAArC,EAAiE;AAC/DY,+BAAyB,GAAGZ,GAA5B;AACD,KAFmC;oBAAA;;AAAA,GAApC;;;AAqCAe;AACE,WAAO,IAAP;AACD,GAFD;;;;AAKAA;AACE,WAAO,KAAKD,aAAZ;AACD,GAFD;;;;AAKAC,gDAAeE,eAAf,EAAoC;AAClC,WAAO,IAAIF,QAAJ,CAAa,KAAKF,MAAlB,EAA0BI,eAA1B,CAAP;AACD,GAFD;;;;AAKAF,mDAAkBG,SAAlB,EAAmC;;AAEjC,QAAIA,SAAS,KAAK,WAAlB,EAA+B;AAC7B,aAAO,KAAKJ,aAAZ;AACD,KAFD,MAEO;AACL,aAAOC,QAAQ,CAACH,yBAAT,CAAmCI,UAA1C;AACD;AACF,GAPD;;;;AAUAD,0CAASxM,IAAT,EAAmB;AACjB,QAAIA,IAAI,CAACmM,OAAL,EAAJ,EAAoB;AAClB,aAAO,IAAP;AACD,KAFD,MAEO,IAAInM,IAAI,CAACgC,QAAL,OAAoB,WAAxB,EAAqC;AAC1C,aAAO,KAAKuK,aAAZ;AACD,KAFM,MAEA;AACL,aAAOC,QAAQ,CAACH,yBAAT,CAAmCI,UAA1C;AACD;AACF,GARD;;;;;;AAaAD;AACE,WAAO,KAAP;AACD,GAFD;;;;AAKAA,yDAAwBG,SAAxB,EAA2CC,SAA3C,EAA0D;AACxD,WAAO,IAAP;AACD,GAFD;;;;AAKAJ,sDAAqBG,SAArB,EAAwCE,YAAxC,EAA0D;AACxD,QAAIF,SAAS,KAAK,WAAlB,EAA+B;AAC7B,aAAO,KAAKG,cAAL,CAAoBD,YAApB,CAAP;AACD,KAFD,MAEO,IAAIA,YAAY,CAACV,OAAb,MAA0BQ,SAAS,KAAK,WAA5C,EAAyD;AAC9D,aAAO,IAAP;AACD,KAFM,MAEA;AACL,aAAOH,QAAQ,CAACH,yBAAT,CAAmCI,UAAnC,CAA8CM,oBAA9C,CACLJ,SADK,EAELE,YAFK,EAGLC,cAHK,CAGU,KAAKP,aAHf,CAAP;AAID;AACF,GAXD;;;;AAcAC,6CAAYxM,IAAZ,EAAwB6M,YAAxB,EAA0C;AACxC,QAAMG,KAAK,GAAGhN,IAAI,CAACgC,QAAL,EAAd;;AACA,QAAIgL,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAOH,YAAP;AACD,KAFD,MAEO,IAAIA,YAAY,CAACV,OAAb,MAA0Ba,KAAK,KAAK,WAAxC,EAAqD;AAC1D,aAAO,IAAP;AACD,KAFM,MAEA;AACL9S,kBACE8S,KAAK,KAAK,WAAV,IAAyBhN,IAAI,CAAC0C,SAAL,OAAqB,CADhDxI,EAEE,4CAFFA;AAKA,aAAO,KAAK6S,oBAAL,CACLC,KADK,EAELR,QAAQ,CAACH,yBAAT,CAAmCI,UAAnC,CAA8CQ,WAA9C,CACEjN,IAAI,CAACmC,QAAL,EADF,EAEE0K,YAFF,CAFK,CAAP;AAOD;AACF,GApBD;;;;AAuBAL;AACE,WAAO,KAAP;AACD,GAFD;;;;AAKAA;AACE,WAAO,CAAP;AACD,GAFD;;;;AAKAA,8CAAaU,KAAb,EAA2BC,MAA3B,EAA+D;AAC7D,WAAO,KAAP;AACD,GAFD;;;;;;AAOAX,qCAAIY,YAAJ,EAA0B;AACxB,QAAIA,YAAY,IAAI,CAAC,KAAKhB,WAAL,GAAmBD,OAAnB,EAArB,EAAmD;AACjD,aAAO;AACL,kBAAU,KAAKkB,QAAL,EADL;AAEL,qBAAa,KAAKjB,WAAL,GAAmBX,GAAnB;AAFR,OAAP;AAID,KALD,MAKO;AACL,aAAO,KAAK4B,QAAL,EAAP;AACD;AACF,GATD;;;;AAYAb;AACE,QAAI,KAAKc,SAAL,KAAmB,IAAvB,EAA6B;AAC3B,UAAIC,MAAM,GAAG,EAAb;;AACA,UAAI,CAAC,KAAKhB,aAAL,CAAmBJ,OAAnB,EAAL,EAAmC;AACjCoB,cAAM,IACJ,cACAxB,gBAAgB,CAAC,KAAKQ,aAAL,CAAmBd,GAAnB,EAAD,CADhB,GAEA,GAHF;AAID;;AAED,UAAM3G,IAAI,GAAG,OAAO,KAAKwH,MAAzB;AACAiB,YAAM,IAAIzI,IAAI,GAAG,GAAjB;;AACA,UAAIA,IAAI,KAAK,QAAb,EAAuB;AACrByI,cAAM,IAAIvP,qBAAqB,CAAC,KAAKsO,MAAN,CAA/B;AACD,OAFD,MAEO;AACLiB,cAAM,IAAI,KAAKjB,MAAf;AACD;;AACD,WAAKgB,SAAL,GAAiB5U,IAAI,CAAC6U,MAAD,CAArB;AACD;;AACD,WAAO,KAAKD,SAAZ;AACD,GApBD;;;;;;;AA0BAd;AACE,WAAO,KAAKF,MAAZ;AACD,GAFD;;;;;;AAOAE,2CAAU/J,KAAV,EAAqB;AACnB,QAAIA,KAAK,KAAK+J,QAAQ,CAACH,yBAAT,CAAmCI,UAAjD,EAA6D;AAC3D,aAAO,CAAP;AACD,KAFD,MAEO,IAAIhK,KAAK,YAAY+J,QAAQ,CAACH,yBAA9B,EAAyD;AAC9D,aAAO,CAAC,CAAR;AACD,KAFM,MAEA;AACLnS,kBAAOuI,KAAK,CAACyJ,UAAN,EAAPhS,EAA2B,mBAA3BA;AACA,aAAO,KAAKsT,kBAAL,CAAwB/K,KAAxB,CAAP;AACD;AACF,GATD;;;;;;;;;AAiBQ+J,0CAAR,UAA2BiB,SAA3B,EAA8C;AAC5C,QAAMC,aAAa,GAAG,OAAOD,SAAS,CAACnB,MAAvC;AACA,QAAMqB,YAAY,GAAG,OAAO,KAAKrB,MAAjC;AACA,QAAMsB,UAAU,GAAGpB,QAAQ,CAACqB,gBAAT,CAA0BxS,OAA1B,CAAkCqS,aAAlC,CAAnB;AACA,QAAMI,SAAS,GAAGtB,QAAQ,CAACqB,gBAAT,CAA0BxS,OAA1B,CAAkCsS,YAAlC,CAAlB;AACAzT,gBAAO0T,UAAU,IAAI,CAArB1T,EAAwB,wBAAwBwT,aAAhDxT;AACAA,gBAAO4T,SAAS,IAAI,CAApB5T,EAAuB,wBAAwByT,YAA/CzT;;AACA,QAAI0T,UAAU,KAAKE,SAAnB,EAA8B;;AAE5B,UAAIH,YAAY,KAAK,QAArB,EAA+B;;AAE7B,eAAO,CAAP;AACD,OAHD,MAGO;;AAEL,YAAI,KAAKrB,MAAL,GAAcmB,SAAS,CAACnB,MAA5B,EAAoC;AAClC,iBAAO,CAAC,CAAR;AACD,SAFD,MAEO,IAAI,KAAKA,MAAL,KAAgBmB,SAAS,CAACnB,MAA9B,EAAsC;AAC3C,iBAAO,CAAP;AACD,SAFM,MAEA;AACL,iBAAO,CAAP;AACD;AACF;AACF,KAfD,MAeO;AACL,aAAOwB,SAAS,GAAGF,UAAnB;AACD;AACF,GAzBO;;;;;;AA8BRpB;AACE,WAAO,IAAP;AACD,GAFD;;;;;;AAOAA;AACE,WAAO,IAAP;AACD,GAFD;;;;;;AAOAA,wCAAO/J,KAAP,EAAkB;;;;AAIhB,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAO,IAAP;AACD,KAFD,MAEO,IAAIA,KAAK,CAACyJ,UAAN,EAAJ,EAAwB;AAC7B,UAAMuB,SAAS,GAAGhL,KAAlB;AACA,aACE,KAAK6J,MAAL,KAAgBmB,SAAS,CAACnB,MAA1B,IACA,KAAKC,aAAL,CAAmBwB,MAAnB,CAA0BN,SAAS,CAAClB,aAApC,CAFF;AAID,KANM,MAMA;AACL,aAAO,KAAP;AACD;AACF,GAfD;;;;;;;;;AAvOOC,8BAAmB,CAAC,QAAD,EAAW,SAAX,EAAsB,QAAtB,EAAgC,QAAhC,CAAnB;AAuPT;AAtQA;ACjCA;;;;;;;;;;;;;;;;;;AAsBA,IAAIwB,YAAJ;AACA,IAAInC,UAAJ;;SAEgBoC,gBAAgBxC,KAAyB;AACvDuC,cAAY,GAAGvC,GAAf;AACD;;SAEeK,aAAWL,KAAS;AAClCI,YAAQ,GAAGJ,GAAXI;AACD;AAED;;;;;;;AAKA;AAAA;AAAA;AAAmCN;;AAAnC;;AA4DC;;;;;;AAxDC2C,8CAAQvR,CAAR,EAAsBC,CAAtB,EAAkC;AAChC,QAAMuR,SAAS,GAAGxR,CAAC,CAACkO,IAAF,CAAOuB,WAAP,EAAlB;AACA,QAAMgC,SAAS,GAAGxR,CAAC,CAACiO,IAAF,CAAOuB,WAAP,EAAlB;AACA,QAAMiC,QAAQ,GAAGF,SAAS,CAACG,SAAV,CAAoBF,SAApB,CAAjB;;AACA,QAAIC,QAAQ,KAAK,CAAjB,EAAoB;AAClB,aAAO3R,WAAW,CAACC,CAAC,CAAClF,IAAH,EAASmF,CAAC,CAACnF,IAAX,CAAlB;AACD,KAFD,MAEO;AACL,aAAO4W,QAAP;AACD;AACF,GATD;;;;;;AAcAH,kDAAYrD,IAAZ,EAAsB;AACpB,WAAO,CAACA,IAAI,CAACuB,WAAL,GAAmBD,OAAnB,EAAR;AACD,GAFD;;;;;;AAOA+B,0DAAoBjD,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,WAAO,CAACD,OAAO,CAACmB,WAAR,GAAsB2B,MAAtB,CAA6B7C,OAAO,CAACkB,WAAR,EAA7B,CAAR;AACD,GAFD;;;;;;AAOA8B;;AAEE,WAAQpD,SAAiB,CAACO,GAA1B;AACD,GAHD;;;;;;AAQA6C;AACE,WAAO,IAAIpD,SAAJ,CAAcrO,QAAd,EAAwB,IAAI+P,QAAJ,CAAa,iBAAb,EAAgCX,UAAhC,CAAxB,CAAP;AACD,GAFD;;;;;;;;AASAqC,+CAASvC,UAAT,EAA8BlU,IAA9B,EAA0C;AACxC,QAAMwU,YAAY,GAAG+B,YAAY,CAACrC,UAAD,CAAjC;AACA,WAAO,IAAIb,SAAJ,CAAcrT,IAAd,EAAoB,IAAI+U,QAAJ,CAAa,iBAAb,EAAgCP,YAAhC,CAApB,CAAP;AACD,GAHD;;;;;;AAQAiC;AACE,WAAO,WAAP;AACD,GAFD;;AAGF;AA5DA,EAAmCnD,KAAnC;;AA8DO,IAAMwD,cAAc,GAAG,IAAIL,aAAJ,EAAvB;ACpGP;;;;;;;;;;;;;;;;;AAuCA;;;;AAGA;AAAA;AAAA;;;;;;;;;AAcE,6BACErD,IADF,EAEE2D,QAFF,EAGEC,UAHF,EAIUC,UAJV,EAKUC,gBALV,EAK6D;AAAnD;AAAAA;AAAmD;;AADnD;AACA;;;;;AAfF,sBAA0D,EAA1D;AAiBN,QAAInM,GAAG,GAAG,CAAV;;AACA,WAAO,CAACqI,IAAI,CAACsB,OAAL,EAAR,EAAwB;AACtBtB,UAAI,GAAGA,IAAP;AACArI,SAAG,GAAGgM,QAAQ,GAAGC,UAAU,CAAC5D,IAAI,CAAC7T,GAAN,EAAWwX,QAAX,CAAb,GAAoC,CAAlD,CAFsB;;AAItB,UAAIE,UAAJ,EAAgB;AACdlM,WAAG,IAAI,CAAC,CAAR;AACD;;AAED,UAAIA,GAAG,GAAG,CAAV,EAAa;;AAEX,YAAI,KAAKkM,UAAT,EAAqB;AACnB7D,cAAI,GAAGA,IAAI,CAACzI,IAAZ;AACD,SAFD,MAEO;AACLyI,cAAI,GAAGA,IAAI,CAACxI,KAAZ;AACD;AACF,OAPD,MAOO,IAAIG,GAAG,KAAK,CAAZ,EAAe;;AAEpB,aAAKoM,UAAL,CAAgBtR,IAAhB,CAAqBuN,IAArB;AACA;AACD,OAJM,MAIA;;AAEL,aAAK+D,UAAL,CAAgBtR,IAAhB,CAAqBuN,IAArB;;AACA,YAAI,KAAK6D,UAAT,EAAqB;AACnB7D,cAAI,GAAGA,IAAI,CAACxI,KAAZ;AACD,SAFD,MAEO;AACLwI,cAAI,GAAGA,IAAI,CAACzI,IAAZ;AACD;AACF;AACF;AACF;;AAEDyM;AACE,QAAI,KAAKD,UAAL,CAAgBpV,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,aAAO,IAAP;AACD;;AAED,QAAIqR,IAAI,GAAG,KAAK+D,UAAL,CAAgBvL,GAAhB,EAAX;AACA,QAAIyL,MAAJ;;AACA,QAAI,KAAKH,gBAAT,EAA2B;AACzBG,YAAM,GAAG,KAAKH,gBAAL,CAAsB9D,IAAI,CAAC7T,GAA3B,EAAgC6T,IAAI,CAAC5T,KAArC,CAAT;AACD,KAFD,MAEO;AACL6X,YAAM,GAAI;AAAE9X,WAAG,EAAE6T,IAAI,CAAC7T,GAAZ;AAAiBC,aAAK,EAAE4T,IAAI,CAAC5T;AAA7B,OAAV;AACD;;AAED,QAAI,KAAKyX,UAAT,EAAqB;AACnB7D,UAAI,GAAGA,IAAI,CAACzI,IAAZ;;AACA,aAAO,CAACyI,IAAI,CAACsB,OAAL,EAAR,EAAwB;AACtB,aAAKyC,UAAL,CAAgBtR,IAAhB,CAAqBuN,IAArB;AACAA,YAAI,GAAGA,IAAI,CAACxI,KAAZ;AACD;AACF,KAND,MAMO;AACLwI,UAAI,GAAGA,IAAI,CAACxI,KAAZ;;AACA,aAAO,CAACwI,IAAI,CAACsB,OAAL,EAAR,EAAwB;AACtB,aAAKyC,UAAL,CAAgBtR,IAAhB,CAAqBuN,IAArB;AACAA,YAAI,GAAGA,IAAI,CAACzI,IAAZ;AACD;AACF;;AAED,WAAO0M,MAAP;AACD,GA5BD;;AA8BAD;AACE,WAAO,KAAKD,UAAL,CAAgBpV,MAAhB,GAAyB,CAAhC;AACD,GAFD;;AAIAqV;AACE,QAAI,KAAKD,UAAL,CAAgBpV,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,aAAO,IAAP;AACD;;AAED,QAAMqR,IAAI,GAAG,KAAK+D,UAAL,CAAgB,KAAKA,UAAL,CAAgBpV,MAAhB,GAAyB,CAAzC,CAAb;;AACA,QAAI,KAAKmV,gBAAT,EAA2B;AACzB,aAAO,KAAKA,gBAAL,CAAsB9D,IAAI,CAAC7T,GAA3B,EAAgC6T,IAAI,CAAC5T,KAArC,CAAP;AACD,KAFD,MAEO;AACL,aAAQ;AAAED,WAAG,EAAE6T,IAAI,CAAC7T,GAAZ;AAAiBC,aAAK,EAAE4T,IAAI,CAAC5T;AAA7B,OAAR;AACD;AACF,GAXD;;AAYF;AAAC,CAnGD;AAqGA;;;;;AAGA;AAAA;AAAA;;;;;;;;;AAaE,oBACSD,GADT,EAESC,KAFT,EAGE8X,KAHF,EAIE3M,IAJF,EAKEC,KALF,EAKqD;AAJ5C;AACA;AAKP,SAAK0M,KAAL,GAAaA,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwBC,QAAQ,CAACC,GAA9C;AACA,SAAK7M,IAAL,GACEA,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAuB8M,SAAS,CAACzC,UADnC;AAEA,SAAKpK,KAAL,GACEA,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAyB6M,SAAS,CAACzC,UADrC;AAED;;;;;;;;;;;;;AAeDuC,sCACEhY,GADF,EAEEC,KAFF,EAGE8X,KAHF,EAIE3M,IAJF,EAKEC,KALF,EAKoD;AAElD,WAAO,IAAI2M,QAAJ,CACLhY,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAKA,GADpB,EAELC,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,KAAKA,KAFxB,EAGL8X,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,KAAKA,KAHxB,EAIL3M,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAsB,KAAKA,IAJtB,EAKLC,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,KAAKA,KALxB,CAAP;AAOD,GAdD;;;;;;AAmBA2M;AACE,WAAO,KAAK5M,IAAL,CAAU+M,KAAV,KAAoB,CAApB,GAAwB,KAAK9M,KAAL,CAAW8M,KAAX,EAA/B;AACD,GAFD;;;;;;AAOAH;AACE,WAAO,KAAP;AACD,GAFD;;;;;;;;;;;;AAaAA,kDAAiB7B,MAAjB,EAAgD;AAC9C,WACE,KAAK/K,IAAL,CAAUgN,gBAAV,CAA2BjC,MAA3B,KACA,CAAC,CAACA,MAAM,CAAC,KAAKnW,GAAN,EAAW,KAAKC,KAAhB,CADR,IAEA,KAAKoL,KAAL,CAAW+M,gBAAX,CAA4BjC,MAA5B,CAHF;AAKD,GAND;;;;;;;;;;;AAgBA6B,kDAAiB7B,MAAjB,EAA6C;AAC3C,WACE,KAAK9K,KAAL,CAAWgN,gBAAX,CAA4BlC,MAA5B,KACAA,MAAM,CAAC,KAAKnW,GAAN,EAAW,KAAKC,KAAhB,CADN,IAEA,KAAKmL,IAAL,CAAUiN,gBAAV,CAA2BlC,MAA3B,CAHF;AAKD,GAND;;;;;;;AAYQ6B,4BAAR;AACE,QAAI,KAAK5M,IAAL,CAAU+J,OAAV,EAAJ,EAAyB;AACvB,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAQ,KAAK/J,IAAL,CAA6BkN,IAA7B,EAAR;AACD;AACF,GANO;;;;;;AAWRN;AACE,WAAO,KAAKM,IAAL,GAAYtY,GAAnB;AACD,GAFD;;;;;;AAOAgY;AACE,QAAI,KAAK3M,KAAL,CAAW8J,OAAX,EAAJ,EAA0B;AACxB,aAAO,KAAKnV,GAAZ;AACD,KAFD,MAEO;AACL,aAAO,KAAKqL,KAAL,CAAWkN,MAAX,EAAP;AACD;AACF,GAND;;;;;;;;;;AAeAP,wCAAOhY,GAAP,EAAeC,KAAf,EAAyBwX,UAAzB,EAAkD;AAChD,QAAIe,CAAC,GAAmB,IAAxB;AACA,QAAMhN,GAAG,GAAGiM,UAAU,CAACzX,GAAD,EAAMwY,CAAC,CAACxY,GAAR,CAAtB;;AACA,QAAIwL,GAAG,GAAG,CAAV,EAAa;AACXgN,OAAC,GAAGA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyBD,CAAC,CAACpN,IAAF,CAAOsN,MAAP,CAAc1Y,GAAd,EAAmBC,KAAnB,EAA0BwX,UAA1B,CAAzB,EAAgE,IAAhE,CAAJ;AACD,KAFD,MAEO,IAAIjM,GAAG,KAAK,CAAZ,EAAe;AACpBgN,OAAC,GAAGA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAaxY,KAAb,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC,CAAJ;AACD,KAFM,MAEA;AACLuY,OAAC,GAAGA,CAAC,CAACC,IAAF,CACF,IADE,EAEF,IAFE,EAGF,IAHE,EAIF,IAJE,EAKFD,CAAC,CAACnN,KAAF,CAAQqN,MAAR,CAAe1Y,GAAf,EAAoBC,KAApB,EAA2BwX,UAA3B,CALE,CAAJ;AAOD;;AACD,WAAOe,CAAC,CAACG,MAAF,EAAP;AACD,GAjBD;;;;;;;AAuBQX,kCAAR;AACE,QAAI,KAAK5M,IAAL,CAAU+J,OAAV,EAAJ,EAAyB;AACvB,aAAO+C,SAAS,CAACzC,UAAjB;AACD;;AACD,QAAI+C,CAAC,GAAmB,IAAxB;;AACA,QAAI,CAACA,CAAC,CAACpN,IAAF,CAAOwN,MAAP,EAAD,IAAoB,CAACJ,CAAC,CAACpN,IAAF,CAAOA,IAAP,CAAYwN,MAAZ,EAAzB,EAA+C;AAC7CJ,OAAC,GAAGA,CAAC,CAACK,YAAF,EAAJ;AACD;;AACDL,KAAC,GAAGA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAA0BD,CAAC,CAACpN,IAAF,CAA0B0N,UAA1B,EAA1B,EAAkE,IAAlE,CAAJ;AACA,WAAON,CAAC,CAACG,MAAF,EAAP;AACD,GAVO;;;;;;;;AAiBRX,wCACEhY,GADF,EAEEyX,UAFF,EAE2B;AAEzB,QAAIe,CAAJ,EAAOO,QAAP;AACAP,KAAC,GAAG,IAAJ;;AACA,QAAIf,UAAU,CAACzX,GAAD,EAAMwY,CAAC,CAACxY,GAAR,CAAV,GAAyB,CAA7B,EAAgC;AAC9B,UAAI,CAACwY,CAAC,CAACpN,IAAF,CAAO+J,OAAP,EAAD,IAAqB,CAACqD,CAAC,CAACpN,IAAF,CAAOwN,MAAP,EAAtB,IAAyC,CAACJ,CAAC,CAACpN,IAAF,CAAOA,IAAP,CAAYwN,MAAZ,EAA9C,EAAoE;AAClEJ,SAAC,GAAGA,CAAC,CAACK,YAAF,EAAJ;AACD;;AACDL,OAAC,GAAGA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyBD,CAAC,CAACpN,IAAF,CAAO3H,MAAP,CAAczD,GAAd,EAAmByX,UAAnB,CAAzB,EAAyD,IAAzD,CAAJ;AACD,KALD,MAKO;AACL,UAAIe,CAAC,CAACpN,IAAF,CAAOwN,MAAP,EAAJ,EAAqB;AACnBJ,SAAC,GAAGA,CAAC,CAACQ,YAAF,EAAJ;AACD;;AACD,UAAI,CAACR,CAAC,CAACnN,KAAF,CAAQ8J,OAAR,EAAD,IAAsB,CAACqD,CAAC,CAACnN,KAAF,CAAQuN,MAAR,EAAvB,IAA2C,CAACJ,CAAC,CAACnN,KAAF,CAAQD,IAAR,CAAawN,MAAb,EAAhD,EAAuE;AACrEJ,SAAC,GAAGA,CAAC,CAACS,aAAF,EAAJ;AACD;;AACD,UAAIxB,UAAU,CAACzX,GAAD,EAAMwY,CAAC,CAACxY,GAAR,CAAV,KAA2B,CAA/B,EAAkC;AAChC,YAAIwY,CAAC,CAACnN,KAAF,CAAQ8J,OAAR,EAAJ,EAAuB;AACrB,iBAAO+C,SAAS,CAACzC,UAAjB;AACD,SAFD,MAEO;AACLsD,kBAAQ,GAAIP,CAAC,CAACnN,KAAF,CAA2BiN,IAA3B,EAAZ;AACAE,WAAC,GAAGA,CAAC,CAACC,IAAF,CACFM,QAAQ,CAAC/Y,GADP,EAEF+Y,QAAQ,CAAC9Y,KAFP,EAGF,IAHE,EAIF,IAJE,EAKDuY,CAAC,CAACnN,KAAF,CAA2ByN,UAA3B,EALC,CAAJ;AAOD;AACF;;AACDN,OAAC,GAAGA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+BD,CAAC,CAACnN,KAAF,CAAQ5H,MAAR,CAAezD,GAAf,EAAoByX,UAApB,CAA/B,CAAJ;AACD;;AACD,WAAOe,CAAC,CAACG,MAAF,EAAP;AACD,GAnCD;;;;;;;AAyCAX;AACE,WAAO,KAAKD,KAAZ;AACD,GAFD;;;;;;;AAQQC,8BAAR;AACE,QAAIQ,CAAC,GAAmB,IAAxB;;AACA,QAAIA,CAAC,CAACnN,KAAF,CAAQuN,MAAR,MAAoB,CAACJ,CAAC,CAACpN,IAAF,CAAOwN,MAAP,EAAzB,EAA0C;AACxCJ,OAAC,GAAGA,CAAC,CAACU,WAAF,EAAJ;AACD;;AACD,QAAIV,CAAC,CAACpN,IAAF,CAAOwN,MAAP,MAAmBJ,CAAC,CAACpN,IAAF,CAAOA,IAAP,CAAYwN,MAAZ,EAAvB,EAA6C;AAC3CJ,OAAC,GAAGA,CAAC,CAACQ,YAAF,EAAJ;AACD;;AACD,QAAIR,CAAC,CAACpN,IAAF,CAAOwN,MAAP,MAAmBJ,CAAC,CAACnN,KAAF,CAAQuN,MAAR,EAAvB,EAAyC;AACvCJ,OAAC,GAAGA,CAAC,CAACW,UAAF,EAAJ;AACD;;AACD,WAAOX,CAAP;AACD,GAZO;;;;;;;AAkBAR,oCAAR;AACE,QAAIQ,CAAC,GAAG,KAAKW,UAAL,EAAR;;AACA,QAAIX,CAAC,CAACnN,KAAF,CAAQD,IAAR,CAAawN,MAAb,EAAJ,EAA2B;AACzBJ,OAAC,GAAGA,CAAC,CAACC,IAAF,CACF,IADE,EAEF,IAFE,EAGF,IAHE,EAIF,IAJE,EAKDD,CAAC,CAACnN,KAAF,CAA2B2N,YAA3B,EALC,CAAJ;AAOAR,OAAC,GAAGA,CAAC,CAACU,WAAF,EAAJ;AACAV,OAAC,GAAGA,CAAC,CAACW,UAAF,EAAJ;AACD;;AACD,WAAOX,CAAP;AACD,GAdO;;;;;;;AAoBAR,qCAAR;AACE,QAAIQ,CAAC,GAAG,KAAKW,UAAL,EAAR;;AACA,QAAIX,CAAC,CAACpN,IAAF,CAAOA,IAAP,CAAYwN,MAAZ,EAAJ,EAA0B;AACxBJ,OAAC,GAAGA,CAAC,CAACQ,YAAF,EAAJ;AACAR,OAAC,GAAGA,CAAC,CAACW,UAAF,EAAJ;AACD;;AACD,WAAOX,CAAP;AACD,GAPO;;;;;;;AAaAR,mCAAR;AACE,QAAMoB,EAAE,GAAG,KAAKX,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsBT,QAAQ,CAACC,GAA/B,EAAoC,IAApC,EAA0C,KAAK5M,KAAL,CAAWD,IAArD,CAAX;AACA,WAAO,KAAKC,KAAL,CAAWoN,IAAX,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,KAAKV,KAAjC,EAAwCqB,EAAxC,EAA4C,IAA5C,CAAP;AACD,GAHO;;;;;;;AASApB,oCAAR;AACE,QAAMqB,EAAE,GAAG,KAAKZ,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsBT,QAAQ,CAACC,GAA/B,EAAoC,KAAK7M,IAAL,CAAUC,KAA9C,EAAqD,IAArD,CAAX;AACA,WAAO,KAAKD,IAAL,CAAUqN,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2B,KAAKV,KAAhC,EAAuC,IAAvC,EAA6CsB,EAA7C,CAAP;AACD,GAHO;;;;;;;AASArB,kCAAR;AACE,QAAM5M,IAAI,GAAG,KAAKA,IAAL,CAAUqN,IAAV,CAAe,IAAf,EAAqB,IAArB,EAA2B,CAAC,KAAKrN,IAAL,CAAU2M,KAAtC,EAA6C,IAA7C,EAAmD,IAAnD,CAAb;AACA,QAAM1M,KAAK,GAAG,KAAKA,KAAL,CAAWoN,IAAX,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,CAAC,KAAKpN,KAAL,CAAW0M,KAAxC,EAA+C,IAA/C,EAAqD,IAArD,CAAd;AACA,WAAO,KAAKU,IAAL,CAAU,IAAV,EAAgB,IAAhB,EAAsB,CAAC,KAAKV,KAA5B,EAAmC3M,IAAnC,EAAyCC,KAAzC,CAAP;AACD,GAJO;;;;;;;;;AAYA2M,sCAAR;AACE,QAAMsB,UAAU,GAAG,KAAKC,MAAL,EAAnB;AACA,WAAOnU,IAAI,CAACsC,GAAL,CAAS,GAAT,EAAc4R,UAAd,KAA6B,KAAKnB,KAAL,KAAe,CAAnD;AACD,GAHO;;;;;;;AASRH;AACE,QAAI,KAAKY,MAAL,MAAiB,KAAKxN,IAAL,CAAUwN,MAAV,EAArB,EAAyC;AACvC,YAAM,IAAI5U,KAAJ,CACJ,4BAA4B,KAAKhE,GAAjC,GAAuC,GAAvC,GAA6C,KAAKC,KAAlD,GAA0D,GADtD,CAAN;AAGD;;AACD,QAAI,KAAKoL,KAAL,CAAWuN,MAAX,EAAJ,EAAyB;AACvB,YAAM,IAAI5U,KAAJ,CACJ,qBAAqB,KAAKhE,GAA1B,GAAgC,GAAhC,GAAsC,KAAKC,KAA3C,GAAmD,UAD/C,CAAN;AAGD;;AACD,QAAMqZ,UAAU,GAAG,KAAKlO,IAAL,CAAUmO,MAAV,EAAnB;;AACA,QAAID,UAAU,KAAK,KAAKjO,KAAL,CAAWkO,MAAX,EAAnB,EAAwC;AACtC,YAAM,IAAIvV,KAAJ,CAAU,qBAAV,CAAN;AACD,KAFD,MAEO;AACL,aAAOsV,UAAU,IAAI,KAAKV,MAAL,KAAgB,CAAhB,GAAoB,CAAxB,CAAjB;AACD;AACF,GAjBD;;AApSOZ,iBAAM,IAAN;AACAA,mBAAQ,KAAR;AAqTT;AAjVA;AAmVA;;;;;AAGA;AAAA;AAAA;AAAA,4BAgHC;;;;;;;;AApGCwB,2CACExZ,GADF,EAEEC,KAFF,EAGE8X,KAHF,EAIE3M,IAJF,EAKEC,KALF,EAKoD;AAElD,WAAO,IAAP;AACD,GARD;;;;;;;;;;;AAkBAmO,6CAAOxZ,GAAP,EAAeC,KAAf,EAAyBwX,UAAzB,EAAkD;AAChD,WAAO,IAAIO,QAAJ,CAAahY,GAAb,EAAkBC,KAAlB,EAAyB,IAAzB,CAAP;AACD,GAFD;;;;;;;;;;AAWAuZ,6CAAOxZ,GAAP,EAAeyX,UAAf,EAAwC;AACtC,WAAO,IAAP;AACD,GAFD;;;;;;AAOA+B;AACE,WAAO,CAAP;AACD,GAFD;;;;;;AAOAA;AACE,WAAO,IAAP;AACD,GAFD;;;;;;;;;;;AAYAA,uDAAiBrD,MAAjB,EAAgD;AAC9C,WAAO,KAAP;AACD,GAFD;;;;;;;;;;;AAYAqD,uDAAiBrD,MAAjB,EAA6C;AAC3C,WAAO,KAAP;AACD,GAFD;;;;;;AAOAqD;AACE,WAAO,IAAP;AACD,GAFD;;;;;;AAOAA;AACE,WAAO,IAAP;AACD,GAFD;;;;;;;AAQAA;AACE,WAAO,CAAP;AACD,GAFD;;;;;;;AAQAA;AACE,WAAO,KAAP;AACD,GAFD;;AAGF;AAAC,CAhHD;AAkHA;;;;;;AAIA;AAAA;AAAA;;;;;;AAYE,qBACUC,WADV,EAEUC,KAFV,EAIuE;AAF7D;AAAAA,cAEkBxB,SAAS,CAACzC,UAF5B;AAE6D;;AAH7D;AACA;AAGN;;;;;;;;;;;AAUJyC,yCAAOlY,GAAP,EAAeC,KAAf,EAAuB;AACrB,WAAO,IAAIiY,SAAJ,CACL,KAAKuB,WADA,EAEL,KAAKC,KAAL,CACGhB,MADH,CACU1Y,GADV,EACeC,KADf,EACsB,KAAKwZ,WAD3B,EAEGhB,IAFH,CAEQ,IAFR,EAEc,IAFd,EAEoBT,QAAQ,CAAC2B,KAF7B,EAEoC,IAFpC,EAE0C,IAF1C,CAFK,CAAP;AAMD,GAPD;;;;;;;;;AAeAzB,yCAAOlY,GAAP,EAAa;AACX,WAAO,IAAIkY,SAAJ,CACL,KAAKuB,WADA,EAEL,KAAKC,KAAL,CACGjW,MADH,CACUzD,GADV,EACe,KAAKyZ,WADpB,EAEGhB,IAFH,CAEQ,IAFR,EAEc,IAFd,EAEoBT,QAAQ,CAAC2B,KAF7B,EAEoC,IAFpC,EAE0C,IAF1C,CAFK,CAAP;AAMD,GAPD;;;;;;;;;;AAgBAzB,sCAAIlY,GAAJ,EAAU;AACR,QAAIwL,GAAJ;AACA,QAAIqI,IAAI,GAAG,KAAK6F,KAAhB;;AACA,WAAO,CAAC7F,IAAI,CAACsB,OAAL,EAAR,EAAwB;AACtB3J,SAAG,GAAG,KAAKiO,WAAL,CAAiBzZ,GAAjB,EAAsB6T,IAAI,CAAC7T,GAA3B,CAAN;;AACA,UAAIwL,GAAG,KAAK,CAAZ,EAAe;AACb,eAAOqI,IAAI,CAAC5T,KAAZ;AACD,OAFD,MAEO,IAAIuL,GAAG,GAAG,CAAV,EAAa;AAClBqI,YAAI,GAAGA,IAAI,CAACzI,IAAZ;AACD,OAFM,MAEA,IAAII,GAAG,GAAG,CAAV,EAAa;AAClBqI,YAAI,GAAGA,IAAI,CAACxI,KAAZ;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAdD;;;;;;;;AAqBA6M,oDAAkBlY,GAAlB,EAAwB;AACtB,QAAIwL,GAAJ;AAAA,QACEqI,IAAI,GAAG,KAAK6F,KADd;AAAA,QAEEE,WAAW,GAAG,IAFhB;;AAGA,WAAO,CAAC/F,IAAI,CAACsB,OAAL,EAAR,EAAwB;AACtB3J,SAAG,GAAG,KAAKiO,WAAL,CAAiBzZ,GAAjB,EAAsB6T,IAAI,CAAC7T,GAA3B,CAAN;;AACA,UAAIwL,GAAG,KAAK,CAAZ,EAAe;AACb,YAAI,CAACqI,IAAI,CAACzI,IAAL,CAAU+J,OAAV,EAAL,EAA0B;AACxBtB,cAAI,GAAGA,IAAI,CAACzI,IAAZ;;AACA,iBAAO,CAACyI,IAAI,CAACxI,KAAL,CAAW8J,OAAX,EAAR,EAA8B;AAC5BtB,gBAAI,GAAGA,IAAI,CAACxI,KAAZ;AACD;;AACD,iBAAOwI,IAAI,CAAC7T,GAAZ;AACD,SAND,MAMO,IAAI4Z,WAAJ,EAAiB;AACtB,iBAAOA,WAAW,CAAC5Z,GAAnB;AACD,SAFM,MAEA;AACL,iBAAO,IAAP,CADK,CACO;AACb;AACF,OAZD,MAYO,IAAIwL,GAAG,GAAG,CAAV,EAAa;AAClBqI,YAAI,GAAGA,IAAI,CAACzI,IAAZ;AACD,OAFM,MAEA,IAAII,GAAG,GAAG,CAAV,EAAa;AAClBoO,mBAAW,GAAG/F,IAAd;AACAA,YAAI,GAAGA,IAAI,CAACxI,KAAZ;AACD;AACF;;AAED,UAAM,IAAIrH,KAAJ,CACJ,uEADI,CAAN;AAGD,GA7BD;;;;;;AAkCAkU;AACE,WAAO,KAAKwB,KAAL,CAAWvE,OAAX,EAAP;AACD,GAFD;;;;;;AAOA+C;AACE,WAAO,KAAKwB,KAAL,CAAWvB,KAAX,EAAP;AACD,GAFD;;;;;;AAOAD;AACE,WAAO,KAAKwB,KAAL,CAAWG,MAAX,EAAP;AACD,GAFD;;;;;;AAOA3B;AACE,WAAO,KAAKwB,KAAL,CAAWnB,MAAX,EAAP;AACD,GAFD;;;;;;;;;;;;AAaAL,mDAAiB/B,MAAjB,EAAgD;AAC9C,WAAO,KAAKuD,KAAL,CAAWtB,gBAAX,CAA4BjC,MAA5B,CAAP;AACD,GAFD;;;;;;;;;;;AAYA+B,mDAAiB/B,MAAjB,EAA6C;AAC3C,WAAO,KAAKuD,KAAL,CAAWrB,gBAAX,CAA4BlC,MAA5B,CAAP;AACD,GAFD;;;;;;;;;AAUA+B,8CACE4B,eADF,EACqC;AAEnC,WAAO,IAAIjC,iBAAJ,CACL,KAAK6B,KADA,EAEL,IAFK,EAGL,KAAKD,WAHA,EAIL,KAJK,EAKLK,eALK,CAAP;AAOD,GAVD;;AAYA5B,kDACElY,GADF,EAEE8Z,eAFF,EAEqC;AAEnC,WAAO,IAAIjC,iBAAJ,CACL,KAAK6B,KADA,EAEL1Z,GAFK,EAGL,KAAKyZ,WAHA,EAIL,KAJK,EAKLK,eALK,CAAP;AAOD,GAXD;;AAaA5B,yDACElY,GADF,EAEE8Z,eAFF,EAEqC;AAEnC,WAAO,IAAIjC,iBAAJ,CACL,KAAK6B,KADA,EAEL1Z,GAFK,EAGL,KAAKyZ,WAHA,EAIL,IAJK,EAKLK,eALK,CAAP;AAOD,GAXD;;AAaA5B,qDACE4B,eADF,EACqC;AAEnC,WAAO,IAAIjC,iBAAJ,CACL,KAAK6B,KADA,EAEL,IAFK,EAGL,KAAKD,WAHA,EAIL,IAJK,EAKLK,eALK,CAAP;AAOD,GAVD;;;;;;;AA1MO5B,yBAAa,IAAIsB,aAAJ,EAAb;AAqNT;AA1NA;AC9lBA;;;;;;;;;;;;;;;;;;AAqBA,IAAMO,KAAK,GAAG3U,IAAI,CAAC9B,GAAL,CAAS,CAAT,CAAd;AAEA;;;;AAGA;AAAA;AAAA;;;;AAQE,qBAAYd,MAAZ,EAA0B;AACxB,QAAMwX,QAAQ,GAAG,UAACC,GAAD,EAAY;;AAE3B,qBAAQ,CAAE7U,IAAI,CAAC9B,GAAL,CAAS2W,GAAT,IAAgBF,KAAlB,EAAiC,EAAjC,CAAR;AAA4C,KAF9C;;AAGA,QAAMG,OAAO,GAAG,UAACpS,IAAD,EAAa;AAAK,qBAAQ,CAACpF,KAAK,CAACoF,IAAI,GAAG,CAAR,CAAL,CAAgBE,IAAhB,CAAqB,GAArB,CAAD,EAA4B,CAA5B,CAAR;AAAsC,KAAxE;;AACA,SAAKmQ,KAAL,GAAa6B,QAAQ,CAACxX,MAAM,GAAG,CAAV,CAArB;AACA,SAAK2X,QAAL,GAAgB,KAAKhC,KAAL,GAAa,CAA7B;AACA,QAAMiC,IAAI,GAAGF,OAAO,CAAC,KAAK/B,KAAN,CAApB;AACA,SAAKkC,KAAL,GAAc7X,MAAM,GAAG,CAAV,GAAe4X,IAA5B;AACD;;;;;;AAKDE;;AAEE,QAAMxC,MAAM,GAAG,EAAE,KAAKuC,KAAL,GAAc,OAAO,KAAKF,QAA5B,CAAf;AACA,SAAKA,QAAL;AACA,WAAOrC,MAAP;AACD,GALD;;AAMF;AAAC,CA5BD;AA8BA;;;;;;;;;;;;;;;;;AAeO,IAAMyC,aAAa,GAAG,UAC3BC,SAD2B,EAE3BhP,GAF2B,EAG3BiP,KAH2B,EAI3BC,SAJ2B,EAIO;AAElCF,WAAS,CAACjU,IAAV,CAAeiF,GAAf;;AAEA,MAAMmP,iBAAiB,GAAG,UACxBC,GADwB,EAExBC,IAFwB,EAEZ;AAEZ,QAAMrY,MAAM,GAAGqY,IAAI,GAAGD,GAAtB;AACA,QAAIE,SAAJ;AACA,QAAI9a,GAAJ;;AACA,QAAIwC,MAAM,KAAK,CAAf,EAAkB;AAChB,aAAO,IAAP;AACD,KAFD,MAEO,IAAIA,MAAM,KAAK,CAAf,EAAkB;AACvBsY,eAAS,GAAGN,SAAS,CAACI,GAAD,CAArB;AACA5a,SAAG,GAAGya,KAAK,GAAGA,KAAK,CAACK,SAAD,CAAR,GAAwBA,SAAnC;AACA,aAAO,IAAI9C,QAAJ,CACLhY,GADK,EAEJ8a,SAAS,CAACjH,IAFN,EAGLmE,QAAQ,CAAC2B,KAHJ,EAIL,IAJK,EAKL,IALK,CAAP;AAOD,KAVM,MAUA;;AAEL,UAAMoB,MAAM,GAAG5S,QAAQ,CAAE3F,MAAM,GAAG,CAAX,EAAsB,EAAtB,CAAR,GAAoCoY,GAAnD;AACA,UAAMxP,IAAI,GAAGuP,iBAAiB,CAACC,GAAD,EAAMG,MAAN,CAA9B;AACA,UAAM1P,KAAK,GAAGsP,iBAAiB,CAACI,MAAM,GAAG,CAAV,EAAaF,IAAb,CAA/B;AACAC,eAAS,GAAGN,SAAS,CAACO,MAAD,CAArB;AACA/a,SAAG,GAAGya,KAAK,GAAGA,KAAK,CAACK,SAAD,CAAR,GAAwBA,SAAnC;AACA,aAAO,IAAI9C,QAAJ,CACLhY,GADK,EAEJ8a,SAAS,CAACjH,IAFN,EAGLmE,QAAQ,CAAC2B,KAHJ,EAILvO,IAJK,EAKLC,KALK,CAAP;AAOD;AACF,GAlCD;;AAoCA,MAAM2P,gBAAgB,GAAG,UAASC,MAAT,EAA0B;AACjD,QAAIpH,IAAI,GAAmB,IAA3B;AACA,QAAIqH,IAAI,GAAG,IAAX;AACA,QAAIhF,KAAK,GAAGsE,SAAS,CAAChY,MAAtB;;AAEA,QAAM2Y,YAAY,GAAG,UAASC,SAAT,EAA4BrD,KAA5B,EAA0C;AAC7D,UAAM6C,GAAG,GAAG1E,KAAK,GAAGkF,SAApB;AACA,UAAMP,IAAI,GAAG3E,KAAb;AACAA,WAAK,IAAIkF,SAAT;AACA,UAAMC,SAAS,GAAGV,iBAAiB,CAACC,GAAG,GAAG,CAAP,EAAUC,IAAV,CAAnC;AACA,UAAMC,SAAS,GAAGN,SAAS,CAACI,GAAD,CAA3B;AACA,UAAM5a,GAAG,GAAMya,KAAK,GAAGA,KAAK,CAACK,SAAD,CAAR,GAAwBA,SAA5C;AACAQ,mBAAa,CACX,IAAItD,QAAJ,CACEhY,GADF,EAEG8a,SAAS,CAACjH,IAFb,EAGEkE,KAHF,EAIE,IAJF,EAKEsD,SALF,CADW,CAAb;AASD,KAhBD;;AAkBA,QAAMC,aAAa,GAAG,UAASC,OAAT,EAAgC;AACpD,UAAI1H,IAAJ,EAAU;AACRA,YAAI,CAACzI,IAAL,GAAYmQ,OAAZ;AACA1H,YAAI,GAAG0H,OAAP;AACD,OAHD,MAGO;AACLL,YAAI,GAAGK,OAAP;AACA1H,YAAI,GAAG0H,OAAP;AACD;AACF,KARD;;AAUA,SAAK,IAAIhZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0Y,MAAM,CAAC9C,KAA3B,EAAkC,EAAE5V,CAApC,EAAuC;AACrC,UAAMiZ,KAAK,GAAGP,MAAM,CAACQ,YAAP,EAAd,CADqC;;AAGrC,UAAML,SAAS,GAAGhW,IAAI,CAACsC,GAAL,CAAS,CAAT,EAAYuT,MAAM,CAAC9C,KAAP,IAAgB5V,CAAC,GAAG,CAApB,CAAZ,CAAlB;;AACA,UAAIiZ,KAAJ,EAAW;AACTL,oBAAY,CAACC,SAAD,EAAYpD,QAAQ,CAAC2B,KAArB,CAAZ;AACD,OAFD,MAEO;;AAELwB,oBAAY,CAACC,SAAD,EAAYpD,QAAQ,CAAC2B,KAArB,CAAZ;AACAwB,oBAAY,CAACC,SAAD,EAAYpD,QAAQ,CAACC,GAArB,CAAZ;AACD;AACF;;AACD,WAAOiD,IAAP;AACD,GA9CD;;AAgDA,MAAMD,MAAM,GAAG,IAAIX,SAAJ,CAAcE,SAAS,CAAChY,MAAxB,CAAf;AACA,MAAM0Y,IAAI,GAAGF,gBAAgB,CAACC,MAAD,CAA7B,CAzFkC;;AA2FlC,SAAO,IAAI/C,SAAJ,CAAoBwC,SAAS,IAAKlP,GAAlC,EAA+C0P,IAA/C,CAAP;AACD,CAhGM;ACvEP;;;;;;;;;;;;;;;;;;AA0BA,IAAIQ,gBAAJ;;AAEA,IAAMC,cAAc,GAAG,EAAvB;;AAEA;AAAA;AAAA;AAkBE,oBACUC,QADV,EAIUC,SAJV,EAI2C;AAHjC;AAGA;AACN;;AAnBJ1R,wBAAW2R,QAAX,EAAW,SAAX,EAAkB;;;;SAAlB;AACE5Y,kBACEyY,cAAc,IAAIpE,cADpBrU,EAEE,qCAFFA;AAIAwY,sBAAgB,GACdA,gBAAgB,IAChB,IAAII,QAAJ,CACE;AAAE,qBAAaH;AAAf,OADF,EAEE;AAAE,qBAAapE;AAAf,OAFF,CAFF;AAMA,aAAOmE,gBAAP;AACD,KAZiB;oBAAA;;AAAA,GAAlB;;AAqBAI,qCAAIC,QAAJ,EAAoB;AAClB,QAAMC,SAAS,GAAGC,aAAQ,KAAKL,QAAbK,EAAuBF,QAAvBE,CAAlB;;AACA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,IAAIhY,KAAJ,CAAU,0BAA0B+X,QAApC,CAAN;AACD;;AAED,QAAIC,SAAS,YAAY9D,SAAzB,EAAoC;AAClC,aAAO8D,SAAP;AACD,KAFD,MAEO;;;AAGL,aAAO,IAAP;AACD;AACF,GAbD;;AAeAF,0CAASI,eAAT,EAA+B;AAC7B,WAAOpb,cAAS,KAAK+a,SAAd/a,EAAyBob,eAAe,CAACvb,QAAhB,EAAzBG,CAAP;AACD,GAFD;;AAIAgb,0CACEI,eADF,EAEEC,gBAFF,EAE2C;AAEzCjZ,gBACEgZ,eAAe,KAAKtH,SADtB1R,EAEE,qEAFFA;AAIA,QAAMsX,SAAS,GAAG,EAAlB;AACA,QAAI4B,eAAe,GAAG,KAAtB;AACA,QAAMC,IAAI,GAAGF,gBAAgB,CAACG,WAAjB,CAA6BxI,SAAS,CAACyI,IAAvC,CAAb;AACA,QAAIC,IAAI,GAAGH,IAAI,CAACI,OAAL,EAAX;;AACA,WAAOD,IAAP,EAAa;AACXJ,qBAAe,GACbA,eAAe,IAAIF,eAAe,CAACQ,WAAhB,CAA4BF,IAAI,CAAC3I,IAAjC,CADrB;AAEA2G,eAAS,CAAClU,IAAV,CAAekW,IAAf;AACAA,UAAI,GAAGH,IAAI,CAACI,OAAL,EAAP;AACD;;AACD,QAAIE,QAAJ;;AACA,QAAIP,eAAJ,EAAqB;AACnBO,cAAQ,GAAGpC,aAAa,CAACC,SAAD,EAAY0B,eAAe,CAACU,UAAhB,EAAZ,CAAxB;AACD,KAFD,MAEO;AACLD,cAAQ,GAAGhB,cAAX;AACD;;AACD,QAAMkB,SAAS,GAAGX,eAAe,CAACvb,QAAhB,EAAlB;;AACA,QAAMmc,WAAW,sBAAQ,KAAKjB,SAAb,CAAjB;;AACAiB,eAAW,CAACD,SAAD,CAAX,GAAyBX,eAAzB;;AACA,QAAMa,UAAU,sBAAQ,KAAKnB,QAAb,CAAhB;;AACAmB,cAAU,CAACF,SAAD,CAAV,GAAwBF,QAAxB;AACA,WAAO,IAAIb,QAAJ,CAAaiB,UAAb,EAAyBD,WAAzB,CAAP;AACD,GA9BD;;;;;;AAmCAhB,8CACEhB,SADF,EAEEqB,gBAFF,EAE2C;AAF3C;;AAIE,QAAMY,UAAU,GAAGC,SACjB,KAAKpB,QADYoB,EAEjB,UAACC,eAAD,EAA8CJ,SAA9C,EAA+D;AAC7D,UAAM3G,KAAK,GAAG+F,aAAQiB,KAAI,CAACrB,SAAbI,EAAwBY,SAAxBZ,CAAd;AACA/Y,kBAAOgT,KAAPhT,EAAc,sCAAsC2Z,SAApD3Z;;AACA,UAAI+Z,eAAe,KAAKtB,cAAxB,EAAwC;;AAEtC,YAAIzF,KAAK,CAACwG,WAAN,CAAkB5B,SAAS,CAACjH,IAA5B,CAAJ,EAAuC;;AAErC,cAAM2G,SAAS,GAAG,EAAlB;AACA,cAAM6B,IAAI,GAAGF,gBAAgB,CAACG,WAAjB,CAA6BxI,SAAS,CAACyI,IAAvC,CAAb;AACA,cAAIC,IAAI,GAAGH,IAAI,CAACI,OAAL,EAAX;;AACA,iBAAOD,IAAP,EAAa;AACX,gBAAIA,IAAI,CAAC/b,IAAL,KAAcqa,SAAS,CAACra,IAA5B,EAAkC;AAChC+Z,uBAAS,CAAClU,IAAV,CAAekW,IAAf;AACD;;AACDA,gBAAI,GAAGH,IAAI,CAACI,OAAL,EAAP;AACD;;AACDjC,mBAAS,CAAClU,IAAV,CAAewU,SAAf;AACA,iBAAOP,aAAa,CAACC,SAAD,EAAYtE,KAAK,CAAC0G,UAAN,EAAZ,CAApB;AACD,SAbD,MAaO;;AAEL,iBAAOjB,cAAP;AACD;AACF,OAnBD,MAmBO;AACL,YAAMwB,YAAY,GAAGhB,gBAAgB,CAACzY,GAAjB,CAAqBoX,SAAS,CAACra,IAA/B,CAArB;AACA,YAAI2c,WAAW,GAAGH,eAAlB;;AACA,YAAIE,YAAJ,EAAkB;AAChBC,qBAAW,GAAGA,WAAW,CAAC3Z,MAAZ,CACZ,IAAIqQ,SAAJ,CAAcgH,SAAS,CAACra,IAAxB,EAA8B0c,YAA9B,CADY,CAAd;AAGD;;AACD,eAAOC,WAAW,CAAC1E,MAAZ,CAAmBoC,SAAnB,EAA8BA,SAAS,CAACjH,IAAxC,CAAP;AACD;AACF,KAlCgBmJ,CAAnB;AAoCA,WAAO,IAAIlB,QAAJ,CAAaiB,UAAb,EAAyB,KAAKlB,SAA9B,CAAP;AACD,GAzCD;;;;;;AA8CAC,mDACEhB,SADF,EAEEqB,gBAFF,EAE2C;AAEzC,QAAMY,UAAU,GAAGC,SACjB,KAAKpB,QADYoB,EAEjB,UAACC,eAAD,EAA4C;AAC1C,UAAIA,eAAe,KAAKtB,cAAxB,EAAwC;;AAEtC,eAAOsB,eAAP;AACD,OAHD,MAGO;AACL,YAAME,YAAY,GAAGhB,gBAAgB,CAACzY,GAAjB,CAAqBoX,SAAS,CAACra,IAA/B,CAArB;;AACA,YAAI0c,YAAJ,EAAkB;AAChB,iBAAOF,eAAe,CAACxZ,MAAhB,CACL,IAAIqQ,SAAJ,CAAcgH,SAAS,CAACra,IAAxB,EAA8B0c,YAA9B,CADK,CAAP;AAGD,SAJD,MAIO;;AAEL,iBAAOF,eAAP;AACD;AACF;AACF,KAjBgBD,CAAnB;AAmBA,WAAO,IAAIlB,QAAJ,CAAaiB,UAAb,EAAyB,KAAKlB,SAA9B,CAAP;AACD,GAxBD;;AAyBF;AAAC,CAtJD;AC9BA;;;;;;;;;;;;;;;;;;SAoBgBwB,qBAAqBjS,MAAiBC,OAAgB;AACpE,SAAO3F,WAAW,CAAC0F,IAAI,CAAC3K,IAAN,EAAY4K,KAAK,CAAC5K,IAAlB,CAAlB;AACD;;SAEe6c,gBAAgBlS,MAAcC,OAAa;AACzD,SAAO3F,WAAW,CAAC0F,IAAD,EAAOC,KAAP,CAAlB;AACF;AC1BA;;;;;;;;;;;;;;;;AA0CA;;;AAEA,IAAIoK,UAAJ;AAEA;;;;;;;;;AAQA;AAAA;AAAA;;;;;;;;AAqBE,wBACmB8H,SADnB,EAEmBhI,aAFnB,EAGUiI,SAHV,EAG6B;AAFV;AACA;AACT;AAvBF,qBAA2B,IAA3B;;;;;;;AA8BN,QAAI,KAAKjI,aAAT,EAAwB;AACtBP,0BAAoB,CAAC,KAAKO,aAAN,CAApB;AACD;;AAED,QAAI,KAAKgI,SAAL,CAAepI,OAAf,EAAJ,EAA8B;AAC5BjS,kBACE,CAAC,KAAKqS,aAAN,IAAuB,KAAKA,aAAL,CAAmBJ,OAAnB,EADzBjS,EAEE,sCAFFA;AAID;AACF;;AAtCDiH,wBAAWsT,YAAX,EAAW,YAAX,EAAqB;SAArB;AACE,aACEhI,UAAU,KACTA,UAAU,GAAG,IAAIgI,YAAJ,CACZ,IAAIvF,SAAJ,CAA4BoF,eAA5B,CADY,EAEZ,IAFY,EAGZxB,QAAQ,CAAC4B,OAHG,CADJ,CADZ;AAQD,KAToB;oBAAA;;AAAA,GAArB;;;AAyCAD;AACE,WAAO,KAAP;AACD,GAFD;;;;AAKAA;AACE,WAAO,KAAKlI,aAAL,IAAsBE,UAA7B;AACD,GAFD;;;;AAKAgI,oDAAe/H,eAAf,EAAoC;AAClC,QAAI,KAAK6H,SAAL,CAAepI,OAAf,EAAJ,EAA8B;;AAE5B,aAAO,IAAP;AACD,KAHD,MAGO;AACL,aAAO,IAAIsI,YAAJ,CAAiB,KAAKF,SAAtB,EAAiC7H,eAAjC,EAAkD,KAAK8H,SAAvD,CAAP;AACD;AACF,GAPD;;;;AAUAC,uDAAkB9H,SAAlB,EAAmC;;AAEjC,QAAIA,SAAS,KAAK,WAAlB,EAA+B;AAC7B,aAAO,KAAKP,WAAL,EAAP;AACD,KAFD,MAEO;AACL,UAAMjJ,KAAK,GAAG,KAAKoR,SAAL,CAAe7Z,GAAf,CAAmBiS,SAAnB,CAAd;AACA,aAAOxJ,KAAK,KAAK,IAAV,GAAiBsJ,UAAjB,GAA8BtJ,KAArC;AACD;AACF,GARD;;;;AAWAsR,8CAASzU,IAAT,EAAmB;AACjB,QAAMgN,KAAK,GAAGhN,IAAI,CAACgC,QAAL,EAAd;;AACA,QAAIgL,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAO,IAAP;AACD;;AAED,WAAO,KAAK2H,iBAAL,CAAuB3H,KAAvB,EAA8B4H,QAA9B,CAAuC5U,IAAI,CAACmC,QAAL,EAAvC,CAAP;AACD,GAPD;;;;AAUAsS,8CAAS9H,SAAT,EAA0B;AACxB,WAAO,KAAK4H,SAAL,CAAe7Z,GAAf,CAAmBiS,SAAnB,MAAkC,IAAzC;AACD,GAFD;;;;AAKA8H,0DAAqB9H,SAArB,EAAwCE,YAAxC,EAA0D;AACxD3S,gBAAO2S,YAAP3S,EAAqB,4CAArBA;;AACA,QAAIyS,SAAS,KAAK,WAAlB,EAA+B;AAC7B,aAAO,KAAKG,cAAL,CAAoBD,YAApB,CAAP;AACD,KAFD,MAEO;AACL,UAAMiF,SAAS,GAAG,IAAIhH,SAAJ,CAAc6B,SAAd,EAAyBE,YAAzB,CAAlB;AACA,UAAIuH,WAAW,SAAf;AAAA,UAAiBS,WAAW,SAA5B;;AACA,UAAIhI,YAAY,CAACV,OAAb,EAAJ,EAA4B;AAC1BiI,mBAAW,GAAG,KAAKG,SAAL,CAAe9Z,MAAf,CAAsBkS,SAAtB,CAAd;AACAkI,mBAAW,GAAG,KAAKL,SAAL,CAAeM,iBAAf,CACZhD,SADY,EAEZ,KAAKyC,SAFO,CAAd;AAID,OAND,MAMO;AACLH,mBAAW,GAAG,KAAKG,SAAL,CAAe7E,MAAf,CAAsB/C,SAAtB,EAAiCE,YAAjC,CAAd;AACAgI,mBAAW,GAAG,KAAKL,SAAL,CAAeO,YAAf,CAA4BjD,SAA5B,EAAuC,KAAKyC,SAA5C,CAAd;AACD;;AAED,UAAMS,WAAW,GAAGZ,WAAW,CAACjI,OAAZ,KAChBM,UADgB,GAEhB,KAAKF,aAFT;AAGA,aAAO,IAAIkI,YAAJ,CAAiBL,WAAjB,EAA8BY,WAA9B,EAA2CH,WAA3C,CAAP;AACD;AACF,GAvBD;;;;AA0BAJ,iDAAYzU,IAAZ,EAAwB6M,YAAxB,EAA0C;AACxC,QAAMG,KAAK,GAAGhN,IAAI,CAACgC,QAAL,EAAd;;AACA,QAAIgL,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAOH,YAAP;AACD,KAFD,MAEO;AACL3S,kBACE8F,IAAI,CAACgC,QAAL,OAAoB,WAApB,IAAmChC,IAAI,CAAC0C,SAAL,OAAqB,CAD1DxI,EAEE,4CAFFA;AAIA,UAAM+a,iBAAiB,GAAG,KAAKN,iBAAL,CAAuB3H,KAAvB,EAA8BC,WAA9B,CACxBjN,IAAI,CAACmC,QAAL,EADwB,EAExB0K,YAFwB,CAA1B;AAIA,aAAO,KAAKE,oBAAL,CAA0BC,KAA1B,EAAiCiI,iBAAjC,CAAP;AACD;AACF,GAfD;;;;AAkBAR;AACE,WAAO,KAAKF,SAAL,CAAepI,OAAf,EAAP;AACD,GAFD;;;;AAKAsI;AACE,WAAO,KAAKF,SAAL,CAAepF,KAAf,EAAP;AACD,GAFD;;;;AAWAsF,yCAAIrH,YAAJ,EAA0B;AACxB,QAAI,KAAKjB,OAAL,EAAJ,EAAoB;AAClB,aAAO,IAAP;AACD;;AAED,QAAMjP,GAAG,GAA6B,EAAtC;AACA,QAAIgY,OAAO,GAAG,CAAd;AAAA,QACE3F,MAAM,GAAG,CADX;AAAA,QAEE4F,cAAc,GAAG,IAFnB;AAGA,SAAKC,YAAL,CAAkB7G,cAAlB,EAAkC,UAACvX,GAAD,EAAc4V,SAAd,EAA6B;AAC7D1P,SAAG,CAAClG,GAAD,CAAH,GAAW4V,SAAS,CAACnB,GAAV,CAAc2B,YAAd,CAAX;AAEA8H,aAAO;;AACP,UAAIC,cAAc,IAAIV,YAAY,CAACvU,eAAb,CAA6BX,IAA7B,CAAkCvI,GAAlC,CAAtB,EAA8D;AAC5DuY,cAAM,GAAGnT,IAAI,CAAC2G,GAAL,CAASwM,MAAT,EAAiB/T,MAAM,CAACxE,GAAD,CAAvB,CAAT;AACD,OAFD,MAEO;AACLme,sBAAc,GAAG,KAAjB;AACD;AACF,KATD;;AAWA,QAAI,CAAC/H,YAAD,IAAiB+H,cAAjB,IAAmC5F,MAAM,GAAG,IAAI2F,OAApD,EAA6D;;AAE3D,UAAMG,KAAK,GAAc,EAAzB,CAF2D;;AAI3D,WAAK,IAAMre,GAAX,IAAkBkG,GAAlB,EAAuB;AACrBmY,aAAK,CAAEre,GAAF,CAAL,GAAoCkG,GAAG,CAAClG,GAAD,CAAvC;AACD;;AAED,aAAOqe,KAAP;AACD,KATD,MASO;AACL,UAAIjI,YAAY,IAAI,CAAC,KAAKhB,WAAL,GAAmBD,OAAnB,EAArB,EAAmD;AACjDjP,WAAG,CAAC,WAAD,CAAH,GAAmB,KAAKkP,WAAL,GAAmBX,GAAnB,EAAnB;AACD;;AACD,aAAOvO,GAAP;AACD;AACF,GAnCD;;;;AAsCAuX;AACE,QAAI,KAAKnH,SAAL,KAAmB,IAAvB,EAA6B;AAC3B,UAAIgI,QAAM,GAAG,EAAb;;AACA,UAAI,CAAC,KAAKlJ,WAAL,GAAmBD,OAAnB,EAAL,EAAmC;AACjCmJ,gBAAM,IACJ,cACAvJ,gBAAgB,CAAC,KAAKK,WAAL,GAAmBX,GAAnB,EAAD,CADhB,GAEA,GAHF;AAID;;AAED,WAAK2J,YAAL,CAAkB7G,cAAlB,EAAkC,UAACvX,GAAD,EAAM4V,SAAN,EAAe;AAC/C,YAAM2I,SAAS,GAAG3I,SAAS,CAAC4I,IAAV,EAAlB;;AACA,YAAID,SAAS,KAAK,EAAlB,EAAsB;AACpBD,kBAAM,IAAI,MAAMte,GAAN,GAAY,GAAZ,GAAkBue,SAA5B;AACD;AACF,OALD;AAOA,WAAKjI,SAAL,GAAiBgI,QAAM,KAAK,EAAX,GAAgB,EAAhB,GAAqB5c,IAAI,CAAC4c,QAAD,CAA1C;AACD;;AACD,WAAO,KAAKhI,SAAZ;AACD,GApBD;;;;AAuBAmH,6DACE9H,SADF,EAEEC,SAFF,EAGEM,KAHF,EAGc;AAEZ,QAAMuI,GAAG,GAAG,KAAKC,aAAL,CAAmBxI,KAAnB,CAAZ;;AACA,QAAIuI,GAAJ,EAAS;AACP,UAAME,WAAW,GAAGF,GAAG,CAACG,iBAAJ,CAClB,IAAI9K,SAAJ,CAAc6B,SAAd,EAAyBC,SAAzB,CADkB,CAApB;AAGA,aAAO+I,WAAW,GAAGA,WAAW,CAACle,IAAf,GAAsB,IAAxC;AACD,KALD,MAKO;AACL,aAAO,KAAK8c,SAAL,CAAeqB,iBAAf,CAAiCjJ,SAAjC,CAAP;AACD;AACF,GAdD;;;;;;;AAoBA8H,uDAAkBvB,eAAlB,EAAwC;AACtC,QAAMuC,GAAG,GAAG,KAAKC,aAAL,CAAmBxC,eAAnB,CAAZ;;AACA,QAAIuC,GAAJ,EAAS;AACP,UAAM5E,MAAM,GAAG4E,GAAG,CAAC5E,MAAJ,EAAf;AACA,aAAOA,MAAM,IAAIA,MAAM,CAACpZ,IAAxB;AACD,KAHD,MAGO;AACL,aAAO,KAAK8c,SAAL,CAAe1D,MAAf,EAAP;AACD;AACF,GARD;;;;;;;AAcA4D,mDAAcvB,eAAd,EAAoC;AAClC,QAAMrC,MAAM,GAAG,KAAKgF,iBAAL,CAAuB3C,eAAvB,CAAf;;AACA,QAAIrC,MAAJ,EAAY;AACV,aAAO,IAAI/F,SAAJ,CAAc+F,MAAd,EAAsB,KAAK0D,SAAL,CAAe7Z,GAAf,CAAmBmW,MAAnB,CAAtB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GAPD;;;;;;;;AAcA4D,sDAAiBvB,eAAjB,EAAuC;AACrC,QAAMuC,GAAG,GAAG,KAAKC,aAAL,CAAmBxC,eAAnB,CAAZ;;AACA,QAAIuC,GAAJ,EAAS;AACP,UAAMlG,MAAM,GAAGkG,GAAG,CAAClG,MAAJ,EAAf;AACA,aAAOA,MAAM,IAAIA,MAAM,CAAC9X,IAAxB;AACD,KAHD,MAGO;AACL,aAAO,KAAK8c,SAAL,CAAehF,MAAf,EAAP;AACD;AACF,GARD;;;;;;;AAcAkF,kDAAavB,eAAb,EAAmC;AACjC,QAAM3D,MAAM,GAAG,KAAKuG,gBAAL,CAAsB5C,eAAtB,CAAf;;AACA,QAAI3D,MAAJ,EAAY;AACV,aAAO,IAAIzE,SAAJ,CAAcyE,MAAd,EAAsB,KAAKgF,SAAL,CAAe7Z,GAAf,CAAmB6U,MAAnB,CAAtB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GAPD;;;;;;AAYAkF,kDACEvH,KADF,EAEEC,MAFF,EAEqD;AAEnD,QAAMsI,GAAG,GAAG,KAAKC,aAAL,CAAmBxI,KAAnB,CAAZ;;AACA,QAAIuI,GAAJ,EAAS;AACP,aAAOA,GAAG,CAACrG,gBAAJ,CAAqB,uBAAW;AACrC,eAAOjC,MAAM,CAAC4I,WAAW,CAACte,IAAb,EAAmBse,WAAW,CAAClL,IAA/B,CAAb;AACD,OAFM,CAAP;AAGD,KAJD,MAIO;AACL,aAAO,KAAK0J,SAAL,CAAenF,gBAAf,CAAgCjC,MAAhC,CAAP;AACD;AACF,GAZD;;;;;;;AAkBAsH,iDACEvB,eADF,EACwB;AAEtB,WAAO,KAAK8C,eAAL,CAAqB9C,eAAe,CAAC+C,OAAhB,EAArB,EAAgD/C,eAAhD,CAAP;AACD,GAJD;;;;;;;;;AAYAuB,qDACEyB,SADF,EAEEhD,eAFF,EAEwB;AAEtB,QAAMuC,GAAG,GAAG,KAAKC,aAAL,CAAmBxC,eAAnB,CAAZ;;AACA,QAAIuC,GAAJ,EAAS;AACP,aAAOA,GAAG,CAACO,eAAJ,CAAoBE,SAApB,EAA+B,eAAG;AAAI;AAAG,OAAzC,CAAP;AACD,KAFD,MAEO;AACL,UAAMC,QAAQ,GAAG,KAAK5B,SAAL,CAAeyB,eAAf,CACfE,SAAS,CAACze,IADK,EAEfqT,SAAS,CAACyI,IAFK,CAAjB;AAIA,UAAIC,IAAI,GAAG2C,QAAQ,CAACC,IAAT,EAAX;;AACA,aAAO5C,IAAI,IAAI,IAAR,IAAgBN,eAAe,CAAClI,OAAhB,CAAwBwI,IAAxB,EAA8B0C,SAA9B,IAA2C,CAAlE,EAAqE;AACnEC,gBAAQ,CAAC1C,OAAT;AACAD,YAAI,GAAG2C,QAAQ,CAACC,IAAT,EAAP;AACD;;AACD,aAAOD,QAAP;AACD;AACF,GAnBD;;;;;;;AAyBA1B,wDACEvB,eADF,EACwB;AAEtB,WAAO,KAAKmD,sBAAL,CACLnD,eAAe,CAACoD,OAAhB,EADK,EAELpD,eAFK,CAAP;AAID,GAPD;;;;;;;;AAcAuB,4DACE8B,OADF,EAEErD,eAFF,EAEwB;AAEtB,QAAMuC,GAAG,GAAG,KAAKC,aAAL,CAAmBxC,eAAnB,CAAZ;;AACA,QAAIuC,GAAJ,EAAS;AACP,aAAOA,GAAG,CAACY,sBAAJ,CAA2BE,OAA3B,EAAoC,eAAG;AAC5C,eAAOvf,GAAP;AACD,OAFM,CAAP;AAGD,KAJD,MAIO;AACL,UAAMmf,QAAQ,GAAG,KAAK5B,SAAL,CAAe8B,sBAAf,CACfE,OAAO,CAAC9e,IADO,EAEfqT,SAAS,CAACyI,IAFK,CAAjB;AAIA,UAAIC,IAAI,GAAG2C,QAAQ,CAACC,IAAT,EAAX;;AACA,aAAO5C,IAAI,IAAI,IAAR,IAAgBN,eAAe,CAAClI,OAAhB,CAAwBwI,IAAxB,EAA8B+C,OAA9B,IAAyC,CAAhE,EAAmE;AACjEJ,gBAAQ,CAAC1C,OAAT;AACAD,YAAI,GAAG2C,QAAQ,CAACC,IAAT,EAAP;AACD;;AACD,aAAOD,QAAP;AACD;AACF,GArBD;;;;;;AA0BA1B,+CAAUhS,KAAV,EAA6B;AAC3B,QAAI,KAAK0J,OAAL,EAAJ,EAAoB;AAClB,UAAI1J,KAAK,CAAC0J,OAAN,EAAJ,EAAqB;AACnB,eAAO,CAAP;AACD,OAFD,MAEO;AACL,eAAO,CAAC,CAAR;AACD;AACF,KAND,MAMO,IAAI1J,KAAK,CAACyJ,UAAN,MAAsBzJ,KAAK,CAAC0J,OAAN,EAA1B,EAA2C;AAChD,aAAO,CAAP;AACD,KAFM,MAEA,IAAI1J,KAAK,KAAKoJ,UAAd,EAAwB;AAC7B,aAAO,CAAC,CAAR;AACD,KAFM,MAEA;;AAEL,aAAO,CAAP;AACD;AACF,GAfD;;;;;;AAoBA4I,+CAAUvB,eAAV,EAAgC;AAC9B,QACEA,eAAe,KAAKtH,SAApB,IACA,KAAK4I,SAAL,CAAegC,QAAf,CAAwBtD,eAAxB,CAFF,EAGE;AACA,aAAO,IAAP;AACD,KALD,MAKO;AACL,UAAM2B,WAAW,GAAG,KAAKL,SAAL,CAAeiC,QAAf,CAClBvD,eADkB,EAElB,KAAKqB,SAFa,CAApB;AAIA,aAAO,IAAIE,YAAJ,CAAiB,KAAKF,SAAtB,EAAiC,KAAKhI,aAAtC,EAAqDsI,WAArD,CAAP;AACD;AACF,GAbD;;;;;;AAkBAJ,+CAAUvH,KAAV,EAAsB;AACpB,WAAOA,KAAK,KAAKtB,SAAV,IAAuB,KAAK4I,SAAL,CAAegC,QAAf,CAAwBtJ,KAAxB,CAA9B;AACD,GAFD;;;;;;AAOAuH,4CAAOhS,KAAP,EAAkB;AAChB,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAO,IAAP;AACD,KAFD,MAEO,IAAIA,KAAK,CAACyJ,UAAN,EAAJ,EAAwB;AAC7B,aAAO,KAAP;AACD,KAFM,MAEA;AACL,UAAMwK,iBAAiB,GAAGjU,KAA1B;;AACA,UAAI,CAAC,KAAK2J,WAAL,GAAmB2B,MAAnB,CAA0B2I,iBAAiB,CAACtK,WAAlB,EAA1B,CAAL,EAAiE;AAC/D,eAAO,KAAP;AACD,OAFD,MAEO,IACL,KAAKmI,SAAL,CAAepF,KAAf,OAA2BuH,iBAAiB,CAACnC,SAAlB,CAA4BpF,KAA5B,EADtB,EAEL;AACA,YAAMwH,QAAQ,GAAG,KAAKrD,WAAL,CAAiB/E,cAAjB,CAAjB;AACA,YAAMqI,SAAS,GAAGF,iBAAiB,CAACpD,WAAlB,CAA8B/E,cAA9B,CAAlB;AACA,YAAIsI,WAAW,GAAGF,QAAQ,CAAClD,OAAT,EAAlB;AACA,YAAIqD,YAAY,GAAGF,SAAS,CAACnD,OAAV,EAAnB;;AACA,eAAOoD,WAAW,IAAIC,YAAtB,EAAoC;AAClC,cACED,WAAW,CAACpf,IAAZ,KAAqBqf,YAAY,CAACrf,IAAlC,IACA,CAACof,WAAW,CAAChM,IAAZ,CAAiBkD,MAAjB,CAAwB+I,YAAY,CAACjM,IAArC,CAFH,EAGE;AACA,mBAAO,KAAP;AACD;;AACDgM,qBAAW,GAAGF,QAAQ,CAAClD,OAAT,EAAd;AACAqD,sBAAY,GAAGF,SAAS,CAACnD,OAAV,EAAf;AACD;;AACD,eAAOoD,WAAW,KAAK,IAAhB,IAAwBC,YAAY,KAAK,IAAhD;AACD,OAlBM,MAkBA;AACL,eAAO,KAAP;AACD;AACF;AACF,GA/BD;;;;;;;;;;;AAyCQrC,yCAAR,UACEvB,eADF,EACwB;AAEtB,QAAIA,eAAe,KAAKtH,SAAxB,EAAmC;AACjC,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAK4I,SAAL,CAAe9Z,GAAf,CAAmBwY,eAAe,CAACvb,QAAhB,EAAnB,CAAP;AACD;AACF,GARO;;;;;;;AA/TO8c,iCAAkB,gBAAlB;AAwUjB;AA3dA;AA6dA;;;;;;;AAKA;AAAA;AAAA;AAA6BlJ;;AAC3B;WACEwL,kBACE,IAAI7H,SAAJ,CAA4BoF,eAA5B,CADF,EAEEG,YAAY,CAAChI,UAFf,EAGEqG,QAAQ,CAAC4B,OAHX,KAIC;AACF;;AAEDsC,0CAAUvU,KAAV,EAAqB;AACnB,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAND;;AAQAuU,uCAAOvU,KAAP,EAAkB;;AAEhB,WAAOA,KAAK,KAAK,IAAjB;AACD,GAHD;;AAKAuU;AACE,WAAO,IAAP;AACD,GAFD;;AAIAA,kDAAkBrK,SAAlB,EAAmC;AACjC,WAAO8H,YAAY,CAAChI,UAApB;AACD,GAFD;;AAIAuK;AACE,WAAO,KAAP;AACD,GAFD;;AAGF;AAjCA,EAA6BvC,YAA7B;AAmCA;;;;;;;AAKO,IAAM5I,UAAQ,GAAG,IAAImL,OAAJ,EAAjB;AAYP7V,MAAM,CAAC8V,gBAAP,CAAwBnM,SAAxB,EAAmC;AACjCO,KAAG,EAAE;AACHpU,SAAK,EAAE,IAAI6T,SAAJ,CAActO,QAAd,EAAwBiY,YAAY,CAAChI,UAArC;AADJ,GAD4B;AAIjCyK,KAAG,EAAE;AACHjgB,SAAK,EAAE,IAAI6T,SAAJ,CAAcrO,QAAd,EAAwBoP,UAAxB;AADJ;AAJ4B,CAAnC;AASA;;;;AAGAL,QAAQ,CAACF,YAAT,GAAwBmJ,YAAY,CAAChI,UAArC;AACAD,QAAQ,CAACH,yBAAT,GAAqCoI,YAArC;AACA3I,UAAU,CAACD,UAAD,CAAV;AACAsL,YAAkB,CAACtL,UAAD,CAAlBsL;AC3lBA;;;;;;;;;;;;;;;;;AA8BA,IAAMC,SAAS,GAAG,IAAlB;AAEA;;;;;;;;SAOgBpJ,eACdqJ,MACAjQ,UAAwB;AAAxB;AAAAA;AAAwB;;AAExB,MAAIiQ,IAAI,KAAK,IAAb,EAAmB;AACjB,WAAO5C,YAAY,CAAChI,UAApB;AACD;;AAED,MAAI,OAAO4K,IAAP,KAAgB,QAAhB,IAA4B,eAAeA,IAA/C,EAAqD;AACnDjQ,YAAQ,GAAGiQ,IAAI,CAAC,WAAD,CAAf;AACD;;AAEDnd,cACEkN,QAAQ,KAAK,IAAb,IACE,OAAOA,QAAP,KAAoB,QADtB,IAEE,OAAOA,QAAP,KAAoB,QAFtB,IAGG,OAAOA,QAAP,KAAoB,QAApB,IAAgC,SAAUA,QAJ/ClN,EAKE,kCAAkC,OAAOkN,QAL3ClN;;AAQA,MAAI,OAAOmd,IAAP,KAAgB,QAAhB,IAA4B,YAAYA,IAAxC,IAAgDA,IAAI,CAAC,QAAD,CAAJ,KAAmB,IAAvE,EAA6E;AAC3EA,QAAI,GAAGA,IAAI,CAAC,QAAD,CAAX;AACD,GApBuB;;;AAuBxB,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,SAASA,IAAzC,EAA+C;AAC7C,QAAMC,QAAQ,GAAGD,IAAjB;AACA,WAAO,IAAI7K,QAAJ,CAAa8K,QAAb,EAAuBtJ,cAAY,CAAC5G,QAAD,CAAnC,CAAP;AACD;;AAED,MAAI,EAAEiQ,IAAI,YAAY3d,KAAlB,KAA4B0d,SAAhC,EAA2C;AACzC,QAAMG,UAAQ,GAAgB,EAA9B;AACA,QAAIC,sBAAoB,GAAG,KAA3B;AACA,QAAMC,YAAY,GAAGJ,IAArB;AACAvZ,QAAI,CAAC2Z,YAAD,EAAe,UAACzgB,GAAD,EAAMmM,KAAN,EAAW;AAC5B,UAAInM,GAAG,CAAC6G,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,GAA5B,EAAiC;;AAE/B,YAAM+O,SAAS,GAAGoB,cAAY,CAAC7K,KAAD,CAA9B;;AACA,YAAI,CAACyJ,SAAS,CAACT,OAAV,EAAL,EAA0B;AACxBqL,gCAAoB,GAClBA,sBAAoB,IAAI,CAAC5K,SAAS,CAACR,WAAV,GAAwBD,OAAxB,EAD3B;AAEAoL,oBAAQ,CAACja,IAAT,CAAc,IAAIwN,SAAJ,CAAc9T,GAAd,EAAmB4V,SAAnB,CAAd;AACD;AACF;AACF,KAVG,CAAJ;;AAYA,QAAI2K,UAAQ,CAAC/d,MAAT,KAAoB,CAAxB,EAA2B;AACzB,aAAOib,YAAY,CAAChI,UAApB;AACD;;AAED,QAAMiL,QAAQ,GAAGnG,aAAa,CAC5BgG,UAD4B,EAE5BlD,oBAF4B,EAG5B,qBAAS;AAAI,sBAAS,CAAC5c,IAAV;AAAc,KAHC,EAI5B6c,eAJ4B,CAA9B;;AAMA,QAAIkD,sBAAJ,EAA0B;AACxB,UAAMG,cAAc,GAAGpG,aAAa,CAClCgG,UADkC,EAElChJ,cAAc,CAACqF,UAAf,EAFkC,CAApC;AAIA,aAAO,IAAIa,YAAJ,CACLiD,QADK,EAEL1J,cAAY,CAAC5G,QAAD,CAFP,EAGL,IAAI0L,QAAJ,CACE;AAAE,qBAAa6E;AAAf,OADF,EAEE;AAAE,qBAAapJ;AAAf,OAFF,CAHK,CAAP;AAQD,KAbD,MAaO;AACL,aAAO,IAAIkG,YAAJ,CACLiD,QADK,EAEL1J,cAAY,CAAC5G,QAAD,CAFP,EAGL0L,QAAQ,CAAC4B,OAHJ,CAAP;AAKD;AACF,GA9CD,MA8CO;AACL,QAAIkD,MAAI,GAASnD,YAAY,CAAChI,UAA9B;AACA3O,QAAI,CAACuZ,IAAD,EAAO,UAACrgB,GAAD,EAAc6gB,SAAd,EAAgC;AACzC,UAAI/f,cAASuf,IAATvf,EAAyBd,GAAzBc,CAAJ,EAAmC;AACjC,YAAId,GAAG,CAAC6G,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,GAA5B,EAAiC;;AAE/B,cAAM+O,SAAS,GAAGoB,cAAY,CAAC6J,SAAD,CAA9B;;AACA,cAAIjL,SAAS,CAACV,UAAV,MAA0B,CAACU,SAAS,CAACT,OAAV,EAA/B,EAAoD;AAClDyL,kBAAI,GAAGA,MAAI,CAAC7K,oBAAL,CAA0B/V,GAA1B,EAA+B4V,SAA/B,CAAP;AACD;AACF;AACF;AACF,KAVG,CAAJ;AAYA,WAAOgL,MAAI,CAAC9K,cAAL,CAAoBkB,cAAY,CAAC5G,QAAD,CAAhC,CAAP;AACD;AACF;;AAED6G,eAAe,CAACD,cAAD,CAAf;ACrIA;;;;;;;;;;;;;;;;;AAsBA;;;;;;AAKA;AAAA;AAAA;AAAgCzC;;AAAhC;;AA2DC;;;;;;AAvDCuM,2CAAQnb,CAAR,EAAsBC,CAAtB,EAAkC;AAChC,QAAMyR,QAAQ,GAAG1R,CAAC,CAACkO,IAAF,CAAOyD,SAAP,CAAiB1R,CAAC,CAACiO,IAAnB,CAAjB;;AACA,QAAIwD,QAAQ,KAAK,CAAjB,EAAoB;AAClB,aAAO3R,WAAW,CAACC,CAAC,CAAClF,IAAH,EAASmF,CAAC,CAACnF,IAAX,CAAlB;AACD,KAFD,MAEO;AACL,aAAO4W,QAAP;AACD;AACF,GAPD;;;;;;AAYAyJ,+CAAYjN,IAAZ,EAAsB;AACpB,WAAO,IAAP;AACD,GAFD;;;;;;AAOAiN,uDAAoB7M,OAApB,EAAmCC,OAAnC,EAAgD;AAC9C,WAAO,CAACD,OAAO,CAAC8C,MAAR,CAAe7C,OAAf,CAAR;AACD,GAFD;;;;;;AAOA4M;;AAEE,WAAQhN,SAAiB,CAACO,GAA1B;AACD,GAHD;;;;;;AAQAyM;;AAEE,WAAQhN,SAAiB,CAACoM,GAA1B;AACD,GAHD;;;;;;;;AAUAY,4CAASnM,UAAT,EAA6BlU,IAA7B,EAAyC;AACvC,QAAMsgB,SAAS,GAAG/J,cAAY,CAACrC,UAAD,CAA9B;AACA,WAAO,IAAIb,SAAJ,CAAcrT,IAAd,EAAoBsgB,SAApB,CAAP;AACD,GAHD;;;;;;AAQAD;AACE,WAAO,QAAP;AACD,GAFD;;AAGF;AA3DA,EAAgC/M,KAAhC;;AA6DO,IAAMiN,WAAW,GAAG,IAAIF,UAAJ,EAApB;ACxFP;;;;;;;;;;;;;;;;;AAyBA;;;;;;AAKA;AAAA;AAAA;AAA+BvM;;AAC7B,qBAAoB0M,UAApB,EAAoC;AAApC,gBACElB,qBAAO,IADT;;AAAoB7C;AAGlBha,gBACE,CAAC+d,UAAU,CAAC9L,OAAX,EAAD,IAAyB8L,UAAU,CAACjW,QAAX,OAA0B,WADrD9H,EAEE,yDAFFA;;AAID;;;;;;;;AAOSge,qCAAV,UAAuBC,IAAvB,EAAiC;AAC/B,WAAOA,IAAI,CAACvD,QAAL,CAAc,KAAKqD,UAAnB,CAAP;AACD,GAFS;;;;;;AAOVC,8CAAYrN,IAAZ,EAAsB;AACpB,WAAO,CAACA,IAAI,CAAC+J,QAAL,CAAc,KAAKqD,UAAnB,EAA+B9L,OAA/B,EAAR;AACD,GAFD;;;;;;AAOA+L,0CAAQvb,CAAR,EAAsBC,CAAtB,EAAkC;AAChC,QAAMwb,MAAM,GAAG,KAAKC,YAAL,CAAkB1b,CAAC,CAACkO,IAApB,CAAf;AACA,QAAMyN,MAAM,GAAG,KAAKD,YAAL,CAAkBzb,CAAC,CAACiO,IAApB,CAAf;AACA,QAAMwD,QAAQ,GAAG+J,MAAM,CAAC9J,SAAP,CAAiBgK,MAAjB,CAAjB;;AACA,QAAIjK,QAAQ,KAAK,CAAjB,EAAoB;AAClB,aAAO3R,WAAW,CAACC,CAAC,CAAClF,IAAH,EAASmF,CAAC,CAACnF,IAAX,CAAlB;AACD,KAFD,MAEO;AACL,aAAO4W,QAAP;AACD;AACF,GATD;;;;;;AAcA6J,2CAASvM,UAAT,EAA6BlU,IAA7B,EAAyC;AACvC,QAAMsgB,SAAS,GAAG/J,cAAY,CAACrC,UAAD,CAA9B;AACA,QAAMd,IAAI,GAAG4J,YAAY,CAAChI,UAAb,CAAwBQ,WAAxB,CACX,KAAKgL,UADM,EAEXF,SAFW,CAAb;AAIA,WAAO,IAAIjN,SAAJ,CAAcrT,IAAd,EAAoBoT,IAApB,CAAP;AACD,GAPD;;;;;;AAYAqN;AACE,QAAMrN,IAAI,GAAG4J,YAAY,CAAChI,UAAb,CAAwBQ,WAAxB,CAAoC,KAAKgL,UAAzC,EAAqDpM,UAArD,CAAb;AACA,WAAO,IAAIf,SAAJ,CAAcrO,QAAd,EAAwBoO,IAAxB,CAAP;AACD,GAHD;;;;;;AAQAqN;AACE,WAAO,KAAKD,UAAL,CAAgBxW,KAAhB,GAAwBzC,IAAxB,CAA6B,GAA7B,CAAP;AACD,GAFD;;AAGF;AAlEA,EAA+B+L,KAA/B;AC9BA;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;AAUE,wBACmBwN,KADnB,EAEmBC,IAFnB,EAGmBC,MAHnB,EAGgC;AAFb;AACA;AACA;AACf;;;;;;;;;AAQJC;AACEtP,0BAAiB,kBAAjBA,EAAqC,CAArCA,EAAwC,CAAxCA,EAA2CC,SAAS,CAAC7P,MAArD4P;AACA,WAAO,KAAKmP,KAAL,CAAW9M,GAAX,EAAP;AACD,GAHD;;;;;;;;AAUAiN;AACEtP,0BAAiB,wBAAjBA,EAA2C,CAA3CA,EAA8C,CAA9CA,EAAiDC,SAAS,CAAC7P,MAA3D4P;AACA,WAAO,KAAKmP,KAAL,CAAW9M,GAAX,CAAe,IAAf,CAAP;AACD,GAHD;;;;AAOAiN;;AAEEtP,0BAAiB,qBAAjBA,EAAwC,CAAxCA,EAA2C,CAA3CA,EAA8CC,SAAS,CAAC7P,MAAxD4P;AACA,WAAO,KAAKuP,SAAL,EAAP;AACD,GAJD;;;;;;;;AAWAD;AACEtP,0BAAiB,qBAAjBA,EAAwC,CAAxCA,EAA2C,CAA3CA,EAA8CC,SAAS,CAAC7P,MAAxD4P;AACA,WAAO,CAAC,KAAKmP,KAAL,CAAWpM,OAAX,EAAR;AACD,GAHD;;;;;;;;;AAWAuM,2CAAME,eAAN,EAA6B;AAC3BxP,0BAAiB,oBAAjBA,EAAuC,CAAvCA,EAA0C,CAA1CA,EAA6CC,SAAS,CAAC7P,MAAvD4P,EAD2B;;AAG3BwP,mBAAe,GAAGrX,MAAM,CAACqX,eAAD,CAAxB;AACAjQ,sBAAkB,CAAC,oBAAD,EAAuB,CAAvB,EAA0BiQ,eAA1B,EAA2C,KAA3C,CAAlB;AAEA,QAAMC,SAAS,GAAG,IAAIzX,IAAJ,CAASwX,eAAT,CAAlB;AACA,QAAME,QAAQ,GAAG,KAAKN,IAAL,CAAUrV,KAAV,CAAgB0V,SAAhB,CAAjB;AACA,WAAO,IAAIH,YAAJ,CACL,KAAKH,KAAL,CAAW3D,QAAX,CAAoBiE,SAApB,CADK,EAELC,QAFK,EAGLvK,cAHK,CAAP;AAKD,GAbD;;;;;;;;;AAqBAmK,8CAASE,eAAT,EAAgC;AAC9BxP,0BAAiB,uBAAjBA,EAA0C,CAA1CA,EAA6C,CAA7CA,EAAgDC,SAAS,CAAC7P,MAA1D4P;AACAT,sBAAkB,CAAC,uBAAD,EAA0B,CAA1B,EAA6BiQ,eAA7B,EAA8C,KAA9C,CAAlB;AAEA,QAAMC,SAAS,GAAG,IAAIzX,IAAJ,CAASwX,eAAT,CAAlB;AACA,WAAO,CAAC,KAAKL,KAAL,CAAW3D,QAAX,CAAoBiE,SAApB,EAA+B1M,OAA/B,EAAR;AACD,GAND;;;;;;;;AAaAuM;AACEtP,0BAAiB,0BAAjBA,EAA6C,CAA7CA,EAAgD,CAAhDA,EAAmDC,SAAS,CAAC7P,MAA7D4P,EADF;;AAIE,WAAO,KAAKmP,KAAL,CAAWnM,WAAX,GAAyBX,GAAzB,EAAP;AACD,GALD;;;;;;;;;;;AAeAiN,6CAAQvL,MAAR,EAAmD;AAAnD;;AACE/D,0BAAiB,sBAAjBA,EAAyC,CAAzCA,EAA4C,CAA5CA,EAA+CC,SAAS,CAAC7P,MAAzD4P;AACAE,0BAAiB,sBAAjBA,EAAyC,CAAzCA,EAA4C6D,MAA5C7D,EAAoD,KAApDA;;AAEA,QAAI,KAAKiP,KAAL,CAAWrM,UAAX,EAAJ,EAA6B;AAC3B,aAAO,KAAP;AACD;;AAED,QAAM6M,YAAY,GAAG,KAAKR,KAA1B,CARiD;;AAUjD,WAAO,CAAC,CAACQ,YAAY,CAAC3D,YAAb,CAA0B,KAAKqD,MAA/B,EAAuC,UAACzhB,GAAD,EAAM6T,IAAN,EAAU;AACxD,aAAOsC,MAAM,CACX,IAAIuL,YAAJ,CAAiB7N,IAAjB,EAAuBqJ,KAAI,CAACsE,IAAL,CAAUrV,KAAV,CAAgBnM,GAAhB,CAAvB,EAA6CuX,cAA7C,CADW,CAAb;AAGD,KAJQ,CAAT;AAKD,GAfD;;;;;;;AAqBAmK;AACEtP,0BAAiB,0BAAjBA,EAA6C,CAA7CA,EAAgD,CAAhDA,EAAmDC,SAAS,CAAC7P,MAA7D4P;;AAEA,QAAI,KAAKmP,KAAL,CAAWrM,UAAX,EAAJ,EAA6B;AAC3B,aAAO,KAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,KAAKqM,KAAL,CAAWpM,OAAX,EAAR;AACD;AACF,GARD;;AAUAhL,wBAAIuX,sBAAJ,EAAI,KAAJ,EAAO;SAAP;AACE,aAAO,KAAKF,IAAL,CAAUQ,MAAV,EAAP;AACD,KAFM;oBAAA;;AAAA,GAAP;;;;;;AAQAN;AACEtP,0BAAiB,0BAAjBA,EAA6C,CAA7CA,EAAgD,CAAhDA,EAAmDC,SAAS,CAAC7P,MAA7D4P;AAEA,WAAO,KAAKmP,KAAL,CAAWU,WAAX,EAAP;AACD,GAJD;;;;;;AASAP;AACEtP,0BAAiB,kBAAjBA,EAAqC,CAArCA,EAAwC,CAAxCA,EAA2CC,SAAS,CAAC7P,MAArD4P;AAEA,WAAO,KAAKoP,IAAZ;AACD,GAJD;;AAMArX,wBAAIuX,sBAAJ,EAAI,KAAJ,EAAO;SAAP;AACE,aAAO,KAAKQ,MAAL,EAAP;AACD,KAFM;oBAAA;;AAAA,GAAP;AAGF;AAAC;ACjMD;;;;;;;;;;;;;;;;;AAuDA;;;;;;AAIA;AAAA;AAAA;;;;;;;AAOE,qBACSzQ,SADT,EAES0Q,iBAFT,EAGSjP,QAHT,EAISkP,QAJT,EAIiC;AAHxB;AACA;AACA;AACA;AACL;;;;;;AAKJC;AACE,QAAMC,GAAG,GAAG,KAAKpP,QAAL,CAAcgP,MAAd,EAAZ;;AACA,QAAI,KAAKzQ,SAAL,KAAmB,OAAvB,EAAgC;AAC9B,aAAO6Q,GAAG,CAACtZ,IAAX;AACD,KAFD,MAEO;AACL,aAAOsZ,GAAG,CAACC,SAAJ,GAAgBvZ,IAAvB;AACD;AACF,GAPD;;;;;;AAYAqZ;AACE,WAAO,KAAK5Q,SAAZ;AACD,GAFD;;;;;;AAOA4Q;AACE,WAAO,KAAKF,iBAAL,CAAuBK,cAAvB,CAAsC,IAAtC,CAAP;AACD,GAFD;;;;;;AAOAH;AACE,WACE,KAAKI,OAAL,GAAe9hB,QAAf,KACA,GADA,GAEA,KAAK8Q,SAFL,GAGA,GAHA,GAIApR,eAAU,KAAK6S,QAAL,CAAcyO,SAAd,EAAVthB,CALF;AAOD,GARD;;AASF;AAAC,CApDD;;AAsDA;AAAA;AAAA;;;;;;AAME,uBACS8hB,iBADT,EAESre,KAFT,EAGSkF,IAHT,EAGmB;AAFV;AACA;AACA;AACL;;;;;;AAKJ0Z;AACE,WAAO,KAAK1Z,IAAZ;AACD,GAFD;;;;;;AAOA0Z;AACE,WAAO,QAAP;AACD,GAFD;;;;;;AAOAA;AACE,WAAO,KAAKP,iBAAL,CAAuBK,cAAvB,CAAsC,IAAtC,CAAP;AACD,GAFD;;;;;;AAOAE;AACE,WAAO,KAAK1Z,IAAL,CAAUrI,QAAV,KAAuB,SAA9B;AACD,GAFD;;AAGF;AAAC,CAvCD;ACjHA;;;;;;;;;;;;;;;;;AAgFA;;;;;AAGA;AAAA;AAAA;;;;;;AAME,kCACUgiB,SADV,EAEUC,eAFV,EAGUC,QAHV,EAG6B;AAFnB;AACA;AACA;AACN;;;;;;AAKJC,0DAAWrR,SAAX,EAA4B;AAC1B,WAAOA,SAAS,KAAK,OAArB;AACD,GAFD;;;;;;AAOAqR,2DAAYC,MAAZ,EAA4Bja,KAA5B,EAAwC;AACtC,QAAMoN,KAAK,GAAGpN,KAAK,CAACka,cAAN,GAAuBC,QAAvB,EAAd;AACA,WAAO,IAAIZ,SAAJ,CACL,OADK,EAEL,IAFK,EAGL,IAAIX,YAAJ,CAAiBqB,MAAM,CAACG,YAAxB,EAAsCpa,KAAK,CAACoZ,MAAN,EAAtC,EAAsDhM,KAAtD,CAHK,CAAP;AAKD,GAPD;;;;;;AAYA4M,8DAAeK,SAAf,EAAiD;AAC/C,QAAMC,GAAG,GAAG,KAAKP,QAAjB;;AACA,QAAIM,SAAS,CAACE,YAAV,OAA6B,QAAjC,EAA2C;AACzCngB,kBACE,KAAK0f,eADP1f,EAEE,8DAFFA;AAIA,UAAMogB,UAAQ,GAAG,KAAKV,eAAtB;AACA,aAAO;;AAELU,kBAAQ,CAACC,IAAT,CAAcH,GAAd,EAAoBD,SAAyB,CAACrf,KAA9C;AACD,OAHD;AAID,KAVD,MAUO;AACL,UAAM0f,IAAE,GAAG,KAAKb,SAAhB;AACA,aAAO;AACLa,YAAE,CAACD,IAAH,CAAQH,GAAR,EAAcD,SAAuB,CAACjQ,QAAtC;AACD,OAFD;AAGD;AACF,GAlBD;;;;;;AAuBA4P,iEAAkBhf,KAAlB,EAAgCkF,IAAhC,EAA0C;AACxC,QAAI,KAAK4Z,eAAT,EAA0B;AACxB,aAAO,IAAIF,WAAJ,CAAgB,IAAhB,EAAsB5e,KAAtB,EAA6BkF,IAA7B,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GAND;;;;;;AAWA8Z,uDAAQrX,KAAR,EAAgC;AAC9B,QAAI,EAAEA,KAAK,YAAYqX,sBAAnB,CAAJ,EAAgD;AAC9C,aAAO,KAAP;AACD,KAFD,MAEO,IAAI,CAACrX,KAAK,CAACkX,SAAP,IAAoB,CAAC,KAAKA,SAA9B,EAAyC;;AAE9C,aAAO,IAAP;AACD,KAHM,MAGA;AACL,aACElX,KAAK,CAACkX,SAAN,KAAoB,KAAKA,SAAzB,IAAsClX,KAAK,CAACoX,QAAN,KAAmB,KAAKA,QADhE;AAGD;AACF,GAXD;;;;;;AAgBAC;AACE,WAAO,KAAKH,SAAL,KAAmB,IAA1B;AACD,GAFD;;AAGF;AAAC,CAvFD;AAyFA;;;;;;;;;;;AASA;AAAA;AAAA;;;;;;AAME,kCACUc,UADV,EAIUb,eAJV,EAKUC,QALV,EAKuB;AAJb;AAGA;AACA;AACN;;;;;;AAKJa,0DAAWjS,SAAX,EAA4B;AAC1B,QAAIkS,YAAY,GACdlS,SAAS,KAAK,gBAAd,GAAiC,aAAjC,GAAiDA,SADnD;AAEAkS,gBAAY,GACVA,YAAY,KAAK,kBAAjB,GAAsC,eAAtC,GAAwDA,YAD1D;AAEA,WAAO7iB,cAAS,KAAK2iB,UAAd3iB,EAA0B6iB,YAA1B7iB,CAAP;AACD,GAND;;;;;;AAWA4iB,iEAAkB5f,KAAlB,EAAgCkF,IAAhC,EAA0C;AACxC,QAAI,KAAK4Z,eAAT,EAA0B;AACxB,aAAO,IAAIF,WAAJ,CAAgB,IAAhB,EAAsB5e,KAAtB,EAA6BkF,IAA7B,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GAND;;;;;;AAWA0a,2DAAYX,MAAZ,EAA4Bja,KAA5B,EAAwC;AACtC5F,gBAAO6f,MAAM,CAACpN,SAAP,IAAoB,IAA3BzS,EAAiC,uCAAjCA;AACA,QAAMof,GAAG,GAAGxZ,KAAK,CAACoZ,MAAN,GAAe/V,KAAf;AAAoB;AAAwB4W,UAAM,CAACpN,SAAnD,CAAZ;AACA,QAAMO,KAAK,GAAGpN,KAAK,CAACka,cAAN,GAAuBC,QAAvB,EAAd;AACA,WAAO,IAAIZ,SAAJ,CACLU,MAAM,CAACjV,IADF,EAEL,IAFK,EAGL,IAAI4T,YAAJ,CAAiBqB,MAAM,CAACG,YAAxB,EAAsCZ,GAAtC,EAA2CpM,KAA3C,CAHK,EAIL6M,MAAM,CAACX,QAJF,CAAP;AAMD,GAVD;;;;;;AAeAsB,8DAAeP,SAAf,EAAiD;AAC/C,QAAMC,GAAG,GAAG,KAAKP,QAAjB;;AACA,QAAIM,SAAS,CAACE,YAAV,OAA6B,QAAjC,EAA2C;AACzCngB,kBACE,KAAK0f,eADP1f,EAEE,8DAFFA;AAIA,UAAM0gB,UAAQ,GAAG,KAAKhB,eAAtB;AACA,aAAO;;AAELgB,kBAAQ,CAACL,IAAT,CAAcH,GAAd,EAAoBD,SAAyB,CAACrf,KAA9C;AACD,OAHD;AAID,KAVD,MAUO;AACL,UAAM+f,IAAE,GAAG,KAAKJ,UAAL,CAAiBN,SAAuB,CAAC1R,SAAzC,CAAX;AACA,aAAO;AACLoS,YAAE,CAACN,IAAH,CACEH,GADF,EAEGD,SAAuB,CAACjQ,QAF3B,EAGGiQ,SAAuB,CAACf,QAH3B;AAKD,OAND;AAOD;AACF,GAtBD;;;;;;AA2BAsB,uDAAQjY,KAAR,EAAgC;AAAhC;;AACE,QAAIA,KAAK,YAAYiY,sBAArB,EAA6C;AAC3C,UAAI,CAAC,KAAKD,UAAN,IAAoB,CAAChY,KAAK,CAACgY,UAA/B,EAA2C;AACzC,eAAO,IAAP;AACD,OAFD,MAEO,IAAI,KAAKZ,QAAL,KAAkBpX,KAAK,CAACoX,QAA5B,EAAsC;AAC3C,YAAMiB,SAAS,GAAG3Z,MAAM,CAAC/D,IAAP,CAAYqF,KAAK,CAACgY,UAAlB,CAAlB;AACA,YAAMM,QAAQ,GAAG5Z,MAAM,CAAC/D,IAAP,CAAY,KAAKqd,UAAjB,CAAjB;AACA,YAAMO,UAAU,GAAGF,SAAS,CAACthB,MAA7B;AACA,YAAMyhB,SAAS,GAAGF,QAAQ,CAACvhB,MAA3B;;AACA,YAAIwhB,UAAU,KAAKC,SAAnB,EAA8B;;;;AAK5B,cAAID,UAAU,KAAK,CAAnB,EAAsB;AACpB,gBAAME,QAAQ,GAAGJ,SAAS,CAAC,CAAD,CAA1B;AACA,gBAAMK,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACA,mBACEI,OAAO,KAAKD,QAAZ,KACC,CAACzY,KAAK,CAACgY,UAAN,CAAiBS,QAAjB,CAAD,IACC,CAAC,KAAKT,UAAL,CAAgBU,OAAhB,CADF,IAEC1Y,KAAK,CAACgY,UAAN,CAAiBS,QAAjB,MAA+B,KAAKT,UAAL,CAAgBU,OAAhB,CAHjC,CADF;AAMD,WATD,MASO;;AAEL,mBAAOJ,QAAQ,CAACK,KAAT,CACL,qBAAS;AACP,0BAAK,CAACX,UAAN,CAAiBhS,SAAjB,MAAgCyL,KAAI,CAACuG,UAAL,CAAgBhS,SAAhB,CAAhC;AAA0D,aAFvD,CAAP;AAID;AACF;AACF;AACF;;AAED,WAAO,KAAP;AACD,GAnCD;;;;;;AAwCAiS;AACE,WAAO,KAAKD,UAAL,KAAoB,IAA3B;AACD,GAFD;;AAGF;AAAC,CA5HD;ACrLA;;;;;;;;;;;;;;;;;;AAkDA,IAAIY,sBAAJ;AAMA;;;;;;;;;;;AAgBE,iBACSC,IADT,EAEStb,IAFT,EAGUub,YAHV,EAIUC,cAJV,EAIiC;AAHxB;AACA;AACC;AACA;AACN;;AAdJra,wBAAWsa,KAAX,EAAW,wBAAX,EAAiC;SAIjC;AACEvhB,kBAAOmhB,sBAAPnhB,EAA+B,kCAA/BA;AACA,aAAOmhB,sBAAP;AACD,KAPgC;SAAjC,UAAkC5P,GAAlC,EAAqC;AACnC4P,4BAAsB,GAAG5P,GAAzB;AACD,KAFgC;oBAAA;;AAAA,GAAjC;;;;;;;AAqBegQ,kCAAf,UAAuC1W,MAAvC,EAA0D;AACxD,QAAI2W,SAAS,GAAG,IAAhB;AACA,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAI5W,MAAM,CAAC6W,QAAP,EAAJ,EAAuB;AACrBF,eAAS,GAAG3W,MAAM,CAAC8W,kBAAP,EAAZ;AACD;;AACD,QAAI9W,MAAM,CAAC+W,MAAP,EAAJ,EAAqB;AACnBH,aAAO,GAAG5W,MAAM,CAACgX,gBAAP,EAAV;AACD;;AAED,QAAIhX,MAAM,CAACkV,QAAP,OAAsBrO,SAA1B,EAAqC;AACnC,UAAMoQ,gBAAgB,GACpB,oEACA,mCAFF;AAGA,UAAMC,iBAAiB,GACrB,4EACA,gCAFF;;AAGA,UAAIlX,MAAM,CAAC6W,QAAP,EAAJ,EAAuB;AACrB,YAAMM,SAAS,GAAGnX,MAAM,CAACoX,iBAAP,EAAlB;;AACA,YAAID,SAAS,KAAK1f,QAAlB,EAA4B;AAC1B,gBAAM,IAAIxB,KAAJ,CAAUghB,gBAAV,CAAN;AACD,SAFD,MAEO,IAAI,OAAON,SAAP,KAAqB,QAAzB,EAAmC;AACxC,gBAAM,IAAI1gB,KAAJ,CAAUihB,iBAAV,CAAN;AACD;AACF;;AACD,UAAIlX,MAAM,CAAC+W,MAAP,EAAJ,EAAqB;AACnB,YAAMM,OAAO,GAAGrX,MAAM,CAACsX,eAAP,EAAhB;;AACA,YAAID,OAAO,KAAK3f,QAAhB,EAA0B;AACxB,gBAAM,IAAIzB,KAAJ,CAAUghB,gBAAV,CAAN;AACD,SAFD,MAEO,IAAI,OAAOL,OAAP,KAAmB,QAAvB,EAAiC;AACtC,gBAAM,IAAI3gB,KAAJ,CAAUihB,iBAAV,CAAN;AACD;AACF;AACF,KAvBD,MAuBO,IAAIlX,MAAM,CAACkV,QAAP,OAAsB1L,cAA1B,EAA0C;AAC/C,UACGmN,SAAS,IAAI,IAAb,IAAqB,CAACvU,eAAe,CAACuU,SAAD,CAAtC,IACCC,OAAO,IAAI,IAAX,IAAmB,CAACxU,eAAe,CAACwU,OAAD,CAFtC,EAGE;AACA,cAAM,IAAI3gB,KAAJ,CACJ,+EACE,qFAFE,CAAN;AAID;AACF,KAVM,MAUA;AACLd,kBACE6K,MAAM,CAACkV,QAAP,cAA6B/B,SAA7B,IACEnT,MAAM,CAACkV,QAAP,OAAsBjC,WAF1B9d,EAGE,qBAHFA;;AAKA,UACGwhB,SAAS,IAAI,IAAb,IAAqB,OAAOA,SAAP,KAAqB,QAA3C,IACCC,OAAO,IAAI,IAAX,IAAmB,OAAOA,OAAP,KAAmB,QAFzC,EAGE;AACA,cAAM,IAAI3gB,KAAJ,CACJ,gFACE,YAFE,CAAN;AAID;AACF;AACF,GA3Dc;;;;;;;;AAkEAygB,yBAAf,UAA8B1W,MAA9B,EAAiD;AAC/C,QACEA,MAAM,CAAC6W,QAAP,MACA7W,MAAM,CAAC+W,MAAP,EADA,IAEA/W,MAAM,CAACuX,QAAP,EAFA,IAGA,CAACvX,MAAM,CAACwX,gBAAP,EAJH,EAKE;AACA,YAAM,IAAIvhB,KAAJ,CACJ,oGADI,CAAN;AAGD;AACF,GAXc;;;;;;;;AAkBPygB,mDAAR,UAAuCnU,MAAvC,EAAqD;AACnD,QAAI,KAAKkU,cAAL,KAAwB,IAA5B,EAAkC;AAChC,YAAM,IAAIxgB,KAAJ,CAAUsM,MAAM,GAAG,6CAAnB,CAAN;AACD;AACF,GAJO;;;;;;AASRmU;AACE,WAAO,KAAKF,YAAZ;AACD,GAFD;;;;;;AAOAE;AACErS,0BAAiB,WAAjBA,EAA8B,CAA9BA,EAAiC,CAAjCA,EAAoCC,SAAS,CAAC7P,MAA9C4P,EADF;;;;AAKE,WAAO,IAAIqS,KAAK,CAACJ,sBAAV,CAAiC,KAAKC,IAAtC,EAA4C,KAAKtb,IAAjD,CAAP;AACD,GAND;;;;;;;;;;AAeAyb,iCACEhT,SADF,EAEE+T,QAFF,EAGEC,uBAHF,EAIEC,OAJF,EAIyB;AAEvBtT,0BAAiB,UAAjBA,EAA6B,CAA7BA,EAAgC,CAAhCA,EAAmCC,SAAS,CAAC7P,MAA7C4P;AACAZ,qBAAiB,CAAC,UAAD,EAAa,CAAb,EAAgBC,SAAhB,EAA2B,KAA3B,CAAjB;AACAa,0BAAiB,UAAjBA,EAA6B,CAA7BA,EAAgCkT,QAAhClT,EAA0C,KAA1CA;AAEA,QAAMqT,GAAG,GAAGlB,KAAK,CAACmB,wBAAN,CACV,UADU,EAEVH,uBAFU,EAGVC,OAHU,CAAZ;;AAMA,QAAIjU,SAAS,KAAK,OAAlB,EAA2B;AACzB,WAAKoU,YAAL,CAAkBL,QAAlB,EAA4BG,GAAG,CAACG,MAAhC,EAAwCH,GAAG,CAACD,OAA5C;AACD,KAFD,MAEO;AACL,UAAMK,SAAS,GAAqC,EAApD;AACAA,eAAS,CAACtU,SAAD,CAAT,GAAuB+T,QAAvB;AACA,WAAKQ,YAAL,CAAkBD,SAAlB,EAA6BJ,GAAG,CAACG,MAAjC,EAAyCH,GAAG,CAACD,OAA7C;AACD;;AACD,WAAOF,QAAP;AACD,GAxBD;;;;;;;;;AAgCUf,iCAAV,UACEe,QADF,EAEES,cAFF,EAGEP,OAHF,EAGwB;AAEtB,QAAMQ,SAAS,GAAG,IAAIpD,sBAAJ,CAChB0C,QADgB,EAEhBS,cAAc,IAAI,IAFF,EAGhBP,OAAO,IAAI,IAHK,CAAlB;AAKA,SAAKpB,IAAL,CAAU6B,wBAAV,CAAmC,IAAnC,EAAyCD,SAAzC;AACD,GAXS;;;;;;;;;AAmBVzB,2CACEsB,SADF,EAEEE,cAFF,EAGEP,OAHF,EAGwB;AAEtB,QAAMQ,SAAS,GAAG,IAAIxC,sBAAJ,CAChBqC,SADgB,EAEhBE,cAFgB,EAGhBP,OAHgB,CAAlB;AAKA,SAAKpB,IAAL,CAAU6B,wBAAV,CAAmC,IAAnC,EAAyCD,SAAzC;AACD,GAXD;;;;;;;;AAkBAzB,kCACEhT,SADF,EAEE+T,QAFF,EAGEE,OAHF,EAGyB;AAEvBtT,0BAAiB,WAAjBA,EAA8B,CAA9BA,EAAiC,CAAjCA,EAAoCC,SAAS,CAAC7P,MAA9C4P;AACAZ,qBAAiB,CAAC,WAAD,EAAc,CAAd,EAAiBC,SAAjB,EAA4B,IAA5B,CAAjB;AACAa,0BAAiB,WAAjBA,EAA8B,CAA9BA,EAAiCkT,QAAjClT,EAA2C,IAA3CA;AACA8T,+BAAsB,WAAtBA,EAAmC,CAAnCA,EAAsCV,OAAtCU,EAA+C,IAA/CA;AAEA,QAAIF,SAAS,GAA6B,IAA1C;AACA,QAAIH,SAAS,GAA4C,IAAzD;;AACA,QAAItU,SAAS,KAAK,OAAlB,EAA2B;AACzB,UAAM4U,aAAa,GAAGb,QAAQ,IAAI,IAAlC;AACAU,eAAS,GAAG,IAAIpD,sBAAJ,CACVuD,aADU,EAEV,IAFU,EAGVX,OAAO,IAAI,IAHD,CAAZ;AAKD,KAPD,MAOO,IAAIjU,SAAJ,EAAe;AACpB,UAAI+T,QAAJ,EAAc;AACZO,iBAAS,GAAG,EAAZ;AACAA,iBAAS,CAACtU,SAAD,CAAT,GAAuB+T,QAAvB;AACD;;AACDU,eAAS,GAAG,IAAIxC,sBAAJ,CAA2BqC,SAA3B,EAAsC,IAAtC,EAA4CL,OAAO,IAAI,IAAvD,CAAZ;AACD;;AACD,SAAKpB,IAAL,CAAUgC,2BAAV,CAAsC,IAAtC,EAA4CJ,SAA5C;AACD,GA3BD;;;;;;;;;;;AAqCAzB,mCACEhT,SADF,EAEE8U,YAFF,EAGEC,wBAHF,EAIEd,OAJF,EAIyB;AAJzB;;AAMEtT,0BAAiB,YAAjBA,EAA+B,CAA/BA,EAAkC,CAAlCA,EAAqCC,SAAS,CAAC7P,MAA/C4P;AACAZ,qBAAiB,CAAC,YAAD,EAAe,CAAf,EAAkBC,SAAlB,EAA6B,KAA7B,CAAjB;AACAa,0BAAiB,YAAjBA,EAA+B,CAA/BA,EAAkCiU,YAAlCjU,EAAgD,IAAhDA;AAEA,QAAMqT,GAAG,GAAGlB,KAAK,CAACmB,wBAAN,CACV,YADU,EAEVY,wBAFU,EAGVd,OAHU,CAAZ,CANuB;;;;;AAgBvB,QAAIe,SAAS,GAAG,IAAhB;AACA,QAAMlU,QAAQ,GAAG,IAAIC,aAAJ,EAAjB,CAjBuB;;AAoBvBD,YAAQ,CAACI,OAAT,CAAiB+T,KAAjB,CAAuB,aAAQ,CAA/B;;AAEA,QAAMC,YAAY,GAAG,UAACzT,QAAD,EAAuB;;;AAG1C,UAAIuT,SAAJ,EAAe;AACbA,iBAAS,GAAG,KAAZ;;AACAvJ,aAAI,CAAC0J,GAAL,CAASnV,SAAT,EAAoBkV,YAApB;;AAEA,YAAIJ,YAAJ,EAAkB;AAChBA,sBAAY,CAAChjB,IAAb,CAAkBoiB,GAAG,CAACD,OAAtB,EAA+BxS,QAA/B;AACD;;AACDX,gBAAQ,CAACsU,OAAT,CAAiB3T,QAAjB;AACD;AACF,KAZD;;AAcA,SAAK4T,EAAL,CACErV,SADF,EAEEkV,YAFF;;AAGc,mBAAG;AACbzJ,WAAI,CAAC0J,GAAL,CAASnV,SAAT,EAAoBkV,YAApB;;AAEA,UAAIhB,GAAG,CAACG,MAAR,EAAgB;AACdH,WAAG,CAACG,MAAJ,CAAWviB,IAAX,CAAgBoiB,GAAG,CAACD,OAApB,EAA6BqB,GAA7B;AACD;;AACDxU,cAAQ,CAACyU,MAAT,CAAgBD,GAAhB;AACD,KAVH;AAYA,WAAOxU,QAAQ,CAACI,OAAhB;AACD,GArDD;;;;;;;;AA4DA8R,2CAAawC,KAAb,EAA0B;AACxB7U,0BAAiB,oBAAjBA,EAAuC,CAAvCA,EAA0C,CAA1CA,EAA6CC,SAAS,CAAC7P,MAAvD4P;;AACA,QACE,OAAO6U,KAAP,KAAiB,QAAjB,IACA7hB,IAAI,CAACC,KAAL,CAAW4hB,KAAX,MAAsBA,KADtB,IAEAA,KAAK,IAAI,CAHX,EAIE;AACA,YAAM,IAAIjjB,KAAJ,CACJ,gEADI,CAAN;AAGD;;AACD,QAAI,KAAKugB,YAAL,CAAkBe,QAAlB,EAAJ,EAAkC;AAChC,YAAM,IAAIthB,KAAJ,CACJ,0EACE,gCAFE,CAAN;AAID;;AAED,WAAO,IAAIygB,KAAJ,CACL,KAAKH,IADA,EAEL,KAAKtb,IAFA,EAGL,KAAKub,YAAL,CAAkB2C,YAAlB,CAA+BD,KAA/B,CAHK,EAIL,KAAKzC,cAJA,CAAP;AAMD,GAxBD;;;;;;;;AA+BAC,0CAAYwC,KAAZ,EAAyB;AACvB7U,0BAAiB,mBAAjBA,EAAsC,CAAtCA,EAAyC,CAAzCA,EAA4CC,SAAS,CAAC7P,MAAtD4P;;AACA,QACE,OAAO6U,KAAP,KAAiB,QAAjB,IACA7hB,IAAI,CAACC,KAAL,CAAW4hB,KAAX,MAAsBA,KADtB,IAEAA,KAAK,IAAI,CAHX,EAIE;AACA,YAAM,IAAIjjB,KAAJ,CACJ,+DADI,CAAN;AAGD;;AACD,QAAI,KAAKugB,YAAL,CAAkBe,QAAlB,EAAJ,EAAkC;AAChC,YAAM,IAAIthB,KAAJ,CACJ,yEACE,gCAFE,CAAN;AAID;;AAED,WAAO,IAAIygB,KAAJ,CACL,KAAKH,IADA,EAEL,KAAKtb,IAFA,EAGL,KAAKub,YAAL,CAAkB4C,WAAlB,CAA8BF,KAA9B,CAHK,EAIL,KAAKzC,cAJA,CAAP;AAMD,GAxBD;;;;;;;;AA+BAC,2CAAazb,IAAb,EAAyB;AACvBoJ,0BAAiB,oBAAjBA,EAAuC,CAAvCA,EAA0C,CAA1CA,EAA6CC,SAAS,CAAC7P,MAAvD4P;;AACA,QAAIpJ,IAAI,KAAK,MAAb,EAAqB;AACnB,YAAM,IAAIhF,KAAJ,CACJ,yEADI,CAAN;AAGD,KAJD,MAIO,IAAIgF,IAAI,KAAK,WAAb,EAA0B;AAC/B,YAAM,IAAIhF,KAAJ,CACJ,mFADI,CAAN;AAGD,KAJM,MAIA,IAAIgF,IAAI,KAAK,QAAb,EAAuB;AAC5B,YAAM,IAAIhF,KAAJ,CACJ,6EADI,CAAN;AAGD;;AACD2N,sBAAkB,CAAC,oBAAD,EAAuB,CAAvB,EAA0B3I,IAA1B,EAAgC,KAAhC,CAAlB;AACA,SAAKoe,8BAAL,CAAoC,oBAApC;AACA,QAAMC,UAAU,GAAG,IAAIjd,IAAJ,CAASpB,IAAT,CAAnB;;AACA,QAAIqe,UAAU,CAAClS,OAAX,EAAJ,EAA0B;AACxB,YAAM,IAAInR,KAAJ,CACJ,mFADI,CAAN;AAGD;;AACD,QAAMkS,KAAK,GAAG,IAAIgL,SAAJ,CAAcmG,UAAd,CAAd;AACA,QAAMC,SAAS,GAAG,KAAK/C,YAAL,CAAkBgD,OAAlB,CAA0BrR,KAA1B,CAAlB;AACAuO,SAAK,CAAC+C,uBAAN,CAA8BF,SAA9B;AAEA,WAAO,IAAI7C,KAAJ,CAAU,KAAKH,IAAf,EAAqB,KAAKtb,IAA1B,EAAgCse,SAAhC;AAAyC;AAAqB,QAA9D,CAAP;AACD,GA5BD;;;;;;;AAkCA7C;AACErS,0BAAiB,kBAAjBA,EAAqC,CAArCA,EAAwC,CAAxCA,EAA2CC,SAAS,CAAC7P,MAArD4P;AACA,SAAKgV,8BAAL,CAAoC,kBAApC;AACA,QAAME,SAAS,GAAG,KAAK/C,YAAL,CAAkBgD,OAAlB,CAA0B3S,SAA1B,CAAlB;AACA6P,SAAK,CAAC+C,uBAAN,CAA8BF,SAA9B;AACA,WAAO,IAAI7C,KAAJ,CAAU,KAAKH,IAAf,EAAqB,KAAKtb,IAA1B,EAAgCse,SAAhC;AAAyC;AAAqB,QAA9D,CAAP;AACD,GAND;;;;;;;AAYA7C;AACErS,0BAAiB,uBAAjBA,EAA0C,CAA1CA,EAA6C,CAA7CA,EAAgDC,SAAS,CAAC7P,MAA1D4P;AACA,SAAKgV,8BAAL,CAAoC,uBAApC;AACA,QAAME,SAAS,GAAG,KAAK/C,YAAL,CAAkBgD,OAAlB,CAA0BhQ,cAA1B,CAAlB;AACAkN,SAAK,CAAC+C,uBAAN,CAA8BF,SAA9B;AACA,WAAO,IAAI7C,KAAJ,CAAU,KAAKH,IAAf,EAAqB,KAAKtb,IAA1B,EAAgCse,SAAhC;AAAyC;AAAqB,QAA9D,CAAP;AACD,GAND;;;;;;;AAYA7C;AACErS,0BAAiB,oBAAjBA,EAAuC,CAAvCA,EAA0C,CAA1CA,EAA6CC,SAAS,CAAC7P,MAAvD4P;AACA,SAAKgV,8BAAL,CAAoC,oBAApC;AACA,QAAME,SAAS,GAAG,KAAK/C,YAAL,CAAkBgD,OAAlB,CAA0BvG,WAA1B,CAAlB;AACAyD,SAAK,CAAC+C,uBAAN,CAA8BF,SAA9B;AACA,WAAO,IAAI7C,KAAJ,CAAU,KAAKH,IAAf,EAAqB,KAAKtb,IAA1B,EAAgCse,SAAhC;AAAyC;AAAqB,QAA9D,CAAP;AACD,GAND;;;;;;;;AAaA7C,sCACExkB,KADF,EAEEQ,IAFF,EAEsB;AADpB;AAAAR;AAA8C;;AAG9CmS,0BAAiB,eAAjBA,EAAkC,CAAlCA,EAAqC,CAArCA,EAAwCC,SAAS,CAAC7P,MAAlD4P;AACA/B,2BAAuB,CAAC,eAAD,EAAkB,CAAlB,EAAqBpQ,KAArB,EAA4B,KAAK+I,IAAjC,EAAuC,IAAvC,CAAvB;AACA0I,eAAW,CAAC,eAAD,EAAkB,CAAlB,EAAqBjR,IAArB,EAA2B,IAA3B,CAAX;AAEA,QAAM6mB,SAAS,GAAG,KAAK/C,YAAL,CAAkBkD,OAAlB,CAA0BxnB,KAA1B,EAAiCQ,IAAjC,CAAlB;AACAgkB,SAAK,CAACiD,cAAN,CAAqBJ,SAArB;AACA7C,SAAK,CAAC+C,uBAAN,CAA8BF,SAA9B;;AACA,QAAI,KAAK/C,YAAL,CAAkBK,QAAlB,EAAJ,EAAkC;AAChC,YAAM,IAAI5gB,KAAJ,CACJ,+EACE,cAFE,CAAN;AAID,KAdmB;;;AAiBpB,QAAI/D,KAAK,KAAKwQ,SAAd,EAAyB;AACvBxQ,WAAK,GAAG,IAAR;AACAQ,UAAI,GAAG,IAAP;AACD;;AACD,WAAO,IAAIgkB,KAAJ,CAAU,KAAKH,IAAf,EAAqB,KAAKtb,IAA1B,EAAgCse,SAAhC,EAA2C,KAAK9C,cAAhD,CAAP;AACD,GAxBD;;;;;;;;AA+BAC,oCACExkB,KADF,EAEEQ,IAFF,EAEsB;AADpB;AAAAR;AAA8C;;AAG9CmS,0BAAiB,aAAjBA,EAAgC,CAAhCA,EAAmC,CAAnCA,EAAsCC,SAAS,CAAC7P,MAAhD4P;AACA/B,2BAAuB,CAAC,aAAD,EAAgB,CAAhB,EAAmBpQ,KAAnB,EAA0B,KAAK+I,IAA/B,EAAqC,IAArC,CAAvB;AACA0I,eAAW,CAAC,aAAD,EAAgB,CAAhB,EAAmBjR,IAAnB,EAAyB,IAAzB,CAAX;AAEA,QAAM6mB,SAAS,GAAG,KAAK/C,YAAL,CAAkBoD,KAAlB,CAAwB1nB,KAAxB,EAA+BQ,IAA/B,CAAlB;AACAgkB,SAAK,CAACiD,cAAN,CAAqBJ,SAArB;AACA7C,SAAK,CAAC+C,uBAAN,CAA8BF,SAA9B;;AACA,QAAI,KAAK/C,YAAL,CAAkBO,MAAlB,EAAJ,EAAgC;AAC9B,YAAM,IAAI9gB,KAAJ,CACJ,4EACE,WAFE,CAAN;AAID;;AAED,WAAO,IAAIygB,KAAJ,CAAU,KAAKH,IAAf,EAAqB,KAAKtb,IAA1B,EAAgCse,SAAhC,EAA2C,KAAK9C,cAAhD,CAAP;AACD,GAnBD;;;;;;;;;;AA4BAC,sCAAQxkB,KAAR,EAAiDQ,IAAjD,EAA8D;AAC5D2R,0BAAiB,eAAjBA,EAAkC,CAAlCA,EAAqC,CAArCA,EAAwCC,SAAS,CAAC7P,MAAlD4P;AACA/B,2BAAuB,CAAC,eAAD,EAAkB,CAAlB,EAAqBpQ,KAArB,EAA4B,KAAK+I,IAAjC,EAAuC,KAAvC,CAAvB;AACA0I,eAAW,CAAC,eAAD,EAAkB,CAAlB,EAAqBjR,IAArB,EAA2B,IAA3B,CAAX;;AACA,QAAI,KAAK8jB,YAAL,CAAkBK,QAAlB,EAAJ,EAAkC;AAChC,YAAM,IAAI5gB,KAAJ,CACJ,kFACE,WAFE,CAAN;AAID;;AACD,QAAI,KAAKugB,YAAL,CAAkBO,MAAlB,EAAJ,EAAgC;AAC9B,YAAM,IAAI9gB,KAAJ,CACJ,8EACE,WAFE,CAAN;AAID;;AACD,WAAO,KAAKyjB,OAAL,CAAaxnB,KAAb,EAAoBQ,IAApB,EAA0BknB,KAA1B,CAAgC1nB,KAAhC,EAAuCQ,IAAvC,CAAP;AACD,GAjBD;;;;;;AAsBAgkB;AACErS,0BAAiB,gBAAjBA,EAAmC,CAAnCA,EAAsC,CAAtCA,EAAyCC,SAAS,CAAC7P,MAAnD4P;AAEA,WAAO,KAAKkS,IAAL,CAAU3jB,QAAV,KAAuB,KAAKqI,IAAL,CAAU4e,kBAAV,EAA9B;AACD,GAJD;;;;AAQAnD;;AAEErS,0BAAiB,cAAjBA,EAAiC,CAAjCA,EAAoC,CAApCA,EAAuCC,SAAS,CAAC7P,MAAjD4P;AACA,WAAO,KAAKzR,QAAL,EAAP;AACD,GAJD;;;;;;;AAUA8jB;AACE,WAAO,KAAKF,YAAL,CAAkBsD,cAAlB,EAAP;AACD,GAFD;;;;;;AAOApD;AACE,QAAMve,GAAG,GAAG,KAAK4hB,WAAL,EAAZ;AACA,QAAMrmB,EAAE,GAAG0E,iBAAiB,CAACD,GAAD,CAA5B;AACA,WAAOzE,EAAE,KAAK,IAAP,GAAc,SAAd,GAA0BA,EAAjC;AACD,GAJD;;;;;;;;AAWAgjB,sCAAQhZ,KAAR,EAAoB;AAClB2G,0BAAiB,eAAjBA,EAAkC,CAAlCA,EAAqC,CAArCA,EAAwCC,SAAS,CAAC7P,MAAlD4P;;AACA,QAAI,EAAE3G,KAAK,YAAYgZ,KAAnB,CAAJ,EAA+B;AAC7B,UAAM3gB,KAAK,GACT,sFADF;AAEA,YAAM,IAAIE,KAAJ,CAAUF,KAAV,CAAN;AACD;;AAED,QAAMikB,QAAQ,GAAG,KAAKzD,IAAL,KAAc7Y,KAAK,CAAC6Y,IAArC;AACA,QAAM0D,QAAQ,GAAG,KAAKhf,IAAL,CAAU+N,MAAV,CAAiBtL,KAAK,CAACzC,IAAvB,CAAjB;AACA,QAAMif,mBAAmB,GACvB,KAAKC,eAAL,OAA2Bzc,KAAK,CAACyc,eAAN,EAD7B;AAGA,WAAOH,QAAQ,IAAIC,QAAZ,IAAwBC,mBAA/B;AACD,GAdD;;;;;;;;;;;AAwBexD,mCAAf,UACEnU,MADF,EAEE6X,eAFF,EAGEzC,OAHF,EAGyB;AAEvB,QAAMC,GAAG,GAGL;AAAEG,YAAM,EAAE,IAAV;AAAgBJ,aAAO,EAAE;AAAzB,KAHJ;;AAIA,QAAIyC,eAAe,IAAIzC,OAAvB,EAAgC;AAC9BC,SAAG,CAACG,MAAJ,GAAaqC,eAAb;AACA7V,4BAAiBhC,MAAjBgC,EAAyB,CAAzBA,EAA4BqT,GAAG,CAACG,MAAhCxT,EAAwC,IAAxCA;AAEAqT,SAAG,CAACD,OAAJ,GAAcA,OAAd;AACAU,iCAAsB9V,MAAtB8V,EAA8B,CAA9BA,EAAiCT,GAAG,CAACD,OAArCU,EAA8C,IAA9CA;AACD,KAND,MAMO,IAAI+B,eAAJ,EAAqB;;AAE1B,UAAI,OAAOA,eAAP,KAA2B,QAA3B,IAAuCA,eAAe,KAAK,IAA/D,EAAqE;;AAEnExC,WAAG,CAACD,OAAJ,GAAcyC,eAAd;AACD,OAHD,MAGO,IAAI,OAAOA,eAAP,KAA2B,UAA/B,EAA2C;AAChDxC,WAAG,CAACG,MAAJ,GAAaqC,eAAb;AACD,OAFM,MAEA;AACL,cAAM,IAAInkB,KAAJ,CACJ4M,iBAAYN,MAAZM,EAAoB,CAApBA,EAAuB,IAAvBA,IACE,wDAFE,CAAN;AAID;AACF;;AACD,WAAO+U,GAAP;AACD,GA9Bc;;AAgCfxb,wBAAIsa,eAAJ,EAAI,KAAJ,EAAO;SAAP;AACE,aAAO,KAAKvC,MAAL,EAAP;AACD,KAFM;oBAAA;;AAAA,GAAP;AAGF;AAAC;AClqBD;;;;;;;;;;;;;;;;;;AAwCA;AAAA;AAAA;AACE,iCAAqBX,KAArB,EAAgC;AAAX;AAAe;;AAEpC6G,gEAAkBzS,SAAlB,EAAmC;AACjC,QAAMxJ,KAAK,GAAG,KAAKoV,KAAL,CAAW5D,iBAAX,CAA6BhI,SAA7B,CAAd;AACA,WAAO,IAAIyS,qBAAJ,CAA0Bjc,KAA1B,CAAP;AACD,GAHD;;AAKAic;AACE,WAAO,KAAK7G,KAAZ;AACD,GAFD;;AAGF;AAAC,CAXD;;AAaA;AAAA;AAAA;AAIE,iCAAY8G,QAAZ,EAAgCrf,IAAhC,EAA0C;AACxC,SAAKsf,SAAL,GAAiBD,QAAjB;AACA,SAAKxX,KAAL,GAAa7H,IAAb;AACD;;AAEDuf,gEAAkB5S,SAAlB,EAAmC;AACjC,QAAMkM,SAAS,GAAG,KAAKhR,KAAL,CAAW1E,KAAX,CAAiBwJ,SAAjB,CAAlB;AACA,WAAO,IAAI4S,qBAAJ,CAA0B,KAAKD,SAA/B,EAA0CzG,SAA1C,CAAP;AACD,GAHD;;AAKA0G;AACE,WAAO,KAAKD,SAAL,CAAeE,sBAAf,CAAsC,KAAK3X,KAA3C,CAAP;AACD,GAFD;;AAGF;AAAC,CAjBD;AAmBA;;;;;;;AAKO,IAAM4X,kBAAkB,GAAG,UAChCC,MADgC,EAGxB;AAERA,QAAM,GAAGA,MAAM,IAAI,EAAnB;AACAA,QAAM,CAAC,WAAD,CAAN,GAAsBA,MAAM,CAAC,WAAD,CAAN,IAAuB,IAAIC,IAAJ,GAAWC,OAAX,EAA7C;AACA,SAAOF,MAAP;AACD,CARM;AAUP;;;;;;;;;AAOO,IAAMG,wBAAwB,GAAG,UACtC5oB,KADsC,EAEtC6oB,WAFsC,EAGtCC,YAHsC,EAGA;AAEtC,MAAI,CAAC9oB,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACvC,WAAOA,KAAP;AACD;;AACDiD,cAAO,SAASjD,KAAhBiD,EAAuB,2CAAvBA;;AAEA,MAAI,OAAOjD,KAAK,CAAC,KAAD,CAAZ,KAAwB,QAA5B,EAAsC;AACpC,WAAO+oB,0BAA0B,CAAC/oB,KAAK,CAAC,KAAD,CAAN,EAAe6oB,WAAf,EAA4BC,YAA5B,CAAjC;AACD,GAFD,MAEO,IAAI,OAAO9oB,KAAK,CAAC,KAAD,CAAZ,KAAwB,QAA5B,EAAsC;AAC3C,WAAOgpB,2BAA2B,CAAChpB,KAAK,CAAC,KAAD,CAAN,EAAe6oB,WAAf,CAAlC;AACD,GAFM,MAEA;AACL5lB,gBAAO,KAAPA,EAAc,8BAA8BgmB,IAAI,CAAC7oB,SAAL,CAAeJ,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAA5CiD;AACD;AACF,CAjBM;;AAmBP,IAAM8lB,0BAA0B,GAAG,UACjCG,EADiC,EAEjCC,QAFiC,EAGjCL,YAHiC,EAGK;AAEtC,UAAQI,EAAR;AACE,SAAK,WAAL;AACE,aAAOJ,YAAY,CAAC,WAAD,CAAnB;;AACF;AACE7lB,kBAAO,KAAPA,EAAc,8BAA8BimB,EAA5CjmB;AAJJ;AAMD,CAXD;;AAaA,IAAM+lB,2BAA2B,GAAG,UAClCE,EADkC,EAElCC,QAFkC,EAGlCC,MAHkC,EAGF;AAEhC,MAAI,CAACF,EAAE,CAACpiB,cAAH,CAAkB,WAAlB,CAAL,EAAqC;AACnC7D,gBAAO,KAAPA,EAAc,8BAA8BgmB,IAAI,CAAC7oB,SAAL,CAAe8oB,EAAf,EAAmB,IAAnB,EAAyB,CAAzB,CAA5CjmB;AACD;;AACD,MAAMomB,KAAK,GAAGH,EAAE,CAAC,WAAD,CAAhB;;AACA,MAAI,OAAOG,KAAP,KAAiB,QAArB,EAA+B;AAC7BpmB,gBAAO,KAAPA,EAAc,iCAAiComB,KAA/CpmB;AACD;;AAED,MAAMqmB,YAAY,GAAGH,QAAQ,CAACvV,IAAT,EAArB;AACA3Q,cACEqmB,YAAY,KAAK,IAAjB,IAAyB,OAAOA,YAAP,KAAwB,WADnDrmB,EAEE,4CAFFA,EAXgC;;AAiBhC,MAAI,CAACqmB,YAAY,CAACrU,UAAb,EAAL,EAAgC;AAC9B,WAAOoU,KAAP;AACD;;AAED,MAAME,IAAI,GAAGD,YAAb;AACA,MAAMT,WAAW,GAAGU,IAAI,CAACnT,QAAL,EAApB;;AACA,MAAI,OAAOyS,WAAP,KAAuB,QAA3B,EAAqC;AACnC,WAAOQ,KAAP;AACD,GAzB+B;;;AA4BhC,SAAOR,WAAW,GAAGQ,KAArB;AACD,CAhCD;AAkCA;;;;;;;;;;;AASO,IAAMG,wBAAwB,GAAG,UACtCzgB,IADsC,EAEtC6K,IAFsC,EAGtCwU,QAHsC,EAItCU,YAJsC,EAIf;AAEvB,SAAOW,oBAAoB,CACzB7V,IADyB,EAEzB,IAAI0U,qBAAJ,CAA0BF,QAA1B,EAAoCrf,IAApC,CAFyB,EAGzB+f,YAHyB,CAA3B;AAKD,CAXM;AAaP;;;;;;;;;;AAQO,IAAMY,4BAA4B,GAAG,UAC1C9V,IAD0C,EAE1CuV,QAF0C,EAG1CL,YAH0C,EAGnB;AAEvB,SAAOW,oBAAoB,CACzB7V,IADyB,EAEzB,IAAIuU,qBAAJ,CAA0BgB,QAA1B,CAFyB,EAGzBL,YAHyB,CAA3B;AAKD,CAVM;;AAYP,SAASW,oBAAT,CACE7V,IADF,EAEEiV,WAFF,EAGEC,YAHF,EAGyB;AAEvB,MAAMa,MAAM,GAAG/V,IAAI,CAACuB,WAAL,GAAmBX,GAAnB,EAAf;AAMA,MAAMrE,QAAQ,GAAGyY,wBAAwB,CACvCe,MADuC,EAEvCd,WAAW,CAACnL,iBAAZ,CAA8B,WAA9B,CAFuC,EAGvCoL,YAHuC,CAAzC;AAKA,MAAI7U,OAAJ;;AAEA,MAAIL,IAAI,CAACqB,UAAL,EAAJ,EAAuB;AACrB,QAAM2U,QAAQ,GAAGhW,IAAjB;AACA,QAAM5T,KAAK,GAAG4oB,wBAAwB,CACpCgB,QAAQ,CAACxT,QAAT,EADoC,EAEpCyS,WAFoC,EAGpCC,YAHoC,CAAtC;;AAKA,QACE9oB,KAAK,KAAK4pB,QAAQ,CAACxT,QAAT,EAAV,IACAjG,QAAQ,KAAKyZ,QAAQ,CAACzU,WAAT,GAAuBX,GAAvB,EAFf,EAGE;AACA,aAAO,IAAIe,QAAJ,CAAavV,KAAb,EAAoB+W,cAAY,CAAC5G,QAAD,CAAhC,CAAP;AACD,KALD,MAKO;AACL,aAAOyD,IAAP;AACD;AACF,GAfD,MAeO;AACL,QAAMkO,YAAY,GAAGlO,IAArB;AACAK,WAAO,GAAG6N,YAAV;;AACA,QAAI3R,QAAQ,KAAK2R,YAAY,CAAC3M,WAAb,GAA2BX,GAA3B,EAAjB,EAAmD;AACjDP,aAAO,GAAGA,OAAO,CAAC4B,cAAR,CAAuB,IAAIN,QAAJ,CAAapF,QAAb,CAAvB,CAAV;AACD;;AACD2R,gBAAY,CAAC3D,YAAb,CAA0B7G,cAA1B,EAA0C,UAAC5B,SAAD,EAAYC,SAAZ,EAAqB;AAC7D,UAAMC,YAAY,GAAG6T,oBAAoB,CACvC9T,SADuC,EAEvCkT,WAAW,CAACnL,iBAAZ,CAA8BhI,SAA9B,CAFuC,EAGvCoT,YAHuC,CAAzC;;AAKA,UAAIlT,YAAY,KAAKD,SAArB,EAAgC;AAC9B1B,eAAO,GAAGA,OAAO,CAAC6B,oBAAR,CAA6BJ,SAA7B,EAAwCE,YAAxC,CAAV;AACD;AACF,KATD;AAUA,WAAO3B,OAAP;AACD;AACH;AC7PA;;;;;;;;;;;;;;;;;AAqBA;;;;;AAGA;AAAA;AAAA;AAAA;AACU,iBAAqB,IAArB;AAES,oBAA4C,IAAI4V,GAAJ,EAA5C;AA0HlB;;;;;;;;;AAlHCC,gDAAK/gB,IAAL,EAAe;AACb,QAAI,KAAK/I,KAAL,IAAc,IAAlB,EAAwB;AACtB,aAAO,KAAKA,KAAL,CAAW2d,QAAX,CAAoB5U,IAApB,CAAP;AACD,KAFD,MAEO,IAAI,CAACA,IAAI,CAACmM,OAAL,EAAD,IAAmB,KAAK6U,QAAL,CAAcC,IAAd,GAAqB,CAA5C,EAA+C;AACpD,UAAMC,QAAQ,GAAGlhB,IAAI,CAACgC,QAAL,EAAjB;AACAhC,UAAI,GAAGA,IAAI,CAACmC,QAAL,EAAP;;AACA,UAAI,KAAK6e,QAAL,CAAcG,GAAd,CAAkBD,QAAlB,CAAJ,EAAiC;AAC/B,YAAM7O,SAAS,GAAG,KAAK2O,QAAL,CAActmB,GAAd,CAAkBwmB,QAAlB,CAAlB;AACA,eAAO7O,SAAS,CAAC+O,IAAV,CAAephB,IAAf,CAAP;AACD,OAHD,MAGO;AACL,eAAO,IAAP;AACD;AACF,KATM,MASA;AACL,aAAO,IAAP;AACD;AACF,GAfD;;;;;;;;;;AAwBA+gB,oDAAS/gB,IAAT,EAAqBzE,IAArB,EAA+B;AAC7B,QAAIyE,IAAI,CAACmM,OAAL,EAAJ,EAAoB;AAClB,WAAKlV,KAAL,GAAasE,IAAb;AACA,WAAKylB,QAAL,CAAcK,KAAd;AACD,KAHD,MAGO,IAAI,KAAKpqB,KAAL,KAAe,IAAnB,EAAyB;AAC9B,WAAKA,KAAL,GAAa,KAAKA,KAAL,CAAWgW,WAAX,CAAuBjN,IAAvB,EAA6BzE,IAA7B,CAAb;AACD,KAFM,MAEA;AACL,UAAM2lB,QAAQ,GAAGlhB,IAAI,CAACgC,QAAL,EAAjB;;AACA,UAAI,CAAC,KAAKgf,QAAL,CAAcG,GAAd,CAAkBD,QAAlB,CAAL,EAAkC;AAChC,aAAKF,QAAL,CAAcxmB,GAAd,CAAkB0mB,QAAlB,EAA4B,IAAIH,kBAAJ,EAA5B;AACD;;AAED,UAAM5d,KAAK,GAAG,KAAK6d,QAAL,CAActmB,GAAd,CAAkBwmB,QAAlB,CAAd;AACAlhB,UAAI,GAAGA,IAAI,CAACmC,QAAL,EAAP;AACAgB,WAAK,CAACme,QAAN,CAAethB,IAAf,EAAqBzE,IAArB;AACD;AACF,GAhBD;;;;;;;;;AAwBAwlB,kDAAO/gB,IAAP,EAAiB;AACf,QAAIA,IAAI,CAACmM,OAAL,EAAJ,EAAoB;AAClB,WAAKlV,KAAL,GAAa,IAAb;AACA,WAAK+pB,QAAL,CAAcK,KAAd;AACA,aAAO,IAAP;AACD,KAJD,MAIO;AACL,UAAI,KAAKpqB,KAAL,KAAe,IAAnB,EAAyB;AACvB,YAAI,KAAKA,KAAL,CAAWiV,UAAX,EAAJ,EAA6B;;AAE3B,iBAAO,KAAP;AACD,SAHD,MAGO;AACL,cAAMjV,KAAK,GAAG,KAAKA,KAAnB;AACA,eAAKA,KAAL,GAAa,IAAb;AAEA,cAAMsqB,MAAI,GAAG,IAAb;AACAtqB,eAAK,CAACme,YAAN,CAAmB7G,cAAnB,EAAmC,UAACvX,GAAD,EAAMwqB,IAAN,EAAU;AAC3CD,kBAAI,CAACD,QAAL,CAAc,IAAIlgB,IAAJ,CAASpK,GAAT,CAAd,EAA6BwqB,IAA7B;AACD,WAFD;AAIA,iBAAO,KAAKC,MAAL,CAAYzhB,IAAZ,CAAP;AACD;AACF,OAfD,MAeO,IAAI,KAAKghB,QAAL,CAAcC,IAAd,GAAqB,CAAzB,EAA4B;AACjC,YAAMC,QAAQ,GAAGlhB,IAAI,CAACgC,QAAL,EAAjB;AACAhC,YAAI,GAAGA,IAAI,CAACmC,QAAL,EAAP;;AACA,YAAI,KAAK6e,QAAL,CAAcG,GAAd,CAAkBD,QAAlB,CAAJ,EAAiC;AAC/B,cAAMQ,YAAY,GAAG,KAAKV,QAAL,CAActmB,GAAd,CAAkBwmB,QAAlB,EAA4BO,MAA5B,CAAmCzhB,IAAnC,CAArB;;AACA,cAAI0hB,YAAJ,EAAkB;AAChB,iBAAKV,QAAL,CAAcW,MAAd,CAAqBT,QAArB;AACD;AACF;;AAED,eAAO,KAAKF,QAAL,CAAcC,IAAd,KAAuB,CAA9B;AACD,OAXM,MAWA;AACL,eAAO,IAAP;AACD;AACF;AACF,GApCD;;;;;;;;;;AA6CAF,uDAAYa,UAAZ,EAA8BC,IAA9B,EAAiE;AAC/D,QAAI,KAAK5qB,KAAL,KAAe,IAAnB,EAAyB;AACvB4qB,UAAI,CAACD,UAAD,EAAa,KAAK3qB,KAAlB,CAAJ;AACD,KAFD,MAEO;AACL,WAAKme,YAAL,CAAkB,UAACpe,GAAD,EAAMwqB,IAAN,EAAU;AAC1B,YAAMxhB,IAAI,GAAG,IAAIoB,IAAJ,CAASwgB,UAAU,CAACjqB,QAAX,KAAwB,GAAxB,GAA8BX,GAAvC,CAAb;AACAwqB,YAAI,CAACM,WAAL,CAAiB9hB,IAAjB,EAAuB6hB,IAAvB;AACD,OAHD;AAID;AACF,GATD;;;;;;;;AAgBAd,wDAAac,IAAb,EAA6D;AAC3D,SAAKb,QAAL,CAAce,OAAd,CAAsB,UAACP,IAAD,EAAOxqB,GAAP,EAAU;AAC9B6qB,UAAI,CAAC7qB,GAAD,EAAMwqB,IAAN,CAAJ;AACD,KAFD;AAGD,GAJD;;AAKF;AAAC,CA7HD;ACxBA;;;;;;;;;;;;;;;;;AAoBA;;;;;;AAIA,IAAYQ,aAAZ;;AAAA,WAAYA,aAAZ,EAAyB;AACvBA;AACAA;AACAA;AACAA;AACD,CALD,EAAYA,aAAa,KAAbA,aAAa,MAAzB;AAiCA;;;;;;;;;AAOA;AAAA;AAAA;AACE,2BACSC,QADT,EAESC,UAFT,EAGSC,OAHT,EAISC,MAJT,EAIwB;AAHf;AACA;AACA;AACA;AAEPloB,gBAAO,CAACkoB,MAAD,IAAWF,UAAlBhoB,EAA8B,qCAA9BA;AACD;;;;;;;AAKMmoB,yBAAO,IAAIA,eAAJ;;AACE,MADF,EAEZ,KAFY,EAGZ,IAHY;;AAIA,OAJA,CAAP;;;;;;AAWAA,2BAAS,IAAIA,eAAJ,CACd,KADc;;AAEE,MAFF,EAGd,IAHc;;AAIF,OAJE,CAAT;;;;;;AAWAA,yCAAuB,UAASF,OAAT,EAAwB;AACpD,WAAO,IAAIE,eAAJ,CACL,KADK;;AAEW,QAFX,EAGLF,OAHK;;AAIO,QAJP,CAAP;AAMD,GAPM;;AAQT;AA3CA;AChEA;;;;;;;;;;;;;;;;;;AAsBA;AAAA;AAAA;;;;;;;AAaE;;AAC4BniB,MAD5B;;AAE4BsiB,cAF5B;;AAG4BC,QAH5B,EAG2C;AAFf;AACA;AACA;;;AAd5B,gBAAOP,aAAa,CAACQ,cAArB;;;AAGA,kBAASH,eAAe,CAACI,IAAzB;AAYI;;;;;;AAKJC,uDAAkB/V,SAAlB,EAAmC;AACjC,QAAI,CAAC,KAAK3M,IAAL,CAAUmM,OAAV,EAAL,EAA0B;AACxBjS,kBACE,KAAK8F,IAAL,CAAUgC,QAAV,OAAyB2K,SAD3BzS,EAEE,+CAFFA;AAIA,aAAO,IAAIwoB,YAAJ,CACL,KAAK1iB,IAAL,CAAUmC,QAAV,EADK,EAEL,KAAKmgB,YAFA,EAGL,KAAKC,MAHA,CAAP;AAKD,KAVD,MAUO,IAAI,KAAKD,YAAL,CAAkBrrB,KAAlB,IAA2B,IAA/B,EAAqC;AAC1CiD,kBACE,KAAKooB,YAAL,CAAkBtB,QAAlB,CAA2B7U,OAA3B,EADFjS,EAEE,0DAFFA,EAD0C;;AAM1C,aAAO,IAAP;AACD,KAPM,MAOA;AACL,UAAMmY,SAAS,GAAG,KAAKiQ,YAAL,CAAkBK,OAAlB,CAA0B,IAAIvhB,IAAJ,CAASuL,SAAT,CAA1B,CAAlB;AACA,aAAO,IAAI+V,YAAJ,CAAiBthB,IAAI,CAACwhB,KAAtB,EAA6BvQ,SAA7B,EAAwC,KAAKkQ,MAA7C,CAAP;AACD;AACF,GAtBD;;AAuBF;AAAC,CA7CD;ACtBA;;;;;;;;;;;;;;;;;;AAqBA,IAAIM,sBAAJ;AAEA;;;;;;;AAMA,IAAMC,aAAa,GAAG;AACpB,MAAI,CAACD,sBAAL,EAA6B;AAC3BA,0BAAsB,GAAG,IAAI3T,SAAJ,CACvBlS,aADuB,CAAzB;AAGD;;AACD,SAAO6lB,sBAAP;AACD,CAPD;AASA;;;;;AAGA;AAAA;AAAA;;;;;;AAsBE,yBACkB5rB,KADlB,EAEkB+pB,QAFlB,EAKqB;AAHH;AAAAA,iBAGZ8B,aAAa,EAHD;AAGG;;AAJH;AACA;AAId;;;;;;;;AAnBGC,6BAAP,UAAqB7lB,GAArB,EAA4C;AAC1C,QAAIskB,IAAI,GAAqBuB,aAAa,CAACH,KAA3C;AACA9kB,QAAI,CAACZ,GAAD,EAAM,UAAC2b,SAAD,EAAoBmK,SAApB,EAAgC;AACxCxB,UAAI,GAAGA,IAAI,CAAChnB,GAAL,CAAS,IAAI4G,IAAJ,CAASyX,SAAT,CAAT,EAA8BmK,SAA9B,CAAP;AACD,KAFG,CAAJ;AAGA,WAAOxB,IAAP;AACD,GANM;;;;;;;AAyBPuB;AACE,WAAO,KAAK9rB,KAAL,KAAe,IAAf,IAAuB,KAAK+pB,QAAL,CAAc7U,OAAd,EAA9B;AACD,GAFD;;;;;;;;;;;;;;;AAgBA4W,uEACE7gB,YADF,EAEE+gB,SAFF,EAE8B;AAE5B,QAAI,KAAKhsB,KAAL,IAAc,IAAd,IAAsBgsB,SAAS,CAAC,KAAKhsB,KAAN,CAAnC,EAAiD;AAC/C,aAAO;AAAE+I,YAAI,EAAEoB,IAAI,CAACwhB,KAAb;AAAoB3rB,aAAK,EAAE,KAAKA;AAAhC,OAAP;AACD,KAFD,MAEO;AACL,UAAIiL,YAAY,CAACiK,OAAb,EAAJ,EAA4B;AAC1B,eAAO,IAAP;AACD,OAFD,MAEO;AACL,YAAMa,KAAK,GAAG9K,YAAY,CAACF,QAAb,EAAd;AACA,YAAMmB,KAAK,GAAG,KAAK6d,QAAL,CAActmB,GAAd,CAAkBsS,KAAlB,CAAd;;AACA,YAAI7J,KAAK,KAAK,IAAd,EAAoB;AAClB,cAAM+f,yBAAyB,GAAG/f,KAAK,CAACggB,gCAAN,CAChCjhB,YAAY,CAACC,QAAb,EADgC,EAEhC8gB,SAFgC,CAAlC;;AAIA,cAAIC,yBAAyB,IAAI,IAAjC,EAAuC;AACrC,gBAAME,QAAQ,GAAG,IAAIhiB,IAAJ,CAAS4L,KAAT,EAAgB7J,KAAhB,CACf+f,yBAAyB,CAACljB,IADX,CAAjB;AAGA,mBAAO;AAAEA,kBAAI,EAAEojB,QAAR;AAAkBnsB,mBAAK,EAAEisB,yBAAyB,CAACjsB;AAAnD,aAAP;AACD,WALD,MAKO;AACL,mBAAO,IAAP;AACD;AACF,SAbD,MAaO;AACL,iBAAO,IAAP;AACD;AACF;AACF;AACF,GA9BD;;;;;;;;;AAsCA8rB,+DACE7gB,YADF,EACoB;AAElB,WAAO,KAAKihB,gCAAL,CAAsCjhB,YAAtC,EAAoD;AAAM;AAAI,KAA9D,CAAP;AACD,GAJD;;;;;;;AAUA6gB,8CAAQ7gB,YAAR,EAA0B;AACxB,QAAIA,YAAY,CAACiK,OAAb,EAAJ,EAA4B;AAC1B,aAAO,IAAP;AACD,KAFD,MAEO;AACL,UAAMa,KAAK,GAAG9K,YAAY,CAACF,QAAb,EAAd;AACA,UAAMqQ,SAAS,GAAG,KAAK2O,QAAL,CAActmB,GAAd,CAAkBsS,KAAlB,CAAlB;;AACA,UAAIqF,SAAS,KAAK,IAAlB,EAAwB;AACtB,eAAOA,SAAS,CAACsQ,OAAV,CAAkBzgB,YAAY,CAACC,QAAb,EAAlB,CAAP;AACD,OAFD,MAEO;AACL,eAAO4gB,aAAa,CAACH,KAArB;AACD;AACF;AACF,GAZD;;;;;;;;;;AAqBAG,0CAAI7gB,YAAJ,EAAwBmhB,KAAxB,EAAuC;AACrC,QAAInhB,YAAY,CAACiK,OAAb,EAAJ,EAA4B;AAC1B,aAAO,IAAI4W,aAAJ,CAAkBM,KAAlB,EAAyB,KAAKrC,QAA9B,CAAP;AACD,KAFD,MAEO;AACL,UAAMhU,KAAK,GAAG9K,YAAY,CAACF,QAAb,EAAd;AACA,UAAMmB,KAAK,GAAG,KAAK6d,QAAL,CAActmB,GAAd,CAAkBsS,KAAlB,KAA4B+V,aAAa,CAACH,KAAxD;AACA,UAAMU,QAAQ,GAAGngB,KAAK,CAAC3I,GAAN,CAAU0H,YAAY,CAACC,QAAb,EAAV,EAAmCkhB,KAAnC,CAAjB;AACA,UAAMjP,WAAW,GAAG,KAAK4M,QAAL,CAActR,MAAd,CAAqB1C,KAArB,EAA4BsW,QAA5B,CAApB;AACA,aAAO,IAAIP,aAAJ,CAAkB,KAAK9rB,KAAvB,EAA8Bmd,WAA9B,CAAP;AACD;AACF,GAVD;;;;;;;;;AAkBA2O,6CAAO7gB,YAAP,EAAyB;AACvB,QAAIA,YAAY,CAACiK,OAAb,EAAJ,EAA4B;AAC1B,UAAI,KAAK6U,QAAL,CAAc7U,OAAd,EAAJ,EAA6B;AAC3B,eAAO4W,aAAa,CAACH,KAArB;AACD,OAFD,MAEO;AACL,eAAO,IAAIG,aAAJ,CAAkB,IAAlB,EAAwB,KAAK/B,QAA7B,CAAP;AACD;AACF,KAND,MAMO;AACL,UAAMhU,KAAK,GAAG9K,YAAY,CAACF,QAAb,EAAd;AACA,UAAMmB,KAAK,GAAG,KAAK6d,QAAL,CAActmB,GAAd,CAAkBsS,KAAlB,CAAd;;AACA,UAAI7J,KAAJ,EAAW;AACT,YAAMmgB,QAAQ,GAAGngB,KAAK,CAAC1I,MAAN,CAAayH,YAAY,CAACC,QAAb,EAAb,CAAjB;AACA,YAAIiS,WAAW,SAAf;;AACA,YAAIkP,QAAQ,CAACnX,OAAT,EAAJ,EAAwB;AACtBiI,qBAAW,GAAG,KAAK4M,QAAL,CAAcvmB,MAAd,CAAqBuS,KAArB,CAAd;AACD,SAFD,MAEO;AACLoH,qBAAW,GAAG,KAAK4M,QAAL,CAActR,MAAd,CAAqB1C,KAArB,EAA4BsW,QAA5B,CAAd;AACD;;AACD,YAAI,KAAKrsB,KAAL,KAAe,IAAf,IAAuBmd,WAAW,CAACjI,OAAZ,EAA3B,EAAkD;AAChD,iBAAO4W,aAAa,CAACH,KAArB;AACD,SAFD,MAEO;AACL,iBAAO,IAAIG,aAAJ,CAAkB,KAAK9rB,KAAvB,EAA8Bmd,WAA9B,CAAP;AACD;AACF,OAbD,MAaO;AACL,eAAO,IAAP;AACD;AACF;AACF,GA3BD;;;;;;;;;AAmCA2O,0CAAI7gB,YAAJ,EAAsB;AACpB,QAAIA,YAAY,CAACiK,OAAb,EAAJ,EAA4B;AAC1B,aAAO,KAAKlV,KAAZ;AACD,KAFD,MAEO;AACL,UAAM+V,KAAK,GAAG9K,YAAY,CAACF,QAAb,EAAd;AACA,UAAMmB,KAAK,GAAG,KAAK6d,QAAL,CAActmB,GAAd,CAAkBsS,KAAlB,CAAd;;AACA,UAAI7J,KAAJ,EAAW;AACT,eAAOA,KAAK,CAACzI,GAAN,CAAUwH,YAAY,CAACC,QAAb,EAAV,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;AACF,GAZD;;;;;;;;;;AAqBA4gB,8CAAQ7gB,YAAR,EAA4BqhB,OAA5B,EAAqD;AACnD,QAAIrhB,YAAY,CAACiK,OAAb,EAAJ,EAA4B;AAC1B,aAAOoX,OAAP;AACD,KAFD,MAEO;AACL,UAAMvW,KAAK,GAAG9K,YAAY,CAACF,QAAb,EAAd;AACA,UAAMmB,KAAK,GAAG,KAAK6d,QAAL,CAActmB,GAAd,CAAkBsS,KAAlB,KAA4B+V,aAAa,CAACH,KAAxD;AACA,UAAMU,QAAQ,GAAGngB,KAAK,CAACqgB,OAAN,CAActhB,YAAY,CAACC,QAAb,EAAd,EAAuCohB,OAAvC,CAAjB;AACA,UAAInP,WAAW,SAAf;;AACA,UAAIkP,QAAQ,CAACnX,OAAT,EAAJ,EAAwB;AACtBiI,mBAAW,GAAG,KAAK4M,QAAL,CAAcvmB,MAAd,CAAqBuS,KAArB,CAAd;AACD,OAFD,MAEO;AACLoH,mBAAW,GAAG,KAAK4M,QAAL,CAActR,MAAd,CAAqB1C,KAArB,EAA4BsW,QAA5B,CAAd;AACD;;AACD,aAAO,IAAIP,aAAJ,CAAkB,KAAK9rB,KAAvB,EAA8Bmd,WAA9B,CAAP;AACD;AACF,GAfD;;;;;;;;;;;AAyBA2O,2CAAQnnB,EAAR,EAAqE;AACnE,WAAO,KAAK6nB,KAAL,CAAWriB,IAAI,CAACwhB,KAAhB,EAAuBhnB,EAAvB,CAAP;AACD,GAFD;;;;;;;;;;;AAYQmnB,kCAAR,UACEW,SADF,EAEE9nB,EAFF,EAEsE;AAEpE,QAAM+nB,KAAK,GAAuB,EAAlC;AACA,SAAK3C,QAAL,CAAc5R,gBAAd,CACE,UAAC8R,QAAD,EAAmB7O,SAAnB,EAA8C;AAC5CsR,WAAK,CAACzC,QAAD,CAAL,GAAkB7O,SAAS,CAACoR,KAAV,CAAgBC,SAAS,CAACvgB,KAAV,CAAgB+d,QAAhB,CAAhB,EAA2CtlB,EAA3C,CAAlB;AACD,KAHH;AAKA,WAAOA,EAAE,CAAC8nB,SAAD,EAAY,KAAKzsB,KAAjB,EAAwB0sB,KAAxB,CAAT;AACD,GAXO;;;;;;;;;;AAoBRZ,iDAAc/iB,IAAd,EAA0B1B,CAA1B,EAA+D;AAC7D,WAAO,KAAKslB,WAAL,CAAiB5jB,IAAjB,EAAuBoB,IAAI,CAACwhB,KAA5B,EAAmCtkB,CAAnC,CAAP;AACD,GAFD;;AAIQykB,wCAAR,UACEc,YADF,EAEEH,SAFF,EAGEplB,CAHF,EAGuC;AAErC,QAAMwQ,MAAM,GAAG,KAAK7X,KAAL,GAAaqH,CAAC,CAAColB,SAAD,EAAY,KAAKzsB,KAAjB,CAAd,GAAwC,KAAvD;;AACA,QAAI6X,MAAJ,EAAY;AACV,aAAOA,MAAP;AACD,KAFD,MAEO;AACL,UAAI+U,YAAY,CAAC1X,OAAb,EAAJ,EAA4B;AAC1B,eAAO,IAAP;AACD,OAFD,MAEO;AACL,YAAMa,KAAK,GAAG6W,YAAY,CAAC7hB,QAAb,EAAd;AACA,YAAM8hB,SAAS,GAAG,KAAK9C,QAAL,CAActmB,GAAd,CAAkBsS,KAAlB,CAAlB;;AACA,YAAI8W,SAAJ,EAAe;AACb,iBAAOA,SAAS,CAACF,WAAV,CACLC,YAAY,CAAC1hB,QAAb,EADK,EAELuhB,SAAS,CAACvgB,KAAV,CAAgB6J,KAAhB,CAFK,EAGL1O,CAHK,CAAP;AAKD,SAND,MAMO;AACL,iBAAO,IAAP;AACD;AACF;AACF;AACF,GAzBO;;;;;;;;;AAiCRykB,oDACE/iB,IADF,EAEE1B,CAFF,EAEmC;AAEjC,WAAO,KAAKylB,cAAL,CAAoB/jB,IAApB,EAA0BoB,IAAI,CAACwhB,KAA/B,EAAsCtkB,CAAtC,CAAP;AACD,GALD;;AAOQykB,2CAAR,UACEc,YADF,EAEEG,mBAFF,EAGE1lB,CAHF,EAGmC;AAEjC,QAAIulB,YAAY,CAAC1X,OAAb,EAAJ,EAA4B;AAC1B,aAAO,IAAP;AACD,KAFD,MAEO;AACL,UAAI,KAAKlV,KAAT,EAAgB;AACdqH,SAAC,CAAC0lB,mBAAD,EAAsB,KAAK/sB,KAA3B,CAAD;AACD;;AACD,UAAM+V,KAAK,GAAG6W,YAAY,CAAC7hB,QAAb,EAAd;AACA,UAAM8hB,SAAS,GAAG,KAAK9C,QAAL,CAActmB,GAAd,CAAkBsS,KAAlB,CAAlB;;AACA,UAAI8W,SAAJ,EAAe;AACb,eAAOA,SAAS,CAACC,cAAV,CACLF,YAAY,CAAC1hB,QAAb,EADK,EAEL6hB,mBAAmB,CAAC7gB,KAApB,CAA0B6J,KAA1B,CAFK,EAGL1O,CAHK,CAAP;AAKD,OAND,MAMO;AACL,eAAOykB,aAAa,CAACH,KAArB;AACD;AACF;AACF,GAvBO;;;;;;;;;;AAgCRG,8CAAQzkB,CAAR,EAAyC;AACvC,SAAK2lB,QAAL,CAAc7iB,IAAI,CAACwhB,KAAnB,EAA0BtkB,CAA1B;AACD,GAFD;;AAIQykB,qCAAR,UACEiB,mBADF,EAEE1lB,CAFF,EAEmC;AAEjC,SAAK0iB,QAAL,CAAc5R,gBAAd,CAA+B,UAACzC,SAAD,EAAY0F,SAAZ,EAAqB;AAClDA,eAAS,CAAC4R,QAAV,CAAmBD,mBAAmB,CAAC7gB,KAApB,CAA0BwJ,SAA1B,CAAnB,EAAyDrO,CAAzD;AACD,KAFD;;AAGA,QAAI,KAAKrH,KAAT,EAAgB;AACdqH,OAAC,CAAC0lB,mBAAD,EAAsB,KAAK/sB,KAA3B,CAAD;AACD;AACF,GAVO;;;;;;;AAgBR8rB,mDAAazkB,CAAb,EAAgD;AAC9C,SAAK0iB,QAAL,CAAc5R,gBAAd,CACE,UAACzC,SAAD,EAAoB0F,SAApB,EAA+C;AAC7C,UAAIA,SAAS,CAACpb,KAAd,EAAqB;AACnBqH,SAAC,CAACqO,SAAD,EAAY0F,SAAS,CAACpb,KAAtB,CAAD;AACD;AACF,KALH;AAOD,GARD,CA1VF;;;AAES8rB,wBAAQ,IAAIA,aAAJ,CAAuB,IAAvB,CAAR;AAiWT;AAnWA;ACzCA;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;AAMA;AAAA;AAAA;AAIE,0BAAmBmB,MAAnB,EAAmDlkB,IAAnD,EAA6D;AAA1C;AAAgC;;;AAFnD,gBAAOgiB,aAAa,CAACmC,eAArB;AAEiE;;AAEjEC,yDAAkBzX,SAAlB,EAAmC;AACjC,QAAI,KAAK3M,IAAL,CAAUmM,OAAV,EAAJ,EAAyB;AACvB,aAAO,IAAIiY,cAAJ,CAAmB,KAAKF,MAAxB,EAAgC9iB,IAAI,CAACwhB,KAArC,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAIwB,cAAJ,CAAmB,KAAKF,MAAxB,EAAgC,KAAKlkB,IAAL,CAAUmC,QAAV,EAAhC,CAAP;AACD;AACF,GAND;;AAOF;AAAC,CAbD;AC1BA;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;AAOA;AAAA;AAAA;AAIE,qBACS+hB,MADT,EAESlkB,IAFT,EAGSmY,IAHT,EAGmB;AAFV;AACA;AACA;;;AALT,gBAAO6J,aAAa,CAACqC,SAArB;AAMI;;AAEJC,oDAAkB3X,SAAlB,EAAmC;AACjC,QAAI,KAAK3M,IAAL,CAAUmM,OAAV,EAAJ,EAAyB;AACvB,aAAO,IAAImY,SAAJ,CACL,KAAKJ,MADA,EAEL9iB,IAAI,CAACwhB,KAFA,EAGL,KAAKzK,IAAL,CAAUxD,iBAAV,CAA4BhI,SAA5B,CAHK,CAAP;AAKD,KAND,MAMO;AACL,aAAO,IAAI2X,SAAJ,CAAc,KAAKJ,MAAnB,EAA2B,KAAKlkB,IAAL,CAAUmC,QAAV,EAA3B,EAAiD,KAAKgW,IAAtD,CAAP;AACD;AACF,GAVD;;AAWF;AAAC,CArBD;AC5BA;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;AAOA;AAAA;AAAA;AAIE;;AAC4B+L,QAD5B;;AAE4BlkB,MAF5B;;AAG4BghB,UAH5B,EAGyD;AAF7B;AACA;AACA;;;AAL5B,gBAAOgB,aAAa,CAACuC,KAArB;AAMI;;;;;;AAKJC,gDAAkB7X,SAAlB,EAAmC;AACjC,QAAI,KAAK3M,IAAL,CAAUmM,OAAV,EAAJ,EAAyB;AACvB,UAAMkG,SAAS,GAAG,KAAK2O,QAAL,CAAc2B,OAAd,CAAsB,IAAIvhB,IAAJ,CAASuL,SAAT,CAAtB,CAAlB;;AACA,UAAI0F,SAAS,CAAClG,OAAV,EAAJ,EAAyB;;AAEvB,eAAO,IAAP;AACD,OAHD,MAGO,IAAIkG,SAAS,CAACpb,KAAd,EAAqB;;AAE1B,eAAO,IAAIqtB,SAAJ,CAAc,KAAKJ,MAAnB,EAA2B9iB,IAAI,CAACwhB,KAAhC,EAAuCvQ,SAAS,CAACpb,KAAjD,CAAP;AACD,OAHM,MAGA;;AAEL,eAAO,IAAIutB,KAAJ,CAAU,KAAKN,MAAf,EAAuB9iB,IAAI,CAACwhB,KAA5B,EAAmCvQ,SAAnC,CAAP;AACD;AACF,KAZD,MAYO;AACLnY,kBACE,KAAK8F,IAAL,CAAUgC,QAAV,OAAyB2K,SAD3BzS,EAEE,gEAFFA;AAIA,aAAO,IAAIsqB,KAAJ,CAAU,KAAKN,MAAf,EAAuB,KAAKlkB,IAAL,CAAUmC,QAAV,EAAvB,EAA6C,KAAK6e,QAAlD,CAAP;AACD;AACF,GApBD;;;;;;AAyBAwD;AACE,WACE,eACA,KAAKxkB,IADL,GAEA,IAFA,GAGA,KAAKkkB,MAAL,CAAYvsB,QAAZ,EAHA,GAIA,UAJA,GAKA,KAAKqpB,QAAL,CAAcrpB,QAAd,EALA,GAMA,GAPF;AASD,GAVD;;AAWF;AAAC,CAjDD;AC/BA;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;AAMA;AAAA;AAAA;;;;;;AAME,qBACU4gB,KADV,EAEUkM,iBAFV,EAGUC,SAHV,EAG4B;AAFlB;AACA;AACA;AACN;;;;;;;AAMJC;AACE,WAAO,KAAKF,iBAAZ;AACD,GAFD;;;;;;;AAQAE;AACE,WAAO,KAAKD,SAAZ;AACD,GAFD;;;;;;;AAQAC,oDAAkB3kB,IAAlB,EAA4B;AAC1B,QAAIA,IAAI,CAACmM,OAAL,EAAJ,EAAoB;AAClB,aAAO,KAAKyY,kBAAL,MAA6B,CAAC,KAAKF,SAA1C;AACD;;AAED,QAAMxD,QAAQ,GAAGlhB,IAAI,CAACgC,QAAL,EAAjB;AACA,WAAO,KAAK6iB,kBAAL,CAAwB3D,QAAxB,CAAP;AACD,GAPD;;;;;;;AAaAyD,qDAAmB3tB,GAAnB,EAA8B;AAC5B,WACG,KAAK4tB,kBAAL,MAA6B,CAAC,KAAKF,SAApC,IAAkD,KAAKnM,KAAL,CAAWuM,QAAX,CAAoB9tB,GAApB,CADpD;AAGD,GAJD;;;;;;AASA2tB;AACE,WAAO,KAAKpM,KAAZ;AACD,GAFD;;AAGF;AAAC,CAzDD;AC1BA;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;AAOA;AAAA;AAAA;;;;;;AAME,qBACmBwM,WADnB,EAEmBC,YAFnB,EAE0C;AADvB;AACA;AACf;;;;;;;;;AAyBJC,kDACEC,SADF,EAEEC,QAFF,EAGEC,QAHF,EAGmB;AAEjB,WAAO,IAAIH,SAAJ,CACL,IAAIN,SAAJ,CAAcO,SAAd,EAAyBC,QAAzB,EAAmCC,QAAnC,CADK,EAEL,KAAKJ,YAFA,CAAP;AAID,GATD;;;;;;;;;AAiBAC,mDACEI,UADF,EAEEF,QAFF,EAGEC,QAHF,EAGmB;AAEjB,WAAO,IAAIH,SAAJ,CACL,KAAKF,WADA,EAEL,IAAIJ,SAAJ,CAAcU,UAAd,EAA0BF,QAA1B,EAAoCC,QAApC,CAFK,CAAP;AAID,GATD;;;;;;AAcAH;AACE,WAAO,KAAKF,WAAZ;AACD,GAFD;;;;;;AAOAE;AACE,WAAO,KAAKF,WAAL,CAAiBH,kBAAjB,KACH,KAAKG,WAAL,CAAiBO,OAAjB,EADG,GAEH,IAFJ;AAGD,GAJD;;;;;;AASAL;AACE,WAAO,KAAKD,YAAZ;AACD,GAFD;;;;;;AAOAC;AACE,WAAO,KAAKD,YAAL,CAAkBJ,kBAAlB,KACH,KAAKI,YAAL,CAAkBM,OAAlB,EADG,GAEH,IAFJ;AAGD,GAJD;;;;;;;AAzEOL,oBAAQ,IAAIA,SAAJ,CACb,IAAIN,SAAJ,CACElQ,YAAY,CAAChI,UADf;;AAEwB,OAFxB;;AAGgB,OAHhB,CADa,EAMb,IAAIkY,SAAJ,CACElQ,YAAY,CAAChI,UADf;;AAEwB,OAFxB;;AAGgB,OAHhB,CANa,CAAR;AA8ET;AA7FA;AC5BA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;AASA;AAAA;AAAA;AACE,kBACS3H,IADT,EAESoV,YAFT,EAGSvN,SAHT,EAIS4Y,OAJT,EAKSnM,QALT,EAKiC;AAJxB;AACA;AACA;AACA;AACA;AACL;;;;;;;AAMGoM,uBAAP,UAAmBtb,QAAnB,EAAiC;AAC/B,WAAO,IAAIsb,MAAJ,CAAWA,MAAM,CAACC,KAAlB,EAAyBvb,QAAzB,CAAP;AACD,GAFM;;;;;;;;AASAsb,4BAAP,UAAwBtE,QAAxB,EAA0ChX,QAA1C,EAAwD;AACtD,WAAO,IAAIsb,MAAJ,CAAWA,MAAM,CAACE,WAAlB,EAA+Bxb,QAA/B,EAAyCgX,QAAzC,CAAP;AACD,GAFM;;;;;;;;AASAsE,8BAAP,UAA0BtE,QAA1B,EAA4ChX,QAA5C,EAA0D;AACxD,WAAO,IAAIsb,MAAJ,CAAWA,MAAM,CAACG,aAAlB,EAAiCzb,QAAjC,EAA2CgX,QAA3C,CAAP;AACD,GAFM;;;;;;;;;AAUAsE,8BAAP,UACEtE,QADF,EAEE0E,WAFF,EAGEC,WAHF,EAGmB;AAEjB,WAAO,IAAIL,MAAJ,CAAWA,MAAM,CAACM,aAAlB,EAAiCF,WAAjC,EAA8C1E,QAA9C,EAAwD2E,WAAxD,CAAP;AACD,GANM;;;;;;;;AAaAL,4BAAP,UAAwBtE,QAAxB,EAA0ChX,QAA1C,EAAwD;AACtD,WAAO,IAAIsb,MAAJ,CAAWA,MAAM,CAACO,WAAlB,EAA+B7b,QAA/B,EAAyCgX,QAAzC,CAAP;AACD,GAFM,CAtDT;;;;;AA4DSsE,uBAAc,aAAd;;;AAGAA,yBAAgB,eAAhB;;;AAGAA,yBAAgB,eAAhB;;;AAGAA,uBAAc,aAAd;;;AAGAA,iBAAQ,OAAR;AACT;AAzEA;AC5BA;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;AAOA;AAAA;AAAA;AACE,yBAA6B/M,MAA7B,EAA0C;AAAb;AAAiB;;AAE9CuN,kDACE7N,IADF,EAEEnhB,GAFF,EAGEssB,QAHF,EAIE2C,YAJF,EAKE/B,MALF,EAMEgC,oBANF,EAMqD;AAEnDhsB,gBACEie,IAAI,CAACgO,SAAL,CAAe,KAAK1N,MAApB,CADFve,EAEE,mDAFFA;AAIA,QAAMksB,QAAQ,GAAGjO,IAAI,CAACxD,iBAAL,CAAuB3d,GAAvB,CAAjB,CANmD;;AAQnD,QACEovB,QAAQ,CAACxR,QAAT,CAAkBqR,YAAlB,EAAgClY,MAAhC,CAAuCuV,QAAQ,CAAC1O,QAAT,CAAkBqR,YAAlB,CAAvC,CADF,EAEE;;;;AAIA,UAAIG,QAAQ,CAACja,OAAT,OAAuBmX,QAAQ,CAACnX,OAAT,EAA3B,EAA+C;;;;AAK7C,eAAOgM,IAAP;AACD;AACF;;AAED,QAAI+N,oBAAoB,IAAI,IAA5B,EAAkC;AAChC,UAAI5C,QAAQ,CAACnX,OAAT,EAAJ,EAAwB;AACtB,YAAIgM,IAAI,CAAC2M,QAAL,CAAc9tB,GAAd,CAAJ,EAAwB;AACtBkvB,8BAAoB,CAACG,gBAArB,CACEb,MAAM,CAACc,kBAAP,CAA0BtvB,GAA1B,EAA+BovB,QAA/B,CADF;AAGD,SAJD,MAIO;AACLlsB,sBACEie,IAAI,CAACjM,UAAL,EADFhS,EAEE,qEAFFA;AAID;AACF,OAXD,MAWO,IAAIksB,QAAQ,CAACja,OAAT,EAAJ,EAAwB;AAC7B+Z,4BAAoB,CAACG,gBAArB,CACEb,MAAM,CAACe,gBAAP,CAAwBvvB,GAAxB,EAA6BssB,QAA7B,CADF;AAGD,OAJM,MAIA;AACL4C,4BAAoB,CAACG,gBAArB,CACEb,MAAM,CAACgB,kBAAP,CAA0BxvB,GAA1B,EAA+BssB,QAA/B,EAAyC8C,QAAzC,CADF;AAGD;AACF;;AACD,QAAIjO,IAAI,CAACjM,UAAL,MAAqBoX,QAAQ,CAACnX,OAAT,EAAzB,EAA6C;AAC3C,aAAOgM,IAAP;AACD,KAFD,MAEO;;AAEL,aAAOA,IAAI,CAACpL,oBAAL,CAA0B/V,GAA1B,EAA+BssB,QAA/B,EAAyCmD,SAAzC,CAAmD,KAAKhO,MAAxD,CAAP;AACD;AACF,GAzDD;;;;;;AA8DAuN,qDACET,OADF,EAEEmB,OAFF,EAGER,oBAHF,EAGqD;AAEnD,QAAIA,oBAAoB,IAAI,IAA5B,EAAkC;AAChC,UAAI,CAACX,OAAO,CAACrZ,UAAR,EAAL,EAA2B;AACzBqZ,eAAO,CAACnQ,YAAR,CAAqB7G,cAArB,EAAqC,UAACvX,GAAD,EAAM4V,SAAN,EAAe;AAClD,cAAI,CAAC8Z,OAAO,CAAC5B,QAAR,CAAiB9tB,GAAjB,CAAL,EAA4B;AAC1BkvB,gCAAoB,CAACG,gBAArB,CACEb,MAAM,CAACc,kBAAP,CAA0BtvB,GAA1B,EAA+B4V,SAA/B,CADF;AAGD;AACF,SAND;AAOD;;AACD,UAAI,CAAC8Z,OAAO,CAACxa,UAAR,EAAL,EAA2B;AACzBwa,eAAO,CAACtR,YAAR,CAAqB7G,cAArB,EAAqC,UAACvX,GAAD,EAAM4V,SAAN,EAAe;AAClD,cAAI2Y,OAAO,CAACT,QAAR,CAAiB9tB,GAAjB,CAAJ,EAA2B;AACzB,gBAAMovB,QAAQ,GAAGb,OAAO,CAAC5Q,iBAAR,CAA0B3d,GAA1B,CAAjB;;AACA,gBAAI,CAACovB,QAAQ,CAACrY,MAAT,CAAgBnB,SAAhB,CAAL,EAAiC;AAC/BsZ,kCAAoB,CAACG,gBAArB,CACEb,MAAM,CAACgB,kBAAP,CAA0BxvB,GAA1B,EAA+B4V,SAA/B,EAA0CwZ,QAA1C,CADF;AAGD;AACF,WAPD,MAOO;AACLF,gCAAoB,CAACG,gBAArB,CACEb,MAAM,CAACe,gBAAP,CAAwBvvB,GAAxB,EAA6B4V,SAA7B,CADF;AAGD;AACF,SAbD;AAcD;AACF;;AACD,WAAO8Z,OAAO,CAACD,SAAR,CAAkB,KAAKhO,MAAvB,CAAP;AACD,GAjCD;;;;;;AAsCAuN,qDAAeT,OAAf,EAA8BvQ,WAA9B,EAA+C;AAC7C,QAAIuQ,OAAO,CAACpZ,OAAR,EAAJ,EAAuB;AACrB,aAAOsI,YAAY,CAAChI,UAApB;AACD,KAFD,MAEO;AACL,aAAO8Y,OAAO,CAACzY,cAAR,CAAuBkI,WAAvB,CAAP;AACD;AACF,GAND;;;;;;AAWAgR;AACE,WAAO,KAAP;AACD,GAFD;;;;;;AAOAA;AACE,WAAO,IAAP;AACD,GAFD;;;;;;AAOAA;AACE,WAAO,KAAKvN,MAAZ;AACD,GAFD;;AAGF;AAAC,CAnID;ACnCA;;;;;;;;;;;;;;;;;;AAoBA;AAAA;AAAA;AAAA;AACmB,qBAAiC,IAAIqI,GAAJ,EAAjC;AA4ElB;;AA1EC6F,gEAAiB5M,MAAjB,EAA+B;AAC7B,QAAMjV,IAAI,GAAGiV,MAAM,CAACjV,IAApB;AACA,QAAMoc,QAAQ,GAAGnH,MAAM,CAACpN,SAAxB;AACAzS,gBACE4K,IAAI,KAAK0gB,MAAM,CAACE,WAAhB,IACE5gB,IAAI,KAAK0gB,MAAM,CAACM,aADlB,IAEEhhB,IAAI,KAAK0gB,MAAM,CAACG,aAHpBzrB,EAIE,2CAJFA;AAMAA,gBACEgnB,QAAQ,KAAK,WADfhnB,EAEE,iDAFFA;AAIA,QAAM0sB,SAAS,GAAG,KAAKC,SAAL,CAAensB,GAAf,CAAmBwmB,QAAnB,CAAlB;;AACA,QAAI0F,SAAJ,EAAe;AACb,UAAME,OAAO,GAAGF,SAAS,CAAC9hB,IAA1B;;AACA,UAAIA,IAAI,KAAK0gB,MAAM,CAACE,WAAhB,IAA+BoB,OAAO,KAAKtB,MAAM,CAACG,aAAtD,EAAqE;AACnE,aAAKkB,SAAL,CAAersB,GAAf,CACE0mB,QADF,EAEEsE,MAAM,CAACgB,kBAAP,CACEtF,QADF,EAEEnH,MAAM,CAACG,YAFT,EAGE0M,SAAS,CAAC1M,YAHZ,CAFF;AAQD,OATD,MASO,IACLpV,IAAI,KAAK0gB,MAAM,CAACG,aAAhB,IACAmB,OAAO,KAAKtB,MAAM,CAACE,WAFd,EAGL;AACA,aAAKmB,SAAL,CAAelF,MAAf,CAAsBT,QAAtB;AACD,OALM,MAKA,IACLpc,IAAI,KAAK0gB,MAAM,CAACG,aAAhB,IACAmB,OAAO,KAAKtB,MAAM,CAACM,aAFd,EAGL;AACA,aAAKe,SAAL,CAAersB,GAAf,CACE0mB,QADF,EAEEsE,MAAM,CAACc,kBAAP,CAA0BpF,QAA1B,EAAoC0F,SAAS,CAACrB,OAA9C,CAFF;AAID,OARM,MAQA,IACLzgB,IAAI,KAAK0gB,MAAM,CAACM,aAAhB,IACAgB,OAAO,KAAKtB,MAAM,CAACE,WAFd,EAGL;AACA,aAAKmB,SAAL,CAAersB,GAAf,CACE0mB,QADF,EAEEsE,MAAM,CAACe,gBAAP,CAAwBrF,QAAxB,EAAkCnH,MAAM,CAACG,YAAzC,CAFF;AAID,OARM,MAQA,IACLpV,IAAI,KAAK0gB,MAAM,CAACM,aAAhB,IACAgB,OAAO,KAAKtB,MAAM,CAACM,aAFd,EAGL;AACA,aAAKe,SAAL,CAAersB,GAAf,CACE0mB,QADF,EAEEsE,MAAM,CAACgB,kBAAP,CACEtF,QADF,EAEEnH,MAAM,CAACG,YAFT,EAGE0M,SAAS,CAACrB,OAHZ,CAFF;AAQD,OAZM,MAYA;AACL,cAAM7Z,oBACJ,qCACEqO,MADF,GAEE,kBAFF,GAGE6M,SAJElb,CAAN;AAMD;AACF,KApDD,MAoDO;AACL,WAAKmb,SAAL,CAAersB,GAAf,CAAmB0mB,QAAnB,EAA6BnH,MAA7B;AACD;AACF,GArED;;AAuEA4M;AACE,WAAOjtB,KAAK,CAACqtB,IAAN,CAAW,KAAKF,SAAL,CAAenH,MAAf,EAAX,CAAP;AACD,GAFD;;AAGF;AAAC,CA7ED;ACpBA;;;;;;;;;;;;;;;;;AAmDA;;;;;;;AAOA;;;AACA;AAAA;AAAA;AAAA,qCAkBC;;;;;;AAdCsH,gEAAiB9F,QAAjB,EAAkC;AAChC,WAAO,IAAP;AACD,GAFD;;;;;;AAOA8F,kEACE9Z,KADF,EAEE/J,KAFF,EAGEpE,OAHF,EAGmB;AAEjB,WAAO,IAAP;AACD,GAND;;AAOF;AAAC,CAlBD;AAoBA;;;;;;;AAKO,IAAMkoB,wBAAwB,GAAG,IAAID,sBAAJ,EAAjC;AAEP;;;;;;;;AAOA;AAAA;AAAA;;;;;;AAME,wCACUE,OADV,EAEUC,UAFV,EAGUC,uBAHV,EAGqD;AAA3C;AAAAA;AAA2C;;AAF3C;AACA;AACA;AACN;;;;;;AAKJC,sEAAiBnG,QAAjB,EAAiC;AAC/B,QAAMrW,IAAI,GAAG,KAAKsc,UAAL,CAAgBG,aAAhB,EAAb;;AACA,QAAIzc,IAAI,CAACga,kBAAL,CAAwB3D,QAAxB,CAAJ,EAAuC;AACrC,aAAOrW,IAAI,CAACya,OAAL,GAAe3Q,iBAAf,CAAiCuM,QAAjC,CAAP;AACD,KAFD,MAEO;AACL,UAAMqG,UAAU,GACd,KAAKH,uBAAL,IAAgC,IAAhC,GACI,IAAIzC,SAAJ,CAAc,KAAKyC,uBAAnB,EAA4C,IAA5C,EAAkD,KAAlD,CADJ,GAEI,KAAKD,UAAL,CAAgBK,cAAhB,EAHN;AAIA,aAAO,KAAKN,OAAL,CAAaO,iBAAb,CAA+BvG,QAA/B,EAAyCqG,UAAzC,CAAP;AACD;AACF,GAXD;;;;;;AAgBAF,wEACEna,KADF,EAEE/J,KAFF,EAGEpE,OAHF,EAGkB;AAEhB,QAAM2oB,kBAAkB,GACtB,KAAKN,uBAAL,IAAgC,IAAhC,GACI,KAAKA,uBADT,GAEI,KAAKD,UAAL,CAAgBQ,qBAAhB,EAHN;AAIA,QAAMC,KAAK,GAAG,KAAKV,OAAL,CAAaW,gBAAb,CACZH,kBADY,EAEZvkB,KAFY,EAGZ,CAHY,EAIZpE,OAJY,EAKZmO,KALY,CAAd;;AAOA,QAAI0a,KAAK,CAACpuB,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAOouB,KAAK,CAAC,CAAD,CAAZ;AACD;AACF,GArBD;;AAsBF;AAAC,CArDD;AC7FA;;;;;;;;;;;;;;;;;AAsCA;;;;;;AAIA;AAAA;AAAA;;;;;AAKE,2BACkBE,SADlB,EAEkBC,OAFlB,EAEmC;AADjB;AACA;AACd;;AACN;AAAC,CATD;AAWA;;;;;AAGA;AAAA;AAAA;;;;AAIE,yBAA6BC,OAA7B,EAAgD;AAAnB;AAAuB;;;;;;AAKpDC,oDAAcH,SAAd,EAAkC;AAChC5tB,gBACE4tB,SAAS,CACNR,aADH,GAEGhC,OAFH,GAGGa,SAHH,CAGa,KAAK6B,OAAL,CAAa/N,QAAb,EAHb,CADF/f,EAKE,wBALFA;AAOAA,gBACE4tB,SAAS,CACNN,cADH,GAEGlC,OAFH,GAGGa,SAHH,CAGa,KAAK6B,OAAL,CAAa/N,QAAb,EAHb,CADF/f,EAKE,yBALFA;AAOD,GAfD;;;;;;;;;;AAwBA+tB,qDACEC,YADF,EAEEC,SAFF,EAGEC,WAHF,EAIEC,aAJF,EAI4B;AAE1B,QAAMC,WAAW,GAAG,IAAI3B,sBAAJ,EAApB;AACA,QAAI4B,YAAJ,EAAkBC,gBAAlB;;AACA,QAAIL,SAAS,CAACrjB,IAAV,KAAmBkd,aAAa,CAACqC,SAArC,EAAgD;AAC9C,UAAMoE,SAAS,GAAGN,SAAlB;;AACA,UAAIM,SAAS,CAACvE,MAAV,CAAiBjC,QAArB,EAA+B;AAC7BsG,oBAAY,GAAG,KAAKG,mBAAL,CACbR,YADa,EAEbO,SAAS,CAACzoB,IAFG,EAGbyoB,SAAS,CAACtQ,IAHG,EAIbiQ,WAJa,EAKbC,aALa,EAMbC,WANa,CAAf;AAQD,OATD,MASO;AACLpuB,oBAAOuuB,SAAS,CAACvE,MAAV,CAAiBhC,UAAxBhoB,EAAoC,iBAApCA,EADK;;;;AAKLsuB,wBAAgB,GACdC,SAAS,CAACvE,MAAV,CAAiB9B,MAAjB,IACC8F,YAAY,CAACV,cAAb,GAA8BmB,UAA9B,MACC,CAACF,SAAS,CAACzoB,IAAV,CAAemM,OAAf,EAHL;AAIAoc,oBAAY,GAAG,KAAKK,qBAAL,CACbV,YADa,EAEbO,SAAS,CAACzoB,IAFG,EAGbyoB,SAAS,CAACtQ,IAHG,EAIbiQ,WAJa,EAKbC,aALa,EAMbG,gBANa,EAObF,WAPa,CAAf;AASD;AACF,KA9BD,MA8BO,IAAIH,SAAS,CAACrjB,IAAV,KAAmBkd,aAAa,CAACuC,KAArC,EAA4C;AACjD,UAAMsE,KAAK,GAAGV,SAAd;;AACA,UAAIU,KAAK,CAAC3E,MAAN,CAAajC,QAAjB,EAA2B;AACzBsG,oBAAY,GAAG,KAAKO,eAAL,CACbZ,YADa,EAEbW,KAAK,CAAC7oB,IAFO,EAGb6oB,KAAK,CAAC7H,QAHO,EAIboH,WAJa,EAKbC,aALa,EAMbC,WANa,CAAf;AAQD,OATD,MASO;AACLpuB,oBAAO2uB,KAAK,CAAC3E,MAAN,CAAahC,UAApBhoB,EAAgC,iBAAhCA,EADK;;AAGLsuB,wBAAgB,GACdK,KAAK,CAAC3E,MAAN,CAAa9B,MAAb,IAAuB8F,YAAY,CAACV,cAAb,GAA8BmB,UAA9B,EADzB;AAEAJ,oBAAY,GAAG,KAAKQ,iBAAL,CACbb,YADa,EAEbW,KAAK,CAAC7oB,IAFO,EAGb6oB,KAAK,CAAC7H,QAHO,EAIboH,WAJa,EAKbC,aALa,EAMbG,gBANa,EAObF,WAPa,CAAf;AASD;AACF,KA1BM,MA0BA,IAAIH,SAAS,CAACrjB,IAAV,KAAmBkd,aAAa,CAACQ,cAArC,EAAqD;AAC1D,UAAMwG,YAAY,GAAGb,SAArB;;AACA,UAAI,CAACa,YAAY,CAACzG,MAAlB,EAA0B;AACxBgG,oBAAY,GAAG,KAAKU,aAAL,CACbf,YADa,EAEbc,YAAY,CAAChpB,IAFA,EAGbgpB,YAAY,CAAC1G,YAHA,EAIb8F,WAJa,EAKbC,aALa,EAMbC,WANa,CAAf;AAQD,OATD,MASO;AACLC,oBAAY,GAAG,KAAKW,gBAAL,CACbhB,YADa,EAEbc,YAAY,CAAChpB,IAFA,EAGbooB,WAHa,EAIbC,aAJa,EAKbC,WALa,CAAf;AAOD;AACF,KApBM,MAoBA,IAAIH,SAAS,CAACrjB,IAAV,KAAmBkd,aAAa,CAACmC,eAArC,EAAsD;AAC3DoE,kBAAY,GAAG,KAAKY,eAAL,CACbjB,YADa,EAEbC,SAAS,CAACnoB,IAFG,EAGbooB,WAHa,EAIbE,WAJa,CAAf;AAMD,KAPM,MAOA;AACL,YAAM5c,oBAAe,6BAA6Byc,SAAS,CAACrjB,IAAtD4G,CAAN;AACD;;AACD,QAAMqc,OAAO,GAAGO,WAAW,CAACc,UAAZ,EAAhB;AACAnB,iBAAa,CAACoB,mBAAd,CAAkCnB,YAAlC,EAAgDK,YAAhD,EAA8DR,OAA9D;AACA,WAAO,IAAIuB,eAAJ,CAAoBf,YAApB,EAAkCR,OAAlC,CAAP;AACD,GAjGD;;;;;;;;;AAyGeE,sCAAf,UACEC,YADF,EAEEK,YAFF,EAGED,WAHF,EAGuB;AAErB,QAAMpD,SAAS,GAAGqD,YAAY,CAACjB,aAAb,EAAlB;;AACA,QAAIpC,SAAS,CAACN,kBAAV,EAAJ,EAAoC;AAClC,UAAM2E,aAAa,GACjBrE,SAAS,CAACI,OAAV,GAAoBpZ,UAApB,MAAoCgZ,SAAS,CAACI,OAAV,GAAoBnZ,OAApB,EADtC;AAEA,UAAMqd,eAAe,GAAGtB,YAAY,CAACuB,oBAAb,EAAxB;;AACA,UACEnB,WAAW,CAAC9uB,MAAZ,GAAqB,CAArB,IACA,CAAC0uB,YAAY,CAACZ,aAAb,GAA6B1C,kBAA7B,EADD,IAEC2E,aAAa,IACZ,CAACrE,SAAS,CAACI,OAAV,GAAoBvX,MAApB;AAA0B;AAAsByb,qBAAhD,CAHH,IAIA,CAACtE,SAAS,CACPI,OADF,GAEElZ,WAFF,GAGE2B,MAHF,CAGSyb,eAAe,CAACpd,WAAhB,EAHT,CALH,EASE;AACAkc,mBAAW,CAAChrB,IAAZ,CACEkoB,MAAM,CAACkE,WAAP;;AACuBnB,oBAAY,CAACkB,oBAAb,EADvB,CADF;AAKD;AACF;AACF,GA3Bc;;;;;;;;;;;;AAsCPxB,gEAAR,UACEH,SADF,EAEE6B,UAFF,EAGEvB,WAHF,EAIElE,MAJF,EAKEoE,WALF,EAKqC;AAEnC,QAAMsB,YAAY,GAAG9B,SAAS,CAACR,aAAV,EAArB;;AACA,QAAIc,WAAW,CAACyB,cAAZ,CAA2BF,UAA3B,KAA0C,IAA9C,EAAoD;;AAElD,aAAO7B,SAAP;AACD,KAHD,MAGO;AACL,UAAIgC,aAAa,SAAjB;AAAA,UAAmBvC,UAAU,SAA7B;;AACA,UAAIoC,UAAU,CAACxd,OAAX,EAAJ,EAA0B;;AAExBjS,oBACE4tB,SAAS,CAACN,cAAV,GAA2B5C,kBAA3B,EADF1qB,EAEE,4DAFFA;;AAIA,YAAI4tB,SAAS,CAACN,cAAV,GAA2BmB,UAA3B,EAAJ,EAA6C;;;;AAI3C,cAAMoB,WAAW,GAAGjC,SAAS,CAACH,qBAAV,EAApB;AACA,cAAMqC,gBAAgB,GACpBD,WAAW,YAAYtV,YAAvB,GACIsV,WADJ,GAEItV,YAAY,CAAChI,UAHnB;AAIA,cAAMwd,qBAAqB,GAAG7B,WAAW,CAAC8B,yBAAZ,CAC5BF,gBAD4B,CAA9B;AAGAF,uBAAa,GAAG,KAAK9B,OAAL,CAAamC,cAAb,CACdrC,SAAS,CAACR,aAAV,GAA0BhC,OAA1B,EADc,EAEd2E,qBAFc,EAGd3B,WAHc,CAAhB;AAKD,SAjBD,MAiBO;AACL,cAAM8B,YAAY,GAAGhC,WAAW,CAAC5I,sBAAZ,CACnBsI,SAAS,CAACH,qBAAV,EADmB,CAArB;AAGAmC,uBAAa,GAAG,KAAK9B,OAAL,CAAamC,cAAb,CACdrC,SAAS,CAACR,aAAV,GAA0BhC,OAA1B,EADc,EAEd8E,YAFc,EAGd9B,WAHc,CAAhB;AAKD;AACF,OAjCD,MAiCO;AACL,YAAMpH,QAAQ,GAAGyI,UAAU,CAAC3nB,QAAX,EAAjB;;AACA,YAAIkf,QAAQ,KAAK,WAAjB,EAA8B;AAC5BhnB,sBACEyvB,UAAU,CAACjnB,SAAX,OAA2B,CAD7BxI,EAEE,uDAFFA;AAIA,cAAMmwB,YAAY,GAAGT,YAAY,CAACtE,OAAb,EAArB;AACAiC,oBAAU,GAAGO,SAAS,CAACN,cAAV,GAA2BlC,OAA3B,EAAb,CAN4B;;AAQ5B,cAAMgF,eAAe,GAAGlC,WAAW,CAACmC,kCAAZ,CACtBZ,UADsB,EAEtBU,YAFsB,EAGtB9C,UAHsB,CAAxB;;AAKA,cAAI+C,eAAe,IAAI,IAAvB,EAA6B;AAC3BR,yBAAa,GAAG,KAAK9B,OAAL,CAAalb,cAAb,CACdud,YADc,EAEdC,eAFc,CAAhB;AAID,WALD,MAKO;;AAELR,yBAAa,GAAGF,YAAY,CAACtE,OAAb,EAAhB;AACD;AACF,SAtBD,MAsBO;AACL,cAAMkF,eAAe,GAAGb,UAAU,CAACxnB,QAAX,EAAxB,CADK;;AAGL,cAAIsoB,aAAa,SAAjB;;AACA,cAAIb,YAAY,CAAC/E,kBAAb,CAAgC3D,QAAhC,CAAJ,EAA+C;AAC7CqG,sBAAU,GAAGO,SAAS,CAACN,cAAV,GAA2BlC,OAA3B,EAAb;AACA,gBAAMoF,gBAAgB,GAAGtC,WAAW,CAACmC,kCAAZ,CACvBZ,UADuB,EAEvBC,YAAY,CAACtE,OAAb,EAFuB,EAGvBiC,UAHuB,CAAzB;;AAKA,gBAAImD,gBAAgB,IAAI,IAAxB,EAA8B;AAC5BD,2BAAa,GAAGb,YAAY,CACzBtE,OADa,GAEb3Q,iBAFa,CAEKuM,QAFL,EAGbjU,WAHa,CAGDud,eAHC,EAGgBE,gBAHhB,CAAhB;AAID,aALD,MAKO;;AAELD,2BAAa,GAAGb,YAAY,CACzBtE,OADa,GAEb3Q,iBAFa,CAEKuM,QAFL,CAAhB;AAGD;AACF,WAlBD,MAkBO;AACLuJ,yBAAa,GAAGrC,WAAW,CAACX,iBAAZ,CACdvG,QADc,EAEd4G,SAAS,CAACN,cAAV,EAFc,CAAhB;AAID;;AACD,cAAIiD,aAAa,IAAI,IAArB,EAA2B;AACzBX,yBAAa,GAAG,KAAK9B,OAAL,CAAa/a,WAAb,CACd2c,YAAY,CAACtE,OAAb,EADc,EAEdpE,QAFc,EAGduJ,aAHc,EAIdD,eAJc,EAKdtG,MALc,EAMdoE,WANc,CAAhB;AAQD,WATD,MASO;;AAELwB,yBAAa,GAAGF,YAAY,CAACtE,OAAb,EAAhB;AACD;AACF;AACF;;AACD,aAAOwC,SAAS,CAAC6C,eAAV,CACLb,aADK,EAELF,YAAY,CAAChF,kBAAb,MAAqC+E,UAAU,CAACxd,OAAX,EAFhC,EAGL,KAAK6b,OAAL,CAAa4C,YAAb,EAHK,CAAP;AAKD;AACF,GAvHO;;;;;;;;;;;;;;AAoIR3C,4DACEC,YADF,EAEEyB,UAFF,EAGEkB,WAHF,EAIEzC,WAJF,EAKEC,aALF,EAMEG,gBANF,EAOEF,WAPF,EAOqC;AAEnC,QAAMwC,aAAa,GAAG5C,YAAY,CAACV,cAAb,EAAtB;AACA,QAAIuD,cAAJ;AACA,QAAMC,YAAY,GAAGxC,gBAAgB,GACjC,KAAKR,OAD4B,GAEjC,KAAKA,OAAL,CAAaiD,gBAAb,EAFJ;;AAGA,QAAItB,UAAU,CAACxd,OAAX,EAAJ,EAA0B;AACxB4e,oBAAc,GAAGC,YAAY,CAACb,cAAb,CACfW,aAAa,CAACxF,OAAd,EADe,EAEfuF,WAFe,EAGf,IAHe,CAAjB;AAKD,KAND,MAMO,IAAIG,YAAY,CAACJ,YAAb,MAA+B,CAACE,aAAa,CAACnC,UAAd,EAApC,EAAgE;;AAErE,UAAMuC,aAAa,GAAGJ,aAAa,CAChCxF,OADmB,GAEnBrY,WAFmB,CAEP0c,UAFO,EAEKkB,WAFL,CAAtB;AAGAE,oBAAc,GAAGC,YAAY,CAACb,cAAb,CACfW,aAAa,CAACxF,OAAd,EADe,EAEf4F,aAFe,EAGf,IAHe,CAAjB;AAKD,KAVM,MAUA;AACL,UAAMhK,QAAQ,GAAGyI,UAAU,CAAC3nB,QAAX,EAAjB;;AACA,UACE,CAAC8oB,aAAa,CAACK,iBAAd,CAAgCxB,UAAhC,CAAD,IACAA,UAAU,CAACjnB,SAAX,KAAyB,CAF3B,EAGE;;AAEA,eAAOwlB,YAAP;AACD;;AACD,UAAMsC,eAAe,GAAGb,UAAU,CAACxnB,QAAX,EAAxB;AACA,UAAMyK,SAAS,GAAGke,aAAa,CAACxF,OAAd,GAAwB3Q,iBAAxB,CAA0CuM,QAA1C,CAAlB;AACA,UAAMrU,YAAY,GAAGD,SAAS,CAACK,WAAV,CAAsBud,eAAtB,EAAuCK,WAAvC,CAArB;;AACA,UAAI3J,QAAQ,KAAK,WAAjB,EAA8B;AAC5B6J,sBAAc,GAAGC,YAAY,CAACle,cAAb,CACfge,aAAa,CAACxF,OAAd,EADe,EAEfzY,YAFe,CAAjB;AAID,OALD,MAKO;AACLke,sBAAc,GAAGC,YAAY,CAAC/d,WAAb,CACf6d,aAAa,CAACxF,OAAd,EADe,EAEfpE,QAFe,EAGfrU,YAHe,EAIf2d,eAJe,EAKfvD,wBALe,EAMf,IANe,CAAjB;AAQD;AACF;;AACD,QAAMsB,YAAY,GAAGL,YAAY,CAACkD,gBAAb,CACnBL,cADmB,EAEnBD,aAAa,CAAClG,kBAAd,MAAsC+E,UAAU,CAACxd,OAAX,EAFnB,EAGnB6e,YAAY,CAACJ,YAAb,EAHmB,CAArB;AAKA,QAAM1G,MAAM,GAAG,IAAImD,4BAAJ,CACbe,WADa,EAEbG,YAFa,EAGbF,aAHa,CAAf;AAKA,WAAO,KAAKgD,mCAAL,CACL9C,YADK,EAELoB,UAFK,EAGLvB,WAHK,EAILlE,MAJK,EAKLoE,WALK,CAAP;AAOD,GA3ED;;;;;;;;;;;;;AAuFAL,0DACEC,YADF,EAEEyB,UAFF,EAGEkB,WAHF,EAIEzC,WAJF,EAKEC,aALF,EAMEC,WANF,EAMqC;AAEnC,QAAMsB,YAAY,GAAG1B,YAAY,CAACZ,aAAb,EAArB;AACA,QAAIiB,YAAJ,EAAkBuB,aAAlB;AACA,QAAM5F,MAAM,GAAG,IAAImD,4BAAJ,CACbe,WADa,EAEbF,YAFa,EAGbG,aAHa,CAAf;;AAKA,QAAIsB,UAAU,CAACxd,OAAX,EAAJ,EAA0B;AACxB2d,mBAAa,GAAG,KAAK9B,OAAL,CAAamC,cAAb,CACdjC,YAAY,CAACZ,aAAb,GAA6BhC,OAA7B,EADc,EAEduF,WAFc,EAGdvC,WAHc,CAAhB;AAKAC,kBAAY,GAAGL,YAAY,CAACyC,eAAb,CACbb,aADa,EAEb,IAFa,EAGb,KAAK9B,OAAL,CAAa4C,YAAb,EAHa,CAAf;AAKD,KAXD,MAWO;AACL,UAAM1J,QAAQ,GAAGyI,UAAU,CAAC3nB,QAAX,EAAjB;;AACA,UAAIkf,QAAQ,KAAK,WAAjB,EAA8B;AAC5B4I,qBAAa,GAAG,KAAK9B,OAAL,CAAalb,cAAb,CACdob,YAAY,CAACZ,aAAb,GAA6BhC,OAA7B,EADc,EAEduF,WAFc,CAAhB;AAIAtC,oBAAY,GAAGL,YAAY,CAACyC,eAAb,CACbb,aADa,EAEbF,YAAY,CAAChF,kBAAb,EAFa,EAGbgF,YAAY,CAACjB,UAAb,EAHa,CAAf;AAKD,OAVD,MAUO;AACL,YAAM6B,eAAe,GAAGb,UAAU,CAACxnB,QAAX,EAAxB;AACA,YAAMikB,QAAQ,GAAGwD,YAAY,CAACtE,OAAb,GAAuB3Q,iBAAvB,CAAyCuM,QAAzC,CAAjB;AACA,YAAIoC,QAAQ,SAAZ;;AACA,YAAIkH,eAAe,CAACre,OAAhB,EAAJ,EAA+B;;AAE7BmX,kBAAQ,GAAGuH,WAAX;AACD,SAHD,MAGO;AACL,cAAMje,SAAS,GAAGsX,MAAM,CAACoH,gBAAP,CAAwBpK,QAAxB,CAAlB;;AACA,cAAItU,SAAS,IAAI,IAAjB,EAAuB;AACrB,gBACE4d,eAAe,CAACliB,OAAhB,OAA8B,WAA9B,IACAsE,SAAS,CAACgI,QAAV,CAAmB4V,eAAe,CAACe,MAAhB,EAAnB,EAA6Cpf,OAA7C,EAFF,EAGE;;;AAGAmX,sBAAQ,GAAG1W,SAAX;AACD,aAPD,MAOO;AACL0W,sBAAQ,GAAG1W,SAAS,CAACK,WAAV,CAAsBud,eAAtB,EAAuCK,WAAvC,CAAX;AACD;AACF,WAXD,MAWO;;AAELvH,oBAAQ,GAAG7O,YAAY,CAAChI,UAAxB;AACD;AACF;;AACD,YAAI,CAAC2Z,QAAQ,CAACrY,MAAT,CAAgBuV,QAAhB,CAAL,EAAgC;AAC9B,cAAMkI,YAAY,GAAG,KAAKxD,OAAL,CAAa/a,WAAb,CACnB2c,YAAY,CAACtE,OAAb,EADmB,EAEnBpE,QAFmB,EAGnBoC,QAHmB,EAInBkH,eAJmB,EAKnBtG,MALmB,EAMnBoE,WANmB,CAArB;AAQAC,sBAAY,GAAGL,YAAY,CAACyC,eAAb,CACba,YADa,EAEb5B,YAAY,CAAChF,kBAAb,EAFa,EAGb,KAAKoD,OAAL,CAAa4C,YAAb,EAHa,CAAf;AAKD,SAdD,MAcO;AACLrC,sBAAY,GAAGL,YAAf;AACD;AACF;AACF;;AACD,WAAOK,YAAP;AACD,GAnFD;;;;;;;;;AA2FeN,iCAAf,UACEH,SADF,EAEE5G,QAFF,EAEkB;AAEhB,WAAO4G,SAAS,CAACR,aAAV,GAA0BzC,kBAA1B,CAA6C3D,QAA7C,CAAP;AACD,GALc;;;;;;;;;;;;;AAiBP+G,4CAAR,UACEH,SADF,EAEE9nB,IAFF,EAGEyrB,eAHF,EAIErD,WAJF,EAKE2B,WALF,EAMEzB,WANF,EAMqC;AANrC,qBAMqC;;;;;;;;AAQnC,QAAIoD,YAAY,GAAG5D,SAAnB;AACA2D,mBAAe,CAACE,OAAhB,CAAwB,UAACzpB,YAAD,EAAe0K,SAAf,EAAwB;AAC9C,UAAMgf,SAAS,GAAG5rB,IAAI,CAACmD,KAAL,CAAWjB,YAAX,CAAlB;;AACA,UAAI+lB,aAAa,CAAC4D,cAAd,CAA6B/D,SAA7B,EAAwC8D,SAAS,CAAC5pB,QAAV,EAAxC,CAAJ,EAAmE;AACjE0pB,oBAAY,GAAGxX,KAAI,CAACwU,mBAAL,CACbgD,YADa,EAEbE,SAFa,EAGbhf,SAHa,EAIbwb,WAJa,EAKb2B,WALa,EAMbzB,WANa,CAAf;AAQD;AACF,KAZD;AAcAmD,mBAAe,CAACE,OAAhB,CAAwB,UAACzpB,YAAD,EAAe0K,SAAf,EAAwB;AAC9C,UAAMgf,SAAS,GAAG5rB,IAAI,CAACmD,KAAL,CAAWjB,YAAX,CAAlB;;AACA,UAAI,CAAC+lB,aAAa,CAAC4D,cAAd,CAA6B/D,SAA7B,EAAwC8D,SAAS,CAAC5pB,QAAV,EAAxC,CAAL,EAAoE;AAClE0pB,oBAAY,GAAGxX,KAAI,CAACwU,mBAAL,CACbgD,YADa,EAEbE,SAFa,EAGbhf,SAHa,EAIbwb,WAJa,EAKb2B,WALa,EAMbzB,WANa,CAAf;AAQD;AACF,KAZD;AAcA,WAAOoD,YAAP;AACD,GA5CO;;;;;;;;;AAoDAzD,wCAAR,UAAoBpd,IAApB,EAAgCge,KAAhC,EAA0D;AACxDA,SAAK,CAAC8C,OAAN,CAAc,UAACzpB,YAAD,EAAe0K,SAAf,EAAwB;AACpC/B,UAAI,GAAGA,IAAI,CAACoC,WAAL,CAAiB/K,YAAjB,EAA+B0K,SAA/B,CAAP;AACD,KAFD;AAGA,WAAO/B,IAAP;AACD,GALO;;;;;;;;;;;;;;AAkBAod,8CAAR,UACEH,SADF,EAEE9nB,IAFF,EAGEyrB,eAHF,EAIErD,WAJF,EAKE2B,WALF,EAMEvB,gBANF,EAOEF,WAPF,EAOqC;AAPrC,qBAOqC;;;;AAInC,QACER,SAAS,CACNN,cADH,GAEGlC,OAFH,GAGGnZ,OAHH,MAIA,CAAC2b,SAAS,CAACN,cAAV,GAA2B5C,kBAA3B,EALH,EAME;AACA,aAAOkD,SAAP;AACD,KAZkC;;;;;;;;AAoBnC,QAAI4D,YAAY,GAAG5D,SAAnB;AACA,QAAIgE,aAAJ;;AACA,QAAI9rB,IAAI,CAACmM,OAAL,EAAJ,EAAoB;AAClB2f,mBAAa,GAAGL,eAAhB;AACD,KAFD,MAEO;AACLK,mBAAa,GAAG/I,aAAa,CAACH,KAAd,CAAoBY,OAApB,CAA4BxjB,IAA5B,EAAkCyrB,eAAlC,CAAhB;AACD;;AACD,QAAMlE,UAAU,GAAGO,SAAS,CAACN,cAAV,GAA2BlC,OAA3B,EAAnB;AACAwG,iBAAa,CAAC9K,QAAd,CAAuB5R,gBAAvB,CAAwC,UAAC8R,QAAD,EAAW7O,SAAX,EAAoB;AAC1D,UAAIkV,UAAU,CAACzC,QAAX,CAAoB5D,QAApB,CAAJ,EAAmC;AACjC,YAAM6K,WAAW,GAAGjE,SAAS,CAC1BN,cADiB,GAEjBlC,OAFiB,GAGjB3Q,iBAHiB,CAGCuM,QAHD,CAApB;;AAIA,YAAMoC,QAAQ,GAAGpP,KAAI,CAAC8X,WAAL,CAAiBD,WAAjB,EAA8B1Z,SAA9B,CAAjB;;AACAqZ,oBAAY,GAAGxX,KAAI,CAAC0U,qBAAL,CACb8C,YADa,EAEb,IAAItqB,IAAJ,CAAS8f,QAAT,CAFa,EAGboC,QAHa,EAIb8E,WAJa,EAKb2B,WALa,EAMbvB,gBANa,EAObF,WAPa,CAAf;AASD;AACF,KAjBD;AAkBAwD,iBAAa,CAAC9K,QAAd,CAAuB5R,gBAAvB,CAAwC,UAAC8R,QAAD,EAAW+K,cAAX,EAAyB;AAC/D,UAAMC,kBAAkB,GACtB,CAACpE,SAAS,CAACN,cAAV,GAA2B3C,kBAA3B,CAA8C3D,QAA9C,CAAD,IACA+K,cAAc,CAACh1B,KAAf,IAAwB,IAF1B;;AAGA,UAAI,CAACswB,UAAU,CAACzC,QAAX,CAAoB5D,QAApB,CAAD,IAAkC,CAACgL,kBAAvC,EAA2D;AACzD,YAAMH,WAAW,GAAGjE,SAAS,CAC1BN,cADiB,GAEjBlC,OAFiB,GAGjB3Q,iBAHiB,CAGCuM,QAHD,CAApB;;AAIA,YAAMoC,QAAQ,GAAGpP,KAAI,CAAC8X,WAAL,CAAiBD,WAAjB,EAA8BE,cAA9B,CAAjB;;AACAP,oBAAY,GAAGxX,KAAI,CAAC0U,qBAAL,CACb8C,YADa,EAEb,IAAItqB,IAAJ,CAAS8f,QAAT,CAFa,EAGboC,QAHa,EAIb8E,WAJa,EAKb2B,WALa,EAMbvB,gBANa,EAObF,WAPa,CAAf;AASD;AACF,KApBD;AAsBA,WAAOoD,YAAP;AACD,GA5EO;;;;;;;;;;;;;AAwFAzD,0CAAR,UACEH,SADF,EAEEqE,OAFF,EAGE7J,YAHF,EAIE8F,WAJF,EAKEC,aALF,EAMEC,WANF,EAMqC;AAEnC,QAAIF,WAAW,CAACyB,cAAZ,CAA2BsC,OAA3B,KAAuC,IAA3C,EAAiD;AAC/C,aAAOrE,SAAP;AACD,KAJkC;;;AAOnC,QAAMU,gBAAgB,GAAGV,SAAS,CAACN,cAAV,GAA2BmB,UAA3B,EAAzB,CAPmC;;;AAWnC,QAAMoB,WAAW,GAAGjC,SAAS,CAACN,cAAV,EAApB;;AACA,QAAIlF,YAAY,CAACrrB,KAAb,IAAsB,IAA1B,EAAgC;;AAE9B,UACGk1B,OAAO,CAAChgB,OAAR,MAAqB4d,WAAW,CAACnF,kBAAZ,EAAtB,IACAmF,WAAW,CAACoB,iBAAZ,CAA8BgB,OAA9B,CAFF,EAGE;AACA,eAAO,KAAKvD,qBAAL,CACLd,SADK,EAELqE,OAFK,EAGLpC,WAAW,CAACzE,OAAZ,GAAsB1Q,QAAtB,CAA+BuX,OAA/B,CAHK,EAIL/D,WAJK,EAKLC,aALK,EAMLG,gBANK,EAOLF,WAPK,CAAP;AASD,OAbD,MAaO,IAAI6D,OAAO,CAAChgB,OAAR,EAAJ,EAAuB;;;AAG5B,YAAIigB,iBAAe,GAAGrJ,aAAa,CAACH,KAApC;AACAmH,mBAAW,CAACzE,OAAZ,GAAsBlQ,YAAtB,CAAmCxJ,SAAnC,EAA8C,UAACnU,IAAD,EAAOoT,IAAP,EAAW;AACvDuhB,2BAAe,GAAGA,iBAAe,CAAC5xB,GAAhB,CAAoB,IAAI4G,IAAJ,CAAS3J,IAAT,CAApB,EAAoCoT,IAApC,CAAlB;AACD,SAFD;AAGA,eAAO,KAAKke,iBAAL,CACLjB,SADK,EAELqE,OAFK,EAGLC,iBAHK,EAILhE,WAJK,EAKLC,aALK,EAMLG,gBANK,EAOLF,WAPK,CAAP;AASD,OAhBM,MAgBA;AACL,eAAOR,SAAP;AACD;AACF,KAlCD,MAkCO;;AAEL,UAAIuE,iBAAe,GAAGtJ,aAAa,CAACH,KAApC;AACAN,kBAAY,CAACqJ,OAAb,CAAqB,UAACW,SAAD,EAAYr1B,KAAZ,EAAiB;AACpC,YAAMs1B,eAAe,GAAGJ,OAAO,CAAChpB,KAAR,CAAcmpB,SAAd,CAAxB;;AACA,YAAIvC,WAAW,CAACoB,iBAAZ,CAA8BoB,eAA9B,CAAJ,EAAoD;AAClDF,2BAAe,GAAGA,iBAAe,CAAC7xB,GAAhB,CAChB8xB,SADgB,EAEhBvC,WAAW,CAACzE,OAAZ,GAAsB1Q,QAAtB,CAA+B2X,eAA/B,CAFgB,CAAlB;AAID;AACF,OARD;AASA,aAAO,KAAKxD,iBAAL,CACLjB,SADK,EAELqE,OAFK,EAGLE,iBAHK,EAILjE,WAJK,EAKLC,aALK,EAMLG,gBANK,EAOLF,WAPK,CAAP;AASD;AACF,GA1EO;;;;;;;;;;;AAoFAL,4CAAR,UACEH,SADF,EAEE9nB,IAFF,EAGEooB,WAHF,EAIEE,WAJF,EAIqC;AAEnC,QAAMkE,aAAa,GAAG1E,SAAS,CAACN,cAAV,EAAtB;AACA,QAAMe,YAAY,GAAGT,SAAS,CAACsD,gBAAV,CACnBoB,aAAa,CAAClH,OAAd,EADmB,EAEnBkH,aAAa,CAAC5H,kBAAd,MAAsC5kB,IAAI,CAACmM,OAAL,EAFnB,EAGnBqgB,aAAa,CAAC7D,UAAd,EAHmB,CAArB;AAKA,WAAO,KAAK0C,mCAAL,CACL9C,YADK,EAELvoB,IAFK,EAGLooB,WAHK,EAILnB,wBAJK,EAKLqB,WALK,CAAP;AAOD,GAnBO;;;;;;;;;;;;AA8BAL,6CAAR,UACEH,SADF,EAEE9nB,IAFF,EAGEooB,WAHF,EAIEqE,mBAJF,EAKEnE,WALF,EAKqC;AAEnC,QAAInD,QAAJ;;AACA,QAAIiD,WAAW,CAACyB,cAAZ,CAA2B7pB,IAA3B,KAAoC,IAAxC,EAA8C;AAC5C,aAAO8nB,SAAP;AACD,KAFD,MAEO;AACL,UAAM5D,MAAM,GAAG,IAAImD,4BAAJ,CACbe,WADa,EAEbN,SAFa,EAGb2E,mBAHa,CAAf;AAKA,UAAMC,aAAa,GAAG5E,SAAS,CAACR,aAAV,GAA0BhC,OAA1B,EAAtB;AACA,UAAIwE,aAAa,SAAjB;;AACA,UAAI9pB,IAAI,CAACmM,OAAL,MAAkBnM,IAAI,CAACgC,QAAL,OAAoB,WAA1C,EAAuD;AACrD,YAAIkJ,OAAO,SAAX;;AACA,YAAI4c,SAAS,CAACN,cAAV,GAA2B5C,kBAA3B,EAAJ,EAAqD;AACnD1Z,iBAAO,GAAGkd,WAAW,CAAC5I,sBAAZ,CACRsI,SAAS,CAACH,qBAAV,EADQ,CAAV;AAGD,SAJD,MAIO;AACL,cAAMgF,cAAc,GAAG7E,SAAS,CAACN,cAAV,GAA2BlC,OAA3B,EAAvB;AACAprB,sBACEyyB,cAAc,YAAYlY,YAD5Bva,EAEE,+CAFFA;AAIAgR,iBAAO,GAAGkd,WAAW,CAAC8B,yBAAZ,CACRyC,cADQ,CAAV;AAGD;;AACDzhB,eAAO,GAAGA,OAAV;AACA4e,qBAAa,GAAG,KAAK9B,OAAL,CAAamC,cAAb,CACduC,aADc,EAEdxhB,OAFc,EAGdod,WAHc,CAAhB;AAKD,OAtBD,MAsBO;AACL,YAAMpH,QAAQ,GAAGlhB,IAAI,CAACgC,QAAL,EAAjB;AACA,YAAIshB,QAAQ,GAAG8E,WAAW,CAACX,iBAAZ,CACbvG,QADa,EAEb4G,SAAS,CAACN,cAAV,EAFa,CAAf;;AAIA,YACElE,QAAQ,IAAI,IAAZ,IACAwE,SAAS,CAACN,cAAV,GAA2B3C,kBAA3B,CAA8C3D,QAA9C,CAFF,EAGE;AACAoC,kBAAQ,GAAGoJ,aAAa,CAAC/X,iBAAd,CAAgCuM,QAAhC,CAAX;AACD;;AACD,YAAIoC,QAAQ,IAAI,IAAhB,EAAsB;AACpBwG,uBAAa,GAAG,KAAK9B,OAAL,CAAa/a,WAAb,CACdyf,aADc,EAEdxL,QAFc,EAGdoC,QAHc,EAIdtjB,IAAI,CAACmC,QAAL,EAJc,EAKd+hB,MALc,EAMdoE,WANc,CAAhB;AAQD,SATD,MASO,IACLR,SAAS,CACNR,aADH,GAEGhC,OAFH,GAGGR,QAHH,CAGY5D,QAHZ,CADK,EAKL;;AAEA4I,uBAAa,GAAG,KAAK9B,OAAL,CAAa/a,WAAb,CACdyf,aADc,EAEdxL,QAFc,EAGdzM,YAAY,CAAChI,UAHC,EAIdzM,IAAI,CAACmC,QAAL,EAJc,EAKd+hB,MALc,EAMdoE,WANc,CAAhB;AAQD,SAfM,MAeA;AACLwB,uBAAa,GAAG4C,aAAhB;AACD;;AACD,YACE5C,aAAa,CAAC3d,OAAd,MACA2b,SAAS,CAACN,cAAV,GAA2B5C,kBAA3B,EAFF,EAGE;;AAEAO,kBAAQ,GAAGiD,WAAW,CAAC5I,sBAAZ,CACTsI,SAAS,CAACH,qBAAV,EADS,CAAX;;AAGA,cAAIxC,QAAQ,CAACjZ,UAAT,EAAJ,EAA2B;AACzB4d,yBAAa,GAAG,KAAK9B,OAAL,CAAamC,cAAb,CACdL,aADc,EAEd3E,QAFc,EAGdmD,WAHc,CAAhB;AAKD;AACF;AACF;;AACDnD,cAAQ,GACN2C,SAAS,CAACN,cAAV,GAA2B5C,kBAA3B,MACAwD,WAAW,CAACyB,cAAZ,CAA2BzoB,IAAI,CAACwhB,KAAhC,KAA0C,IAF5C;AAGA,aAAOkF,SAAS,CAAC6C,eAAV,CACLb,aADK,EAEL3E,QAFK,EAGL,KAAK6C,OAAL,CAAa4C,YAAb,EAHK,CAAP;AAKD;AACF,GAzGO;;AA0GV;AAAC,CAj3BD;ACxDA;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;AAOA;AAAA;AAAA;;;;;AAOE,0BAAoBgC,MAApB,EAAiC;AAAb;;;;;;AAKlB,SAAKnU,MAAL,GAAc,KAAKmU,MAAL,CAAY5S,cAAZ,GAA6BC,QAA7B,EAAd;AACD;;;;;;;;;;;;;;;;;AAgBD4S,gEACE9E,OADF,EAEE+E,UAFF,EAGEC,kBAHF,EAGyC;AAHzC;;AAKE,QAAMC,MAAM,GAAY,EAAxB;AACA,QAAMC,KAAK,GAAa,EAAxB;AAEAlF,WAAO,CAAChG,OAAR,CAAgB,kBAAM;AACpB,UACEhI,MAAM,CAACjV,IAAP,KAAgB0gB,MAAM,CAACM,aAAvB,IACA5R,KAAI,CAACuE,MAAL,CAAYyU,mBAAZ,CACEnT,MAAM,CAACwL,OADT,EAEExL,MAAM,CAACG,YAFT,CAFF,EAME;AACA+S,aAAK,CAAC3vB,IAAN,CACEkoB,MAAM,CAAC2H,gBAAP,CACEpT,MAAM,CAACpN,SADT,EAEEoN,MAAM,CAACG,YAFT,CADF;AAMD;AACF,KAfD;AAiBA,SAAKkT,sBAAL,CACEJ,MADF,EAEExH,MAAM,CAACG,aAFT,EAGEoC,OAHF,EAIEgF,kBAJF,EAKED,UALF;AAOA,SAAKM,sBAAL,CACEJ,MADF,EAEExH,MAAM,CAACE,WAFT,EAGEqC,OAHF,EAIEgF,kBAJF,EAKED,UALF;AAOA,SAAKM,sBAAL,CACEJ,MADF,EAEExH,MAAM,CAACO,WAFT,EAGEkH,KAHF,EAIEF,kBAJF,EAKED,UALF;AAOA,SAAKM,sBAAL,CACEJ,MADF,EAEExH,MAAM,CAACM,aAFT,EAGEiC,OAHF,EAIEgF,kBAJF,EAKED,UALF;AAOA,SAAKM,sBAAL,CACEJ,MADF,EAEExH,MAAM,CAACC,KAFT,EAGEsC,OAHF,EAIEgF,kBAJF,EAKED,UALF;AAQA,WAAOE,MAAP;AACD,GA9DD;;;;;;;;;;;;;AA0EQH,oDAAR,UACEG,MADF,EAEEvkB,SAFF,EAGEsf,OAHF,EAIEsF,aAJF,EAKEP,UALF,EAKkB;AALlB;;AAOE,QAAMQ,eAAe,GAAGvF,OAAO,CAACwF,MAAR,CAAe,kBAAM;AAAI,mBAAM,CAACzoB,IAAP,KAAgB2D,SAAhB;AAAyB,KAAlD,CAAxB;AAEA6kB,mBAAe,CAAC/vB,IAAhB,CAAqB,KAAKiwB,eAAL,CAAqBjzB,IAArB,CAA0B,IAA1B,CAArB;AACA+yB,mBAAe,CAACvL,OAAhB,CAAwB,kBAAM;AAC5B,UAAM0L,kBAAkB,GAAGvZ,KAAI,CAACwZ,wBAAL,CACzB3T,MADyB,EAEzB+S,UAFyB,CAA3B;;AAIAO,mBAAa,CAACtL,OAAd,CAAsB,wBAAY;AAChC,YAAI4L,YAAY,CAACC,UAAb,CAAwB7T,MAAM,CAACjV,IAA/B,CAAJ,EAA0C;AACxCkoB,gBAAM,CAAC1vB,IAAP,CACEqwB,YAAY,CAACE,WAAb,CAAyBJ,kBAAzB,EAA6CvZ,KAAI,CAAC0Y,MAAlD,CADF;AAGD;AACF,OAND;AAOD,KAZD;AAaD,GAvBO;;;;;;;;;AA+BAC,sDAAR,UAAiC9S,MAAjC,EAAiD+S,UAAjD,EAAiE;AAC/D,QAAI/S,MAAM,CAACjV,IAAP,KAAgB,OAAhB,IAA2BiV,MAAM,CAACjV,IAAP,KAAgB,eAA/C,EAAgE;AAC9D,aAAOiV,MAAP;AACD,KAFD,MAEO;AACLA,YAAM,CAACX,QAAP,GAAkB0T,UAAU,CAACgB,uBAAX;;AAEhB/T,YAAM,CAACpN,SAFS,EAGhBoN,MAAM,CAACG,YAHS,EAIhB,KAAKzB,MAJW,CAAlB;AAMA,aAAOsB,MAAP;AACD;AACF,GAZO;;;;;;;;;AAoBA8S,6CAAR,UAAwBlwB,CAAxB,EAAmCC,CAAnC,EAA4C;AAC1C,QAAID,CAAC,CAACgQ,SAAF,IAAe,IAAf,IAAuB/P,CAAC,CAAC+P,SAAF,IAAe,IAA1C,EAAgD;AAC9C,YAAMjB,oBAAe,oCAAfA,CAAN;AACD;;AACD,QAAMqiB,QAAQ,GAAG,IAAIjjB,SAAJ,CAAcnO,CAAC,CAACgQ,SAAhB,EAA2BhQ,CAAC,CAACud,YAA7B,CAAjB;AACA,QAAM8T,QAAQ,GAAG,IAAIljB,SAAJ,CAAclO,CAAC,CAAC+P,SAAhB,EAA2B/P,CAAC,CAACsd,YAA7B,CAAjB;AACA,WAAO,KAAKzB,MAAL,CAAYzN,OAAZ,CAAoB+iB,QAApB,EAA8BC,QAA9B,CAAP;AACD,GAPO;;AAQV;AAAC,CAlKD;AChCA;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;;;AAUA;AAAA;AAAA;;;;;;AAWE,gBAAoBpB,MAApB,EAAmCqB,gBAAnC,EAA8D;AAA1C;AARZ,+BAA2C,EAA3C;AASN,QAAMlpB,MAAM,GAAG,KAAK6nB,MAAL,CAAY5S,cAAZ,EAAf;AAEA,QAAMkU,WAAW,GAAG,IAAIlI,aAAJ,CAAkBjhB,MAAM,CAACkV,QAAP,EAAlB,CAApB;AACA,QAAMsT,MAAM,GAAGxoB,MAAM,CAACopB,aAAP,EAAf;;;;;;AAMA,SAAKC,UAAL,GAAkB,IAAInG,aAAJ,CAAkBsF,MAAlB,CAAlB;AAEA,QAAMc,kBAAkB,GAAGJ,gBAAgB,CAACzG,cAAjB,EAA3B;AACA,QAAM8G,iBAAiB,GAAGL,gBAAgB,CAAC3G,aAAjB,EAA1B,CAb4D;;AAgB5D,QAAMjC,UAAU,GAAG6I,WAAW,CAAC/D,cAAZ,CACjB1V,YAAY,CAAChI,UADI,EAEjB4hB,kBAAkB,CAAC/I,OAAnB,EAFiB,EAGjB,IAHiB,CAAnB;AAKA,QAAMJ,SAAS,GAAGqI,MAAM,CAACpD,cAAP,CAChB1V,YAAY,CAAChI,UADG,EAEhB6hB,iBAAiB,CAAChJ,OAAlB,EAFgB,EAGhB,IAHgB,CAAlB;AAKA,QAAMyF,cAAc,GAAG,IAAIpG,SAAJ,CACrBU,UADqB,EAErBgJ,kBAAkB,CAACzJ,kBAAnB,EAFqB,EAGrBsJ,WAAW,CAACtD,YAAZ,EAHqB,CAAvB;AAKA,QAAMd,aAAa,GAAG,IAAInF,SAAJ,CACpBO,SADoB,EAEpBoJ,iBAAiB,CAAC1J,kBAAlB,EAFoB,EAGpB2I,MAAM,CAAC3C,YAAP,EAHoB,CAAtB;;;;;;AAUA,SAAKzD,UAAL,GAAkB,IAAIlC,SAAJ,CAAc6E,aAAd,EAA6BiB,cAA7B,CAAlB;;;;;;AAMA,SAAKwD,eAAL,GAAuB,IAAI1B,cAAJ,CAAmB,KAAKD,MAAxB,CAAvB;AACD;;;;;;AAKD4B;AACE,WAAO,KAAK5B,MAAZ;AACD,GAFD;;;;;;AAOA4B;AACE,WAAO,KAAKrH,UAAL,CAAgBK,cAAhB,GAAiClC,OAAjC,EAAP;AACD,GAFD;;;;;;;AAQAkJ,oDAAuBxuB,IAAvB,EAAiC;AAC/B,QAAMyuB,KAAK,GAAG,KAAKtH,UAAL,CAAgBQ,qBAAhB,EAAd;;AACA,QAAI8G,KAAJ,EAAW;;;AAGT,UACE,KAAK7B,MAAL,CAAY5S,cAAZ,GAA6B0U,YAA7B,MACC,CAAC1uB,IAAI,CAACmM,OAAL,EAAD,IAAmB,CAACsiB,KAAK,CAAC9Z,iBAAN,CAAwB3U,IAAI,CAACgC,QAAL,EAAxB,EAAyCmK,OAAzC,EAFvB,EAGE;AACA,eAAOsiB,KAAK,CAAC7Z,QAAN,CAAe5U,IAAf,CAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAbD;;;;;;AAkBAwuB;AACE,WAAO,KAAKG,mBAAL,CAAyBn1B,MAAzB,KAAoC,CAA3C;AACD,GAFD;;;;;;AAOAg1B,kDAAqBrV,iBAArB,EAAyD;AACvD,SAAKwV,mBAAL,CAAyBrxB,IAAzB,CAA8B6b,iBAA9B;AACD,GAFD;;;;;;;;AASAqV,qDACErV,iBADF,EAEEyV,WAFF,EAEqB;AAEnB,QAAMC,YAAY,GAAkB,EAApC;;AACA,QAAID,WAAJ,EAAiB;AACf10B,kBACEif,iBAAiB,IAAI,IADvBjf,EAEE,iDAFFA;AAIA,UAAM40B,MAAI,GAAG,KAAKlC,MAAL,CAAY5sB,IAAzB;AACA,WAAK2uB,mBAAL,CAAyB5M,OAAzB,CAAiC,wBAAY;AAC3C6M;AAAW;AAAA,UAAyBA,WAApC;AACA,YAAMG,UAAU,GAAGpB,YAAY,CAACqB,iBAAb,CAA+BJ,WAA/B,EAA4CE,MAA5C,CAAnB;;AACA,YAAIC,UAAJ,EAAgB;AACdF,sBAAY,CAACvxB,IAAb,CAAkByxB,UAAlB;AACD;AACF,OAND;AAOD;;AAED,QAAI5V,iBAAJ,EAAuB;AACrB,UAAI8V,SAAS,GAAG,EAAhB;;AACA,WAAK,IAAI11B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKo1B,mBAAL,CAAyBn1B,MAA7C,EAAqD,EAAED,CAAvD,EAA0D;AACxD,YAAM6mB,QAAQ,GAAG,KAAKuO,mBAAL,CAAyBp1B,CAAzB,CAAjB;;AACA,YAAI,CAAC6mB,QAAQ,CAAC8O,OAAT,CAAiB/V,iBAAjB,CAAL,EAA0C;AACxC8V,mBAAS,CAAC3xB,IAAV,CAAe8iB,QAAf;AACD,SAFD,MAEO,IAAIjH,iBAAiB,CAACgW,cAAlB,EAAJ,EAAwC;;AAE7CF,mBAAS,GAAGA,SAAS,CAACG,MAAV,CAAiB,KAAKT,mBAAL,CAAyBltB,KAAzB,CAA+BlI,CAAC,GAAG,CAAnC,CAAjB,CAAZ;AACA;AACD;AACF;;AACD,WAAKo1B,mBAAL,GAA2BM,SAA3B;AACD,KAbD,MAaO;AACL,WAAKN,mBAAL,GAA2B,EAA3B;AACD;;AACD,WAAOE,YAAP;AACD,GArCD;;;;;;;;;;;AA+CAL,4CACErG,SADF,EAEEC,WAFF,EAGEqE,mBAHF,EAGkC;AAEhC,QACEtE,SAAS,CAACrjB,IAAV,KAAmBkd,aAAa,CAACuC,KAAjC,IACA4D,SAAS,CAACjE,MAAV,CAAiB/B,OAAjB,KAA6B,IAF/B,EAGE;AACAjoB,kBACE,KAAKitB,UAAL,CAAgBQ,qBAAhB,EADFztB,EAEE,2DAFFA;AAIAA,kBACE,KAAKitB,UAAL,CAAgBsC,oBAAhB,EADFvvB,EAEE,yDAFFA;AAID;;AAED,QAAMguB,YAAY,GAAG,KAAKf,UAA1B;AACA,QAAMrY,MAAM,GAAG,KAAKsf,UAAL,CAAgBiB,cAAhB,CACbnH,YADa,EAEbC,SAFa,EAGbC,WAHa,EAIbqE,mBAJa,CAAf;AAMA,SAAK2B,UAAL,CAAgBkB,aAAhB,CAA8BxgB,MAAM,CAACgZ,SAArC;AAEA5tB,gBACE4U,MAAM,CAACgZ,SAAP,CAAiBN,cAAjB,GAAkC5C,kBAAlC,MACE,CAACsD,YAAY,CAACV,cAAb,GAA8B5C,kBAA9B,EAFL1qB,EAGE,yDAHFA;AAMA,SAAKitB,UAAL,GAAkBrY,MAAM,CAACgZ,SAAzB;AAEA,WAAO,KAAKyH,yBAAL,CACLzgB,MAAM,CAACiZ,OADF,EAELjZ,MAAM,CAACgZ,SAAP,CAAiBR,aAAjB,GAAiChC,OAAjC,EAFK,EAGL,IAHK,CAAP;AAKD,GAzCD;;;;;;;AA+CAkJ,8CAAiBb,YAAjB,EAAgD;AAC9C,QAAMzI,SAAS,GAAG,KAAKiC,UAAL,CAAgBG,aAAhB,EAAlB;AACA,QAAMkI,cAAc,GAAa,EAAjC;;AACA,QAAI,CAACtK,SAAS,CAACI,OAAV,GAAoBpZ,UAApB,EAAL,EAAuC;AACrC,UAAMujB,SAAS,GAAGvK,SAAS,CAACI,OAAV,EAAlB;AACAmK,eAAS,CAACra,YAAV,CAAuB7G,cAAvB,EAAuC,UAACvX,GAAD,EAAM4V,SAAN,EAAe;AACpD4iB,sBAAc,CAAClyB,IAAf,CAAoBkoB,MAAM,CAACe,gBAAP,CAAwBvvB,GAAxB,EAA6B4V,SAA7B,CAApB;AACD,OAFD;AAGD;;AACD,QAAIsY,SAAS,CAACN,kBAAV,EAAJ,EAAoC;AAClC4K,oBAAc,CAAClyB,IAAf,CAAoBkoB,MAAM,CAACkE,WAAP,CAAmBxE,SAAS,CAACI,OAAV,EAAnB,CAApB;AACD;;AACD,WAAO,KAAKiK,yBAAL,CACLC,cADK,EAELtK,SAAS,CAACI,OAAV,EAFK,EAGLqI,YAHK,CAAP;AAKD,GAjBD;;;;;;;;;;AA0BAa,uDACEzG,OADF,EAEE+E,UAFF,EAGE3T,iBAHF,EAGuC;AAErC,QAAMkU,aAAa,GAAGlU,iBAAiB,GACnC,CAACA,iBAAD,CADmC,GAEnC,KAAKwV,mBAFT;AAGA,WAAO,KAAKJ,eAAL,CAAqBmB,wBAArB,CACL3H,OADK,EAEL+E,UAFK,EAGLO,aAHK,CAAP;AAKD,GAbD;;AAcF;AAAC,CAvPD;AC5CA;;;;;;;;;;;;;;;;;;AA+BA,IAAIhS,wBAAJ;AAEA;;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;;;;;;;AAoBmB,iBAA2B,IAAIyF,GAAJ,EAA3B;AA2NlB;;AA9OC3f,wBAAWwuB,SAAX,EAAW,wBAAX,EAAiC;SAQjC;AACEz1B,kBAAOmhB,wBAAPnhB,EAA+B,kCAA/BA;AACA,aAAOmhB,wBAAP;AACD,KAXgC;SAAjC,UAAkC5P,GAAlC,EAA2D;AACzDvR,kBACE,CAACmhB,wBADHnhB,EAEE,iDAFFA;AAIAmhB,8BAAsB,GAAG5P,GAAzB4P;AACD,KANgC;oBAAA;;AAAA,GAAjC;;AAqBAsU;AACE,WAAO,KAAKC,KAAL,CAAW3O,IAAX,KAAoB,CAA3B;AACD,GAFD;;AAIA0O,iDACExH,SADF,EAEEC,WAFF,EAGEyH,sBAHF,EAGqC;;;AAEnC,QAAM1N,OAAO,GAAGgG,SAAS,CAACjE,MAAV,CAAiB/B,OAAjC;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAM2N,IAAI,GAAG,KAAKF,KAAL,CAAWl1B,GAAX,CAAeynB,OAAf,CAAb;AACAjoB,kBAAO41B,IAAI,IAAI,IAAf51B,EAAqB,8CAArBA;AACA,aAAO41B,IAAI,CAACT,cAAL,CACLlH,SADK,EAELC,WAFK,EAGLyH,sBAHK,CAAP;AAKD,KARD,MAQO;AACL,UAAI7C,MAAM,GAAY,EAAtB;;;AAEA,aAAmB,6BAAK4C,KAAL,CAAWlQ,MAAX,KAAmB7Z,cAAtC,EAAsC,QAAtC,EAAsCA,cAAtC,EAAwC;AAAnC,cAAMiqB,IAAI,WAAV;AACH9C,gBAAM,GAAGA,MAAM,CAACoC,MAAP,CACPU,IAAI,CAACT,cAAL,CAAoBlH,SAApB,EAA+BC,WAA/B,EAA4CyH,sBAA5C,CADO,CAAT;AAGD;;;;;;;;;;;;;AAED,aAAO7C,MAAP;AACD;AACF,GAzBD;;;;;;;;;;;;;AAqCA2C,uDACE7vB,KADF,EAEEqZ,iBAFF,EAGEiP,WAHF,EAIE2B,WAJF,EAKEgG,mBALF,EAK8B;AAE5B,QAAM5N,OAAO,GAAGriB,KAAK,CAACof,eAAN,EAAhB;AACA,QAAI4Q,IAAI,GAAG,KAAKF,KAAL,CAAWl1B,GAAX,CAAeynB,OAAf,CAAX;;AACA,QAAI,CAAC2N,IAAL,EAAW;;AAET,UAAIhD,UAAU,GAAG1E,WAAW,CAAC5I,sBAAZ,CACfuQ,mBAAmB,GAAGhG,WAAH,GAAiB,IADrB,CAAjB;AAGA,UAAIiG,kBAAkB,GAAG,KAAzB;;AACA,UAAIlD,UAAJ,EAAgB;AACdkD,0BAAkB,GAAG,IAArB;AACD,OAFD,MAEO,IAAIjG,WAAW,YAAYtV,YAA3B,EAAyC;AAC9CqY,kBAAU,GAAG1E,WAAW,CAAC8B,yBAAZ,CAAsCH,WAAtC,CAAb;AACAiG,0BAAkB,GAAG,KAArB;AACD,OAHM,MAGA;AACLlD,kBAAU,GAAGrY,YAAY,CAAChI,UAA1B;AACAujB,0BAAkB,GAAG,KAArB;AACD;;AACD,UAAMlI,SAAS,GAAG,IAAI7C,SAAJ,CAChB,IAAIN,SAAJ;;AACuBmI,gBADvB,EAEEkD,kBAFF,EAGE,KAHF,CADgB,EAMhB,IAAIrL,SAAJ;;AACuBoF,iBADvB,EAEEgG,mBAFF,EAGE,KAHF,CANgB,CAAlB;AAYAD,UAAI,GAAG,IAAItB,IAAJ,CAAS1uB,KAAT,EAAgBgoB,SAAhB,CAAP;AACA,WAAK8H,KAAL,CAAWp1B,GAAX,CAAe2nB,OAAf,EAAwB2N,IAAxB;AACD,KAjC2B;;;AAoC5BA,QAAI,CAACG,oBAAL,CAA0B9W,iBAA1B;AACA,WAAO2W,IAAI,CAACI,gBAAL,CAAsB/W,iBAAtB,CAAP;AACD,GA3CD;;;;;;;;;;;;;;AAwDAwW,0DACE7vB,KADF,EAEEqZ,iBAFF,EAGEyV,WAHF,EAGqB;;;AAEnB,QAAMzM,OAAO,GAAGriB,KAAK,CAACof,eAAN,EAAhB;AACA,QAAMiR,OAAO,GAAY,EAAzB;AACA,QAAItB,YAAY,GAAY,EAA5B;AACA,QAAMuB,eAAe,GAAG,KAAKC,eAAL,EAAxB;;AACA,QAAIlO,OAAO,KAAK,SAAhB,EAA2B;;;AAEzB,aAAkC,6BAAKyN,KAAL,CAAWU,OAAX,KAAoBzqB,cAAtD,EAAsD,QAAtD,EAAsDA,cAAtD,EAAwD;AAA7C;AAAA,cAAC0qB,mBAAD;AAAA,cAAcT,YAAd;;AACTjB,sBAAY,GAAGA,YAAY,CAACO,MAAb,CACbU,IAAI,CAACU,uBAAL,CAA6BrX,iBAA7B,EAAgDyV,WAAhD,CADa,CAAf;;AAGA,cAAIkB,IAAI,CAAC3jB,OAAL,EAAJ,EAAoB;AAClB,iBAAKyjB,KAAL,CAAWjO,MAAX,CAAkB4O,WAAlB,EADkB;;AAIlB,gBACE,CAACT,IAAI,CACFW,QADF,GAEEzW,cAFF,GAGE0U,YAHF,EADH,EAKE;AACAyB,qBAAO,CAAC7yB,IAAR,CAAawyB,IAAI,CAACW,QAAL,EAAb;AACD;AACF;AACF;;;;;;;;;;;;AACF,KApBD,MAoBO;;AAEL,UAAMX,IAAI,GAAG,KAAKF,KAAL,CAAWl1B,GAAX,CAAeynB,OAAf,CAAb;;AACA,UAAI2N,IAAJ,EAAU;AACRjB,oBAAY,GAAGA,YAAY,CAACO,MAAb,CACbU,IAAI,CAACU,uBAAL,CAA6BrX,iBAA7B,EAAgDyV,WAAhD,CADa,CAAf;;AAGA,YAAIkB,IAAI,CAAC3jB,OAAL,EAAJ,EAAoB;AAClB,eAAKyjB,KAAL,CAAWjO,MAAX,CAAkBQ,OAAlB,EADkB;;AAIlB,cACE,CAAC2N,IAAI,CACFW,QADF,GAEEzW,cAFF,GAGE0U,YAHF,EADH,EAKE;AACAyB,mBAAO,CAAC7yB,IAAR,CAAawyB,IAAI,CAACW,QAAL,EAAb;AACD;AACF;AACF;AACF;;AAED,QAAIL,eAAe,IAAI,CAAC,KAAKC,eAAL,EAAxB,EAAgD;;AAE9CF,aAAO,CAAC7yB,IAAR,CACE,IAAIqyB,SAAS,CAACtU,sBAAd,CAAqCvb,KAAK,CAACwb,IAA3C,EAAiDxb,KAAK,CAACE,IAAvD,CADF;AAGD;;AAED,WAAO;AAAEmwB,aAAO,SAAT;AAAWnD,YAAM,EAAE6B;AAAnB,KAAP;AACD,GA5DD;;AA8DAc;;;AACE,QAAM7gB,MAAM,GAAG,EAAf;;;AACA,WAAmB,6BAAK8gB,KAAL,CAAWlQ,MAAX,KAAmB7Z,cAAtC,EAAsC,QAAtC,EAAsCA,cAAtC,EAAwC;AAAnC,YAAMiqB,IAAI,WAAV;;AACH,YACE,CAACA,IAAI,CACFW,QADF,GAEEzW,cAFF,GAGE0U,YAHF,EADH,EAKE;AACA5f,gBAAM,CAACxR,IAAP,CAAYwyB,IAAZ;AACD;AACF;;;;;;;;;;;;;AACD,WAAOhhB,MAAP;AACD,GAbD;;;;;;;AAmBA6gB,yDAAuB3vB,IAAvB,EAAiC;;;AAC/B,QAAI+pB,WAAW,GAAgB,IAA/B;;;AACA,WAAmB,6BAAK6F,KAAL,CAAWlQ,MAAX,KAAmB7Z,cAAtC,EAAsC,QAAtC,EAAsCA,cAAtC,EAAwC;AAAnC,YAAMiqB,IAAI,WAAV;AACH/F,mBAAW,GAAGA,WAAW,IAAI+F,IAAI,CAACY,sBAAL,CAA4B1wB,IAA5B,CAA7B;AACD;;;;;;;;;;;;;AACD,WAAO+pB,WAAP;AACD,GAND;;AAQA4F,+CAAa7vB,KAAb,EAAyB;AACvB,QAAMiF,MAAM,GAAGjF,KAAK,CAACka,cAAN,EAAf;;AACA,QAAIjV,MAAM,CAAC2pB,YAAP,EAAJ,EAA2B;AACzB,aAAO,KAAKiC,eAAL,EAAP;AACD,KAFD,MAEO;AACL,UAAMxO,OAAO,GAAGriB,KAAK,CAACof,eAAN,EAAhB;AACA,aAAO,KAAK0Q,KAAL,CAAWl1B,GAAX,CAAeynB,OAAf,CAAP;AACD;AACF,GARD;;AAUAwN,qDAAmB7vB,KAAnB,EAA+B;AAC7B,WAAO,KAAK8wB,YAAL,CAAkB9wB,KAAlB,KAA4B,IAAnC;AACD,GAFD;;AAIA6vB;AACE,WAAO,KAAKgB,eAAL,MAA0B,IAAjC;AACD,GAFD;;AAIAhB;;;;AACE,WAAmB,6BAAKC,KAAL,CAAWlQ,MAAX,KAAmB7Z,cAAtC,EAAsC,QAAtC,EAAsCA,cAAtC,EAAwC;AAAnC,YAAMiqB,IAAI,WAAV;;AACH,YACEA,IAAI,CACDW,QADH,GAEGzW,cAFH,GAGG0U,YAHH,EADF,EAKE;AACA,iBAAOoB,IAAP;AACD;AACF;;;;;;;;;;;;;AACD,WAAO,IAAP;AACD,GAZD;;AAaF;AAAC,CA/OD;AC3CA;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;AAMA;AAAA;AAAA;AACE,yBAAoBe,UAApB,EAAmD;AAA/B;AAAmC;;AAIvDC,+CAAS9wB,IAAT,EAAqB6K,IAArB,EAA+B;AAC7B,QAAI7K,IAAI,CAACmM,OAAL,EAAJ,EAAoB;AAClB,aAAO,IAAI2kB,aAAJ,CAAkB,IAAI/N,aAAJ,CAAkBlY,IAAlB,CAAlB,CAAP;AACD,KAFD,MAEO;AACL,UAAMkmB,QAAQ,GAAG,KAAKF,UAAL,CAAgBG,wBAAhB,CAAyChxB,IAAzC,CAAjB;;AACA,UAAI+wB,QAAQ,IAAI,IAAhB,EAAsB;AACpB,YAAME,YAAY,GAAGF,QAAQ,CAAC/wB,IAA9B;AACA,YAAI/I,KAAK,GAAG85B,QAAQ,CAAC95B,KAArB;AACA,YAAMiL,YAAY,GAAGd,IAAI,CAACc,YAAL,CAAkB+uB,YAAlB,EAAgCjxB,IAAhC,CAArB;AACA/I,aAAK,GAAGA,KAAK,CAACgW,WAAN,CAAkB/K,YAAlB,EAAgC2I,IAAhC,CAAR;AACA,eAAO,IAAIimB,aAAJ,CAAkB,KAAKD,UAAL,CAAgBr2B,GAAhB,CAAoBy2B,YAApB,EAAkCh6B,KAAlC,CAAlB,CAAP;AACD,OAND,MAMO;AACL,YAAM0rB,OAAO,GAAG,IAAII,aAAJ,CAAkBlY,IAAlB,CAAhB;AACA,YAAMqmB,YAAY,GAAG,KAAKL,UAAL,CAAgBrN,OAAhB,CAAwBxjB,IAAxB,EAA8B2iB,OAA9B,CAArB;AACA,eAAO,IAAImO,aAAJ,CAAkBI,YAAlB,CAAP;AACD;AACF;AACF,GAjBD;;AAmBAJ,gDAAU9wB,IAAV,EAAsBmxB,OAAtB,EAAuD;AACrD,QAAIC,QAAQ,GAAG,IAAf;AACAtzB,QAAI,CAACqzB,OAAD,EAAU,UAACjQ,QAAD,EAAmBrW,IAAnB,EAA6B;AACzCumB,cAAQ,GAAGA,QAAQ,CAACC,QAAT,CAAkBrxB,IAAI,CAACmD,KAAL,CAAW+d,QAAX,CAAlB,EAAwCrW,IAAxC,CAAX;AACD,KAFG,CAAJ;AAGA,WAAOumB,QAAP;AACD,GAND;;;;;;;;;;AAeAN,kDAAY9wB,IAAZ,EAAsB;AACpB,QAAIA,IAAI,CAACmM,OAAL,EAAJ,EAAoB;AAClB,aAAO2kB,aAAa,CAAClO,KAArB;AACD,KAFD,MAEO;AACL,UAAMsO,YAAY,GAAG,KAAKL,UAAL,CAAgBrN,OAAhB,CAAwBxjB,IAAxB,EAA8B+iB,aAAa,CAACH,KAA5C,CAArB;AACA,aAAO,IAAIkO,aAAJ,CAAkBI,YAAlB,CAAP;AACD;AACF,GAPD;;;;;;;;;;AAgBAJ,uDAAiB9wB,IAAjB,EAA2B;AACzB,WAAO,KAAKsxB,eAAL,CAAqBtxB,IAArB,KAA8B,IAArC;AACD,GAFD;;;;;;;;;;AAWA8wB,sDAAgB9wB,IAAhB,EAA0B;AACxB,QAAM+wB,QAAQ,GAAG,KAAKF,UAAL,CAAgBG,wBAAhB,CAAyChxB,IAAzC,CAAjB;;AACA,QAAI+wB,QAAQ,IAAI,IAAhB,EAAsB;AACpB,aAAO,KAAKF,UAAL,CACJn2B,GADI,CACAq2B,QAAQ,CAAC/wB,IADT,EAEJ4U,QAFI,CAEKxT,IAAI,CAACc,YAAL,CAAkB6uB,QAAQ,CAAC/wB,IAA3B,EAAiCA,IAAjC,CAFL,CAAP;AAGD,KAJD,MAIO;AACL,aAAO,IAAP;AACD;AACF,GATD;;;;;;;;AAgBA8wB;AACE,QAAM9P,QAAQ,GAAgB,EAA9B;AACA,QAAMnW,IAAI,GAAG,KAAKgmB,UAAL,CAAgB55B,KAA7B;;AACA,QAAI4T,IAAI,IAAI,IAAZ,EAAkB;;AAEhB,UAAI,CAACA,IAAI,CAACqB,UAAL,EAAL,EAAwB;AACrBrB,YAAqB,CAACuK,YAAtB,CACC7G,cADD,EAEC,UAAC5B,SAAD,EAAYC,SAAZ,EAAqB;AACnBoU,kBAAQ,CAAC1jB,IAAT,CAAc,IAAIwN,SAAJ,CAAc6B,SAAd,EAAyBC,SAAzB,CAAd;AACD,SAJF;AAMF;AACF,KAVD,MAUO;AACL,WAAKikB,UAAL,CAAgB7P,QAAhB,CAAyB5R,gBAAzB,CAA0C,UAACzC,SAAD,EAAY0F,SAAZ,EAAqB;AAC7D,YAAIA,SAAS,CAACpb,KAAV,IAAmB,IAAvB,EAA6B;AAC3B+pB,kBAAQ,CAAC1jB,IAAT,CAAc,IAAIwN,SAAJ,CAAc6B,SAAd,EAAyB0F,SAAS,CAACpb,KAAnC,CAAd;AACD;AACF,OAJD;AAKD;;AACD,WAAO+pB,QAAP;AACD,GArBD;;AAuBA8P,yDAAmB9wB,IAAnB,EAA6B;AAC3B,QAAIA,IAAI,CAACmM,OAAL,EAAJ,EAAoB;AAClB,aAAO,IAAP;AACD,KAFD,MAEO;AACL,UAAMolB,aAAa,GAAG,KAAKD,eAAL,CAAqBtxB,IAArB,CAAtB;;AACA,UAAIuxB,aAAa,IAAI,IAArB,EAA2B;AACzB,eAAO,IAAIT,aAAJ,CAAkB,IAAI/N,aAAJ,CAAkBwO,aAAlB,CAAlB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAIT,aAAJ,CAAkB,KAAKD,UAAL,CAAgBlO,OAAhB,CAAwB3iB,IAAxB,CAAlB,CAAP;AACD;AACF;AACF,GAXD;;;;;;;AAiBA8wB;AACE,WAAO,KAAKD,UAAL,CAAgB1kB,OAAhB,EAAP;AACD,GAFD;;;;;;;;;AAUA2kB,4CAAMjmB,IAAN,EAAgB;AACd,WAAO2mB,iBAAiB,CAACpwB,IAAI,CAACwhB,KAAN,EAAa,KAAKiO,UAAlB,EAA8BhmB,IAA9B,CAAxB;AACD,GAFD;;AAjIOimB,wBAAQ,IAAIA,aAAJ,CAAkB,IAAI/N,aAAJ,CAAkB,IAAlB,CAAlB,CAAR;AAoIT;AAvIA;;AAyIA,SAASyO,iBAAT,CACEtvB,YADF,EAEEuvB,SAFF,EAGE5mB,IAHF,EAGY;AAEV,MAAI4mB,SAAS,CAACx6B,KAAV,IAAmB,IAAvB,EAA6B;;AAE3B,WAAO4T,IAAI,CAACoC,WAAL,CAAiB/K,YAAjB,EAA+BuvB,SAAS,CAACx6B,KAAzC,CAAP;AACD,GAHD,MAGO;AACL,QAAIy6B,eAAa,GAAG,IAApB;AACAD,aAAS,CAACzQ,QAAV,CAAmB5R,gBAAnB,CAAoC,UAAC8R,QAAD,EAAW7O,SAAX,EAAoB;AACtD,UAAI6O,QAAQ,KAAK,WAAjB,EAA8B;;;AAG5BhnB,oBACEmY,SAAS,CAACpb,KAAV,KAAoB,IADtBiD,EAEE,2CAFFA;AAIAw3B,uBAAa,GAAGrf,SAAS,CAACpb,KAA1B;AACD,OARD,MAQO;AACL4T,YAAI,GAAG2mB,iBAAiB,CAACtvB,YAAY,CAACiB,KAAb,CAAmB+d,QAAnB,CAAD,EAA+B7O,SAA/B,EAA0CxH,IAA1C,CAAxB;AACD;AACF,KAZD,EAFK;;AAgBL,QAAI,CAACA,IAAI,CAAC+J,QAAL,CAAc1S,YAAd,EAA4BiK,OAA5B,EAAD,IAA0CulB,eAAa,KAAK,IAAhE,EAAsE;AACpE7mB,UAAI,GAAGA,IAAI,CAACoC,WAAL,CAAiB/K,YAAY,CAACiB,KAAb,CAAmB,WAAnB,CAAjB,EAAkDuuB,eAAlD,CAAP;AACD;;AACD,WAAO7mB,IAAP;AACD;AACH;ACrMA;;;;;;;;;;;;;;;;;AAwCA;;;;;;;;;AAOA;AAAA;AAAA;AAAA;;;;;;;;AAQU,0BAAgCimB,aAAa,CAAClO,KAA9C;;;;;;;;;;AAUA,sBAA4B,EAA5B;AAEA,wBAAe,CAAC,CAAhB;AAghBT;;;;;;;;;AAxgBC+O,8CAAY3xB,IAAZ,EAAsB;AACpB,WAAO,IAAI4xB,YAAJ,CAAiB5xB,IAAjB,EAAuB,IAAvB,CAAP;AACD,GAFD;;;;;;;;;;;AAYA2xB,+CAAa3xB,IAAb,EAAyBmY,IAAzB,EAAqC0Z,OAArC,EAAsDC,OAAtD,EAAuE;AACrE53B,gBACE23B,OAAO,GAAG,KAAKE,YADjB73B,EAEE,8CAFFA;;AAIA,QAAI43B,OAAO,KAAKrqB,SAAhB,EAA2B;AACzBqqB,aAAO,GAAG,IAAV;AACD;;AACD,SAAKE,UAAL,CAAgB10B,IAAhB,CAAqB;AACnB0C,UAAI,MADe;AAEnBmY,UAAI,MAFe;AAGnB0Z,aAAO,SAHY;AAInBC,aAAO;AAJY,KAArB;;AAOA,QAAIA,OAAJ,EAAa;AACX,WAAKG,cAAL,GAAsB,KAAKA,cAAL,CAAoBZ,QAApB,CAA6BrxB,IAA7B,EAAmCmY,IAAnC,CAAtB;AACD;;AACD,SAAK4Z,YAAL,GAAoBF,OAApB;AACD,GAnBD;;;;;;;;;;AA4BAF,2CACE3xB,IADF,EAEEyrB,eAFF,EAGEoG,OAHF,EAGiB;AAEf33B,gBACE23B,OAAO,GAAG,KAAKE,YADjB73B,EAEE,8CAFFA;AAIA,SAAK83B,UAAL,CAAgB10B,IAAhB,CAAqB;AACnB0C,UAAI,MADe;AAEnBghB,cAAQ,EAAEyK,eAFS;AAGnBoG,aAAO,SAHY;AAInBC,aAAO,EAAE;AAJU,KAArB;AAOA,SAAKG,cAAL,GAAsB,KAAKA,cAAL,CAAoBC,SAApB,CAA8BlyB,IAA9B,EAAoCyrB,eAApC,CAAtB;AACA,SAAKsG,YAAL,GAAoBF,OAApB;AACD,GAlBD;;;;;;;AAwBAF,2CAASE,OAAT,EAAwB;AACtB,SAAK,IAAIt4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKy4B,UAAL,CAAgBx4B,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,UAAM44B,MAAM,GAAG,KAAKH,UAAL,CAAgBz4B,CAAhB,CAAf;;AACA,UAAI44B,MAAM,CAACN,OAAP,KAAmBA,OAAvB,EAAgC;AAC9B,eAAOM,MAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD,GARD;;;;;;;;;;;AAkBAR,8CAAYE,OAAZ,EAA2B;;;;;AAA3B;;AAME,QAAMpc,GAAG,GAAG,KAAKuc,UAAL,CAAgBI,SAAhB,CAA0B,aAAC;AACrC,aAAO/zB,CAAC,CAACwzB,OAAF,KAAcA,OAArB;AACD,KAFW,CAAZ;AAGA33B,gBAAOub,GAAG,IAAI,CAAdvb,EAAiB,8CAAjBA;AACA,QAAMm4B,aAAa,GAAG,KAAKL,UAAL,CAAgBvc,GAAhB,CAAtB;AACA,SAAKuc,UAAL,CAAgBM,MAAhB,CAAuB7c,GAAvB,EAA4B,CAA5B;AAEA,QAAI8c,sBAAsB,GAAGF,aAAa,CAACP,OAA3C;AACA,QAAIU,mCAAmC,GAAG,KAA1C;AAEA,QAAIj5B,CAAC,GAAG,KAAKy4B,UAAL,CAAgBx4B,MAAhB,GAAyB,CAAjC;;AAEA,WAAO+4B,sBAAsB,IAAIh5B,CAAC,IAAI,CAAtC,EAAyC;AACvC,UAAMk5B,YAAY,GAAG,KAAKT,UAAL,CAAgBz4B,CAAhB,CAArB;;AACA,UAAIk5B,YAAY,CAACX,OAAjB,EAA0B;AACxB,YACEv4B,CAAC,IAAIkc,GAAL,IACA,KAAKid,mBAAL,CAAyBD,YAAzB,EAAuCJ,aAAa,CAACryB,IAArD,CAFF,EAGE;;AAEAuyB,gCAAsB,GAAG,KAAzB;AACD,SAND,MAMO,IAAIF,aAAa,CAACryB,IAAd,CAAmBlI,QAAnB,CAA4B26B,YAAY,CAACzyB,IAAzC,CAAJ,EAAoD;;AAEzDwyB,6CAAmC,GAAG,IAAtC;AACD;AACF;;AACDj5B,OAAC;AACF;;AAED,QAAI,CAACg5B,sBAAL,EAA6B;AAC3B,aAAO,KAAP;AACD,KAFD,MAEO,IAAIC,mCAAJ,EAAyC;;AAE9C,WAAKG,UAAL;AACA,aAAO,IAAP;AACD,KAJM,MAIA;;AAEL,UAAIN,aAAa,CAACla,IAAlB,EAAwB;AACtB,aAAK8Z,cAAL,GAAsB,KAAKA,cAAL,CAAoBW,WAApB,CACpBP,aAAa,CAACryB,IADM,CAAtB;AAGD,OAJD,MAIO;AACL,YAAMghB,QAAQ,GAAGqR,aAAa,CAACrR,QAA/B;AACAljB,YAAI,CAACkjB,QAAD,EAAW,UAACrU,SAAD,EAAkB;AAC/BuH,eAAI,CAAC+d,cAAL,GAAsB/d,KAAI,CAAC+d,cAAL,CAAoBW,WAApB,CACpBP,aAAa,CAACryB,IAAd,CAAmBmD,KAAnB,CAAyBwJ,SAAzB,CADoB,CAAtB;AAGD,SAJG,CAAJ;AAKD;;AACD,aAAO,IAAP;AACD;AACF,GAzDD;;;;;;;;;;AAkEAglB,uDAAqB3xB,IAArB,EAA+B;AAC7B,WAAO,KAAKiyB,cAAL,CAAoBX,eAApB,CAAoCtxB,IAApC,CAAP;AACD,GAFD;;;;;;;;;;;;;AAcA2xB,yDACEkB,QADF,EAEEpG,mBAFF,EAGEqG,iBAHF,EAIEC,mBAJF,EAI+B;AAE7B,QAAI,CAACD,iBAAD,IAAsB,CAACC,mBAA3B,EAAgD;AAC9C,UAAMxB,aAAa,GAAG,KAAKU,cAAL,CAAoBX,eAApB,CAAoCuB,QAApC,CAAtB;;AACA,UAAItB,aAAa,IAAI,IAArB,EAA2B;AACzB,eAAOA,aAAP;AACD,OAFD,MAEO;AACL,YAAMyB,QAAQ,GAAG,KAAKf,cAAL,CAAoBgB,kBAApB,CAAuCJ,QAAvC,CAAjB;;AACA,YAAIG,QAAQ,CAAC7mB,OAAT,EAAJ,EAAwB;AACtB,iBAAOsgB,mBAAP;AACD,SAFD,MAEO,IACLA,mBAAmB,IAAI,IAAvB,IACA,CAACuG,QAAQ,CAACE,gBAAT,CAA0B9xB,IAAI,CAACwhB,KAA/B,CAFI,EAGL;;AAEA,iBAAO,IAAP;AACD,SANM,MAMA;AACL,cAAMuQ,YAAY,GAAG1G,mBAAmB,IAAIhY,YAAY,CAAChI,UAAzD;AACA,iBAAOumB,QAAQ,CAACp5B,KAAT,CAAeu5B,YAAf,CAAP;AACD;AACF;AACF,KAnBD,MAmBO;AACL,UAAMtK,KAAK,GAAG,KAAKoJ,cAAL,CAAoBgB,kBAApB,CAAuCJ,QAAvC,CAAd;;AACA,UAAI,CAACE,mBAAD,IAAwBlK,KAAK,CAAC1c,OAAN,EAA5B,EAA6C;AAC3C,eAAOsgB,mBAAP;AACD,OAFD,MAEO;;AAEL,YACE,CAACsG,mBAAD,IACAtG,mBAAmB,IAAI,IADvB,IAEA,CAAC5D,KAAK,CAACqK,gBAAN,CAAuB9xB,IAAI,CAACwhB,KAA5B,CAHH,EAIE;AACA,iBAAO,IAAP;AACD,SAND,MAMO;AACL,cAAM2K,MAAM,GAAG,UAAS6F,KAAT,EAA2B;AACxC,mBACE,CAACA,KAAK,CAACtB,OAAN,IAAiBiB,mBAAlB,MACC,CAACD,iBAAD,IACC,CAAC,CAACA,iBAAiB,CAACz3B,OAAlB,CAA0B+3B,KAAK,CAACvB,OAAhC,CAFJ,MAGCuB,KAAK,CAACpzB,IAAN,CAAWlI,QAAX,CAAoB+6B,QAApB,KAAiCA,QAAQ,CAAC/6B,QAAT,CAAkBs7B,KAAK,CAACpzB,IAAxB,CAHlC,CADF;AAMD,WAPD;;AAQA,cAAMqzB,WAAW,GAAG1B,SAAS,CAAC2B,UAAV,CAClB,KAAKtB,UADa,EAElBzE,MAFkB,EAGlBsF,QAHkB,CAApB;AAKA,cAAMM,YAAY,GAAG1G,mBAAmB,IAAIhY,YAAY,CAAChI,UAAzD;AACA,iBAAO4mB,WAAW,CAACz5B,KAAZ,CAAkBu5B,YAAlB,CAAP;AACD;AACF;AACF;AACF,GAxDD;;;;;;;;;;;AAkEAxB,4DACEkB,QADF,EAEEU,sBAFF,EAE6C;AAE3C,QAAIvJ,gBAAgB,GAAGvV,YAAY,CAAChI,UAApC;AACA,QAAM+mB,WAAW,GAAG,KAAKvB,cAAL,CAAoBX,eAApB,CAAoCuB,QAApC,CAApB;;AACA,QAAIW,WAAJ,EAAiB;AACf,UAAI,CAACA,WAAW,CAACtnB,UAAZ,EAAL,EAA+B;;AAE7BsnB,mBAAW,CAACpe,YAAZ,CAAyB7G,cAAzB,EAAyC,UAAC5B,SAAD,EAAYqW,SAAZ,EAAqB;AAC5DgH,0BAAgB,GAAGA,gBAAgB,CAACjd,oBAAjB,CACjBJ,SADiB,EAEjBqW,SAFiB,CAAnB;AAID,SALD;AAMD;;AACD,aAAOgH,gBAAP;AACD,KAXD,MAWO,IAAIuJ,sBAAJ,EAA4B;;;AAGjC,UAAME,OAAK,GAAG,KAAKxB,cAAL,CAAoBgB,kBAApB,CAAuCJ,QAAvC,CAAd;AACAU,4BAAsB,CAACne,YAAvB,CACE7G,cADF,EAEE,UAAC5B,SAAD,EAAYC,SAAZ,EAAqB;AACnB,YAAM/B,IAAI,GAAG4oB,OAAK,CACfR,kBADU,CACS,IAAI7xB,IAAJ,CAASuL,SAAT,CADT,EAEV/S,KAFU,CAEJgT,SAFI,CAAb;AAGAod,wBAAgB,GAAGA,gBAAgB,CAACjd,oBAAjB,CACjBJ,SADiB,EAEjB9B,IAFiB,CAAnB;AAID,OAVH,EAJiC;;AAiBjC4oB,aAAK,CAACC,mBAAN,GAA4B3R,OAA5B,CAAoC,qBAAS;AAC3CiI,wBAAgB,GAAGA,gBAAgB,CAACjd,oBAAjB,CACjB+E,SAAS,CAACra,IADO,EAEjBqa,SAAS,CAACjH,IAFO,CAAnB;AAID,OALD;AAMA,aAAOmf,gBAAP;AACD,KAxBM,MAwBA;;;AAGL,UAAMnB,KAAK,GAAG,KAAKoJ,cAAL,CAAoBgB,kBAApB,CAAuCJ,QAAvC,CAAd;AACAhK,WAAK,CAAC6K,mBAAN,GAA4B3R,OAA5B,CAAoC,qBAAS;AAC3CiI,wBAAgB,GAAGA,gBAAgB,CAACjd,oBAAjB,CACjB+E,SAAS,CAACra,IADO,EAEjBqa,SAAS,CAACjH,IAFO,CAAnB;AAID,OALD;AAMA,aAAOmf,gBAAP;AACD;AACF,GArDD;;;;;;;;;;;;;;;;;;;;;;;AA2EA2H,qEACEkB,QADF,EAEEha,SAFF,EAGE8a,iBAHF,EAIEC,kBAJF,EAIiC;AAE/B15B,gBACEy5B,iBAAiB,IAAIC,kBADvB15B,EAEE,2DAFFA;AAIA,QAAM8F,IAAI,GAAG6yB,QAAQ,CAAC1vB,KAAT,CAAe0V,SAAf,CAAb;;AACA,QAAI,KAAKoZ,cAAL,CAAoBiB,gBAApB,CAAqClzB,IAArC,CAAJ,EAAgD;;;AAG9C,aAAO,IAAP;AACD,KAJD,MAIO;;AAEL,UAAM6zB,UAAU,GAAG,KAAK5B,cAAL,CAAoBgB,kBAApB,CAAuCjzB,IAAvC,CAAnB;;AACA,UAAI6zB,UAAU,CAAC1nB,OAAX,EAAJ,EAA0B;;AAExB,eAAOynB,kBAAkB,CAAChf,QAAnB,CAA4BiE,SAA5B,CAAP;AACD,OAHD,MAGO;;;;;;;AAOL,eAAOgb,UAAU,CAACj6B,KAAX,CAAiBg6B,kBAAkB,CAAChf,QAAnB,CAA4BiE,SAA5B,CAAjB,CAAP;AACD;AACF;AACF,GA/BD;;;;;;;;;;;;AA0CA8Y,oDACEkB,QADF,EAEE3R,QAFF,EAGE0S,kBAHF,EAG+B;AAE7B,QAAM5zB,IAAI,GAAG6yB,QAAQ,CAAC1vB,KAAT,CAAe+d,QAAf,CAAb;AACA,QAAMqQ,aAAa,GAAG,KAAKU,cAAL,CAAoBX,eAApB,CAAoCtxB,IAApC,CAAtB;;AACA,QAAIuxB,aAAa,IAAI,IAArB,EAA2B;AACzB,aAAOA,aAAP;AACD,KAFD,MAEO;AACL,UAAIqC,kBAAkB,CAAC/O,kBAAnB,CAAsC3D,QAAtC,CAAJ,EAAqD;AACnD,YAAM2S,UAAU,GAAG,KAAK5B,cAAL,CAAoBgB,kBAApB,CAAuCjzB,IAAvC,CAAnB;AACA,eAAO6zB,UAAU,CAACj6B,KAAX,CACLg6B,kBAAkB,CAACtO,OAAnB,GAA6B3Q,iBAA7B,CAA+CuM,QAA/C,CADK,CAAP;AAGD,OALD,MAKO;AACL,eAAO,IAAP;AACD;AACF;AACF,GAnBD;;;;;;;;AA0BAyQ,iDAAe3xB,IAAf,EAAyB;AACvB,WAAO,KAAKiyB,cAAL,CAAoBX,eAApB,CAAoCtxB,IAApC,CAAP;AACD,GAFD;;;;;;;AAQA2xB,mDACEkB,QADF,EAEEnL,kBAFF,EAGExR,SAHF,EAIE/G,KAJF,EAKEpQ,OALF,EAMEmO,KANF,EAMc;AAEZ,QAAI4mB,SAAJ;AACA,QAAMjL,KAAK,GAAG,KAAKoJ,cAAL,CAAoBgB,kBAApB,CAAuCJ,QAAvC,CAAd;AACA,QAAMtB,aAAa,GAAG1I,KAAK,CAACyI,eAAN,CAAsBlwB,IAAI,CAACwhB,KAA3B,CAAtB;;AACA,QAAI2O,aAAa,IAAI,IAArB,EAA2B;AACzBuC,eAAS,GAAGvC,aAAZ;AACD,KAFD,MAEO,IAAI7J,kBAAkB,IAAI,IAA1B,EAAgC;AACrCoM,eAAS,GAAGjL,KAAK,CAACjvB,KAAN,CAAY8tB,kBAAZ,CAAZ;AACD,KAFM,MAEA;;AAEL,aAAO,EAAP;AACD;;AACDoM,aAAS,GAAGA,SAAS,CAACrN,SAAV,CAAoBvZ,KAApB,CAAZ;;AACA,QAAI,CAAC4mB,SAAS,CAAC3nB,OAAV,EAAD,IAAwB,CAAC2nB,SAAS,CAAC5nB,UAAV,EAA7B,EAAqD;AACnD,UAAM0b,KAAK,GAAG,EAAd;AACA,UAAMplB,GAAG,GAAG0K,KAAK,CAAC0G,UAAN,EAAZ;AACA,UAAMP,IAAI,GAAGtU,OAAO,GACf+0B,SAA0B,CAACzd,sBAA3B,CAAkDH,SAAlD,EAA6DhJ,KAA7D,CADe,GAEf4mB,SAA0B,CAAC9d,eAA3B,CAA2CE,SAA3C,EAAsDhJ,KAAtD,CAFL;AAGA,UAAIsG,IAAI,GAAGH,IAAI,CAACI,OAAL,EAAX;;AACA,aAAOD,IAAI,IAAIoU,KAAK,CAACpuB,MAAN,GAAe2V,KAA9B,EAAqC;AACnC,YAAI3M,GAAG,CAACgR,IAAD,EAAO0C,SAAP,CAAH,KAAyB,CAA7B,EAAgC;AAC9B0R,eAAK,CAACtqB,IAAN,CAAWkW,IAAX;AACD;;AACDA,YAAI,GAAGH,IAAI,CAACI,OAAL,EAAP;AACD;;AACD,aAAOmU,KAAP;AACD,KAdD,MAcO;AACL,aAAO,EAAP;AACD;AACF,GArCD;;AAuCQ+J,4CAAR,UAA4BoC,WAA5B,EAAsD/zB,IAAtD,EAAgE;AAC9D,QAAI+zB,WAAW,CAAC5b,IAAhB,EAAsB;AACpB,aAAO4b,WAAW,CAAC/zB,IAAZ,CAAiBlI,QAAjB,CAA0BkI,IAA1B,CAAP;AACD,KAFD,MAEO;AACL,WAAK,IAAM2M,SAAX,IAAwBonB,WAAW,CAAC/S,QAApC,EAA8C;AAC5C,YACE+S,WAAW,CAAC/S,QAAZ,CAAqBjjB,cAArB,CAAoC4O,SAApC,KACAonB,WAAW,CAAC/zB,IAAZ,CAAiBmD,KAAjB,CAAuBwJ,SAAvB,EAAkC7U,QAAlC,CAA2CkI,IAA3C,CAFF,EAGE;AACA,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD;AACF,GAdO;;;;;;AAmBA2xB,mCAAR;AACE,SAAKM,cAAL,GAAsBN,SAAS,CAAC2B,UAAV,CACpB,KAAKtB,UADe,EAEpBL,SAAS,CAACqC,cAFU,EAGpB5yB,IAAI,CAACwhB,KAHe,CAAtB;;AAKA,QAAI,KAAKoP,UAAL,CAAgBx4B,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,WAAKu4B,YAAL,GAAoB,KAAKC,UAAL,CAAgB,KAAKA,UAAL,CAAgBx4B,MAAhB,GAAyB,CAAzC,EAA4Cq4B,OAAhE;AACD,KAFD,MAEO;AACL,WAAKE,YAAL,GAAoB,CAAC,CAArB;AACD;AACF,GAXO;;;;;;AAgBOJ,6BAAf,UAA8ByB,KAA9B,EAAgD;AAC9C,WAAOA,KAAK,CAACtB,OAAb;AACD,GAFc;;;;;;;AAQAH,yBAAf,UACEsC,MADF,EAEE1G,MAFF,EAGE2G,QAHF,EAGgB;AAEd,QAAIC,aAAa,GAAGrD,aAAa,CAAClO,KAAlC;;AACA,SAAK,IAAIrpB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG06B,MAAM,CAACz6B,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtC,UAAM65B,KAAK,GAAGa,MAAM,CAAC16B,CAAD,CAApB,CADsC;;;;AAKtC,UAAIg0B,MAAM,CAAC6F,KAAD,CAAV,EAAmB;AACjB,YAAMxH,SAAS,GAAGwH,KAAK,CAACpzB,IAAxB;AACA,YAAIkC,YAAY,SAAhB;;AACA,YAAIkxB,KAAK,CAACjb,IAAV,EAAgB;AACd,cAAI+b,QAAQ,CAACp8B,QAAT,CAAkB8zB,SAAlB,CAAJ,EAAkC;AAChC1pB,wBAAY,GAAGd,IAAI,CAACc,YAAL,CAAkBgyB,QAAlB,EAA4BtI,SAA5B,CAAf;AACAuI,yBAAa,GAAGA,aAAa,CAAC9C,QAAd,CAAuBnvB,YAAvB,EAAqCkxB,KAAK,CAACjb,IAA3C,CAAhB;AACD,WAHD,MAGO,IAAIyT,SAAS,CAAC9zB,QAAV,CAAmBo8B,QAAnB,CAAJ,EAAkC;AACvChyB,wBAAY,GAAGd,IAAI,CAACc,YAAL,CAAkB0pB,SAAlB,EAA6BsI,QAA7B,CAAf;AACAC,yBAAa,GAAGA,aAAa,CAAC9C,QAAd,CACdjwB,IAAI,CAACwhB,KADS,EAEdwQ,KAAK,CAACjb,IAAN,CAAWvD,QAAX,CAAoB1S,YAApB,CAFc,CAAhB;AAMD;AACF,SAbD,MAaO,IAAIkxB,KAAK,CAACpS,QAAV,EAAoB;AACzB,cAAIkT,QAAQ,CAACp8B,QAAT,CAAkB8zB,SAAlB,CAAJ,EAAkC;AAChC1pB,wBAAY,GAAGd,IAAI,CAACc,YAAL,CAAkBgyB,QAAlB,EAA4BtI,SAA5B,CAAf;AACAuI,yBAAa,GAAGA,aAAa,CAACjC,SAAd,CACdhwB,YADc,EAEdkxB,KAAK,CAACpS,QAFQ,CAAhB;AAID,WAND,MAMO,IAAI4K,SAAS,CAAC9zB,QAAV,CAAmBo8B,QAAnB,CAAJ,EAAkC;AACvChyB,wBAAY,GAAGd,IAAI,CAACc,YAAL,CAAkB0pB,SAAlB,EAA6BsI,QAA7B,CAAf;;AACA,gBAAIhyB,YAAY,CAACiK,OAAb,EAAJ,EAA4B;AAC1BgoB,2BAAa,GAAGA,aAAa,CAACjC,SAAd,CACd9wB,IAAI,CAACwhB,KADS,EAEdwQ,KAAK,CAACpS,QAFQ,CAAhB;AAID,aALD,MAKO;AACL,kBAAM7d,KAAK,GAAG8P,aAAQmgB,KAAK,CAACpS,QAAd/N,EAAwB/Q,YAAY,CAACF,QAAb,EAAxBiR,CAAd;;AACA,kBAAI9P,KAAJ,EAAW;;AAET,oBAAMixB,QAAQ,GAAGjxB,KAAK,CAACyR,QAAN,CAAe1S,YAAY,CAACC,QAAb,EAAf,CAAjB;AACAgyB,6BAAa,GAAGA,aAAa,CAAC9C,QAAd,CAAuBjwB,IAAI,CAACwhB,KAA5B,EAAmCwR,QAAnC,CAAhB;AACD;AACF;AAGF;AACF,SAzBM,MAyBA;AACL,gBAAM1oB,oBAAe,4CAAfA,CAAN;AACD;AACF;AACF;;AACD,WAAOyoB,aAAP;AACD,GA1Dc;;AA2DjB;AAAC,CApiBD;AAsiBA;;;;;;;;AAMA;AAAA;AAAA;;;;;AA4BE,wBAAYn0B,IAAZ,EAAwByxB,SAAxB,EAA4C;AAC1C,SAAK4C,SAAL,GAAiBr0B,IAAjB;AACA,SAAK6wB,UAAL,GAAkBY,SAAlB;AACD;;;;;;;;;;;;;AAYDG,4DACEnF,mBADF,EAEEqG,iBAFF,EAGEC,mBAHF,EAG+B;AAE7B,WAAO,KAAKlC,UAAL,CAAgBrR,sBAAhB,CACL,KAAK6U,SADA,EAEL5H,mBAFK,EAGLqG,iBAHK,EAILC,mBAJK,CAAP;AAMD,GAXD;;;;;;;;;;AAoBAnB,+DACE2B,sBADF,EAC6C;AAE3C,WAAO,KAAK1C,UAAL,CAAgB3G,yBAAhB,CACL,KAAKmK,SADA,EAELd,sBAFK,CAAP;AAID,GAPD;;;;;;;;;;;;;;;;;;;;;;AA4BA3B,wEACE5xB,IADF,EAEE2zB,iBAFF,EAGEC,kBAHF,EAGiC;AAE/B,WAAO,KAAK/C,UAAL,CAAgBtG,kCAAhB,CACL,KAAK8J,SADA,EAELr0B,IAFK,EAGL2zB,iBAHK,EAILC,kBAJK,CAAP;AAMD,GAXD;;;;;;;;;;;AAqBAhC,oDAAe5xB,IAAf,EAAyB;AACvB,WAAO,KAAK6wB,UAAL,CAAgBhH,cAAhB,CAA+B,KAAKwK,SAAL,CAAelxB,KAAf,CAAqBnD,IAArB,CAA/B,CAAP;AACD,GAFD;;;;;;;;;;;;;;AAeA4xB,sDACElK,kBADF,EAEExR,SAFF,EAGE/G,KAHF,EAIEpQ,OAJF,EAKEmO,KALF,EAKc;AAEZ,WAAO,KAAK2jB,UAAL,CAAgBhJ,gBAAhB,CACL,KAAKwM,SADA,EAEL3M,kBAFK,EAGLxR,SAHK,EAIL/G,KAJK,EAKLpQ,OALK,EAMLmO,KANK,CAAP;AAQD,GAfD;;;;;;;;;;;AAyBA0kB,uDACE1Q,QADF,EAEEoT,mBAFF,EAEgC;AAE9B,WAAO,KAAKzD,UAAL,CAAgBpJ,iBAAhB,CACL,KAAK4M,SADA,EAELnT,QAFK,EAGLoT,mBAHK,CAAP;AAKD,GATD;;;;;;;;;AAiBA1C,2CAAMjlB,SAAN,EAAuB;AACrB,WAAO,IAAIilB,YAAJ,CAAiB,KAAKyC,SAAL,CAAelxB,KAAf,CAAqBwJ,SAArB,CAAjB,EAAkD,KAAKkkB,UAAvD,CAAP;AACD,GAFD;;AAGF;AAAC,CA5KD;AC3lBA;;;;;;;;;;;;;;;;;AA0DA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;AAAA;AAAA;;;;;AAkBE,oBAAoB0D,eAApB,EAAmD;AAA/B;;;;;AAdZ,0BAA2CxR,aAAa,CAACH,KAAzD;;;;;AAKA,6BAAoB,IAAI+O,SAAJ,EAApB;AAES,yBAAqC,IAAI7Q,GAAJ,EAArC;AACA,yBAAqC,IAAIA,GAAJ,EAArC;AAMsC;;;;;;;;AAOvD0T,oDACEx0B,IADF,EAEEy0B,OAFF,EAGE5C,OAHF,EAIEC,OAJF,EAImB;;AAGjB,SAAK4C,iBAAL,CAAuBC,YAAvB,CAAoC30B,IAApC,EAA0Cy0B,OAA1C,EAAmD5C,OAAnD,EAA4DC,OAA5D;;AAEA,QAAI,CAACA,OAAL,EAAc;AACZ,aAAO,EAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAK8C,2BAAL,CACL,IAAItQ,SAAJ,CAAcjC,eAAe,CAACI,IAA9B,EAAoCziB,IAApC,EAA0Cy0B,OAA1C,CADK,CAAP;AAGD;AACF,GAhBD;;;;;;;;AAuBAD,gDACEx0B,IADF,EAEEyrB,eAFF,EAGEoG,OAHF,EAGiB;;AAGf,SAAK6C,iBAAL,CAAuBG,QAAvB,CAAgC70B,IAAhC,EAAsCyrB,eAAtC,EAAuDoG,OAAvD;AAEA,QAAMiD,UAAU,GAAG/R,aAAa,CAACgS,UAAd,CAAyBtJ,eAAzB,CAAnB;AAEA,WAAO,KAAKmJ,2BAAL,CACL,IAAIpQ,KAAJ,CAAUnC,eAAe,CAACI,IAA1B,EAAgCziB,IAAhC,EAAsC80B,UAAtC,CADK,CAAP;AAGD,GAbD;;;;;;;;;AAqBAN,8CAAa3C,OAAb,EAA8BtP,MAA9B,EAAqD;AAAvB;AAAAA;AAAuB;;AACnD,QAAM6Q,KAAK,GAAG,KAAKsB,iBAAL,CAAuBM,QAAvB,CAAgCnD,OAAhC,CAAd;AACA,QAAMoD,gBAAgB,GAAG,KAAKP,iBAAL,CAAuB9B,WAAvB,CAAmCf,OAAnC,CAAzB;;AACA,QAAI,CAACoD,gBAAL,EAAuB;AACrB,aAAO,EAAP;AACD,KAFD,MAEO;AACL,UAAIC,cAAY,GAAGnS,aAAa,CAACH,KAAjC;;AACA,UAAIwQ,KAAK,CAACjb,IAAN,IAAc,IAAlB,EAAwB;;AAEtB+c,sBAAY,GAAGA,cAAY,CAAC16B,GAAb,CAAiB4G,IAAI,CAACwhB,KAAtB,EAA6B,IAA7B,CAAf;AACD,OAHD,MAGO;AACL9kB,YAAI,CAACs1B,KAAK,CAACpS,QAAP,EAAiB,UAAC3f,UAAD,EAAqBwJ,IAArB,EAA+B;AAClDqqB,wBAAY,GAAGA,cAAY,CAAC16B,GAAb,CAAiB,IAAI4G,IAAJ,CAASC,UAAT,CAAjB,EAAuCwJ,IAAvC,CAAf;AACD,SAFG,CAAJ;AAGD;;AACD,aAAO,KAAK+pB,2BAAL,CACL,IAAIlS,YAAJ,CAAiB0Q,KAAK,CAACpzB,IAAvB,EAA6Bk1B,cAA7B,EAA2C3S,MAA3C,CADK,CAAP;AAGD;AACF,GAnBD;;;;;;;;AA0BAiS,sDAAqBx0B,IAArB,EAAiCy0B,OAAjC,EAA8C;AAC5C,WAAO,KAAKG,2BAAL,CACL,IAAItQ,SAAJ,CAAcjC,eAAe,CAAC8S,MAA9B,EAAsCn1B,IAAtC,EAA4Cy0B,OAA5C,CADK,CAAP;AAGD,GAJD;;;;;;;;AAWAD,kDACEx0B,IADF,EAEEyrB,eAFF,EAEwC;AAEtC,QAAMqJ,UAAU,GAAG/R,aAAa,CAACgS,UAAd,CAAyBtJ,eAAzB,CAAnB;AAEA,WAAO,KAAKmJ,2BAAL,CACL,IAAIpQ,KAAJ,CAAUnC,eAAe,CAAC8S,MAA1B,EAAkCn1B,IAAlC,EAAwC80B,UAAxC,CADK,CAAP;AAGD,GATD;;;;;;;;AAgBAN,qDAAoBx0B,IAApB,EAA8B;AAC5B,WAAO,KAAK40B,2BAAL,CACL,IAAIxQ,cAAJ,CAAmB/B,eAAe,CAAC8S,MAAnC,EAA2Cn1B,IAA3C,CADK,CAAP;AAGD,GAJD;;;;;;;;AAWAw0B,2DAA0Bx0B,IAA1B,EAAsCmY,IAAtC,EAAkDid,GAAlD,EAA6D;AAC3D,QAAMC,QAAQ,GAAG,KAAKC,eAAL,CAAqBF,GAArB,CAAjB;;AACA,QAAIC,QAAQ,IAAI,IAAhB,EAAsB;AACpB,UAAME,CAAC,GAAGf,QAAQ,CAACgB,cAAT,CAAwBH,QAAxB,CAAV;AACA,UAAMI,SAAS,GAAGF,CAAC,CAACv1B,IAApB;AAAA,UACEmiB,OAAO,GAAGoT,CAAC,CAACpT,OADd;AAEA,UAAMjgB,YAAY,GAAGd,IAAI,CAACc,YAAL,CAAkBuzB,SAAlB,EAA6Bz1B,IAA7B,CAArB;AACA,UAAMmgB,EAAE,GAAG,IAAImE,SAAJ,CACTjC,eAAe,CAACqT,oBAAhB,CAAqCvT,OAArC,CADS,EAETjgB,YAFS,EAGTiW,IAHS,CAAX;AAKA,aAAO,KAAKwd,qBAAL,CAA2BF,SAA3B,EAAsCtV,EAAtC,CAAP;AACD,KAXD,MAWO;;AAEL,aAAO,EAAP;AACD;AACF,GAjBD;;;;;;;;AAwBAqU,uDACEx0B,IADF,EAEEyrB,eAFF,EAGE2J,GAHF,EAGa;AAEX,QAAMC,QAAQ,GAAG,KAAKC,eAAL,CAAqBF,GAArB,CAAjB;;AACA,QAAIC,QAAJ,EAAc;AACZ,UAAME,CAAC,GAAGf,QAAQ,CAACgB,cAAT,CAAwBH,QAAxB,CAAV;AACA,UAAMI,SAAS,GAAGF,CAAC,CAACv1B,IAApB;AAAA,UACEmiB,OAAO,GAAGoT,CAAC,CAACpT,OADd;AAEA,UAAMjgB,YAAY,GAAGd,IAAI,CAACc,YAAL,CAAkBuzB,SAAlB,EAA6Bz1B,IAA7B,CAArB;AACA,UAAM80B,UAAU,GAAG/R,aAAa,CAACgS,UAAd,CAAyBtJ,eAAzB,CAAnB;AACA,UAAMtL,EAAE,GAAG,IAAIqE,KAAJ,CACTnC,eAAe,CAACqT,oBAAhB,CAAqCvT,OAArC,CADS,EAETjgB,YAFS,EAGT4yB,UAHS,CAAX;AAKA,aAAO,KAAKa,qBAAL,CAA2BF,SAA3B,EAAsCtV,EAAtC,CAAP;AACD,KAZD,MAYO;;AAEL,aAAO,EAAP;AACD;AACF,GAtBD;;;;;;;;AA6BAqU,2DAA0Bx0B,IAA1B,EAAsCo1B,GAAtC,EAAiD;AAC/C,QAAMC,QAAQ,GAAG,KAAKC,eAAL,CAAqBF,GAArB,CAAjB;;AACA,QAAIC,QAAJ,EAAc;AACZ,UAAME,CAAC,GAAGf,QAAQ,CAACgB,cAAT,CAAwBH,QAAxB,CAAV;AACA,UAAMI,SAAS,GAAGF,CAAC,CAACv1B,IAApB;AAAA,UACEmiB,OAAO,GAAGoT,CAAC,CAACpT,OADd;AAEA,UAAMjgB,YAAY,GAAGd,IAAI,CAACc,YAAL,CAAkBuzB,SAAlB,EAA6Bz1B,IAA7B,CAArB;AACA,UAAMmgB,EAAE,GAAG,IAAIiE,cAAJ,CACT/B,eAAe,CAACqT,oBAAhB,CAAqCvT,OAArC,CADS,EAETjgB,YAFS,CAAX;AAIA,aAAO,KAAKyzB,qBAAL,CAA2BF,SAA3B,EAAsCtV,EAAtC,CAAP;AACD,KAVD,MAUO;;AAEL,aAAO,EAAP;AACD;AACF,GAhBD;;;;;;;;AAuBAqU,sDACE10B,KADF,EAEEqZ,iBAFF,EAEsC;AAEpC,QAAMnZ,IAAI,GAAGF,KAAK,CAACE,IAAnB;AAEA,QAAI+pB,WAAW,GAAgB,IAA/B;AACA,QAAI6L,wBAAwB,GAAG,KAA/B,CALoC;;;AAQpC,SAAKC,cAAL,CAAoBC,aAApB,CAAkC91B,IAAlC,EAAwC,UAAC+1B,eAAD,EAAkBC,EAAlB,EAAoB;AAC1D,UAAM9zB,YAAY,GAAGd,IAAI,CAACc,YAAL,CAAkB6zB,eAAlB,EAAmC/1B,IAAnC,CAArB;AACA+pB,iBAAW,GAAGA,WAAW,IAAIiM,EAAE,CAACtF,sBAAH,CAA0BxuB,YAA1B,CAA7B;AACA0zB,8BAAwB,GACtBA,wBAAwB,IAAII,EAAE,CAAC3F,eAAH,EAD9B;AAED,KALD;AAMA,QAAI4F,SAAS,GAAG,KAAKJ,cAAL,CAAoBn7B,GAApB,CAAwBsF,IAAxB,CAAhB;;AACA,QAAI,CAACi2B,SAAL,EAAgB;AACdA,eAAS,GAAG,IAAItG,SAAJ,EAAZ;AACA,WAAKkG,cAAL,GAAsB,KAAKA,cAAL,CAAoBr7B,GAApB,CAAwBwF,IAAxB,EAA8Bi2B,SAA9B,CAAtB;AACD,KAHD,MAGO;AACLL,8BAAwB,GACtBA,wBAAwB,IAAIK,SAAS,CAAC5F,eAAV,EAD9B;AAEAtG,iBAAW,GAAGA,WAAW,IAAIkM,SAAS,CAACvF,sBAAV,CAAiCtvB,IAAI,CAACwhB,KAAtC,CAA7B;AACD;;AAED,QAAImN,mBAAJ;;AACA,QAAIhG,WAAW,IAAI,IAAnB,EAAyB;AACvBgG,yBAAmB,GAAG,IAAtB;AACD,KAFD,MAEO;AACLA,yBAAmB,GAAG,KAAtB;AACAhG,iBAAW,GAAGtV,YAAY,CAAChI,UAA3B;AACA,UAAMkW,OAAO,GAAG,KAAKkT,cAAL,CAAoBlT,OAApB,CAA4B3iB,IAA5B,CAAhB;AACA2iB,aAAO,CAACuT,YAAR,CAAqB,UAACvpB,SAAD,EAAYwpB,cAAZ,EAA0B;AAC7C,YAAM9N,aAAa,GAAG8N,cAAc,CAACzF,sBAAf,CAAsCtvB,IAAI,CAACwhB,KAA3C,CAAtB;;AACA,YAAIyF,aAAJ,EAAmB;AACjB0B,qBAAW,GAAGA,WAAW,CAAChd,oBAAZ,CACZJ,SADY,EAEZ0b,aAFY,CAAd;AAID;AACF,OARD;AASD;;AAED,QAAM+N,iBAAiB,GAAGH,SAAS,CAACI,kBAAV,CAA6Bv2B,KAA7B,CAA1B;;AACA,QAAI,CAACs2B,iBAAD,IAAsB,CAACt2B,KAAK,CAACka,cAAN,GAAuB0U,YAAvB,EAA3B,EAAkE;;AAEhE,UAAM2G,QAAQ,GAAGb,QAAQ,CAAC8B,aAAT,CAAuBx2B,KAAvB,CAAjB;AACA5F,kBACE,CAAC,KAAKq8B,aAAL,CAAmBpV,GAAnB,CAAuBkU,QAAvB,CADHn7B,EAEE,wCAFFA;AAIA,UAAMk7B,GAAG,GAAGZ,QAAQ,CAACgC,gBAAT,EAAZ;AACA,WAAKD,aAAL,CAAmB/7B,GAAnB,CAAuB66B,QAAvB,EAAiCD,GAAjC;AACA,WAAKqB,aAAL,CAAmBj8B,GAAnB,CAAuB46B,GAAvB,EAA4BC,QAA5B;AACD;;AACD,QAAMjN,WAAW,GAAG,KAAKsM,iBAAL,CAAuBgC,WAAvB,CAAmC12B,IAAnC,CAApB;AACA,QAAIgtB,MAAM,GAAGiJ,SAAS,CAAChG,oBAAV,CACXnwB,KADW,EAEXqZ,iBAFW,EAGXiP,WAHW,EAIX2B,WAJW,EAKXgG,mBALW,CAAb;;AAOA,QAAI,CAACqG,iBAAD,IAAsB,CAACR,wBAA3B,EAAqD;AACnD,UAAM9F;AAAI;AAAA,QAAsBmG,SAAS,CAACrF,YAAV,CAAuB9wB,KAAvB,CAAhC;AACAktB,YAAM,GAAGA,MAAM,CAACoC,MAAP,CAAc,KAAKuH,cAAL,CAAoB72B,KAApB,EAA2BgwB,IAA3B,CAAd,CAAT;AACD;;AACD,WAAO9C,MAAP;AACD,GArED;;;;;;;;;;;;;AAiFAwH,yDACE10B,KADF,EAEEqZ,iBAFF,EAGEyV,WAHF,EAGqB;AAHrB,qBAGqB;;;AAGnB,QAAM5uB,IAAI,GAAGF,KAAK,CAACE,IAAnB;AACA,QAAM42B,cAAc,GAAG,KAAKf,cAAL,CAAoBn7B,GAApB,CAAwBsF,IAAxB,CAAvB;AACA,QAAI6uB,YAAY,GAAY,EAA5B,CALmB;;;;AASnB,QACE+H,cAAc,KACb92B,KAAK,CAACof,eAAN,OAA4B,SAA5B,IACC0X,cAAc,CAACP,kBAAf,CAAkCv2B,KAAlC,CAFY,CADhB,EAIE;;;;AAIA,UAAM+2B,gBAAgB,GAAGD,cAAc,CAACpG,uBAAf,CACvB1wB,KADuB,EAEvBqZ,iBAFuB,EAGvByV,WAHuB,CAAzB;;AAKA,UAAIgI,cAAc,CAACzqB,OAAf,EAAJ,EAA8B;AAC5B,aAAK0pB,cAAL,GAAsB,KAAKA,cAAL,CAAoBp7B,MAApB,CAA2BuF,IAA3B,CAAtB;AACD;;AACD,UAAMmwB,OAAO,GAAG0G,gBAAgB,CAAC1G,OAAjC;AACAtB,kBAAY,GAAGgI,gBAAgB,CAAC7J,MAAhC,CAbA;;;;;;;AAoBA,UAAM8J,eAAe,GACnB,CAAC,CAAD,KACA3G,OAAO,CAACiC,SAAR,CAAkB,iBAAK;AACrB,eAAOtyB,KAAK,CAACka,cAAN,GAAuB0U,YAAvB,EAAP;AACD,OAFD,CAFF;AAKA,UAAMqI,OAAO,GAAG,KAAKlB,cAAL,CAAoBmB,UAApB,CACdh3B,IADc,EAEd,UAACkC,YAAD,EAAe+0B,eAAf,EAA8B;AAC5B,eAAOA,eAAe,CAAC5G,eAAhB,EAAP;AACD,OAJa,CAAhB;;AAOA,UAAIyG,eAAe,IAAI,CAACC,OAAxB,EAAiC;AAC/B,YAAMpU,OAAO,GAAG,KAAKkT,cAAL,CAAoBlT,OAApB,CAA4B3iB,IAA5B,CAAhB,CAD+B;;;AAI/B,YAAI,CAAC2iB,OAAO,CAACxW,OAAR,EAAL,EAAwB;;AAEtB,cAAM+qB,QAAQ,GAAG,KAAKC,+BAAL,CAAqCxU,OAArC,CAAjB,CAFsB;;AAKtB,eAAK,IAAIppB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG29B,QAAQ,CAAC19B,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;AACxC,gBAAMu2B,IAAI,GAAGoH,QAAQ,CAAC39B,CAAD,CAArB;AAAA,gBACE69B,QAAQ,GAAGtH,IAAI,CAACW,QAAL,EADb;AAEA,gBAAM4G,QAAQ,GAAG,KAAKC,sBAAL,CAA4BxH,IAA5B,CAAjB;AACA,iBAAKyE,eAAL,CAAqBgD,cAArB,CACE/C,QAAQ,CAACgD,kBAAT,CAA4BJ,QAA5B,CADF,EAEE,KAAKK,YAAL,CAAkBL,QAAlB,CAFF,EAGEC,QAAQ,CAACK,MAHX,EAIEL,QAAQ,CAACluB,UAJX;AAMD;AAGF;AACF,OAvDD;;;;;AA2DA,UAAI,CAAC4tB,OAAD,IAAY5G,OAAO,CAAC32B,MAAR,GAAiB,CAA7B,IAAkC,CAACo1B,WAAvC,EAAoD;;;AAGlD,YAAIkI,eAAJ,EAAqB;;AAEnB,cAAMa,UAAU,GAAkB,IAAlC;AACA,eAAKpD,eAAL,CAAqBqD,aAArB,CACEpD,QAAQ,CAACgD,kBAAT,CAA4B13B,KAA5B,CADF,EAEE63B,UAFF;AAID,SAPD,MAOO;AACLxH,iBAAO,CAACpO,OAAR,CAAgB,UAAC8V,aAAD,EAAqB;AACnC,gBAAMC,WAAW,GAAG5jB,KAAI,CAACqiB,aAAL,CAAmB77B,GAAnB,CAClB85B,QAAQ,CAAC8B,aAAT,CAAuBuB,aAAvB,CADkB,CAApB;;AAGA3jB,iBAAI,CAACqgB,eAAL,CAAqBqD,aAArB,CACEpD,QAAQ,CAACgD,kBAAT,CAA4BK,aAA5B,CADF,EAEEC,WAFF;AAID,WARD;AASD;AACF,OAhFD;;;AAkFA,WAAKC,WAAL,CAAiB5H,OAAjB;AAGD;;AACD,WAAOtB,YAAP;AACD,GAvGD;;;;;;;;;;;;;;AAoHA2F,wDAAuBx0B,IAAvB,EAAmC8yB,iBAAnC,EAA+D;AAC7D,QAAMkF,iBAAiB,GAAG,IAA1B;AACA,QAAMvG,SAAS,GAAG,KAAKiD,iBAAvB;AACA,QAAM3K,WAAW,GAAG,KAAK8L,cAAL,CAAoBmB,UAApB,CAClBh3B,IADkB,EAElB,UAAC0jB,SAAD,EAAYuS,SAAZ,EAAqB;AACnB,UAAM/zB,YAAY,GAAGd,IAAI,CAACc,YAAL,CAAkBwhB,SAAlB,EAA6B1jB,IAA7B,CAArB;AACA,UAAM+pB,WAAW,GAAGkM,SAAS,CAACvF,sBAAV,CAAiCxuB,YAAjC,CAApB;;AACA,UAAI6nB,WAAJ,EAAiB;AACf,eAAOA,WAAP;AACD;AACF,KARiB,CAApB;AAUA,WAAO0H,SAAS,CAACjS,sBAAV,CACLxf,IADK,EAEL+pB,WAFK,EAGL+I,iBAHK,EAILkF,iBAJK,CAAP;AAMD,GAnBD;;;;;;;AAyBQxD,uDAAR,UACE7R,OADF,EACmC;AAEjC,WAAOA,OAAO,CAACsV,IAAR,CACL,UAAC/1B,YAAD,EAAeg2B,mBAAf,EAAoCC,QAApC,EAA4C;AAC1C,UAAID,mBAAmB,IAAIA,mBAAmB,CAAC7H,eAApB,EAA3B,EAAkE;AAChE,YAAM+H,YAAY,GAAGF,mBAAmB,CAACvH,eAApB,EAArB;AACA,eAAO,CAACyH,YAAD,CAAP;AACD,OAHD,MAGO;;AAEL,YAAIC,OAAK,GAAW,EAApB;;AACA,YAAIH,mBAAJ,EAAyB;AACvBG,iBAAK,GAAGH,mBAAmB,CAACI,aAApB,EAAR;AACD;;AACDx6B,YAAI,CAACq6B,QAAD,EAAW,UAACI,IAAD,EAAeC,UAAf,EAAiC;AAC9CH,iBAAK,GAAGA,OAAK,CAACjJ,MAAN,CAAaoJ,UAAb,CAAR;AACD,SAFG,CAAJ;AAGA,eAAOH,OAAP;AACD;AACF,KAhBI,CAAP;AAkBD,GArBO;;AAuBA7D,mCAAR,UAAoBiE,OAApB,EAAoC;AAClC,SAAK,IAAI91B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG81B,OAAO,CAACj/B,MAA5B,EAAoC,EAAEmJ,CAAtC,EAAyC;AACvC,UAAM+1B,YAAY,GAAGD,OAAO,CAAC91B,CAAD,CAA5B;;AACA,UAAI,CAAC+1B,YAAY,CAAC1e,cAAb,GAA8B0U,YAA9B,EAAL,EAAmD;;AAEjD,YAAMiK,eAAe,GAAGnE,QAAQ,CAAC8B,aAAT,CAAuBoC,YAAvB,CAAxB;AACA,YAAME,eAAe,GAAG,KAAKrC,aAAL,CAAmB77B,GAAnB,CAAuBi+B,eAAvB,CAAxB;AACA,aAAKpC,aAAL,CAAmB5U,MAAnB,CAA0BgX,eAA1B;AACA,aAAKlC,aAAL,CAAmB9U,MAAnB,CAA0BiX,eAA1B;AACD;AACF;AACF,GAXO;;;;;;;;AAkBOpE,gCAAf,UAAkC10B,KAAlC,EAA8C;AAC5C,QACEA,KAAK,CAACka,cAAN,GAAuB0U,YAAvB,MACA,CAAC5uB,KAAK,CAACka,cAAN,GAAuB6e,SAAvB,EAFH,EAGE;;;;AAIA,aAAO/4B,KAAK,CAACoZ,MAAN,EAAP;AACD,KARD,MAQO;AACL,aAAOpZ,KAAP;AACD;AACF,GAZc;;;;;;;;AAmBP00B,sCAAR,UAAuB10B,KAAvB,EAAqCgwB,IAArC,EAA+C;AAC7C,QAAM9vB,IAAI,GAAGF,KAAK,CAACE,IAAnB;AACA,QAAMo1B,GAAG,GAAG,KAAKqC,YAAL,CAAkB33B,KAAlB,CAAZ;AACA,QAAMu3B,QAAQ,GAAG,KAAKC,sBAAL,CAA4BxH,IAA5B,CAAjB;AAEA,QAAM9C,MAAM,GAAG,KAAKuH,eAAL,CAAqBgD,cAArB,CACb/C,QAAQ,CAACgD,kBAAT,CAA4B13B,KAA5B,CADa,EAEbs1B,GAFa,EAGbiC,QAAQ,CAACK,MAHI,EAIbL,QAAQ,CAACluB,UAJI,CAAf;AAOA,QAAMwZ,OAAO,GAAG,KAAKkT,cAAL,CAAoBlT,OAApB,CAA4B3iB,IAA5B,CAAhB,CAZ6C;;;AAe7C,QAAIo1B,GAAJ,EAAS;AACPl7B,kBACE,CAACyoB,OAAO,CAAC1rB,KAAR,CAAco5B,eAAd,EADHn2B,EAEE,mDAFFA;AAID,KALD,MAKO;;AAEL,UAAM4+B,aAAa,GAAGnW,OAAO,CAACsV,IAAR,CACpB,UAAC/1B,YAAD,EAAeg2B,mBAAf,EAAoCC,QAApC,EAA4C;AAC1C,YACE,CAACj2B,YAAY,CAACiK,OAAb,EAAD,IACA+rB,mBADA,IAEAA,mBAAmB,CAAC7H,eAApB,EAHF,EAIE;AACA,iBAAO,CAAC6H,mBAAmB,CAACvH,eAApB,GAAsCF,QAAtC,EAAD,CAAP;AACD,SAND,MAMO;;AAEL,cAAIsI,SAAO,GAAY,EAAvB;;AACA,cAAIb,mBAAJ,EAAyB;AACvBa,qBAAO,GAAGA,SAAO,CAAC3J,MAAR,CACR8I,mBAAmB,CAACI,aAApB,GAAoCtkB,GAApC,CAAwC,gBAAI;AAAI,yBAAI,CAACyc,QAAL;AAAe,aAA/D,CADQ,CAAV;AAGD;;AACD3yB,cAAI,CAACq6B,QAAD,EAAW,UAACI,IAAD,EAAeS,YAAf,EAAoC;AACjDD,qBAAO,GAAGA,SAAO,CAAC3J,MAAR,CAAe4J,YAAf,CAAV;AACD,WAFG,CAAJ;AAGA,iBAAOD,SAAP;AACD;AACF,OArBmB,CAAtB;;AAuBA,WAAK,IAAIx/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGu/B,aAAa,CAACt/B,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,YAAM0/B,WAAW,GAAGH,aAAa,CAACv/B,CAAD,CAAjC;AACA,aAAKg7B,eAAL,CAAqBqD,aAArB,CACEpD,QAAQ,CAACgD,kBAAT,CAA4ByB,WAA5B,CADF,EAEE,KAAKxB,YAAL,CAAkBwB,WAAlB,CAFF;AAID;AACF;;AACD,WAAOjM,MAAP;AACD,GAtDO;;AAwDAwH,8CAAR,UACE1E,IADF,EACY;AADZ;;AAGE,QAAMhwB,KAAK,GAAGgwB,IAAI,CAACW,QAAL,EAAd;AACA,QAAM2E,GAAG,GAAG,KAAKqC,YAAL,CAAkB33B,KAAlB,CAAZ;AAEA,WAAO;AACL43B,YAAM,EAAE;AACN,YAAMjJ,KAAK,GAAGqB,IAAI,CAACtI,cAAL,MAAyB/S,YAAY,CAAChI,UAApD;AACA,eAAOgiB,KAAK,CAACjZ,IAAN,EAAP;AACD,OAJI;AAKLrM,gBAAU,EAAE,UAAC+vB,MAAD,EAAe;AACzB,YAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB,cAAI9D,GAAJ,EAAS;AACP,mBAAOlhB,KAAI,CAACilB,yBAAL,CAA+Br5B,KAAK,CAACE,IAArC,EAA2Co1B,GAA3C,CAAP;AACD,WAFD,MAEO;AACL,mBAAOlhB,KAAI,CAACklB,mBAAL,CAAyBt5B,KAAK,CAACE,IAA/B,CAAP;AACD;AACF,SAND,MAMO;;;AAGL,cAAMlF,KAAK,GAAG8E,kBAAkB,CAACs5B,MAAD,EAASp5B,KAAT,CAAhC;AACA,iBAAOoU,KAAI,CAACsc,uBAAL,CACL1wB,KADK;;AAEiB,cAFjB,EAGLhF,KAHK,CAAP;AAKD;AACF;AAtBI,KAAP;AAwBD,GA9BO;;;;;;AAmCO05B,2BAAf,UAA6B10B,KAA7B,EAAyC;AACvC,WAAOA,KAAK,CAACE,IAAN,CAAWrI,QAAX,KAAwB,GAAxB,GAA8BmI,KAAK,CAACof,eAAN,EAArC;AACD,GAFc;;;;;;AAOAsV,4BAAf,UACEa,QADF,EACkB;AAEhB,QAAMgE,UAAU,GAAGhE,QAAQ,CAACh6B,OAAT,CAAiB,GAAjB,CAAnB;AACAnB,gBACEm/B,UAAU,KAAK,CAAC,CAAhB,IAAqBA,UAAU,GAAGhE,QAAQ,CAAC77B,MAAT,GAAkB,CADtDU,EAEE,eAFFA;AAIA,WAAO;AACLioB,aAAO,EAAEkT,QAAQ,CAACj2B,MAAT,CAAgBi6B,UAAU,GAAG,CAA7B,CADJ;AAELr5B,UAAI,EAAE,IAAIoB,IAAJ,CAASi0B,QAAQ,CAACj2B,MAAT,CAAgB,CAAhB,EAAmBi6B,UAAnB,CAAT;AAFD,KAAP;AAID,GAZc;;;;;;AAiBP7E,uCAAR,UAAwBY,GAAxB,EAAmC;AACjC,WAAO,KAAKqB,aAAL,CAAmB/7B,GAAnB,CAAuB06B,GAAvB,CAAP;AACD,GAFO;;;;;;AAOAZ,oCAAR,UAAqB10B,KAArB,EAAiC;AAC/B,QAAMu1B,QAAQ,GAAGb,QAAQ,CAAC8B,aAAT,CAAuBx2B,KAAvB,CAAjB;AACA,WAAO,KAAKy2B,aAAL,CAAmB77B,GAAnB,CAAuB26B,QAAvB,CAAP;AACD,GAHO;;;;;;AAaOb,8BAAf;AACE,WAAOA,QAAQ,CAAC8E,aAAT,EAAP;AACD,GAFc;;;;;;AAOP9E,6CAAR,UACEiB,SADF,EAEEtN,SAFF,EAEsB;AAEpB,QAAM8N,SAAS,GAAG,KAAKJ,cAAL,CAAoBn7B,GAApB,CAAwB+6B,SAAxB,CAAlB;AACAv7B,gBAAO+7B,SAAP/7B,EAAkB,sDAAlBA;AACA,QAAMkuB,WAAW,GAAG,KAAKsM,iBAAL,CAAuBgC,WAAvB,CAAmCjB,SAAnC,CAApB;AACA,WAAOQ,SAAS,CAAC5G,cAAV,CACLlH,SADK,EAELC,WAFK;;AAGY,QAHZ,CAAP;AAKD,GAZO;;;;;;;;;;;;;;;;AA2BAoM,mDAAR,UAAoCrM,SAApC,EAAwD;AACtD,WAAO,KAAKoR,qBAAL,CACLpR,SADK,EAEL,KAAK0N,cAFA;;AAGY,QAHZ,EAIL,KAAKnB,iBAAL,CAAuBgC,WAAvB,CAAmCt1B,IAAI,CAACwhB,KAAxC,CAJK,CAAP;AAMD,GAPO;;;;;;AAYA4R,6CAAR,UACErM,SADF,EAEEqR,aAFF,EAGEzP,WAHF,EAIE3B,WAJF,EAI2B;AAEzB,QAAID,SAAS,CAACnoB,IAAV,CAAemM,OAAf,EAAJ,EAA8B;AAC5B,aAAO,KAAKstB,gCAAL,CACLtR,SADK,EAELqR,aAFK,EAGLzP,WAHK,EAIL3B,WAJK,CAAP;AAMD,KAPD,MAOO;AACL,UAAM6N,SAAS,GAAGuD,aAAa,CAAC9+B,GAAd,CAAkB0G,IAAI,CAACwhB,KAAvB,CAAlB,CADK;;AAIL,UAAImH,WAAW,IAAI,IAAf,IAAuBkM,SAAS,IAAI,IAAxC,EAA8C;AAC5ClM,mBAAW,GAAGkM,SAAS,CAACvF,sBAAV,CAAiCtvB,IAAI,CAACwhB,KAAtC,CAAd;AACD;;AAED,UAAIoK,MAAM,GAAY,EAAtB;AACA,UAAMrgB,SAAS,GAAGwb,SAAS,CAACnoB,IAAV,CAAegC,QAAf,EAAlB;AACA,UAAM03B,cAAc,GAAGvR,SAAS,CAACwR,iBAAV,CAA4BhtB,SAA5B,CAAvB;AACA,UAAM0F,SAAS,GAAGmnB,aAAa,CAACxY,QAAd,CAAuBtmB,GAAvB,CAA2BiS,SAA3B,CAAlB;;AACA,UAAI0F,SAAS,IAAIqnB,cAAjB,EAAiC;AAC/B,YAAME,gBAAgB,GAAG7P,WAAW,GAChCA,WAAW,CAACpV,iBAAZ,CAA8BhI,SAA9B,CADgC,GAEhC,IAFJ;AAGA,YAAMktB,gBAAgB,GAAGzR,WAAW,CAACjlB,KAAZ,CAAkBwJ,SAAlB,CAAzB;AACAqgB,cAAM,GAAGA,MAAM,CAACoC,MAAP,CACP,KAAKmK,qBAAL,CACEG,cADF,EAEErnB,SAFF,EAGEunB,gBAHF,EAIEC,gBAJF,CADO,CAAT;AAQD;;AAED,UAAI5D,SAAJ,EAAe;AACbjJ,cAAM,GAAGA,MAAM,CAACoC,MAAP,CACP6G,SAAS,CAAC5G,cAAV,CAAyBlH,SAAzB,EAAoCC,WAApC,EAAiD2B,WAAjD,CADO,CAAT;AAGD;;AAED,aAAOiD,MAAP;AACD;AACF,GAhDO;;;;;;AAqDAwH,wDAAR,UACErM,SADF,EAEEqR,aAFF,EAGEzP,WAHF,EAIE3B,WAJF,EAI2B;AAJ3B;;AAME,QAAM6N,SAAS,GAAGuD,aAAa,CAAC9+B,GAAd,CAAkB0G,IAAI,CAACwhB,KAAvB,CAAlB,CAFyB;;AAKzB,QAAImH,WAAW,IAAI,IAAf,IAAuBkM,SAAS,IAAI,IAAxC,EAA8C;AAC5ClM,iBAAW,GAAGkM,SAAS,CAACvF,sBAAV,CAAiCtvB,IAAI,CAACwhB,KAAtC,CAAd;AACD;;AAED,QAAIoK,MAAM,GAAY,EAAtB;AACAwM,iBAAa,CAACxY,QAAd,CAAuB5R,gBAAvB,CAAwC,UAACzC,SAAD,EAAY0F,SAAZ,EAAqB;AAC3D,UAAMunB,gBAAgB,GAAG7P,WAAW,GAChCA,WAAW,CAACpV,iBAAZ,CAA8BhI,SAA9B,CADgC,GAEhC,IAFJ;AAGA,UAAMktB,gBAAgB,GAAGzR,WAAW,CAACjlB,KAAZ,CAAkBwJ,SAAlB,CAAzB;AACA,UAAM+sB,cAAc,GAAGvR,SAAS,CAACwR,iBAAV,CAA4BhtB,SAA5B,CAAvB;;AACA,UAAI+sB,cAAJ,EAAoB;AAClB1M,cAAM,GAAGA,MAAM,CAACoC,MAAP,CACPlb,KAAI,CAACulB,gCAAL,CACEC,cADF,EAEErnB,SAFF,EAGEunB,gBAHF,EAIEC,gBAJF,CADO,CAAT;AAQD;AACF,KAhBD;;AAkBA,QAAI5D,SAAJ,EAAe;AACbjJ,YAAM,GAAGA,MAAM,CAACoC,MAAP,CACP6G,SAAS,CAAC5G,cAAV,CAAyBlH,SAAzB,EAAoCC,WAApC,EAAiD2B,WAAjD,CADO,CAAT;AAGD;;AAED,WAAOiD,MAAP;AACD,GAvCO;;;;;;AAxGOwH,2BAAgB,CAAhB;AAgJjB;AA7vBA;AChFA;;;;;;;;;;;;;;;;;AAqBA;;;;;;;AAKA;AAAA;AAAA;AAAA;AACU,qBAAkB/f,YAAY,CAAChI,UAA/B;AAST;;AAPCqtB,+CAAQ95B,IAAR,EAAkB;AAChB,WAAO,KAAK+5B,SAAL,CAAenlB,QAAf,CAAwB5U,IAAxB,CAAP;AACD,GAFD;;AAIA85B,sDAAe95B,IAAf,EAA2Bg6B,eAA3B,EAAgD;AAC9C,SAAKD,SAAL,GAAiB,KAAKA,SAAL,CAAe9sB,WAAf,CAA2BjN,IAA3B,EAAiCg6B,eAAjC,CAAjB;AACD,GAFD;;AAGF;AAAC,CAVD;AC1BA;;;;;;;;;;;;;;;;;AA0BA;;;;;AAGA;AAAA;AAAA;AAEE,6BACUC,IADV,EAEUC,aAFV,EAE2D;AAF3D;;AACU;AACA;AAHF,iBAAqC,IAArC;AAKN,SAAKC,KAAL,GAAaD,aAAa,CAACE,YAAd,CAA2B;AAAE5yB,cAAQ,EAAE;AAAZ,KAA3B,CAAb;;AACA,QAAI,CAAC,KAAK2yB,KAAV,EAAiB;AACfD,mBAAa,CAACx/B,GAAd,GAAoB2/B,IAApB,CAAyB,gBAAI;AAAI,eAACnmB,KAAI,CAACimB,KAAL,GAAaG,IAAd;AAAmB,OAApD;AACD;AACF;;;;;;;AAMDC,mDAASC,YAAT,EAA8B;AAC5B,QAAI,CAAC,KAAKL,KAAV,EAAiB;AACf,aAAOM,OAAO,CAAC5c,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,WAAO,KAAKsc,KAAL,CAAWO,QAAX,CAAoBF,YAApB,EAAkC9c,KAAlC,CAAwC,iBAAK;;;AAGlD,UAAI5iB,KAAK,IAAIA,KAAK,CAAC+E,IAAN,KAAe,4BAA5B,EAA0D;AACxDvF,WAAG,CAAC,gEAAD,CAAH;AACA,eAAO,IAAP;AACD,OAHD,MAGO;AACL,eAAOmgC,OAAO,CAACzc,MAAR,CAAeljB,KAAf,CAAP;AACD;AACF,KATM,CAAP;AAUD,GAfD;;AAiBAy/B,iEAAuBlD,QAAvB,EAA+D;;;AAG7D,QAAI,KAAK8C,KAAT,EAAgB;AACd,WAAKA,KAAL,CAAWQ,oBAAX,CAAgCtD,QAAhC;AACD,KAFD,MAEO;AACLl7B,gBAAU,CAAC;AAAM,uBAAQ,CAAC,IAAD,CAAR;AAAc,OAArB,EAAuB,CAAvB,CAAV;AACA,WAAK+9B,aAAL,CACGx/B,GADH,GAEG2/B,IAFH,CAEQ,gBAAI;AAAI,mBAAI,CAACM,oBAAL,CAA0BtD,QAA1B;AAAmC,OAFnD;AAGD;AACF,GAXD;;AAaAkD,oEAA0BlD,QAA1B,EAAkE;AAChE,SAAK6C,aAAL,CACGx/B,GADH,GAEG2/B,IAFH,CAEQ,gBAAI;AAAI,iBAAI,CAACO,uBAAL,CAA6BvD,QAA7B;AAAsC,KAFtD;AAGD,GAJD;;AAMAkD;AACE,QAAIM,YAAY,GACd,4DACA,KAAKZ,IAAL,CAAUxiC,IADV,GAEA,yDAFA,GAGA,yBAJF;;AAKA,QAAI,gBAAgB,KAAKwiC,IAAL,CAAUa,OAA9B,EAAuC;AACrCD,kBAAY,IACV,qEACA,8EADA,GAEA,UAHF;AAID,KALD,MAKO,IAAI,oBAAoB,KAAKZ,IAAL,CAAUa,OAAlC,EAA2C;AAChDD,kBAAY,IACV,yEACA,8EADA,GAEA,UAHF;AAID,KALM,MAKA;AACLA,kBAAY,IACV,qEACA,4DADA,GAEA,uCAHF;AAID;;AACD5/B,QAAI,CAAC4/B,YAAD,CAAJ;AACD,GAvBD;;AAwBF;AAAC,CA5ED;AC7BA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;AAKA;AAAA;AAAA;AAAA;AACU,qBAAqC,EAArC;AAaT;;AAXCE,yDAAiBtjC,IAAjB,EAA+BujC,MAA/B,EAAiD;AAAlB;AAAAA;AAAkB;;AAC/C,QAAI,CAACljC,cAAS,KAAKmjC,SAAdnjC,EAAyBL,IAAzBK,CAAL,EAAqC;AACnC,WAAKmjC,SAAL,CAAexjC,IAAf,IAAuB,CAAvB;AACD;;AAED,SAAKwjC,SAAL,CAAexjC,IAAf,KAAwBujC,MAAxB;AACD,GAND;;AAQAD;AACE,WAAOG,cAAS,KAAKD,SAAdC,CAAP;AACD,GAFD;;AAGF;AAAC,CAdD;ACxBA;;;;;;;;;;;;;;;;;;AAoBA;AAAA;AAAA;AAAA,2BA0BC;;AAtBQC,+BAAP,UAAqB90B,QAArB,EAAuC;AACrC,QAAM+0B,UAAU,GAAG/0B,QAAQ,CAAC1O,QAAT,EAAnB;;AAEA,QAAI,CAAC,KAAK0jC,YAAL,CAAkBD,UAAlB,CAAL,EAAoC;AAClC,WAAKC,YAAL,CAAkBD,UAAlB,IAAgC,IAAIL,eAAJ,EAAhC;AACD;;AAED,WAAO,KAAKM,YAAL,CAAkBD,UAAlB,CAAP;AACD,GARM;;AAUAD,qCAAP,UACE90B,QADF,EAEEi1B,eAFF,EAE0B;AAExB,QAAMF,UAAU,GAAG/0B,QAAQ,CAAC1O,QAAT,EAAnB;;AAEA,QAAI,CAAC,KAAK4jC,UAAL,CAAgBH,UAAhB,CAAL,EAAkC;AAChC,WAAKG,UAAL,CAAgBH,UAAhB,IAA8BE,eAAe,EAA7C;AACD;;AAED,WAAO,KAAKC,UAAL,CAAgBH,UAAhB,CAAP;AACD,GAXM;;AAbQD,8BAAiD,EAAjD;AACAA,4BAAuC,EAAvC;AAwBjB;AA1BA;ACpBA;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;AAMA;AAAA;AAAA;AAGE,yBAAoBK,WAApB,EAAgD;AAA5B;AAFZ,iBAAwC,IAAxC;AAE4C;;AAEpDC;AACE,QAAMC,QAAQ,GAAG,KAAKF,WAAL,CAAiB9gC,GAAjB,EAAjB;;AAEA,QAAM4lB,KAAK,sBAAQob,QAAR,CAAX;;AACA,QAAI,KAAKC,KAAT,EAAgB;AACd79B,UAAI,CAAC,KAAK69B,KAAN,EAAa,UAACC,IAAD,EAAe3kC,KAAf,EAA4B;AAC3CqpB,aAAK,CAACsb,IAAD,CAAL,GAActb,KAAK,CAACsb,IAAD,CAAL,GAAc3kC,KAA5B;AACD,OAFG,CAAJ;AAGD;;AACD,SAAK0kC,KAAL,GAAaD,QAAb;AAEA,WAAOpb,KAAP;AACD,GAZD;;AAaF;AAAC,CAlBD;AC1BA;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;;;AACA,IAAMub,oBAAoB,GAAG,KAAK,IAAlC;AACA,IAAMC,oBAAoB,GAAG,KAAK,IAAlC,C,CAEA;;AACA,IAAMC,qBAAqB,GAAG,IAAI,EAAJ,GAAS,IAAvC;AAEA;;;;AAGA;AAAA;AAAA;;;;;AAQE,yBAAYC,UAAZ,EAAiDC,OAAjD,EAAuE;AAAtB;AANzC,0BAA2C,EAA3C;AAON,SAAKC,cAAL,GAAsB,IAAIT,aAAJ,CAAkBO,UAAlB,CAAtB;AAEA,QAAMp7B,OAAO,GACXi7B,oBAAoB,GACpB,CAACC,oBAAoB,GAAGD,oBAAxB,IAAgDz/B,IAAI,CAACwO,MAAL,EAFlD;AAGAlK,yBAAqB,CAAC,KAAKy7B,YAAL,CAAkB5hC,IAAlB,CAAuB,IAAvB,CAAD,EAA+B6B,IAAI,CAACC,KAAL,CAAWuE,OAAX,CAA/B,CAArB;AACD;;AAEDw7B,kDAAYR,IAAZ,EAAwB;AACtB,SAAKS,cAAL,CAAoBT,IAApB,IAA4B,IAA5B;AACD,GAFD;;AAIQQ,yCAAR;AAAA;;AACE,QAAME,KAAK,GAAG,KAAKJ,cAAL,CAAoBxhC,GAApB,EAAd;AACA,QAAM6hC,aAAa,GAAiB,EAApC;AACA,QAAIC,iBAAiB,GAAG,KAAxB;AAEA1+B,QAAI,CAACw+B,KAAD,EAAQ,UAACV,IAAD,EAAe3kC,KAAf,EAA4B;AACtC,UAAIA,KAAK,GAAG,CAAR,IAAaa,cAASoc,KAAI,CAACmoB,cAAdvkC,EAA8B8jC,IAA9B9jC,CAAjB,EAAsD;AACpDykC,qBAAa,CAACX,IAAD,CAAb,GAAsB3kC,KAAtB;AACAulC,yBAAiB,GAAG,IAApB;AACD;AACF,KALG,CAAJ;;AAOA,QAAIA,iBAAJ,EAAuB;AACrB,WAAKP,OAAL,CAAaQ,WAAb,CAAyBF,aAAzB;AACD,KAdH;;;AAiBE77B,yBAAqB,CACnB,KAAKy7B,YAAL,CAAkB5hC,IAAlB,CAAuB,IAAvB,CADmB,EAEnB6B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACwO,MAAL,KAAgB,CAAhB,GAAoBmxB,qBAA/B,CAFmB,CAArB;AAID,GArBO;;AAsBV;AAAC,CA3CD;ACnCA;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;AAcA;AAAA;AAAA;AAAA;;;;;AAKU,uBAA2B,EAA3B;;;;;;;AAOA,2BAAkB,CAAlB;AAyFT;;;;;;AApFCW,+CAAYC,aAAZ,EAAkC;;AAEhC,QAAIC,QAAQ,GAAG,IAAf;;AACA,SAAK,IAAIrjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGojC,aAAa,CAACnjC,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,UAAM4gB,SAAS,GAAGwiB,aAAa,CAACpjC,CAAD,CAA/B;AACA,UAAMsjC,SAAS,GAAG1iB,SAAS,CAACV,OAAV,EAAlB;;AACA,UAAImjB,QAAQ,KAAK,IAAb,IAAqB,CAACC,SAAS,CAAC9uB,MAAV,CAAiB6uB,QAAQ,CAACnjB,OAAT,EAAjB,CAA1B,EAAgE;AAC9D,aAAKqjB,WAAL,CAAiBx/B,IAAjB,CAAsBs/B,QAAtB;AACAA,gBAAQ,GAAG,IAAX;AACD;;AAED,UAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,gBAAQ,GAAG,IAAIG,SAAJ,CAAcF,SAAd,CAAX;AACD;;AAEDD,cAAQ,CAACI,GAAT,CAAa7iB,SAAb;AACD;;AACD,QAAIyiB,QAAJ,EAAc;AACZ,WAAKE,WAAL,CAAiBx/B,IAAjB,CAAsBs/B,QAAtB;AACD;AACF,GApBD;;;;;;;;;;;;AA+BAF,qDAAkB18B,IAAlB,EAA8B28B,aAA9B,EAAoD;AAClD,SAAKM,WAAL,CAAiBN,aAAjB;AACA,SAAKO,mCAAL,CAAyC,UAACL,SAAD,EAAgB;AACvD,sBAAS,CAAC9uB,MAAV,CAAiB/N,IAAjB;AAAsB,KADxB;AAGD,GALD;;;;;;;;;;;;AAgBA08B,6DAA0BS,WAA1B,EAA6CR,aAA7C,EAAmE;AACjE,SAAKM,WAAL,CAAiBN,aAAjB;AAEA,SAAKO,mCAAL,CAAyC,UAACL,SAAD,EAAgB;AACvD,aAAOA,SAAS,CAAC/kC,QAAV,CAAmBqlC,WAAnB,KAAmCA,WAAW,CAACrlC,QAAZ,CAAqB+kC,SAArB,CAA1C;AACD,KAFD;AAGD,GAND;;;;;;;AAYQH,6DAAR,UACEzZ,SADF,EACoC;AAElC,SAAKma,eAAL;AAEA,QAAIC,OAAO,GAAG,IAAd;;AACA,SAAK,IAAI9jC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKujC,WAAL,CAAiBtjC,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,UAAM+jC,SAAS,GAAG,KAAKR,WAAL,CAAiBvjC,CAAjB,CAAlB;;AACA,UAAI+jC,SAAJ,EAAe;AACb,YAAMT,SAAS,GAAGS,SAAS,CAAC7jB,OAAV,EAAlB;;AACA,YAAIwJ,SAAS,CAAC4Z,SAAD,CAAb,EAA0B;AACxB,eAAKC,WAAL,CAAiBvjC,CAAjB,EAAoBgkC,KAApB;AACA,eAAKT,WAAL,CAAiBvjC,CAAjB,IAAsB,IAAtB;AACD,SAHD,MAGO;AACL8jC,iBAAO,GAAG,KAAV;AACD;AACF;AACF;;AAED,QAAIA,OAAJ,EAAa;AACX,WAAKP,WAAL,GAAmB,EAAnB;AACD;;AAED,SAAKM,eAAL;AACD,GAxBO;;AAyBV;AAAC,CArGD;AAuGA;;;;;;AAIA;AAAA;AAAA;AAOE,qBAA6Bv1B,KAA7B,EAAwC;AAAX;;;;;;AAFrB,mBAAmB,EAAnB;AAEoC;;;;;;AAK5Ck1B,sCAAI5iB,SAAJ,EAAoB;AAClB,SAAKqjB,OAAL,CAAalgC,IAAb,CAAkB6c,SAAlB;AACD,GAFD;;;;;;AAOA4iB;AACE,SAAK,IAAIxjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKikC,OAAL,CAAahkC,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,UAAM4gB,SAAS,GAAG,KAAKqjB,OAAL,CAAajkC,CAAb,CAAlB;;AACA,UAAI4gB,SAAS,KAAK,IAAlB,EAAwB;AACtB,aAAKqjB,OAAL,CAAajkC,CAAb,IAAkB,IAAlB;AACA,YAAMkkC,OAAO,GAAGtjB,SAAS,CAACX,cAAV,EAAhB;;AACA,YAAI3f,MAAJ,EAAY;AACVS,aAAG,CAAC,YAAY6f,SAAS,CAACxiB,QAAV,EAAb,CAAH;AACD;;AACD0I,sBAAc,CAACo9B,OAAD,CAAd;AACD;AACF;AACF,GAZD;;;;;;AAiBAV;AACE,WAAO,KAAKl1B,KAAZ;AACD,GAFD;;AAGF;AAAC,CAvCD;AC9IA;;;;;;;;;;;;;;;;;AAmBA;;;;;;AAIA;AAAA;AAAA;;;;AAWE,wBAAoB61B,cAApB,EAA4C;AAAxB;AAVZ,sBAKJ,EALI;AAWNxjC,gBACER,KAAK,CAACC,OAAN,CAAc+jC,cAAd,KAAiCA,cAAc,CAAClkC,MAAf,GAAwB,CAD3DU,EAEE,4BAFFA;AAID;;;;;;;;AAgBSyjC,mCAAV,UAAkBl1B,SAAlB,EAAmC;AAAE;;SAAA,yCAAqB;AAArBpP;;;AACnC,QAAIK,KAAK,CAACC,OAAN,CAAc,KAAKikC,UAAL,CAAgBn1B,SAAhB,CAAd,CAAJ,EAA+C;;AAE7C,UAAMo1B,SAAS,kBAAO,KAAKD,UAAL,CAAgBn1B,SAAhB,CAAP,CAAf;;AAEA,WAAK,IAAIlP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGskC,SAAS,CAACrkC,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCskC,iBAAS,CAACtkC,CAAD,CAAT,CAAaijB,QAAb,CAAsB5iB,KAAtB,CAA4BikC,SAAS,CAACtkC,CAAD,CAAT,CAAamjB,OAAzC,EAAkDrjB,OAAlD;AACD;AACF;AACF,GATS;;AAWVskC,wCAAGl1B,SAAH,EAAsB+T,QAAtB,EAAsDE,OAAtD,EAAsE;AACpE,SAAKohB,kBAAL,CAAwBr1B,SAAxB;AACA,SAAKm1B,UAAL,CAAgBn1B,SAAhB,IAA6B,KAAKm1B,UAAL,CAAgBn1B,SAAhB,KAA8B,EAA3D;AACA,SAAKm1B,UAAL,CAAgBn1B,SAAhB,EAA2BnL,IAA3B,CAAgC;AAAEkf,cAAQ,UAAV;AAAYE,aAAO;AAAnB,KAAhC;AAEA,QAAMvC,SAAS,GAAG,KAAK4jB,eAAL,CAAqBt1B,SAArB,CAAlB;;AACA,QAAI0R,SAAJ,EAAe;AACbqC,cAAQ,CAAC5iB,KAAT,CAAe8iB,OAAf,EAAwBvC,SAAxB;AACD;AACF,GATD;;AAWAwjB,yCAAIl1B,SAAJ,EAAuB+T,QAAvB,EAAuDE,OAAvD,EAAuE;AACrE,SAAKohB,kBAAL,CAAwBr1B,SAAxB;AACA,QAAMo1B,SAAS,GAAG,KAAKD,UAAL,CAAgBn1B,SAAhB,KAA8B,EAAhD;;AACA,SAAK,IAAIlP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGskC,SAAS,CAACrkC,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UACEskC,SAAS,CAACtkC,CAAD,CAAT,CAAaijB,QAAb,KAA0BA,QAA1B,KACC,CAACE,OAAD,IAAYA,OAAO,KAAKmhB,SAAS,CAACtkC,CAAD,CAAT,CAAamjB,OADtC,CADF,EAGE;AACAmhB,iBAAS,CAACvL,MAAV,CAAiB/4B,CAAjB,EAAoB,CAApB;AACA;AACD;AACF;AACF,GAZD;;AAcQokC,8CAAR,UAA2Bl1B,SAA3B,EAA4C;AAC1CvO,gBACE,KAAKwjC,cAAL,CAAoBtc,IAApB,CAAyB,cAAE;AACzB,aAAO4c,EAAE,KAAKv1B,SAAd;AACD,KAFD,CADFvO,EAIE,oBAAoBuO,SAJtBvO;AAMD,GAPO;;AAQV;AAAC,CA5ED;ACvBA;;;;;;;;;;;;;;;;;AAsBA;;;;;AAGA;AAAA;AAAA;AAAuCqR;;AAOrC;AAAA,gBACEwL,kBAAM,CAAC,SAAD,CAAN,KAAkB,IADpB;;AAEE,QAAIknB,MAAJ;AACA,QAAIC,gBAAJ;;AACA,QACE,OAAOpiC,QAAP,KAAoB,WAApB,IACA,OAAOA,QAAQ,CAACQ,gBAAhB,KAAqC,WAFvC,EAGE;AACA,UAAI,OAAOR,QAAQ,CAAC,QAAD,CAAf,KAA8B,WAAlC,EAA+C;;AAE7CoiC,wBAAgB,GAAG,kBAAnB;AACAD,cAAM,GAAG,QAAT;AACD,OAJD,MAIO,IAAI,OAAOniC,QAAQ,CAAC,WAAD,CAAf,KAAiC,WAArC,EAAkD;AACvDoiC,wBAAgB,GAAG,qBAAnB;AACAD,cAAM,GAAG,WAAT;AACD,OAHM,MAGA,IAAI,OAAOniC,QAAQ,CAAC,UAAD,CAAf,KAAgC,WAApC,EAAiD;AACtDoiC,wBAAgB,GAAG,oBAAnB;AACAD,cAAM,GAAG,UAAT;AACD,OAHM,MAGA,IAAI,OAAOniC,QAAQ,CAAC,cAAD,CAAf,KAAoC,WAAxC,EAAqD;AAC1DoiC,wBAAgB,GAAG,wBAAnB;AACAD,cAAM,GAAG,cAAT;AACD;AACF,KAtBH;;;;;;AA4BE/pB,SAAI,CAACiqB,QAAL,GAAgB,IAAhB;;AAEA,QAAID,gBAAJ,EAAsB;AACpBpiC,cAAQ,CAACQ,gBAAT,CACE4hC,gBADF,EAEE;AACE,YAAMpM,OAAO,GAAG,CAACh2B,QAAQ,CAACmiC,MAAD,CAAzB;;AACA,YAAInM,OAAO,KAAK5d,KAAI,CAACiqB,QAArB,EAA+B;AAC7BjqB,eAAI,CAACiqB,QAAL,GAAgBrM,OAAhB;;AACA5d,eAAI,CAACkqB,OAAL,CAAa,SAAb,EAAwBtM,OAAxB;AACD;AACF,OARH,EASE,KATF;AAWD;;;AACF;;AA/CMuM,kCAAP;AACE,WAAO,IAAIA,iBAAJ,EAAP;AACD,GAFM;;;;;;;AAqDPA,0DAAgB51B,SAAhB,EAAiC;AAC/BvO,gBAAOuO,SAAS,KAAK,SAArBvO,EAAgC,yBAAyBuO,SAAzDvO;AACA,WAAO,CAAC,KAAKikC,QAAN,CAAP;AACD,GAHD;;AAIF;AA5DA,EAAuCR,YAAvC;ACzBA;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;AASA;AAAA;AAAA;AAAmCpyB;;AAOjC;AAAA,gBACEwL,kBAAM,CAAC,QAAD,CAAN,KAAiB,IADnB;;AANQ7C,oBAAU,IAAV,CAMR;;;;;AAOE,QACE,OAAOjc,MAAP,KAAkB,WAAlB,IACA,OAAOA,MAAM,CAACqE,gBAAd,KAAmC,WADnC,IAEA,CAACgiC,sBAHH,EAIE;AACArmC,YAAM,CAACqE,gBAAP,CACE,QADF,EAEE;AACE,YAAI,CAAC4X,KAAI,CAACqqB,OAAV,EAAmB;AACjBrqB,eAAI,CAACqqB,OAAL,GAAe,IAAf;;AACArqB,eAAI,CAACkqB,OAAL,CAAa,QAAb,EAAuB,IAAvB;AACD;AACF,OAPH,EAQE,KARF;AAWAnmC,YAAM,CAACqE,gBAAP,CACE,SADF,EAEE;AACE,YAAI4X,KAAI,CAACqqB,OAAT,EAAkB;AAChBrqB,eAAI,CAACqqB,OAAL,GAAe,KAAf;;AACArqB,eAAI,CAACkqB,OAAL,CAAa,QAAb,EAAuB,KAAvB;AACD;AACF,OAPH,EAQE,KARF;AAUD;;;AACF;;AAtCMI,8BAAP;AACE,WAAO,IAAIA,aAAJ,EAAP;AACD,GAFM;;;;;;;AA4CPA,sDAAgB/1B,SAAhB,EAAiC;AAC/BvO,gBAAOuO,SAAS,KAAK,QAArBvO,EAA+B,yBAAyBuO,SAAxDvO;AACA,WAAO,CAAC,KAAKqkC,OAAN,CAAP;AACD,GAHD;;;;;;AAQAC;AACE,WAAO,KAAKD,OAAZ;AACD,GAFD;;AAGF;AA1DA,EAAmCZ,YAAnC;AC7BA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;AAKA;AAAA;AAAA;;;;AASE,0BAAoBc,UAApB,EAA+C;AAA3B;AARpB,4BAA8B,EAA9B;AACA,8BAAqB,CAArB;AACA,8BAAqB,CAAC,CAAtB;AACA,mBAA+B,IAA/B;AAKmD;;AAEnDC,kDAAWC,WAAX,EAAgCniB,QAAhC,EAAoD;AAClD,SAAKoiB,kBAAL,GAA0BD,WAA1B;AACA,SAAKE,OAAL,GAAeriB,QAAf;;AACA,QAAI,KAAKoiB,kBAAL,GAA0B,KAAKE,kBAAnC,EAAuD;AACrD,WAAKD,OAAL;AACA,WAAKA,OAAL,GAAe,IAAf;AACD;AACF,GAPD;;;;;;;;;;AAgBAH,sDAAeK,UAAf,EAAmCxjC,IAAnC,EAAkD;AAAlD;;AACE,SAAKyjC,gBAAL,CAAsBD,UAAtB,IAAoCxjC,IAApC;;;AAEE,UAAM0jC,SAAS,GAAGC,OAAKF,gBAAL,CAChBE,OAAKJ,kBADW,CAAlB;AAGA,aAAOI,OAAKF,gBAAL,CAAsBE,OAAKJ,kBAA3B,CAAP;;8BACSvlC,GAAC;AACR,YAAI0lC,SAAS,CAAC1lC,CAAD,CAAb,EAAkB;AAChB8G,wBAAc,CAAC;AACb6T,iBAAI,CAACuqB,UAAL,CAAgBQ,SAAS,CAAC1lC,CAAD,CAAzB;AACD,WAFa,CAAd;AAGD;;;AALH,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0lC,SAAS,CAACzlC,MAA9B,EAAsC,EAAED,CAAxC,EAAyC;gBAAhCA;AAMR;;AACD,UAAI2lC,OAAKJ,kBAAL,KAA4BI,OAAKN,kBAArC,EAAyD;AACvD,YAAIM,OAAKL,OAAT,EAAkB;AAChBK,iBAAKL,OAAL;AACAK,iBAAKL,OAAL,GAAe,IAAf;AACD;;;AAEF;;AACDK,aAAKJ,kBAAL;;;;;AAnBF,WAAO,KAAKE,gBAAL,CAAsB,KAAKF,kBAA3B,CAAP,EAAqD;;;;AAoBpD;AACF,GAvBD;;AAwBF;AAAC,CAnDD;ACxBA;;;;;;;;;;;;;;;;AA4CA;;;AACO,IAAMK,6BAA6B,GAAG,OAAtC;AACA,IAAMC,+BAA+B,GAAG,OAAxC;AACA,IAAMC,iCAAiC,GAAG,YAA1C;AACA,IAAMC,8BAA8B,GAAG,SAAvC;AACA,IAAMC,0BAA0B,GAAG,IAAnC;AACA,IAAMC,0BAA0B,GAAG,IAAnC;AACA,IAAMC,8BAA8B,GAAG,KAAvC;AACA,IAAMC,mCAAmC,GAAG,IAA5C;AACA,IAAMC,mCAAmC,GAAG,KAA5C;AACA,IAAMC,oCAAoC,GAAG,IAA7C;AACA,IAAMC,4BAA4B,GAAG,GAArC;AAEA,IAAMC,6CAA6C,GAAG,QAAtD,C,CAEP;AACA;AACA;;AACA,IAAMC,iBAAiB,GAAG,IAA1B;AACA,IAAMC,eAAe,GAAG,EAAxB,C,CAA2B;;AAC3B,IAAMC,gBAAgB,GAAGF,iBAAiB,GAAGC,eAA7C;AAEA;;;;;;;;AAOA,IAAME,0BAA0B,GAAG,KAAnC;AAEA;;;;;;AAKA,IAAMC,kBAAkB,GAAG,KAA3B;AAEA;;;;;;;AAMA;AAAA;AAAA;;;;;;;;;AAyBE,iCACSC,MADT,EAES/5B,QAFT,EAGSg6B,kBAHT,EAISC,aAJT,EAI+B;AAHtB;AACA;AACA;AACA;AA5BT,qBAAY,CAAZ;AACA,yBAAgB,CAAhB;AAUQ,0BAAiB,KAAjB;AAmBN,SAAKC,IAAL,GAAY5lC,UAAU,CAACylC,MAAD,CAAtB;AACA,SAAKI,MAAL,GAAcrF,YAAY,CAACsF,aAAb,CAA2Bp6B,QAA3B,CAAd;;AACA,SAAKq6B,KAAL,GAAa,UAAC37B,MAAD,EAAgC;AAC3C,qBAAQ,CAAC47B,aAAT,CAAuB18B,YAAvB,EAAqCc,MAArC;AAA4C,KAD9C;AAED;;;;;;;;AAOD67B,mDAAKC,SAAL,EAAmCC,YAAnC,EAAsE;AAAtE;;AACE,SAAKC,aAAL,GAAqB,CAArB;AACA,SAAKC,aAAL,GAAqBF,YAArB;AACA,SAAKG,eAAL,GAAuB,IAAIvC,cAAJ,CAAmBmC,SAAnB,CAAvB;AACA,SAAKK,SAAL,GAAiB,KAAjB;AAEA,SAAKC,oBAAL,GAA4BhlC,UAAU,CAAC;AACrC+X,WAAI,CAACqsB,IAAL,CAAU,8BAAV,EADqC;;;AAGrCrsB,WAAI,CAACktB,SAAL;;AACAltB,WAAI,CAACitB,oBAAL,GAA4B,IAA5B,CAJqC;AAMtC,KANqC,EAMnC/kC,IAAI,CAACC,KAAL,CAAW8jC,kBAAX,CANmC,CAAtC,CANoE;;AAepExkC,uBAAmB,CAAC;AAClB,UAAIuY,KAAI,CAACgtB,SAAT,EAAoB;AAClB;AACD,OAHiB;;;AAMlBhtB,WAAI,CAACmtB,eAAL,GAAuB,IAAIC,0BAAJ,CACrB;AAAC;;aAAA,yCAAO;AAAPC;;;AACO;AAAA,YAACC,eAAD;AAAA,YAAUC,YAAV;AAAA,YAAgBC,YAAhB;AAAA,YAAsBC,YAAtB;AAAA,YAA4BC,YAA5B;;AACN1tB,aAAI,CAAC2tB,uBAAL,CAA6BN,IAA7B;;AACA,YAAI,CAACrtB,KAAI,CAACmtB,eAAV,EAA2B;AACzB,iBADyB,CAClB;AACR;;AAED,YAAIntB,KAAI,CAACitB,oBAAT,EAA+B;AAC7BW,sBAAY,CAAC5tB,KAAI,CAACitB,oBAAN,CAAZ;AACAjtB,eAAI,CAACitB,oBAAL,GAA4B,IAA5B;AACD;;AACDjtB,aAAI,CAAC6tB,cAAL,GAAsB,IAAtB;;AACA,YAAIP,OAAO,KAAKrC,6BAAhB,EAA+C;AAC7CjrB,eAAI,CAACzb,EAAL,GAAUgpC,IAAV;AACAvtB,eAAI,CAAC8tB,QAAL,GAAgBN,IAAhB;AACD,SAHD,MAGO,IAAIF,OAAO,KAAKpC,+BAAhB,EAAiD;;AAEtD,cAAIqC,IAAJ,EAAU;;;AAGRvtB,iBAAI,CAACmtB,eAAL,CAAqBY,YAArB,GAAoC,KAApC,CAHQ;;;AAOR/tB,iBAAI,CAAC+sB,eAAL,CAAqBiB,UAArB,CAAgCT,IAAhC,EAAgD;AAC9CvtB,mBAAI,CAACktB,SAAL;AACD,aAFD;AAGD,WAVD,MAUO;AACLltB,iBAAI,CAACktB,SAAL;AACD;AACF,SAfM,MAeA;AACL,gBAAM,IAAIpmC,KAAJ,CAAU,oCAAoCwmC,OAA9C,CAAN;AACD;AACF,OAlCoB,EAmCrB;AAAC;;aAAA,yCAAO;AAAPD;;;AACO;AAAA,YAACY,UAAD;AAAA,YAAK5mC,YAAL;;AACN2Y,aAAI,CAAC2tB,uBAAL,CAA6BN,IAA7B;;AACArtB,aAAI,CAAC+sB,eAAL,CAAqBmB,cAArB,CAAoCD,EAApC,EAAkD5mC,IAAlD;AACD,OAvCoB,EAwCrB;AACE2Y,aAAI,CAACktB,SAAL;AACD,OA1CoB,EA2CrBltB,KAAI,CAACwsB,KA3CgB,CAAvB,CANkB;;;AAsDlB,UAAM2B,SAAS,GAAqC,EAApD;AACAA,eAAS,CAAClD,6BAAD,CAAT,GAA2C,GAA3C;AACAkD,eAAS,CAAC5C,8BAAD,CAAT,GAA4CrjC,IAAI,CAACC,KAAL,CAC1CD,IAAI,CAACwO,MAAL,KAAgB,SAD0B,CAA5C;;AAGA,UAAIsJ,KAAI,CAACmtB,eAAL,CAAqBiB,wBAAzB,EAAmD;AACjDD,iBAAS,CACP3C,mCADO,CAAT,GAEIxrB,KAAI,CAACmtB,eAAL,CAAqBiB,wBAFzB;AAGD;;AACDD,eAAS,CAAC3+B,aAAD,CAAT,GAA2BD,gBAA3B;;AACA,UAAIyQ,KAAI,CAACmsB,kBAAT,EAA6B;AAC3BgC,iBAAS,CAAC1+B,uBAAD,CAAT,GAAqCuQ,KAAI,CAACmsB,kBAA1C;AACD;;AACD,UAAInsB,KAAI,CAACosB,aAAT,EAAwB;AACtB+B,iBAAS,CAACt+B,kBAAD,CAAT,GAAgCmQ,KAAI,CAACosB,aAArC;AACD;;AACD,UACE,OAAOnlC,QAAP,KAAoB,WAApB,IACAA,QAAQ,CAACqE,IADT,IAEArE,QAAQ,CAACqE,IAAT,CAAcnE,OAAd,CAAsByI,YAAtB,MAAwC,CAAC,CAH3C,EAIE;AACAu+B,iBAAS,CAACz+B,aAAD,CAAT,GAA2BC,SAA3B;AACD;;AACD,UAAM0+B,UAAU,GAAGruB,KAAI,CAACwsB,KAAL,CAAW2B,SAAX,CAAnB;;AACAnuB,WAAI,CAACqsB,IAAL,CAAU,iCAAiCgC,UAA3C;;AACAruB,WAAI,CAACmtB,eAAL,CAAqBmB,MAArB,CAA4BD,UAA5B,EAAwC;;AAEvC,OAFD;AAGD,KAnFkB,CAAnB;AAoFD,GAnGD;;;;;;AAwGA3B;AACE,SAAKS,eAAL,CAAqBoB,aAArB,CAAmC,KAAKhqC,EAAxC,EAA4C,KAAKupC,QAAjD;AACA,SAAKU,sBAAL,CAA4B,KAAKjqC,EAAjC,EAAqC,KAAKupC,QAA1C;AACD,GAHD;;;;;;AAUOpB,qCAAP;AACEA,yBAAqB,CAAC+B,WAAtB,GAAoC,IAApC;AACD,GAFM;;;;;;AASA/B,wCAAP;AACEA,yBAAqB,CAACgC,cAAtB,GAAuC,IAAvC;AACD,GAFM,CArKT;;;AA0KShC,sCAAP;AACE,QAAI/kC,gBAAJ,EAAiB;AACf,aAAO,KAAP;AACD,KAFD,MAEO,IAAI+kC,qBAAqB,CAAC+B,WAA1B,EAAuC;AAC5C,aAAO,IAAP;AACD,KAFM,MAEA;;;AAGL,aACE,CAAC/B,qBAAqB,CAACgC,cAAvB,IACA,OAAO9mC,QAAP,KAAoB,WADpB,IAEAA,QAAQ,CAAC+mC,aAAT,IAA0B,IAF1B,IAGA,CAACvjC,8BAA8B,EAH/B,IAIA,CAACG,iBAAiB,EALpB;AAOD;AACF,GAhBM;;;;;;AAqBPmhC,uEAA0B,CAA1B;;;;;;;AAMQA,8CAAR;AACE,SAAKM,SAAL,GAAiB,IAAjB;;AAEA,QAAI,KAAKG,eAAT,EAA0B;AACxB,WAAKA,eAAL,CAAqByB,KAArB;AACA,WAAKzB,eAAL,GAAuB,IAAvB;AACD,KANH;;;AASE,QAAI,KAAK0B,cAAT,EAAyB;AACvBjnC,cAAQ,CAACI,IAAT,CAAc8mC,WAAd,CAA0B,KAAKD,cAA/B;AACA,WAAKA,cAAL,GAAsB,IAAtB;AACD;;AAED,QAAI,KAAK5B,oBAAT,EAA+B;AAC7BW,kBAAY,CAAC,KAAKX,oBAAN,CAAZ;AACA,WAAKA,oBAAL,GAA4B,IAA5B;AACD;AACF,GAlBO;;;;;;;AAwBAP,8CAAR;AACE,QAAI,CAAC,KAAKM,SAAV,EAAqB;AACnB,WAAKX,IAAL,CAAU,4BAAV;AACA,WAAK0C,SAAL;;AAEA,UAAI,KAAKjC,aAAT,EAAwB;AACtB,aAAKA,aAAL,CAAmB,KAAKe,cAAxB;AACA,aAAKf,aAAL,GAAqB,IAArB;AACD;AACF;AACF,GAVO;;;;;;;AAgBRJ;AACE,QAAI,CAAC,KAAKM,SAAV,EAAqB;AACnB,WAAKX,IAAL,CAAU,2BAAV;AACA,WAAK0C,SAAL;AACD;AACF,GALD;;;;;;;;AAYArC,mDAAKrlC,IAAL,EAAa;AACX,QAAM2nC,OAAO,GAAG7rC,eAAUkE,IAAVlE,CAAhB;AACA,SAAK8rC,SAAL,IAAkBD,OAAO,CAAC1pC,MAA1B;AACA,SAAKgnC,MAAL,CAAY4C,gBAAZ,CAA6B,YAA7B,EAA2CF,OAAO,CAAC1pC,MAAnD,EAHW;;AAMX,QAAM6pC,UAAU,GAAGC,kBAAaJ,OAAbI,CAAnB,CANW;;;AAUX,QAAM3lC,QAAQ,GAAGH,iBAAiB,CAAC6lC,UAAD,EAAapD,gBAAb,CAAlC,CAVW;;;AAcX,SAAK,IAAI1mC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoE,QAAQ,CAACnE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,WAAK8nC,eAAL,CAAqBkC,cAArB,CACE,KAAKxC,aADP,EAEEpjC,QAAQ,CAACnE,MAFX,EAGEmE,QAAQ,CAACpE,CAAD,CAHV;AAKA,WAAKwnC,aAAL;AACD;AACF,GAtBD;;;;;;;;;;AA+BAH,qEAAuBnoC,EAAvB,EAAmC+qC,EAAnC,EAA6C;AAC3C,QAAI3nC,gBAAJ,EAAiB;AACf;AACD;;AACD,SAAKknC,cAAL,GAAsBjnC,QAAQ,CAAC+mC,aAAT,CAAuB,QAAvB,CAAtB;AACA,QAAMR,SAAS,GAA4B,EAA3C;AACAA,aAAS,CAACvC,6CAAD,CAAT,GAA2D,GAA3D;AACAuC,aAAS,CAAC9C,0BAAD,CAAT,GAAwC9mC,EAAxC;AACA4pC,aAAS,CAAC7C,0BAAD,CAAT,GAAwCgE,EAAxC;AACA,SAAKT,cAAL,CAAoBU,GAApB,GAA0B,KAAK/C,KAAL,CAAW2B,SAAX,CAA1B;AACA,SAAKU,cAAL,CAAoBW,KAApB,CAA0BC,OAA1B,GAAoC,MAApC;AAEA7nC,YAAQ,CAACI,IAAT,CAAc0nC,WAAd,CAA0B,KAAKb,cAA/B;AACD,GAbD;;;;;;;;AAoBQnC,4DAAR,UAAgCW,IAAhC,EAA6C;;AAE3C,QAAMsC,aAAa,GAAGxsC,eAAUkqC,IAAVlqC,EAAgBmC,MAAtC;AACA,SAAKqqC,aAAL,IAAsBA,aAAtB;AACA,SAAKrD,MAAL,CAAY4C,gBAAZ,CAA6B,gBAA7B,EAA+CS,aAA/C;AACD,GALO;;AAMV;AAAC,CAlTD;AAyTA;;;;;;AAIA;AAAA;AAAA;;;;;;;AAiCE,sCACEC,SADF,EAEEC,WAFF,EAGSjD,YAHT,EAISJ,KAJT,EAIqC;AAD5B;AACA,uBAA4B;;;AAlCrC,+BAAsB,IAAIsD,GAAJ,EAAtB,CAkCqC;;AA/BrC,uBAA8D,EAA9D,CA+BqC;;;;;;AAxBrC,yBAAgB5nC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACwO,MAAL,KAAgB,SAA3B,CAAhB,CAwBqC;;;AApBrC,wBAAe,IAAf;;AAsBE,QAAI,CAAC/O,gBAAL,EAAkB;;;;;AAKhB,WAAKymC,wBAAL,GAAgC9pC,aAAa,EAA7C;AACAP,YAAM,CACJonC,iCAAiC,GAAG,KAAKiD,wBADrC,CAAN,GAEIwB,SAFJ;AAGA7rC,YAAM,CACJqnC,8BAA8B,GAAG,KAAKgD,wBADlC,CAAN,GAEIyB,WAFJ,CATgB;;AAchB,WAAKE,QAAL,GAAgB3C,0BAA0B,CAAC4C,aAA3B,EAAhB,CAdgB;;AAiBhB,UAAIC,MAAM,GAAG,EAAb,CAjBgB;;;AAoBhB,UACE,KAAKF,QAAL,CAAcR,GAAd,IACA,KAAKQ,QAAL,CAAcR,GAAd,CAAkBrkC,MAAlB,CAAyB,CAAzB,EAA4B,cAAc5F,MAA1C,MAAsD,aAFxD,EAGE;AACA,YAAM4qC,aAAa,GAAGtoC,QAAQ,CAAC0I,MAA/B;AACA2/B,cAAM,GAAG,8BAA8BC,aAA9B,GAA8C,aAAvD;AACD;;AACD,UAAMC,cAAc,GAAG,iBAAiBF,MAAjB,GAA0B,gBAAjD;;AACA,UAAI;AACF,aAAKF,QAAL,CAAcK,GAAd,CAAkBC,IAAlB;AACA,aAAKN,QAAL,CAAcK,GAAd,CAAkBlR,KAAlB,CAAwBiR,cAAxB;AACA,aAAKJ,QAAL,CAAcK,GAAd,CAAkBxB,KAAlB;AACD,OAJD,CAIE,OAAO3qC,CAAP,EAAU;AACVmC,WAAG,CAAC,yBAAD,CAAH;;AACA,YAAInC,CAAC,CAACmI,KAAN,EAAa;AACXhG,aAAG,CAACnC,CAAC,CAACmI,KAAH,CAAH;AACD;;AACDhG,WAAG,CAACnC,CAAD,CAAH;AACD;AACF,KAvCD,MAuCO;AACL,WAAK2rC,SAAL,GAAiBA,SAAjB;AACA,WAAKC,WAAL,GAAmBA,WAAnB;AACD;AACF;;;;;;;;;AAQczC,6CAAf;AACE,QAAMkD,MAAM,GAAG1oC,QAAQ,CAAC+mC,aAAT,CAAuB,QAAvB,CAAf;AACA2B,UAAM,CAACd,KAAP,CAAaC,OAAb,GAAuB,MAAvB,CAFF;;AAKE,QAAI7nC,QAAQ,CAACI,IAAb,EAAmB;AACjBJ,cAAQ,CAACI,IAAT,CAAc0nC,WAAd,CAA0BY,MAA1B;;AACA,UAAI;;;;AAIF,YAAM7nC,CAAC,GAAG6nC,MAAM,CAACC,aAAP,CAAqB3oC,QAA/B;;AACA,YAAI,CAACa,CAAL,EAAQ;;AAENrC,aAAG,CAAC,+BAAD,CAAH;AACD;AACF,OATD,CASE,OAAOnC,CAAP,EAAU;AACV,YAAMqM,MAAM,GAAG1I,QAAQ,CAAC0I,MAAxB;AACAggC,cAAM,CAACf,GAAP,GACE,kEACAj/B,MADA,GAEA,0BAHF;AAID;AACF,KAlBD,MAkBO;;;AAGL,YAAM,mGAAN;AACD,KA3BH;;;AA8BE,QAAIggC,MAAM,CAACE,eAAX,EAA4B;AAC1BF,YAAM,CAACF,GAAP,GAAaE,MAAM,CAACE,eAApB,CAD0B,CACU;AACrC,KAFD,MAEO,IAAIF,MAAM,CAACC,aAAX,EAA0B;AAC/BD,YAAM,CAACF,GAAP,GAAaE,MAAM,CAACC,aAAP,CAAqB3oC,QAAlC,CAD+B,CACY;;AAE5C,KAHM,MAGA,IAAK0oC,MAAc,CAAC1oC,QAApB,EAA8B;;AAEnC0oC,YAAM,CAACF,GAAP,GAAcE,MAAc,CAAC1oC,QAA7B,CAFmC,CAEG;AACvC;;AAED,WAAO0oC,MAAP;AACD,GAzCc;;;;;;AA8CflD;AAAA;;;AAEE,SAAKqD,KAAL,GAAa,KAAb;;AAEA,QAAI,KAAKV,QAAT,EAAmB;;;;AAIjB,WAAKA,QAAL,CAAcK,GAAd,CAAkBpoC,IAAlB,CAAuB0oC,SAAvB,GAAmC,EAAnC;AACAzoC,gBAAU,CAAC;AACT,YAAI+X,KAAI,CAAC+vB,QAAL,KAAkB,IAAtB,EAA4B;AAC1BnoC,kBAAQ,CAACI,IAAT,CAAc8mC,WAAd,CAA0B9uB,KAAI,CAAC+vB,QAA/B;AACA/vB,eAAI,CAAC+vB,QAAL,GAAgB,IAAhB;AACD;AACF,OALS,EAKP7nC,IAAI,CAACC,KAAL,CAAW,CAAX,CALO,CAAV;AAMD,KAfH;;;AAkBE,QAAMykC,YAAY,GAAG,KAAKA,YAA1B;;AACA,QAAIA,YAAJ,EAAkB;AAChB,WAAKA,YAAL,GAAoB,IAApB;AACAA,kBAAY;AACb;AACF,GAvBD;;;;;;;;AA8BAQ,iEAAc7oC,EAAd,EAA0B+qC,EAA1B,EAAoC;AAClC,SAAKqB,IAAL,GAAYpsC,EAAZ;AACA,SAAKqsC,IAAL,GAAYtB,EAAZ;AACA,SAAKmB,KAAL,GAAa,IAAb,CAHkC;;AAMlC,WAAO,KAAKI,WAAL,EAAP,EAA2B,CAAE;AAC9B,GAPD;;;;;;;;;;AAgBQzD,qDAAR;;;;AAIE,QACE,KAAKqD,KAAL,IACA,KAAK1C,YADL,IAEA,KAAK+C,mBAAL,CAAyB/jB,IAAzB,IAAiC,KAAKgkB,WAAL,CAAiBzrC,MAAjB,GAA0B,CAA1B,GAA8B,CAA9B,GAAkC,CAAnE,CAHF,EAIE;;AAEA,WAAK0rC,aAAL;AACA,UAAM7C,SAAS,GAAqC,EAApD;AACAA,eAAS,CAAC9C,0BAAD,CAAT,GAAwC,KAAKsF,IAA7C;AACAxC,eAAS,CAAC7C,0BAAD,CAAT,GAAwC,KAAKsF,IAA7C;AACAzC,eAAS,CAAC5C,8BAAD,CAAT,GAA4C,KAAKyF,aAAjD;AACA,UAAIC,MAAM,GAAG,KAAKzE,KAAL,CAAW2B,SAAX,CAAb,CAPA;;AASA,UAAI+C,aAAa,GAAG,EAApB;AACA,UAAI7rC,CAAC,GAAG,CAAR;;AAEA,aAAO,KAAK0rC,WAAL,CAAiBzrC,MAAjB,GAA0B,CAAjC,EAAoC;;AAElC,YAAM6rC,OAAO,GAAG,KAAKJ,WAAL,CAAiB,CAAjB,CAAhB;;AACA,YACGI,OAAO,CAACC,CAAR,CAAwB9rC,MAAxB,GACCwmC,eADD,GAECoF,aAAa,CAAC5rC,MAFf,IAGDumC,iBAJF,EAKE;;AAEA,cAAMwF,MAAM,GAAG,KAAKN,WAAL,CAAiBO,KAAjB,EAAf;AACAJ,uBAAa,GACXA,aAAa,GACb,GADA,GAEAzF,mCAFA,GAGApmC,CAHA,GAIA,GAJA,GAKAgsC,MAAM,CAACE,GALP,GAMA,GANA,GAOA7F,oCAPA,GAQArmC,CARA,GASA,GATA,GAUAgsC,MAAM,CAACG,EAVP,GAWA,GAXA,GAYA7F,4BAZA,GAaAtmC,CAbA,GAcA,GAdA,GAeAgsC,MAAM,CAACD,CAhBT;AAiBA/rC,WAAC;AACF,SA1BD,MA0BO;AACL;AACD;AACF;;AAED4rC,YAAM,GAAGA,MAAM,GAAGC,aAAlB;AACA,WAAKO,eAAL,CAAqBR,MAArB,EAA6B,KAAKD,aAAlC;AAEA,aAAO,IAAP;AACD,KAtDD,MAsDO;AACL,aAAO,KAAP;AACD;AACF,GA7DO;;;;;;;;;AAqER5D,kEAAesE,MAAf,EAA+BC,SAA/B,EAAkDtqC,IAAlD,EAA+D;;AAE7D,SAAK0pC,WAAL,CAAiB3nC,IAAjB,CAAsB;AAAEmoC,SAAG,EAAEG,MAAP;AAAeF,QAAE,EAAEG,SAAnB;AAA8BP,OAAC,EAAE/pC;AAAjC,KAAtB,EAF6D;;;AAM7D,QAAI,KAAKopC,KAAT,EAAgB;AACd,WAAKI,WAAL;AACD;AACF,GATD;;;;;;;;;AAiBQzD,yDAAR,UAAwBwE,GAAxB,EAAqCC,MAArC,EAAmD;AAAnD,qBAAmD;;;AAEjD,SAAKf,mBAAL,CAAyBhI,GAAzB,CAA6B+I,MAA7B;;AAEA,QAAMC,YAAY,GAAG;AACnB9xB,WAAI,CAAC8wB,mBAAL,CAAyBrjB,MAAzB,CAAgCokB,MAAhC;;AACA7xB,WAAI,CAAC6wB,WAAL;AACD,KAHD,CAJiD;;;;AAWjD,QAAMkB,gBAAgB,GAAG9pC,UAAU,CACjC6pC,YADiC,EAEjC5pC,IAAI,CAACC,KAAL,CAAW6jC,0BAAX,CAFiC,CAAnC;;AAKA,QAAMgG,YAAY,GAAG;;AAEnBpE,kBAAY,CAACmE,gBAAD,CAAZ,CAFmB;;AAKnBD,kBAAY;AACb,KAND;;AAQA,SAAKxD,MAAL,CAAYsD,GAAZ,EAAiBI,YAAjB;AACD,GAzBO;;;;;;;;AAgCR5E,0DAAOwE,GAAP,EAAoBK,MAApB,EAAsC;AAAtC;;AACE,QAAItqC,gBAAJ,EAAiB;;AAEd,WAAauqC,cAAb,CAA4BN,GAA5B,EAAiCK,MAAjC;AACF,KAHD,MAGO;AACLhqC,gBAAU,CAAC;AACT,YAAI;;AAEF,cAAI,CAAC+X,KAAI,CAAC+tB,YAAV,EAAwB;AACtB;AACD;;AACD,cAAMoE,WAAS,GAAGnyB,KAAI,CAAC+vB,QAAL,CAAcK,GAAd,CAAkBzB,aAAlB,CAAgC,QAAhC,CAAlB;;AACAwD,qBAAS,CAACvhC,IAAV,GAAiB,iBAAjB;AACAuhC,qBAAS,CAACC,KAAV,GAAkB,IAAlB;AACAD,qBAAS,CAAC5C,GAAV,GAAgBqC,GAAhB,CARE;;AAUFO,qBAAS,CAACE,MAAV,GAAoBF,WAAiB,CAACG,kBAAlB,GAAuC;;AAEzD,gBAAMC,MAAM,GAAIJ,WAAiB,CAACtqC,UAAlC;;AACA,gBAAI,CAAC0qC,MAAD,IAAWA,MAAM,KAAK,QAAtB,IAAkCA,MAAM,KAAK,UAAjD,EAA6D;;AAE3DJ,yBAAS,CAACE,MAAV,GAAoBF,WAAiB,CAACG,kBAAlB,GAAuC,IAA3D;;AACA,kBAAIH,WAAS,CAACK,UAAd,EAA0B;AACxBL,2BAAS,CAACK,UAAV,CAAqB1D,WAArB,CAAiCqD,WAAjC;AACD;;AACDF,oBAAM;AACP;AACF,WAXD;;AAYAE,qBAAS,CAACM,OAAV,GAAoB;AAClBrsC,eAAG,CAAC,sCAAsCwrC,GAAvC,CAAH;AACA5xB,iBAAI,CAAC+tB,YAAL,GAAoB,KAApB;;AACA/tB,iBAAI,CAAC4uB,KAAL;AACD,WAJD;;AAKA5uB,eAAI,CAAC+vB,QAAL,CAAcK,GAAd,CAAkBpoC,IAAlB,CAAuB0nC,WAAvB,CAAmCyC,WAAnC;AACD,SA5BD,CA4BE,OAAOluC,CAAP,EAAU;AAEX;AACF,OAhCS,EAgCPiE,IAAI,CAACC,KAAL,CAAW,CAAX,CAhCO,CAAV;AAiCD;AACF,GAvCD;;AAwCF;AAAC,CApVD;ACrZA;;;;;;;;;;;;;;;;;AAiBA;;;AACO,IAAIuqC,WAAW,GAAG,EAAlB,C,CAEP;;SACgBC,cAAcC,SAAe;AAC3CF,aAAW,GAAGE,OAAd;AACF;ACvBA;;;;;;;;;;;;;;;;;;AA6CA,IAAMC,wBAAwB,GAAG,KAAjC;AACA,IAAMC,4BAA4B,GAAG,KAArC;AAEA,IAAIC,aAAa,GAAG,IAApB;;AACA,IAAI,OAAOC,YAAP,KAAwB,WAA5B,EAAyC;AACvCD,eAAa,GAAGC,YAAhB;AACD,CAFD,MAEO,IAAI,OAAOC,SAAP,KAAqB,WAAzB,EAAsC;AAC3CF,eAAa,GAAGE,SAAhB;AACD;AAMD;;;;;;;AAKA;AAAA;AAAA;;;;;;;;AAsBE,+BACS/G,MADT,EAEE/5B,QAFF,EAGEg6B,kBAHF,EAIEC,aAJF,EAIwB;AAHf;AAtBT,0BAAgC,IAAhC;AACA,kBAA0B,IAA1B;AACA,uBAAc,CAAd;AACA,qBAAY,CAAZ;AACA,yBAAgB,CAAhB;AAuBE,SAAKC,IAAL,GAAY5lC,UAAU,CAAC,KAAKylC,MAAN,CAAtB;AACA,SAAKI,MAAL,GAAcrF,YAAY,CAACsF,aAAb,CAA2Bp6B,QAA3B,CAAd;AACA,SAAKrB,OAAL,GAAeoiC,mBAAmB,CAACC,cAApB,CACbhhC,QADa,EAEbg6B,kBAFa,EAGbC,aAHa,CAAf;AAKD;;;;;;;;;;;AAUc8G,uCAAf,UACE/gC,QADF,EAEEg6B,kBAFF,EAGEC,aAHF,EAGwB;AAEtB,QAAM+B,SAAS,GAA4B,EAA3C;AACAA,aAAS,CAAC3+B,aAAD,CAAT,GAA2BD,gBAA3B;;AAEA,QACE,CAAC5H,gBAAD,IACA,OAAOV,QAAP,KAAoB,WADpB,IAEAA,QAAQ,CAACqE,IAFT,IAGArE,QAAQ,CAACqE,IAAT,CAAcnE,OAAd,CAAsByI,YAAtB,MAAwC,CAAC,CAJ3C,EAKE;AACAu+B,eAAS,CAACz+B,aAAD,CAAT,GAA2BC,SAA3B;AACD;;AACD,QAAIw8B,kBAAJ,EAAwB;AACtBgC,eAAS,CAAC1+B,uBAAD,CAAT,GAAqC08B,kBAArC;AACD;;AACD,QAAIC,aAAJ,EAAmB;AACjB+B,eAAS,CAACt+B,kBAAD,CAAT,GAAgCu8B,aAAhC;AACD;;AACD,WAAOj6B,QAAQ,CAACs6B,aAAT,CAAuB38B,SAAvB,EAAkCq+B,SAAlC,CAAP;AACD,GAvBc;;;;;;;;AA8Bf+E,iDAAKvG,SAAL,EAAmCC,YAAnC,EAAsE;AAAtE;;AACE,SAAKA,YAAL,GAAoBA,YAApB;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AAEA,SAAKN,IAAL,CAAU,6BAA6B,KAAKv7B,OAA5C;AAEA,SAAK+8B,cAAL,GAAsB,KAAtB,CANoE;;AAQpE3pC,qBAAiB,CAACoC,GAAlB,CAAsB,4BAAtB,EAAoD,IAApD;;AAEA,QAAI;AACF,UAAIqB,gBAAJ,EAAiB;AACf,YAAMyrC,MAAM,GAAGC,eAAcC,UAAdD,GAA2B,WAA3BA,GAAyC,MAAxD,CADe;;AAGf,YAAMzM,OAAO,GAA4B;AACvC2M,iBAAO,EAAE;AACP,0BAAc,cAAYhkC,gBAAZ,GAA4B,GAA5B,GAAgCmjC,WAAhC,GAA2C,GAA3C,GAA+Cc,OAAO,CAACC,QAAvD,GAA+D,GAA/D,GAAmEL;AAD1E;AAD8B,SAAzC,CAHe;;AAUf,YAAMM,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;AACA,YAAMG,KAAK,GACT,KAAK7iC,OAAL,CAAa3J,OAAb,CAAqB,QAArB,MAAmC,CAAnC,GACIusC,GAAG,CAAC,aAAD,CAAH,IAAsBA,GAAG,CAAC,aAAD,CAD7B,GAEIA,GAAG,CAAC,YAAD,CAAH,IAAqBA,GAAG,CAAC,YAAD,CAH9B;;AAKA,YAAIC,KAAJ,EAAW;AACT/M,iBAAO,CAAC,OAAD,CAAP,GAAmB;AAAEgN,kBAAM,EAAED;AAAV,WAAnB;AACD;;AAED,aAAKE,MAAL,GAAc,IAAId,aAAJ,CAAkB,KAAKjiC,OAAvB,EAAgC,EAAhC,EAAoC81B,OAApC,CAAd;AACD,OArBD,MAqBO;AACL,aAAKiN,MAAL,GAAc,IAAId,aAAJ,CAAkB,KAAKjiC,OAAvB,CAAd;AACD;AACF,KAzBD,CAyBE,OAAO7M,CAAP,EAAU;AACV,WAAKooC,IAAL,CAAU,gCAAV;AACA,UAAMzlC,KAAK,GAAG3C,CAAC,CAACmB,OAAF,IAAanB,CAAC,CAACoD,IAA7B;;AACA,UAAIT,KAAJ,EAAW;AACT,aAAKylC,IAAL,CAAUzlC,KAAV;AACD;;AACD,WAAKsmC,SAAL;AACA;AACD;;AAED,SAAK2G,MAAL,CAAYC,MAAZ,GAAqB;AACnB9zB,WAAI,CAACqsB,IAAL,CAAU,sBAAV;;AACArsB,WAAI,CAAC6tB,cAAL,GAAsB,IAAtB;AACD,KAHD;;AAKA,SAAKgG,MAAL,CAAYE,OAAZ,GAAsB;AACpB/zB,WAAI,CAACqsB,IAAL,CAAU,wCAAV;;AACArsB,WAAI,CAAC6zB,MAAL,GAAc,IAAd;;AACA7zB,WAAI,CAACktB,SAAL;AACD,KAJD;;AAMA,SAAK2G,MAAL,CAAYG,SAAZ,GAAwB,aAAC;AACvBh0B,WAAI,CAACi0B,mBAAL,CAAyBC,CAAzB;AACD,KAFD;;AAIA,SAAKL,MAAL,CAAYpB,OAAZ,GAAsB,aAAC;AACrBzyB,WAAI,CAACqsB,IAAL,CAAU,uCAAV,EADqB;;;AAGrB,UAAMzlC,KAAK,GAAI3C,CAAS,CAACmB,OAAV,IAAsBnB,CAAS,CAACoD,IAA/C;;AACA,UAAIT,KAAJ,EAAW;AACToZ,aAAI,CAACqsB,IAAL,CAAUzlC,KAAV;AACD;;AACDoZ,WAAI,CAACktB,SAAL;AACD,KARD;AASD,GArED;;;;;;AA0EAgG,qDAAU,CAAV;;AAIOA,sCAAP;AACEA,uBAAmB,CAACxE,cAApB,GAAqC,IAArC;AACD,GAFM;;AAIAwE,oCAAP;AACE,QAAIiB,YAAY,GAAG,KAAnB;;AACA,QAAI,OAAOC,SAAP,KAAqB,WAArB,IAAoCA,SAAS,CAAC9nC,SAAlD,EAA6D;AAC3D,UAAM+nC,eAAe,GAAG,gCAAxB;AACA,UAAMC,eAAe,GAAGF,SAAS,CAAC9nC,SAAV,CAAoBioC,KAApB,CAA0BF,eAA1B,CAAxB;;AACA,UAAIC,eAAe,IAAIA,eAAe,CAAChvC,MAAhB,GAAyB,CAAhD,EAAmD;AACjD,YAAIkvC,UAAU,CAACF,eAAe,CAAC,CAAD,CAAhB,CAAV,GAAiC,GAArC,EAA0C;AACxCH,sBAAY,GAAG,IAAf;AACD;AACF;AACF;;AAED,WACE,CAACA,YAAD,IACApB,aAAa,KAAK,IADlB,IAEA,CAACG,mBAAmB,CAACxE,cAHvB;AAKD,GAjBM;;;;;;;AAmCAwE,yCAAP;;;AAGE,WACEhvC,iBAAiB,CAACuwC,iBAAlB,IACAvwC,iBAAiB,CAACsC,GAAlB,CAAsB,4BAAtB,MAAwD,IAF1D;AAID,GAPM;;AASP0sC;AACEhvC,qBAAiB,CAACqC,MAAlB,CAAyB,4BAAzB;AACD,GAFD;;AAIQ2sC,+CAAR,UAAqB7rC,IAArB,EAAiC;AAC/B,SAAKqtC,MAAL,CAAYtrC,IAAZ,CAAiB/B,IAAjB;;AACA,QAAI,KAAKqtC,MAAL,CAAYpvC,MAAZ,KAAuB,KAAKqvC,WAAhC,EAA6C;AAC3C,UAAMC,QAAQ,GAAG,KAAKF,MAAL,CAAY5pC,IAAZ,CAAiB,EAAjB,CAAjB;AACA,WAAK4pC,MAAL,GAAc,IAAd;AACA,UAAMG,QAAQ,GAAGvxC,cAASsxC,QAATtxC,CAAjB,CAH2C;;AAM3C,WAAKqpC,SAAL,CAAekI,QAAf;AACD;AACF,GAVO;;;;;;;AAgBA3B,uDAAR,UAA6B4B,UAA7B,EAA+C;AAC7C,SAAKH,WAAL,GAAmBG,UAAnB;AACA,SAAKJ,MAAL,GAAc,EAAd;AACD,GAHO;;;;;;;;;AAWAxB,qDAAR,UAA2B7rC,IAA3B,EAAuC;AACrCrB,gBAAO,KAAK0uC,MAAL,KAAgB,IAAvB1uC,EAA6B,gCAA7BA,EADqC;;;AAIrC,QAAIqB,IAAI,CAAC/B,MAAL,IAAe,CAAnB,EAAsB;AACpB,UAAMwvC,UAAU,GAAGxtC,MAAM,CAACD,IAAD,CAAzB;;AACA,UAAI,CAAC0tC,KAAK,CAACD,UAAD,CAAV,EAAwB;AACtB,aAAKE,oBAAL,CAA0BF,UAA1B;AACA,eAAO,IAAP;AACD;AACF;;AACD,SAAKE,oBAAL,CAA0B,CAA1B;AACA,WAAO3tC,IAAP;AACD,GAbO;;;;;;;AAmBR6rC,gEAAoB+B,IAApB,EAAkD;AAChD,QAAI,KAAKpB,MAAL,KAAgB,IAApB,EAA0B;AACxB,aADwB,CACjB;AACR;;AACD,QAAMxsC,IAAI,GAAG4tC,IAAI,CAAC,MAAD,CAAjB;AACA,SAAKtF,aAAL,IAAsBtoC,IAAI,CAAC/B,MAA3B;AACA,SAAKgnC,MAAL,CAAY4C,gBAAZ,CAA6B,gBAA7B,EAA+C7nC,IAAI,CAAC/B,MAApD;AAEA,SAAK4vC,cAAL;;AAEA,QAAI,KAAKR,MAAL,KAAgB,IAApB,EAA0B;;AAExB,WAAKS,YAAL,CAAkB9tC,IAAlB;AACD,KAHD,MAGO;;AAEL,UAAM+tC,aAAa,GAAG,KAAKC,kBAAL,CAAwBhuC,IAAxB,CAAtB;;AACA,UAAI+tC,aAAa,KAAK,IAAtB,EAA4B;AAC1B,aAAKD,YAAL,CAAkBC,aAAlB;AACD;AACF;AACF,GApBD;;;;;;;AA0BAlC,iDAAK7rC,IAAL,EAAa;AACX,SAAK6tC,cAAL;AAEA,QAAMlG,OAAO,GAAG7rC,eAAUkE,IAAVlE,CAAhB;AACA,SAAK8rC,SAAL,IAAkBD,OAAO,CAAC1pC,MAA1B;AACA,SAAKgnC,MAAL,CAAY4C,gBAAZ,CAA6B,YAA7B,EAA2CF,OAAO,CAAC1pC,MAAnD,EALW;;;AAUX,QAAMmE,QAAQ,GAAGH,iBAAiB,CAAC0lC,OAAD,EAAU6D,wBAAV,CAAlC,CAVW;;AAaX,QAAIppC,QAAQ,CAACnE,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAKgwC,WAAL,CAAiBjoC,MAAM,CAAC5D,QAAQ,CAACnE,MAAV,CAAvB;AACD,KAfU;;;AAkBX,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoE,QAAQ,CAACnE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,WAAKiwC,WAAL,CAAiB7rC,QAAQ,CAACpE,CAAD,CAAzB;AACD;AACF,GArBD;;AAuBQ6tC,4CAAR;AACE,SAAKlG,SAAL,GAAiB,IAAjB;;AACA,QAAI,KAAKuI,cAAT,EAAyB;AACvBC,mBAAa,CAAC,KAAKD,cAAN,CAAb;AACA,WAAKA,cAAL,GAAsB,IAAtB;AACD;;AAED,QAAI,KAAK1B,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYjF,KAAZ;AACA,WAAKiF,MAAL,GAAc,IAAd;AACD;AACF,GAXO;;AAaAX,4CAAR;AACE,QAAI,CAAC,KAAKlG,SAAV,EAAqB;AACnB,WAAKX,IAAL,CAAU,6BAAV;AACA,WAAK0C,SAAL,GAFmB;;AAKnB,UAAI,KAAKnC,YAAT,EAAuB;AACrB,aAAKA,YAAL,CAAkB,KAAKiB,cAAvB;AACA,aAAKjB,YAAL,GAAoB,IAApB;AACD;AACF;AACF,GAXO;;;;;;;AAiBRsG;AACE,QAAI,CAAC,KAAKlG,SAAV,EAAqB;AACnB,WAAKX,IAAL,CAAU,2BAAV;AACA,WAAK0C,SAAL;AACD;AACF,GALD;;;;;;;AAWAmE;AAAA;;AACEsC,iBAAa,CAAC,KAAKD,cAAN,CAAb;AACA,SAAKA,cAAL,GAAsBE,WAAW,CAAC;;AAEhC,UAAIz1B,KAAI,CAAC6zB,MAAT,EAAiB;AACf7zB,aAAI,CAACs1B,WAAL,CAAiB,GAAjB;AACD;;AACDt1B,WAAI,CAACk1B,cAAL,GALgC;;AAOjC,KAPgC,EAO9BhtC,IAAI,CAACC,KAAL,CAAW2qC,4BAAX,CAP8B,CAAjC;AAQD,GAVD;;;;;;;;;AAkBQI,8CAAR,UAAoBzuC,GAApB,EAA+B;;;;AAI7B,QAAI;AACF,WAAKovC,MAAL,CAAY6B,IAAZ,CAAiBjxC,GAAjB;AACD,KAFD,CAEE,OAAOR,CAAP,EAAU;AACV,WAAKooC,IAAL,CACE,yCADF,EAEEpoC,CAAC,CAACmB,OAAF,IAAanB,CAAC,CAACoD,IAFjB,EAGE,qBAHF;AAKAY,gBAAU,CAAC,KAAKilC,SAAL,CAAe7mC,IAAf,CAAoB,IAApB,CAAD,EAA4B,CAA5B,CAAV;AACD;AACF,GAdO;;;;;;;AAnLD6sC,qDAA+B,CAA/B;;;;;;AAMAA,uCAAiB,KAAjB;AA4LT;AAtXA;AChEA;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;AAQA;AAAA;AAAA;;;;AAcE,4BAAY/gC,QAAZ,EAA8B;AAC5B,SAAKwjC,eAAL,CAAqBxjC,QAArB;AACD;;AATDlF,wBAAW2oC,gBAAX,EAAW,gBAAX,EAAyB;;;;;SAAzB;AACE,aAAO,CAAClJ,qBAAD,EAAwBwG,mBAAxB,CAAP;AACD,KAFwB;oBAAA;;AAAA,GAAzB;;;;;;AAeQ0C,+CAAR,UAAwBzjC,QAAxB,EAA0C;;;AACxC,QAAM0jC,qBAAqB,GACzB3C,mBAAmB,IAAIA,mBAAmB,CAAC,aAAD,CAAnB,EADzB;AAEA,QAAI4C,oBAAoB,GACtBD,qBAAqB,IAAI,CAAC3C,mBAAmB,CAAC6C,gBAApB,EAD5B;;AAGA,QAAI5jC,QAAQ,CAAChC,aAAb,EAA4B;AAC1B,UAAI,CAAC0lC,qBAAL,EAA4B;AAC1B9uC,YAAI,CACF,iFADE,CAAJ;AAGD;;AAED+uC,0BAAoB,GAAG,IAAvB;AACD;;AAED,QAAIA,oBAAJ,EAA0B;AACxB,WAAKE,WAAL,GAAmB,CAAC9C,mBAAD,CAAnB;AACD,KAFD,MAEO;AACL,UAAM+C,UAAU,GAAI,KAAKD,WAAL,GAAmB,EAAvC;;;AACA,aAAwB,wCAAgB,CAACE,cAAjBC,GAA+BxkC,cAAvD,EAAuD,QAAvD,EAAuDA,cAAvD,EAAyD;AAApD,cAAMykC,SAAS,WAAf;;AACH,cAAIA,SAAS,IAAIA,SAAS,CAAC,aAAD,CAAT,EAAjB,EAA6C;AAC3CH,sBAAU,CAAC7sC,IAAX,CAAgBgtC,SAAhB;AACD;AACF;;;;;;;;;;;;AACF;AACF,GA1BO;;;;;;;AAgCRR;AACE,QAAI,KAAKI,WAAL,CAAiB1wC,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,aAAO,KAAK0wC,WAAL,CAAiB,CAAjB,CAAP;AACD,KAFD,MAEO;AACL,YAAM,IAAIlvC,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF,GAND;;;;;;;AAYA8uC;AACE,QAAI,KAAKI,WAAL,CAAiB1wC,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,aAAO,KAAK0wC,WAAL,CAAiB,CAAjB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GAND;;AAOF;AAAC,CAzED;AC/BA;;;;;;;;;;;;;;;;AA+BA;;;AACA,IAAMK,eAAe,GAAG,KAAxB,C,CAEA;AACA;;AACA,IAAMC,mCAAmC,GAAG,IAA5C,C,CAEA;AACA;AACA;;AACA,IAAMC,2BAA2B,GAAG,KAAK,IAAzC;AACA,IAAMC,+BAA+B,GAAG,MAAM,IAA9C;AAQA,IAAMC,YAAY,GAAG,GAArB;AACA,IAAMC,YAAY,GAAG,GAArB;AACA,IAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAMC,aAAa,GAAG,GAAtB;AACA,IAAMC,aAAa,GAAG,GAAtB;AACA,IAAMC,YAAY,GAAG,GAArB;AACA,IAAMC,UAAU,GAAG,GAAnB;AACA,IAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAMC,IAAI,GAAG,GAAb;AAEA,IAAMC,YAAY,GAAG,GAArB;AAEA;;;;;;;AAMA;AAAA;AAAA;;;;;;;;;;AA0BE,sBACS3yC,EADT,EAEU4yC,SAFV,EAGU5M,UAHV,EAIU6M,QAJV,EAKUtK,aALV,EAMUuK,OANV,EAOSjL,aAPT,EAO+B;AANtB;AACC;AACA;AACA;AACA;AACA;AACD;AAhCT,2BAAkB,CAAlB;AACA,+BAAiC,EAAjC;AAWQ,kBAAM;AAAA;AAAN;AAsBN,SAAKC,IAAL,GAAY5lC,UAAU,CAAC,OAAO,KAAKlC,EAAZ,GAAiB,GAAlB,CAAtB;AACA,SAAK+yC,iBAAL,GAAyB,IAAI1B,gBAAJ,CAAqBuB,SAArB,CAAzB;AACA,SAAK9K,IAAL,CAAU,oBAAV;AACA,SAAKkL,MAAL;AACD;;;;;;;AAMOC,gCAAR;AAAA;;AACE,QAAMC,IAAI,GAAG,KAAKH,iBAAL,CAAuBI,gBAAvB,EAAb;AACA,SAAKC,KAAL,GAAa,IAAIF,IAAJ,CACX,KAAKG,gBAAL,EADW,EAEX,KAAKT,SAFM,EAGX5jC,SAHW,EAIX,KAAK64B,aAJM,CAAb,CAFF;;;AAWE,SAAKyL,yBAAL,GAAiCJ,IAAI,CAAC,8BAAD,CAAJ,IAAwC,CAAzE;AAEA,QAAMK,iBAAiB,GAAG,KAAKC,aAAL,CAAmB,KAAKJ,KAAxB,CAA1B;AACA,QAAMK,gBAAgB,GAAG,KAAKC,gBAAL,CAAsB,KAAKN,KAA3B,CAAzB;AACA,SAAKO,GAAL,GAAW,KAAKP,KAAhB;AACA,SAAKQ,GAAL,GAAW,KAAKR,KAAhB;AACA,SAAKS,cAAL,GAAsB,IAAtB;AACA,SAAKC,UAAL,GAAkB,KAAlB;;;;;;;;AAQApwC,cAAU,CAAC;;AAET+X,WAAI,CAAC23B,KAAL,IAAc33B,KAAI,CAAC23B,KAAL,CAAWtH,IAAX,CAAgByH,iBAAhB,EAAmCE,gBAAnC,CAAd;AACD,KAHS,EAGP9vC,IAAI,CAACC,KAAL,CAAW,CAAX,CAHO,CAAV;AAKA,QAAMmwC,gBAAgB,GAAGb,IAAI,CAAC,gBAAD,CAAJ,IAA0B,CAAnD;;AACA,QAAIa,gBAAgB,GAAG,CAAvB,EAA0B;AACxB,WAAKC,eAAL,GAAuB/rC,qBAAqB,CAAC;AAC3CwT,aAAI,CAACu4B,eAAL,GAAuB,IAAvB;;AACA,YAAI,CAACv4B,KAAI,CAACq4B,UAAV,EAAsB;AACpB,cACEr4B,KAAI,CAAC23B,KAAL,IACA33B,KAAI,CAAC23B,KAAL,CAAWhI,aAAX,GAA2B6G,+BAF7B,EAGE;AACAx2B,iBAAI,CAACqsB,IAAL,CACE,0DACErsB,KAAI,CAAC23B,KAAL,CAAWhI,aADb,GAEE,sCAHJ;;AAKA3vB,iBAAI,CAACq4B,UAAL,GAAkB,IAAlB;;AACAr4B,iBAAI,CAAC23B,KAAL,CAAWa,qBAAX;AACD,WAXD,MAWO,IACLx4B,KAAI,CAAC23B,KAAL,IACA33B,KAAI,CAAC23B,KAAL,CAAW1I,SAAX,GAAuBsH,2BAFlB,EAGL;AACAv2B,iBAAI,CAACqsB,IAAL,CACE,sDACErsB,KAAI,CAAC23B,KAAL,CAAW1I,SADb,GAEE,oCAHJ,EADA;;;AAQD,WAXM,MAWA;AACLjvB,iBAAI,CAACqsB,IAAL,CAAU,6CAAV;;AACArsB,iBAAI,CAAC4uB,KAAL;AACD;AACF,SA7B0C;;AA+B5C,OA/B2C,EA+BzC1mC,IAAI,CAACC,KAAL,CAAWmwC,gBAAX,CA/ByC,CAA5C;AAgCD;AACF,GAlEO;;;;;;;AAwEAd,0CAAR;AACE,WAAO,OAAO,KAAKjzC,EAAZ,GAAiB,GAAjB,GAAuB,KAAKk0C,eAAL,EAA9B;AACD,GAFO;;AAIAjB,0CAAR,UAAyBC,IAAzB,EAA6B;AAA7B;;AACE,WAAO,yBAAa;AAClB,UAAIA,IAAI,KAAKz3B,KAAI,CAAC23B,KAAlB,EAAyB;AACvB33B,aAAI,CAAC04B,iBAAL,CAAuBC,aAAvB;AACD,OAFD,MAEO,IAAIlB,IAAI,KAAKz3B,KAAI,CAACo4B,cAAlB,EAAkC;AACvCp4B,aAAI,CAACqsB,IAAL,CAAU,4BAAV;;AACArsB,aAAI,CAAC44B,0BAAL;AACD,OAHM,MAGA;AACL54B,aAAI,CAACqsB,IAAL,CAAU,2BAAV;AACD;AACF,KATD;AAUD,GAXO;;AAaAmL,uCAAR,UAAsBC,IAAtB,EAAqC;AAArC;;AACE,WAAO,UAACryC,OAAD,EAAmB;AACxB,UAAI4a,KAAI,CAAC64B,MAAL,KAAW;AAAA;AAAf,QAAgD;AAC9C,YAAIpB,IAAI,KAAKz3B,KAAI,CAACm4B,GAAlB,EAAuB;AACrBn4B,eAAI,CAAC84B,yBAAL,CAA+B1zC,OAA/B;AACD,SAFD,MAEO,IAAIqyC,IAAI,KAAKz3B,KAAI,CAACo4B,cAAlB,EAAkC;AACvCp4B,eAAI,CAAC+4B,2BAAL,CAAiC3zC,OAAjC;AACD,SAFM,MAEA;AACL4a,eAAI,CAACqsB,IAAL,CAAU,2BAAV;AACD;AACF;AACF,KAVD;AAWD,GAZO;;;;;;;AAkBRmL,+CAAYwB,OAAZ,EAA2B;;AAEzB,QAAMC,GAAG,GAAG;AAAEC,OAAC,EAAE,GAAL;AAAU9H,OAAC,EAAE4H;AAAb,KAAZ;AACA,SAAKG,SAAL,CAAeF,GAAf;AACD,GAJD;;AAMAzB;AACE,QAAI,KAAKU,GAAL,KAAa,KAAKE,cAAlB,IAAoC,KAAKD,GAAL,KAAa,KAAKC,cAA1D,EAA0E;AACxE,WAAK/L,IAAL,CACE,6CAA6C,KAAK+L,cAAL,CAAoBlM,MADnE;AAGA,WAAKyL,KAAL,GAAa,KAAKS,cAAlB;AACA,WAAKA,cAAL,GAAsB,IAAtB,CALwE;AAOzE;AACF,GATD;;AAWQZ,6CAAR,UAA4B4B,WAA5B,EAAiE;AAC/D,QAAI3C,YAAY,IAAI2C,WAApB,EAAiC;AAC/B,UAAMC,GAAG,GAAGD,WAAW,CAAC3C,YAAD,CAAvB;;AACA,UAAI4C,GAAG,KAAKtC,UAAZ,EAAwB;AACtB,aAAKuC,0BAAL;AACD,OAFD,MAEO,IAAID,GAAG,KAAKzC,aAAZ,EAA2B;;AAEhC,aAAKvK,IAAL,CAAU,sCAAV;AACA,aAAK+L,cAAL,CAAoBxJ,KAApB,GAHgC;;AAKhC,YACE,KAAKsJ,GAAL,KAAa,KAAKE,cAAlB,IACA,KAAKD,GAAL,KAAa,KAAKC,cAFpB,EAGE;AACA,eAAKxJ,KAAL;AACD;AACF,OAXM,MAWA,IAAIyK,GAAG,KAAKvC,YAAZ,EAA0B;AAC/B,aAAKzK,IAAL,CAAU,wBAAV;AACA,aAAKkN,2BAAL;AACA,aAAKD,0BAAL;AACD;AACF;AACF,GAtBO;;AAwBA9B,qDAAR,UAAoCgC,UAApC,EAAyD;AACvD,QAAMC,KAAK,GAAW1wC,UAAU,CAAC,GAAD,EAAMywC,UAAN,CAAhC;AACA,QAAMnyC,IAAI,GAAY0B,UAAU,CAAC,GAAD,EAAMywC,UAAN,CAAhC;;AACA,QAAIC,KAAK,KAAK,GAAd,EAAmB;AACjB,WAAKC,mBAAL,CAAyBryC,IAAzB;AACD,KAFD,MAEO,IAAIoyC,KAAK,KAAK,GAAd,EAAmB;;AAExB,WAAKE,mBAAL,CAAyBvwC,IAAzB,CAA8B/B,IAA9B;AACD,KAHM,MAGA;AACL,YAAM,IAAIP,KAAJ,CAAU,6BAA6B2yC,KAAvC,CAAN;AACD;AACF,GAXO;;AAaAjC,oDAAR;AACE,QAAI,KAAK+B,2BAAL,IAAoC,CAAxC,EAA2C;AACzC,WAAKlN,IAAL,CAAU,kCAAV;AACA,WAAKgM,UAAL,GAAkB,IAAlB;AACA,WAAKD,cAAL,CAAoBI,qBAApB;AACA,WAAKoB,mBAAL;AACD,KALD,MAKO;;AAEL,WAAKvN,IAAL,CAAU,4BAAV;AACA,WAAK+L,cAAL,CAAoB1C,IAApB,CAAyB;AAAEwD,SAAC,EAAE,GAAL;AAAU9H,SAAC,EAAE;AAAE8H,WAAC,EAAEjC,IAAL;AAAW7F,WAAC,EAAE;AAAd;AAAb,OAAzB;AACD;AACF,GAXO;;AAaAoG,6CAAR;;AAEE,SAAKY,cAAL,CAAoByB,KAApB,GAFF;;AAIE,SAAKxN,IAAL,CAAU,iCAAV;AACA,SAAK+L,cAAL,CAAoB1C,IAApB,CAAyB;AAAEwD,OAAC,EAAE,GAAL;AAAU9H,OAAC,EAAE;AAAE8H,SAAC,EAAEnC,UAAL;AAAiB3F,SAAC,EAAE;AAApB;AAAb,KAAzB,EALF;;;AASE,SAAK/E,IAAL,CAAU,gCAAV;AACA,SAAKsL,KAAL,CAAWjC,IAAX,CAAgB;AAAEwD,OAAC,EAAE,GAAL;AAAU9H,OAAC,EAAE;AAAE8H,SAAC,EAAElC,gBAAL;AAAuB5F,SAAC,EAAE;AAA1B;AAAb,KAAhB;AACA,SAAK8G,GAAL,GAAW,KAAKE,cAAhB;AAEA,SAAK0B,oBAAL;AACD,GAdO;;AAgBAtC,mDAAR,UAAkCgC,UAAlC,EAAsE;;AAEpE,QAAMC,KAAK,GAAW1wC,UAAU,CAAC,GAAD,EAAMywC,UAAN,CAAhC;AACA,QAAMnyC,IAAI,GAAY0B,UAAU,CAAC,GAAD,EAAMywC,UAAN,CAAhC;;AACA,QAAIC,KAAK,KAAK,GAAd,EAAmB;AACjB,WAAKM,UAAL,CAAgB1yC,IAAhB;AACD,KAFD,MAEO,IAAIoyC,KAAK,KAAK,GAAd,EAAmB;AACxB,WAAKO,cAAL,CAAoB3yC,IAApB;AACD;AACF,GATO;;AAWAmwC,wCAAR,UAAuBpyC,OAAvB,EAAuC;AACrC,SAAK60C,kBAAL,GADqC;;AAIrC,SAAK1P,UAAL,CAAgBnlC,OAAhB;AACD,GALO;;AAOAoyC,4CAAR;AACE,QAAI,CAAC,KAAKa,UAAV,EAAsB;AACpB,WAAKR,yBAAL;;AACA,UAAI,KAAKA,yBAAL,IAAkC,CAAtC,EAAyC;AACvC,aAAKxL,IAAL,CAAU,gCAAV;AACA,aAAKgM,UAAL,GAAkB,IAAlB;AACA,aAAKV,KAAL,CAAWa,qBAAX;AACD;AACF;AACF,GATO;;AAWAhB,oCAAR,UAAmB4B,WAAnB,EAAwD;AACtD,QAAMC,GAAG,GAAWtwC,UAAU,CAAC0tC,YAAD,EAAe2C,WAAf,CAA9B;;AACA,QAAI1C,YAAY,IAAI0C,WAApB,EAAiC;AAC/B,UAAMc,OAAO,GAAGd,WAAW,CAAC1C,YAAD,CAA3B;;AACA,UAAI2C,GAAG,KAAKnC,YAAZ,EAA0B;AACxB,aAAKiD,YAAL,CACED,OADF;AAQD,OATD,MASO,IAAIb,GAAG,KAAKrC,gBAAZ,EAA8B;AACnC,aAAK3K,IAAL,CAAU,mCAAV;AACA,aAAK8L,GAAL,GAAW,KAAKC,cAAhB;;AACA,aAAK,IAAI/yC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKs0C,mBAAL,CAAyBr0C,MAA7C,EAAqD,EAAED,CAAvD,EAA0D;AACxD,eAAK20C,cAAL,CAAoB,KAAKL,mBAAL,CAAyBt0C,CAAzB,CAApB;AACD;;AACD,aAAKs0C,mBAAL,GAA2B,EAA3B;AACA,aAAKG,oBAAL;AACD,OARM,MAQA,IAAIT,GAAG,KAAK1C,gBAAZ,EAA8B;;;AAGnC,aAAKyD,qBAAL,CAA2BF,OAA3B;AACD,OAJM,MAIA,IAAIb,GAAG,KAAKzC,aAAZ,EAA2B;;AAEhC,aAAKyD,QAAL,CAAcH,OAAd;AACD,OAHM,MAGA,IAAIb,GAAG,KAAKxC,aAAZ,EAA2B;AAChCjwC,aAAK,CAAC,mBAAmBszC,OAApB,CAAL;AACD,OAFM,MAEA,IAAIb,GAAG,KAAKvC,YAAZ,EAA0B;AAC/B,aAAKzK,IAAL,CAAU,sBAAV;AACA,aAAK4N,kBAAL;AACA,aAAKK,6BAAL;AACD,OAJM,MAIA;AACL1zC,aAAK,CAAC,qCAAqCyyC,GAAtC,CAAL;AACD;AACF;AACF,GAtCO;;;;;;;;AA6CA7B,sCAAR,UAAqB+C,SAArB,EAKC;AACC,QAAMC,SAAS,GAAGD,SAAS,CAAC/I,EAA5B;AACA,QAAMoB,OAAO,GAAG2H,SAAS,CAACxwC,CAA1B;AACA,QAAMiG,IAAI,GAAGuqC,SAAS,CAACE,CAAvB;AACA,SAAKC,SAAL,GAAiBH,SAAS,CAACpwC,CAA3B;AACA,SAAKgtC,SAAL,CAAewD,UAAf,CAA0B3qC,IAA1B,EALD;;AAOC,QAAI,KAAK6oC,MAAL,KAAW;AAAA;AAAf,MAA8C;AAC5C,WAAKlB,KAAL,CAAWkC,KAAX;AACA,WAAKe,wBAAL,CAA8B,KAAKjD,KAAnC,EAA0C6C,SAA1C;;AACA,UAAIjrC,gBAAgB,KAAKqjC,OAAzB,EAAkC;AAChC7rC,YAAI,CAAC,oCAAD,CAAJ;AACD,OAL2C;;;AAO5C,WAAK8zC,gBAAL;AACD;AACF,GArBO;;AAuBArD,0CAAR;AACE,QAAMC,IAAI,GAAG,KAAKH,iBAAL,CAAuBwD,gBAAvB,EAAb;;AACA,QAAIrD,IAAJ,EAAU;AACR,WAAKsD,aAAL,CAAmBtD,IAAnB;AACD;AACF,GALO;;AAOAD,uCAAR,UAAsBC,IAAtB,EAAgD;AAAhD;;AACE,SAAKW,cAAL,GAAsB,IAAIX,IAAJ,CACpB,KAAKG,gBAAL,EADoB,EAEpB,KAAKT,SAFe,EAGpB,KAAKuD,SAHe,CAAtB,CAD8C;;;AAQ9C,SAAKnB,2BAAL,GACE9B,IAAI,CAAC,8BAAD,CAAJ,IAAwC,CAD1C;AAGA,QAAM9K,SAAS,GAAG,KAAKoL,aAAL,CAAmB,KAAKK,cAAxB,CAAlB;AACA,QAAMxL,YAAY,GAAG,KAAKqL,gBAAL,CAAsB,KAAKG,cAA3B,CAArB;AACA,SAAKA,cAAL,CAAoB/H,IAApB,CAAyB1D,SAAzB,EAAoCC,YAApC,EAb8C;;AAgB9CpgC,yBAAqB,CAAC;AACpB,UAAIwT,KAAI,CAACo4B,cAAT,EAAyB;AACvBp4B,aAAI,CAACqsB,IAAL,CAAU,8BAAV;;AACArsB,aAAI,CAACo4B,cAAL,CAAoBxJ,KAApB;AACD;AACF,KALoB,EAKlB1mC,IAAI,CAACC,KAAL,CAAWkuC,eAAX,CALkB,CAArB;AAMD,GAtBO;;AAwBAmB,kCAAR,UAAiBxnC,IAAjB,EAA6B;AAC3B,SAAKq8B,IAAL,CAAU,uCAAuCr8B,IAAjD;AACA,SAAKmnC,SAAL,CAAewD,UAAf,CAA0B3qC,IAA1B,EAF2B;;;AAK3B,QAAI,KAAK6oC,MAAL,KAAW;AAAA;AAAf,MAA6C;AAC3C,WAAKjK,KAAL;AACD,KAFD,MAEO;;AAEL,WAAKoM,iBAAL;AACA,WAAKzD,MAAL;AACD;AACF,GAZO;;AAcAC,kDAAR,UAAiCC,IAAjC,EAAkD+C,SAAlD,EAAmE;AAAnE;;AACE,SAAKnO,IAAL,CAAU,kCAAV;AACA,SAAKsL,KAAL,GAAaF,IAAb;AACA,SAAKoB,MAAL,GAAW;AAAA;AAAX;;AAEA,QAAI,KAAKzB,QAAT,EAAmB;AACjB,WAAKA,QAAL,CAAcoD,SAAd,EAAyB,KAAKE,SAA9B;AACA,WAAKtD,QAAL,GAAgB,IAAhB;AACD,KARgE;;;;AAYjE,QAAI,KAAKS,yBAAL,KAAmC,CAAvC,EAA0C;AACxC,WAAKxL,IAAL,CAAU,gCAAV;AACA,WAAKgM,UAAL,GAAkB,IAAlB;AACD,KAHD,MAGO;AACL7rC,2BAAqB,CAAC;AACpBwT,aAAI,CAACs6B,6BAAL;AACD,OAFoB,EAElBpyC,IAAI,CAACC,KAAL,CAAWmuC,mCAAX,CAFkB,CAArB;AAGD;AACF,GApBO;;AAsBAkB,uDAAR;;AAEE,QAAI,CAAC,KAAKa,UAAN,IAAoB,KAAKQ,MAAL,KAAW;AAAA;AAAnC,MAAiE;AAC/D,WAAKxM,IAAL,CAAU,0BAAV;AACA,WAAK8M,SAAL,CAAe;AAAED,SAAC,EAAE,GAAL;AAAU9H,SAAC,EAAE;AAAE8H,WAAC,EAAEjC,IAAL;AAAW7F,WAAC,EAAE;AAAd;AAAb,OAAf;AACD;AACF,GANO;;AAQAoG,oDAAR;AACE,QAAMC,IAAI,GAAG,KAAKW,cAAlB;AACA,SAAKA,cAAL,GAAsB,IAAtB;;AACA,QAAI,KAAKF,GAAL,KAAaT,IAAb,IAAqB,KAAKU,GAAL,KAAaV,IAAtC,EAA4C;;AAE1C,WAAK7I,KAAL;AACD;AACF,GAPO;;;;;;;;;AAeA4I,2CAAR,UAA0BmB,aAA1B,EAAgD;AAC9C,SAAKhB,KAAL,GAAa,IAAb,CAD8C;;;AAK9C,QAAI,CAACgB,aAAD,IAAkB,KAAKE,MAAL,KAAW;AAAA;AAAjC,MAAgE;AAC9D,WAAKxM,IAAL,CAAU,6BAAV,EAD8D;;AAG9D,UAAI,KAAK8K,SAAL,CAAexmC,eAAf,EAAJ,EAAsC;AACpCzM,yBAAiB,CAACqC,MAAlB,CAAyB,UAAU,KAAK4wC,SAAL,CAAennC,IAAlD,EADoC;;AAGpC,aAAKmnC,SAAL,CAAe5mC,YAAf,GAA8B,KAAK4mC,SAAL,CAAennC,IAA7C;AACD;AACF,KARD,MAQO,IAAI,KAAK6oC,MAAL,KAAW;AAAA;AAAf,MAA6C;AAClD,WAAKxM,IAAL,CAAU,2BAAV;AACD;;AAED,SAAKuC,KAAL;AACD,GAlBO;;;;;;;;AAyBA4I,+CAAR,UAA8B3rC,MAA9B,EAA4C;AAC1C,SAAKwgC,IAAL,CAAU,wDAAV;;AAEA,QAAI,KAAKgL,OAAT,EAAkB;AAChB,WAAKA,OAAL,CAAaxrC,MAAb;AACA,WAAKwrC,OAAL,GAAe,IAAf;AACD,KANyC;;;;AAU1C,SAAKvK,aAAL,GAAqB,IAArB;AAEA,SAAK8B,KAAL;AACD,GAbO;;AAeA4I,mCAAR,UAAkBnwC,IAAlB,EAA8B;AAC5B,QAAI,KAAKwxC,MAAL,KAAW;AAAA;AAAf,MAA6C;AAC3C,YAAM,6BAAN;AACD,KAFD,MAEO;AACL,WAAKX,GAAL,CAASxC,IAAT,CAAcruC,IAAd;AACD;AACF,GANO;;;;;;AAWRmwC;AACE,QAAI,KAAKqB,MAAL,KAAW;AAAA;AAAf,MAAgD;AAC9C,WAAKxM,IAAL,CAAU,8BAAV;AACA,WAAKwM,MAAL,GAAW;AAAA;AAAX;AAEA,WAAKmC,iBAAL;;AAEA,UAAI,KAAKlO,aAAT,EAAwB;AACtB,aAAKA,aAAL;AACA,aAAKA,aAAL,GAAqB,IAArB;AACD;AACF;AACF,GAZD;;;;;;;AAkBQ0K,2CAAR;AACE,SAAKnL,IAAL,CAAU,+BAAV;;AACA,QAAI,KAAKsL,KAAT,EAAgB;AACd,WAAKA,KAAL,CAAW/I,KAAX;AACA,WAAK+I,KAAL,GAAa,IAAb;AACD;;AAED,QAAI,KAAKS,cAAT,EAAyB;AACvB,WAAKA,cAAL,CAAoBxJ,KAApB;AACA,WAAKwJ,cAAL,GAAsB,IAAtB;AACD;;AAED,QAAI,KAAKG,eAAT,EAA0B;AACxB3K,kBAAY,CAAC,KAAK2K,eAAN,CAAZ;AACA,WAAKA,eAAL,GAAuB,IAAvB;AACD;AACF,GAhBO;;AAiBV;AAAC,CA5fD;ACpEA;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;AAMA;AAAA;AAAA;AAAA,4BAyFC;;;;;;;;;AA7DC0C,0CACE9tC,UADF,EAEE9F,IAFF,EAGE4N,UAHF,EAIEqM,IAJF,EAIe,CACX,CALJ;;;;;;;;;AAaA25B,4CACE9tC,UADF,EAEE9F,IAFF,EAGE4N,UAHF,EAIEqM,IAJF,EAIe,CACX,CALJ;;;;;;;AAWA25B,uDAAiBC,KAAjB,EAA8B,CAAI,CAAlC;;;;;;;;AAOAD,sDACE9tC,UADF,EAEE9F,IAFF,EAGE4N,UAHF,EAG6C,CACzC,CAJJ;;;;;;;;AAWAgmC,wDACE9tC,UADF,EAEE9F,IAFF,EAGE4N,UAHF,EAG6C,CACzC,CAJJ;;;;;;;AAUAgmC,yDACE9tC,UADF,EAEE8H,UAFF,EAE6C,CACzC,CAHJ;;;;;;AAQAgmC,kDAAY7S,KAAZ,EAA2C,CAAI,CAA/C;;AACF;AAAC,CAzFD;ACzBA;;;;;;;;;;;;;;;;;;AA4CA,IAAM+S,mBAAmB,GAAG,IAA5B;AACA,IAAMC,2BAA2B,GAAG,KAAK,CAAL,GAAS,IAA7C,C,CAAkD;;AAClD,IAAMC,8BAA8B,GAAG,KAAK,IAA5C,C,CAAiD;;AACjD,IAAMC,0BAA0B,GAAG,GAAnC;AACA,IAAMC,6BAA6B,GAAG,KAAtC,C,CAA4C;;AAC5C,IAAMC,4BAA4B,GAAG,aAArC,C,CAEA;;AACA,IAAMC,4BAA4B,GAAG,CAArC;AAyBA;;;;;;;AAMA;AAAA;AAAA;AAA0CpkC;;;;;;;;AAqDxC,gCACU8/B,SADV,EAEUuE,aAFV,EAQUC,gBARV,EASUC,mBATV,EAUUC,kBAVV,EAWUC,aAXV,EAWuC;AAXvC,gBAaEj5B,qBAAO,IAbT;;AACU7C;AACAA;AAMAA;AACAA;AACAA;AACAA,wCAA6B;;AA9DvCA,eAAK+7B,oBAAoB,CAACC,2BAArB,EAAL;AACQh8B,iBAAOvZ,UAAU,CAAC,OAAOuZ,KAAI,CAACzb,EAAZ,GAAiB,GAAlB,CAAjB;AAEAyb,8BAAmD,EAAnD;;;AAESA,oBAGb,IAAI4M,GAAJ,EAHa;AAIT5M,6BAAqC,EAArC;AACAA,iCAAuB,CAAvB;AACAA,sCAAmD,EAAnD;AACAA,uBAAa,KAAb;AACAA,4BAAkBm7B,mBAAlB;AACAn7B,+BAAqBo7B,2BAArB;AACAp7B,mCAAuD,IAAvD;AACRA,0BAA+B,IAA/B;AAEQA,sCAA2C,IAA3C;AAEAA,qBAAoB,KAApB,CA0C+B;;AAvC/BA,2BAAwD,EAAxD;AACAA,2BAAiB,CAAjB;AAEAA,sBAGG,IAHH;AAKAA,uBAA4B,IAA5B;AACAA,+BAAqB,KAArB;AACAA,mCAAyB,CAAzB;AAEAA,6BAAmB,IAAnB;AACAA,uCAA4C,IAA5C;AACAA,2CAAgD,IAAhD;;AA6BN,QAAI87B,aAAa,IAAI,CAACn0C,gBAAtB,EAAmC;AACjC,YAAM,IAAIb,KAAJ,CACJ,gFADI,CAAN;AAGD;;AACDkZ,SAAI,CAACi8B,gBAAL,CAAsB,CAAtB;;AAEA9R,qBAAiB,CAAC+R,WAAlB,GAAgCtyB,EAAhC,CAAmC,SAAnC,EAA8C5J,KAAI,CAACm8B,UAAnD,EAA+Dn8B,KAA/D;;AAEA,QAAIm3B,SAAS,CAACnnC,IAAV,CAAe7I,OAAf,CAAuB,SAAvB,MAAsC,CAAC,CAA3C,EAA8C;AAC5CmjC,mBAAa,CAAC4R,WAAd,GAA4BtyB,EAA5B,CAA+B,QAA/B,EAAyC5J,KAAI,CAACo8B,SAA9C,EAAyDp8B,KAAzD;AACD;;;AACF;;AAES+7B,+CAAV,UACE9iC,MADF,EAEEjR,IAFF,EAGEq0C,UAHF,EAGmC;AAEjC,QAAMC,SAAS,GAAG,EAAE,KAAKC,cAAzB;AAEA,QAAMtD,GAAG,GAAG;AAAE5X,OAAC,EAAEib,SAAL;AAAgB7zC,OAAC,EAAEwQ,MAAnB;AAA2BvQ,OAAC,EAAEV;AAA9B,KAAZ;AACA,SAAKqkC,IAAL,CAAUlpC,eAAU81C,GAAV91C,CAAV;AACA6C,gBACE,KAAKw2C,UADPx2C,EAEE,wDAFFA;AAIA,SAAKy2C,SAAL,CAAeC,WAAf,CAA2BzD,GAA3B;;AACA,QAAIoD,UAAJ,EAAgB;AACd,WAAKM,cAAL,CAAoBL,SAApB,IAAiCD,UAAjC;AACD;AACF,GAjBS;;;;;;AAsBVN,oDACEnwC,KADF,EAEEgxC,aAFF,EAGE1b,GAHF,EAIEjsB,UAJF,EAI6C;AAE3C,QAAMgZ,OAAO,GAAGriB,KAAK,CAACof,eAAN,EAAhB;AACA,QAAM7d,UAAU,GAAGvB,KAAK,CAACE,IAAN,CAAWrI,QAAX,EAAnB;AACA,SAAK4oC,IAAL,CAAU,uBAAuBl/B,UAAvB,GAAoC,GAApC,GAA0C8gB,OAApD;;AACA,QAAI,CAAC,KAAK4uB,OAAL,CAAa5vB,GAAb,CAAiB9f,UAAjB,CAAL,EAAmC;AACjC,WAAK0vC,OAAL,CAAav2C,GAAb,CAAiB6G,UAAjB,EAA6B,IAAIyf,GAAJ,EAA7B;AACD;;AACD5mB,gBACE4F,KAAK,CAACka,cAAN,GAAuB6e,SAAvB,MACE,CAAC/4B,KAAK,CAACka,cAAN,GAAuB0U,YAAvB,EAFLx0B,EAGE,oDAHFA;AAKAA,gBACE,CAAC,KAAK62C,OAAL,CAAar2C,GAAb,CAAiB2G,UAAjB,EAA8B8f,GAA9B,CAAkCgB,OAAlC,CADHjoB,EAEE,8CAFFA;AAIA,QAAM82C,UAAU,GAAe;AAC7B7nC,gBAAU,YADmB;AAE7BuuB,YAAM,EAAEoZ,aAFqB;AAG7BhxC,WAAK,OAHwB;AAI7Bs1B,SAAG;AAJ0B,KAA/B;AAMA,SAAK2b,OAAL,CAAar2C,GAAb,CAAiB2G,UAAjB,EAA8B7G,GAA9B,CAAkC2nB,OAAlC,EAA2C6uB,UAA3C;;AAEA,QAAI,KAAKN,UAAT,EAAqB;AACnB,WAAKO,WAAL,CAAiBD,UAAjB;AACD;AACF,GAhCD;;AAkCQf,+CAAR,UAAoBe,UAApB,EAA0C;AAA1C;;AACE,QAAMlxC,KAAK,GAAGkxC,UAAU,CAAClxC,KAAzB;AACA,QAAMuB,UAAU,GAAGvB,KAAK,CAACE,IAAN,CAAWrI,QAAX,EAAnB;AACA,QAAMwqB,OAAO,GAAGriB,KAAK,CAACof,eAAN,EAAhB;AACA,SAAKqhB,IAAL,CAAU,eAAel/B,UAAf,GAA4B,OAA5B,GAAsC8gB,OAAhD;AACA,QAAM+uB,GAAG,GAA6B;AAAA;AAAWC,OAAC,EAAE9vC;AAAd,KAAtC;AAEA,QAAM8L,MAAM,GAAG,GAAf,CAPwC;;AAUxC,QAAI6jC,UAAU,CAAC5b,GAAf,EAAoB;AAClB8b,SAAG,CAAC,GAAD,CAAH,GAAWpxC,KAAK,CAACgf,WAAN,EAAX;AACAoyB,SAAG,CAAC,GAAD,CAAH,GAAWF,UAAU,CAAC5b,GAAtB;AACD;;AAED8b,OAAG;AAAA;AAAU,OAAV,CAAH,GAAoBF,UAAU,CAACtZ,MAAX,EAApB;AAEA,SAAKkZ,WAAL,CAAiBzjC,MAAjB,EAAyB+jC,GAAzB,EAA8B,UAAC53C,OAAD,EAAkC;AAC9D,UAAM80C,OAAO,GAAY90C,OAAO;AAAA;AAAU,SAAV,CAAhC;AACA,UAAM4/B,MAAM,GAAG5/B,OAAO;AAAA;AAAY,SAAZ,CAAtB,CAF8D;;AAK9D22C,0BAAoB,CAACmB,qBAArB,CAA2ChD,OAA3C,EAAoDtuC,KAApD;;AAEA,UAAMuxC,iBAAiB,GACrBn9B,KAAI,CAAC68B,OAAL,CAAar2C,GAAb,CAAiB2G,UAAjB,KACA6S,KAAI,CAAC68B,OAAL,CAAar2C,GAAb,CAAiB2G,UAAjB,EAA8B3G,GAA9B,CAAkCynB,OAAlC,CAFF,CAP8D;;;AAW9D,UAAIkvB,iBAAiB,KAAKL,UAA1B,EAAsC;AACpC98B,aAAI,CAACqsB,IAAL,CAAU,iBAAV,EAA6BjnC,OAA7B;;AAEA,YAAI4/B,MAAM,KAAK,IAAf,EAAqB;AACnBhlB,eAAI,CAACo9B,aAAL,CAAmBjwC,UAAnB,EAA+B8gB,OAA/B;AACD;;AAED,YAAI6uB,UAAU,CAAC7nC,UAAf,EAA2B;AACzB6nC,oBAAU,CAAC7nC,UAAX,CAAsB+vB,MAAtB,EAA8BkV,OAA9B;AACD;AACF;AACF,KAtBD;AAuBD,GAxCO;;AA0CO6B,+CAAf,UAAqC7B,OAArC,EAAuDtuC,KAAvD,EAAmE;AACjE,QAAIsuC,OAAO,IAAI,OAAOA,OAAP,KAAmB,QAA9B,IAA0Ct2C,cAASs2C,OAATt2C,EAAkB,GAAlBA,CAA9C,EAAsE;;AAEpE,UAAMy5C,QAAQ,GAAGt+B,aAAQm7B,OAARn7B,EAAwB,GAAxBA,CAAjB;;AACA,UAAIvZ,KAAK,CAACC,OAAN,CAAc43C,QAAd,KAA2B,CAACA,QAAQ,CAACl2C,OAAT,CAAiB,UAAjB,CAAhC,EAA8D;AAC5D,YAAMm2C,SAAS,GACb,kBACA1xC,KAAK,CACFka,cADH,GAEGC,QAFH,GAGGtiB,QAHH,EADA,GAKA,GANF;AAOA,YAAM85C,SAAS,GAAG3xC,KAAK,CAACE,IAAN,CAAWrI,QAAX,EAAlB;AACAsD,YAAI,CACF,mEACE,6CAA2Cu2C,SAA3C,GAAoD,MADtD,KAEKC,SAAS,oDAFd,CADE,CAAJ;AAKD;AACF;AACF,GApBc;;;;;;AAyBfxB,8DAAiBb,KAAjB,EAA8B;AAC5B,SAAKsC,UAAL,GAAkBtC,KAAlB;AACA,SAAK7O,IAAL,CAAU,sBAAV;;AACA,QAAI,KAAKmR,UAAT,EAAqB;AACnB,WAAKC,OAAL;AACD,KAFD,MAEO;;;AAGL,UAAI,KAAKjB,UAAT,EAAqB;AACnB,aAAKE,WAAL,CAAiB,QAAjB,EAA2B,EAA3B,EAA+B,aAAQ,CAAvC;AACD;AACF;;AAED,SAAKgB,sCAAL,CAA4CxC,KAA5C;AACD,GAdD;;AAgBQa,0EAAR,UAA+C4B,UAA/C,EAAiE;;;AAG/D,QAAMC,gBAAgB,GAAGD,UAAU,IAAIA,UAAU,CAACr4C,MAAX,KAAsB,EAA7D;;AACA,QAAIs4C,gBAAgB,IAAIC,aAAQF,UAARE,CAAxB,EAA6C;AAC3C,WAAKxR,IAAL,CACE,+DADF;AAGA,WAAKyR,kBAAL,GAA0BzC,8BAA1B;AACD;AACF,GAVO;;;;;;;AAgBRU;AAAA;;AACE,QAAI,KAAKS,UAAL,IAAmB,KAAKgB,UAA5B,EAAwC;AACtC,UAAMO,OAAK,GAAG,KAAKP,UAAnB;AACA,UAAMQ,UAAU,GAAGC,mBAAcF,OAAdE,IAAuB,MAAvBA,GAAgC,OAAnD;AACA,UAAMC,WAAW,GAA6B;AAAEC,YAAI,EAAEJ;AAAR,OAA9C;;AACA,UAAI,KAAKjC,aAAL,KAAuB,IAA3B,EAAiC;AAC/BoC,mBAAW,CAAC,QAAD,CAAX,GAAwB,IAAxB;AACD,OAFD,MAEO,IAAI,OAAO,KAAKpC,aAAZ,KAA8B,QAAlC,EAA4C;AACjDoC,mBAAW,CAAC,SAAD,CAAX,GAAyB,KAAKpC,aAA9B;AACD;;AACD,WAAKY,WAAL,CACEsB,UADF,EAEEE,WAFF,EAGE,UAACE,GAAD,EAA8B;AAC5B,YAAMpZ,MAAM,GAAGoZ,GAAG;AAAA;AAAY,WAAZ,CAAlB;AACA,YAAM/2C,IAAI,GAAI+2C,GAAG;AAAA;AAAU,WAAV,CAAH,IAAgC,OAA9C;;AAEA,YAAIp+B,KAAI,CAACw9B,UAAL,KAAoBO,OAAxB,EAA+B;AAC7B,cAAI/Y,MAAM,KAAK,IAAf,EAAqB;AACnBhlB,iBAAI,CAACq+B,sBAAL,GAA8B,CAA9B;AACD,WAFD,MAEO;;AAELr+B,iBAAI,CAACs+B,cAAL,CAAoBtZ,MAApB,EAA4B39B,IAA5B;AACD;AACF;AACF,OAfH;AAiBD;AACF,GA5BD;;;;;;AAiCA00C,sDAASnwC,KAAT,EAAuBs1B,GAAvB,EAAyC;AACvC,QAAM/zB,UAAU,GAAGvB,KAAK,CAACE,IAAN,CAAWrI,QAAX,EAAnB;AACA,QAAMwqB,OAAO,GAAGriB,KAAK,CAACof,eAAN,EAAhB;AAEA,SAAKqhB,IAAL,CAAU,yBAAyBl/B,UAAzB,GAAsC,GAAtC,GAA4C8gB,OAAtD;AAEAjoB,gBACE4F,KAAK,CAACka,cAAN,GAAuB6e,SAAvB,MACE,CAAC/4B,KAAK,CAACka,cAAN,GAAuB0U,YAAvB,EAFLx0B,EAGE,sDAHFA;AAKA,QAAMu4C,MAAM,GAAG,KAAKnB,aAAL,CAAmBjwC,UAAnB,EAA+B8gB,OAA/B,CAAf;;AACA,QAAIswB,MAAM,IAAI,KAAK/B,UAAnB,EAA+B;AAC7B,WAAKgC,aAAL,CAAmBrxC,UAAnB,EAA+B8gB,OAA/B,EAAwCriB,KAAK,CAACgf,WAAN,EAAxC,EAA6DsW,GAA7D;AACD;AACF,GAfD;;AAiBQ6a,iDAAR,UACE5uC,UADF,EAEE8gB,OAFF,EAGEwwB,QAHF,EAIEvd,GAJF,EAIoB;AAElB,SAAKmL,IAAL,CAAU,iBAAiBl/B,UAAjB,GAA8B,OAA9B,GAAwC8gB,OAAlD;AAEA,QAAM+uB,GAAG,GAA6B;AAAA;AAAWC,OAAC,EAAE9vC;AAAd,KAAtC;AACA,QAAM8L,MAAM,GAAG,GAAf,CALkB;;AAOlB,QAAIioB,GAAJ,EAAS;AACP8b,SAAG,CAAC,GAAD,CAAH,GAAWyB,QAAX;AACAzB,SAAG,CAAC,GAAD,CAAH,GAAW9b,GAAX;AACD;;AAED,SAAKwb,WAAL,CAAiBzjC,MAAjB,EAAyB+jC,GAAzB;AACD,GAjBO;;;;;;AAsBRjB,6DACE5uC,UADF,EAEE9F,IAFF,EAGE4N,UAHF,EAG6C;AAE3C,QAAI,KAAKunC,UAAT,EAAqB;AACnB,WAAKkC,iBAAL,CAAuB,GAAvB,EAA4BvxC,UAA5B,EAAwC9F,IAAxC,EAA8C4N,UAA9C;AACD,KAFD,MAEO;AACL,WAAK0pC,yBAAL,CAA+Bv1C,IAA/B,CAAoC;AAClC+D,kBAAU,YADwB;AAElC8L,cAAM,EAAE,GAF0B;AAGlC5R,YAAI,MAH8B;AAIlC4N,kBAAU;AAJwB,OAApC;AAMD;AACF,GAfD;;;;;;AAoBA8mC,+DACE5uC,UADF,EAEE9F,IAFF,EAGE4N,UAHF,EAG6C;AAE3C,QAAI,KAAKunC,UAAT,EAAqB;AACnB,WAAKkC,iBAAL,CAAuB,IAAvB,EAA6BvxC,UAA7B,EAAyC9F,IAAzC,EAA+C4N,UAA/C;AACD,KAFD,MAEO;AACL,WAAK0pC,yBAAL,CAA+Bv1C,IAA/B,CAAoC;AAClC+D,kBAAU,YADwB;AAElC8L,cAAM,EAAE,IAF0B;AAGlC5R,YAAI,MAH8B;AAIlC4N,kBAAU;AAJwB,OAApC;AAMD;AACF,GAfD;;;;;;AAoBA8mC,gEACE5uC,UADF,EAEE8H,UAFF,EAE6C;AAE3C,QAAI,KAAKunC,UAAT,EAAqB;AACnB,WAAKkC,iBAAL,CAAuB,IAAvB,EAA6BvxC,UAA7B,EAAyC,IAAzC,EAA+C8H,UAA/C;AACD,KAFD,MAEO;AACL,WAAK0pC,yBAAL,CAA+Bv1C,IAA/B,CAAoC;AAClC+D,kBAAU,YADwB;AAElC8L,cAAM,EAAE,IAF0B;AAGlC5R,YAAI,EAAE,IAH4B;AAIlC4N,kBAAU;AAJwB,OAApC;AAMD;AACF,GAdD;;AAgBQ8mC,qDAAR,UACE9iC,MADF,EAEE9L,UAFF,EAGE9F,IAHF,EAIE4N,UAJF,EAI4C;AAE1C,QAAM2pC,OAAO,GAAG;AAAA;AAAW3B,OAAC,EAAE9vC,UAAd;;AAAwB;AAAWikC,OAAC,EAAE/pC;AAAtC,KAAhB;AACA,SAAKglC,IAAL,CAAU,kBAAkBpzB,MAA5B,EAAoC2lC,OAApC;AACA,SAAKlC,WAAL,CAAiBzjC,MAAjB,EAAyB2lC,OAAzB,EAAkC,UAACC,QAAD,EAAmC;AACnE,UAAI5pC,UAAJ,EAAgB;AACdhN,kBAAU,CAAC;AACTgN,oBAAU,CACR4pC,QAAQ;AAAA;AAAY,aAAZ,CADA,EAERA,QAAQ;AAAA;AAAY,aAAZ,CAFA,CAAV;AAID,SALS,EAKP32C,IAAI,CAACC,KAAL,CAAW,CAAX,CALO,CAAV;AAMD;AACF,KATD;AAUD,GAlBO;;;;;;AAuBR4zC,iDACE5uC,UADF,EAEE9F,IAFF,EAGE4N,UAHF,EAIEqM,IAJF,EAIe;AAEb,SAAKw9B,WAAL,CAAiB,GAAjB,EAAsB3xC,UAAtB,EAAkC9F,IAAlC,EAAwC4N,UAAxC,EAAoDqM,IAApD;AACD,GAPD;;;;;;AAYAy6B,mDACE5uC,UADF,EAEE9F,IAFF,EAGE4N,UAHF,EAIEqM,IAJF,EAIe;AAEb,SAAKw9B,WAAL,CAAiB,GAAjB,EAAsB3xC,UAAtB,EAAkC9F,IAAlC,EAAwC4N,UAAxC,EAAoDqM,IAApD;AACD,GAPD;;AASAy6B,yDACE9iC,MADF,EAEE9L,UAFF,EAGE9F,IAHF,EAIE4N,UAJF,EAKEqM,IALF,EAKe;AAEb,QAAMs9B,OAAO,GAA6B;;AAC/B3B,OAAC,EAAE9vC,UAD4B;;;AAE/BikC,OAAC,EAAE/pC;AAF4B,KAA1C;;AAKA,QAAIia,IAAI,KAAK/N,SAAb,EAAwB;AACtBqrC,aAAO;AAAA;AAAU,SAAV,CAAP,GAAwBt9B,IAAxB;AACD,KATY;;;AAYb,SAAKy9B,gBAAL,CAAsB31C,IAAtB,CAA2B;AACzB6P,YAAM,QADmB;AAEzB2lC,aAAO,SAFkB;AAGzB3pC,gBAAU;AAHe,KAA3B;AAMA,SAAK+pC,oBAAL;AACA,QAAMhmC,KAAK,GAAG,KAAK+lC,gBAAL,CAAsBz5C,MAAtB,GAA+B,CAA7C;;AAEA,QAAI,KAAKk3C,UAAT,EAAqB;AACnB,WAAKyC,QAAL,CAAcjmC,KAAd;AACD,KAFD,MAEO;AACL,WAAKqzB,IAAL,CAAU,oBAAoBl/B,UAA9B;AACD;AACF,GA/BD;;AAiCQ4uC,4CAAR,UAAiB/iC,KAAjB,EAA8B;AAA9B;;AACE,QAAMC,MAAM,GAAG,KAAK8lC,gBAAL,CAAsB/lC,KAAtB,EAA6BC,MAA5C;AACA,QAAM2lC,OAAO,GAAG,KAAKG,gBAAL,CAAsB/lC,KAAtB,EAA6B4lC,OAA7C;AACA,QAAM3pC,UAAU,GAAG,KAAK8pC,gBAAL,CAAsB/lC,KAAtB,EAA6B/D,UAAhD;AACA,SAAK8pC,gBAAL,CAAsB/lC,KAAtB,EAA6BkmC,MAA7B,GAAsC,KAAK1C,UAA3C;AAEA,SAAKE,WAAL,CAAiBzjC,MAAjB,EAAyB2lC,OAAzB,EAAkC,UAACx5C,OAAD,EAAkC;AAClE4a,WAAI,CAACqsB,IAAL,CAAUpzB,MAAM,GAAG,WAAnB,EAAgC7T,OAAhC;;AAEA,aAAO4a,KAAI,CAAC++B,gBAAL,CAAsB/lC,KAAtB,CAAP;AACAgH,WAAI,CAACg/B,oBAAL,GAJkE;;AAOlE,UAAIh/B,KAAI,CAACg/B,oBAAL,KAA8B,CAAlC,EAAqC;AACnCh/B,aAAI,CAAC++B,gBAAL,GAAwB,EAAxB;AACD;;AAED,UAAI9pC,UAAJ,EAAgB;AACdA,kBAAU,CACR7P,OAAO;AAAA;AAAY,WAAZ,CADC,EAERA,OAAO;AAAA;AAAY,WAAZ,CAFC,CAAV;AAID;AACF,KAjBD;AAkBD,GAxBO;;;;;;AA6BR22C,yDAAY3T,KAAZ,EAA2C;AAA3C,qBAA2C;;;AAEzC,QAAI,KAAKoU,UAAT,EAAqB;AACnB,UAAMoC,OAAO,GAAG;AAAA;AAAel1C,SAAC,EAAE0+B;AAAlB,OAAhB;AACA,WAAKiE,IAAL,CAAU,aAAV,EAAyBuS,OAAzB;AAEA,WAAKlC,WAAL;AAAgB;AAAW,SAA3B,EAAgCkC,OAAhC,EAAyC,kBAAM;AAC7C,YAAM5Z,MAAM,GAAGpqB,MAAM;AAAA;AAAY,WAAZ,CAArB;;AACA,YAAIoqB,MAAM,KAAK,IAAf,EAAqB;AACnB,cAAMma,WAAW,GAAGvkC,MAAM;AAAA;AAAY,aAAZ,CAA1B;;AACAoF,eAAI,CAACqsB,IAAL,CAAU,aAAV,EAAyB,0BAA0B8S,WAAnD;AACD;AACF,OAND;AAOD;AACF,GAdD;;AAgBQpD,kDAAR,UAAuB32C,OAAvB,EAAwD;AACtD,QAAI,OAAOA,OAAX,EAAoB;;AAElB,WAAKinC,IAAL,CAAU,kBAAkBlpC,eAAUiC,OAAVjC,CAA5B;AACA,UAAMi8C,MAAM,GAAGh6C,OAAO,CAAC,GAAD,CAAtB;AACA,UAAMi3C,UAAU,GAAG,KAAKM,cAAL,CAAoByC,MAApB,CAAnB;;AACA,UAAI/C,UAAJ,EAAgB;AACd,eAAO,KAAKM,cAAL,CAAoByC,MAApB,CAAP;AACA/C,kBAAU,CAACj3C,OAAO;AAAA;AAAU,WAAV,CAAR,CAAV;AACD;AACF,KATD,MASO,IAAI,WAAWA,OAAf,EAAwB;AAC7B,YAAM,uCAAuCA,OAAO,CAAC,OAAD,CAApD;AACD,KAFM,MAEA,IAAI,OAAOA,OAAX,EAAoB;;AAEzB,WAAKi6C,WAAL,CAAiBj6C,OAAO,CAAC,GAAD,CAAxB,EAAyCA,OAAO,CAAC,GAAD,CAAhD;AACD;AACF,GAhBO;;AAkBA22C,+CAAR,UAAoB9iC,MAApB,EAAoCjR,IAApC,EAAkE;AAChE,SAAKqkC,IAAL,CAAU,qBAAV,EAAiCpzB,MAAjC,EAAyCjR,IAAzC;;AACA,QAAIiR,MAAM,KAAK,GAAf,EAAoB;AAClB,WAAKyiC,aAAL,CACE1zC,IAAI;AAAA;AAAU,SAAV,CADN,EAEEA,IAAI;AAAA;AAAU,SAAV,CAFN;;AAGc,WAHd,EAIEA,IAAI,CAAC,GAAD,CAJN;AAMD,KAPD,MAOO,IAAIiR,MAAM,KAAK,GAAf,EAAoB;AACzB,WAAKyiC,aAAL,CACE1zC,IAAI;AAAA;AAAU,SAAV,CADN,EAEEA,IAAI;AAAA;AAAU,SAAV,CAFN;;AAGe,UAHf,EAIEA,IAAI,CAAC,GAAD,CAJN;AAMD,KAPM,MAOA,IAAIiR,MAAM,KAAK,GAAf,EAAoB;AACzB,WAAKqmC,gBAAL,CACEt3C,IAAI;AAAA;AAAU,SAAV,CADN,EAEEA,IAAI;AAAA;AAAW,SAAX,CAFN;AAID,KALM,MAKA,IAAIiR,MAAM,KAAK,IAAf,EAAqB;AAC1B,WAAKqlC,cAAL,CACEt2C,IAAI;AAAA;AAAiB,SAAjB,CADN,EAEEA,IAAI;AAAA;AAAmB,SAAnB,CAFN;AAID,KALM,MAKA,IAAIiR,MAAM,KAAK,IAAf,EAAqB;AAC1B,WAAKsmC,sBAAL,CAA4Bv3C,IAA5B;AACD,KAFM,MAEA;AACLpB,WAAK,CACH,+CACEzD,eAAU8V,MAAV9V,CADF,GAEE,oCAHC,CAAL;AAKD;AACF,GAnCO;;AAqCA44C,4CAAR,UAAiBvB,SAAjB,EAAoCE,SAApC,EAAqD;AACnD,SAAKrO,IAAL,CAAU,kBAAV;AACA,SAAKmQ,UAAL,GAAkB,IAAlB;AACA,SAAKgD,8BAAL,GAAsC,IAAI/zB,IAAJ,GAAWC,OAAX,EAAtC;AACA,SAAK+zB,gBAAL,CAAsBjF,SAAtB;AACA,SAAKpO,aAAL,GAAqBsO,SAArB;;AACA,QAAI,KAAKgF,gBAAT,EAA2B;AACzB,WAAKC,iBAAL;AACD;;AACD,SAAKC,aAAL;AACA,SAAKF,gBAAL,GAAwB,KAAxB;AACA,SAAK/D,gBAAL,CAAsB,IAAtB;AACD,GAZO;;AAcAI,oDAAR,UAAyBrvC,OAAzB,EAAwC;AAAxC;;AACE1G,gBACE,CAAC,KAAKy2C,SADRz2C,EAEE,wDAFFA;;AAKA,QAAI,KAAK65C,yBAAT,EAAoC;AAClCjS,kBAAY,CAAC,KAAKiS,yBAAN,CAAZ;AACD,KARqC;;;;AAatC,SAAKA,yBAAL,GAAiC53C,UAAU,CAAC;AAC1C+X,WAAI,CAAC6/B,yBAAL,GAAiC,IAAjC;;AACA7/B,WAAI,CAAC8/B,oBAAL,GAF0C;;AAI3C,KAJ0C,EAIxC53C,IAAI,CAACC,KAAL,CAAWuE,OAAX,CAJwC,CAA3C;AAKD,GAlBO;;AAoBAqvC,8CAAR,UAAmBne,OAAnB,EAAmC;;AAEjC,QACEA,OAAO,IACP,CAAC,KAAKqM,QADN,IAEA,KAAK8V,eAAL,KAAyB,KAAKjC,kBAHhC,EAIE;AACA,WAAKzR,IAAL,CAAU,yCAAV;AACA,WAAK0T,eAAL,GAAuB5E,mBAAvB;;AAEA,UAAI,CAAC,KAAKsB,SAAV,EAAqB;AACnB,aAAKR,gBAAL,CAAsB,CAAtB;AACD;AACF;;AACD,SAAKhS,QAAL,GAAgBrM,OAAhB;AACD,GAfO;;AAiBAme,6CAAR,UAAkBiE,MAAlB,EAAiC;AAC/B,QAAIA,MAAJ,EAAY;AACV,WAAK3T,IAAL,CAAU,sBAAV;AACA,WAAK0T,eAAL,GAAuB5E,mBAAvB;;AACA,UAAI,CAAC,KAAKsB,SAAV,EAAqB;AACnB,aAAKR,gBAAL,CAAsB,CAAtB;AACD;AACF,KAND,MAMO;AACL,WAAK5P,IAAL,CAAU,4CAAV;;AACA,UAAI,KAAKoQ,SAAT,EAAoB;AAClB,aAAKA,SAAL,CAAe7N,KAAf;AACD;AACF;AACF,GAbO;;AAeAmN,yDAAR;AACE,SAAK1P,IAAL,CAAU,0BAAV;AACA,SAAKmQ,UAAL,GAAkB,KAAlB;AACA,SAAKC,SAAL,GAAiB,IAAjB,CAHF;;AAME,SAAKwD,uBAAL,GANF;;AASE,SAAKtD,cAAL,GAAsB,EAAtB;;AAEA,QAAI,KAAKuD,gBAAL,EAAJ,EAA6B;AAC3B,UAAI,CAAC,KAAKjW,QAAV,EAAoB;AAClB,aAAKoC,IAAL,CAAU,4CAAV;AACA,aAAK0T,eAAL,GAAuB,KAAKjC,kBAA5B;AACA,aAAKqC,0BAAL,GAAkC,IAAI10B,IAAJ,GAAWC,OAAX,EAAlC;AACD,OAJD,MAIO,IAAI,KAAK8zB,8BAAT,EAAyC;;AAE9C,YAAMY,6BAA6B,GACjC,IAAI30B,IAAJ,GAAWC,OAAX,KAAuB,KAAK8zB,8BAD9B;;AAEA,YAAIY,6BAA6B,GAAG7E,6BAApC,EAAmE;AACjE,eAAKwE,eAAL,GAAuB5E,mBAAvB;AACD;;AACD,aAAKqE,8BAAL,GAAsC,IAAtC;AACD;;AAED,UAAMa,2BAA2B,GAC/B,IAAI50B,IAAJ,GAAWC,OAAX,KAAuB,KAAKy0B,0BAD9B;AAEA,UAAIG,cAAc,GAAGp4C,IAAI,CAAC2G,GAAL,CACnB,CADmB,EAEnB,KAAKkxC,eAAL,GAAuBM,2BAFJ,CAArB;AAIAC,oBAAc,GAAGp4C,IAAI,CAACwO,MAAL,KAAgB4pC,cAAjC;AAEA,WAAKjU,IAAL,CAAU,4BAA4BiU,cAA5B,GAA6C,IAAvD;AACA,WAAKrE,gBAAL,CAAsBqE,cAAtB,EAxB2B;;AA2B3B,WAAKP,eAAL,GAAuB73C,IAAI,CAACuC,GAAL,CACrB,KAAKqzC,kBADgB,EAErB,KAAKiC,eAAL,GAAuBzE,0BAFF,CAAvB;AAID;;AACD,SAAKK,gBAAL,CAAsB,KAAtB;AACD,GA5CO;;AA8CAI,wDAAR;AACE,QAAI,KAAKmE,gBAAL,EAAJ,EAA6B;AAC3B,WAAK7T,IAAL,CAAU,6BAAV;AACA,WAAK8T,0BAAL,GAAkC,IAAI10B,IAAJ,GAAWC,OAAX,EAAlC;AACA,WAAK8zB,8BAAL,GAAsC,IAAtC;AACA,UAAMe,eAAa,GAAG,KAAKvG,cAAL,CAAoB3zC,IAApB,CAAyB,IAAzB,CAAtB;AACA,UAAMm6C,SAAO,GAAG,KAAKpJ,QAAL,CAAc/wC,IAAd,CAAmB,IAAnB,CAAhB;AACA,UAAMo6C,cAAY,GAAG,KAAKC,qBAAL,CAA2Br6C,IAA3B,CAAgC,IAAhC,CAArB;AACA,UAAMs6C,QAAM,GAAG,KAAKp8C,EAAL,GAAU,GAAV,GAAgBw3C,oBAAoB,CAAC6E,iBAArB,EAA/B;AACA,UAAMvzB,MAAI,GAAG,IAAb;AACA,UAAMwzB,eAAa,GAAG,KAAKzU,aAA3B;AACA,UAAI0U,UAAQ,GAAG,KAAf;AACA,UAAIC,YAAU,GAAsB,IAApC;;AACA,UAAMC,SAAO,GAAG;AACd,YAAID,YAAJ,EAAgB;AACdA,sBAAU,CAACnS,KAAX;AACD,SAFD,MAEO;AACLkS,oBAAQ,GAAG,IAAX;AACAL,wBAAY;AACb;AACF,OAPD;;AAQA,UAAMQ,aAAa,GAAG,UAAShI,GAAT,EAAoB;AACxCjzC,oBACE+6C,YADF/6C,EAEE,wDAFFA;AAIA+6C,oBAAU,CAACrE,WAAX,CAAuBzD,GAAvB;AACD,OAND;;AAQA,WAAKwD,SAAL,GAAiB;AACf7N,aAAK,EAAEoS,SADQ;AAEftE,mBAAW,EAAEuE;AAFE,OAAjB;AAKA,UAAM3a,YAAY,GAAG,KAAK4a,kBAA1B;AACA,WAAKA,kBAAL,GAA0B,KAA1B,CAlC2B;;AAqC3B,WAAKrF,kBAAL,CACGrV,QADH,CACYF,YADZ,EAEGH,IAFH,CAEQ,kBAAM;AACV,YAAI,CAAC2a,UAAL,EAAe;AACb16C,aAAG,CAAC,4CAAD,CAAH;AACAinB,gBAAI,CAACmwB,UAAL,GAAkB5iC,MAAM,IAAIA,MAAM,CAACumC,WAAnC;AACAJ,sBAAU,GAAG,IAAIvJ,UAAJ,CACXmJ,QADW,EAEXtzB,MAAI,CAAC8pB,SAFM,EAGXoJ,eAHW,EAIXC,SAJW,EAKXC,cALW;;AAMG,4BAAM;AAClB15C,gBAAI,CAAC8E,MAAM,GAAG,IAAT,GAAgBwhB,MAAI,CAAC8pB,SAAL,CAAe1zC,QAAf,EAAhB,GAA4C,GAA7C,CAAJ;AACA4pB,kBAAI,CAAC+zB,SAAL,CAAe5F,4BAAf;AACD,WATU,EAUXqF,eAVW,CAAb;AAYD,SAfD,MAeO;AACLz6C,aAAG,CAAC,uCAAD,CAAH;AACD;AACF,OArBH,EAsBG+/B,IAtBH,CAsBQ,IAtBR,EAsBc,iBAAK;AACf9Y,cAAI,CAACgf,IAAL,CAAU,0BAA0BzlC,KAApC;;AACA,YAAI,CAACk6C,UAAL,EAAe;AACb,cAAIO,eAAU/N,UAAd,EAA0B;;;;AAIxBvsC,gBAAI,CAACH,KAAD,CAAJ;AACD;;AACDo6C,mBAAO;AACR;AACF,OAjCH;AAkCD;AACF,GAzEO;;AA2ERjF,uDAAUlwC,MAAV,EAAwB;AACtBzF,OAAG,CAAC,yCAAyCyF,MAA1C,CAAH;AACA,SAAKy1C,iBAAL,CAAuBz1C,MAAvB,IAAiC,IAAjC;;AACA,QAAI,KAAK4wC,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAe7N,KAAf;AACD,KAFD,MAEO;AACL,UAAI,KAAKiR,yBAAT,EAAoC;AAClCjS,oBAAY,CAAC,KAAKiS,yBAAN,CAAZ;AACA,aAAKA,yBAAL,GAAiC,IAAjC;AACD;;AACD,UAAI,KAAKrD,UAAT,EAAqB;AACnB,aAAKkE,qBAAL;AACD;AACF;AACF,GAdD;;AAgBA3E,oDAAOlwC,MAAP,EAAqB;AACnBzF,OAAG,CAAC,qCAAqCyF,MAAtC,CAAH;AACA,WAAO,KAAKy1C,iBAAL,CAAuBz1C,MAAvB,CAAP;;AACA,QAAIoM,aAAQ,KAAKqpC,iBAAbrpC,CAAJ,EAAqC;AACnC,WAAK8nC,eAAL,GAAuB5E,mBAAvB;;AACA,UAAI,CAAC,KAAKsB,SAAV,EAAqB;AACnB,aAAKR,gBAAL,CAAsB,CAAtB;AACD;AACF;AACF,GATD;;AAWQF,oDAAR,UAAyBvB,SAAzB,EAA0C;AACxC,QAAMpuB,KAAK,GAAGouB,SAAS,GAAG,IAAI/uB,IAAJ,GAAWC,OAAX,EAA1B;AACA,SAAKkwB,mBAAL,CAAyB;AAAE2F,sBAAgB,EAAEn1B;AAApB,KAAzB;AACD,GAHO;;AAKA2vB,2DAAR;AACE,SAAK,IAAI12C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK05C,gBAAL,CAAsBz5C,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,UAAMm8C,GAAG,GAAG,KAAKzC,gBAAL,CAAsB15C,CAAtB,CAAZ;;AACA,UAAIm8C,GAAG;AAAA;AAAa,aAAOA,GAAG,CAAC5C,OAA3B,IAAsC4C,GAAG,CAACtC,MAA9C,EAAsD;AACpD,YAAIsC,GAAG,CAACvsC,UAAR,EAAoB;AAClBusC,aAAG,CAACvsC,UAAJ,CAAe,YAAf;AACD;;AAED,eAAO,KAAK8pC,gBAAL,CAAsB15C,CAAtB,CAAP;AACA,aAAK25C,oBAAL;AACD;AACF,KAXH;;;AAcE,QAAI,KAAKA,oBAAL,KAA8B,CAAlC,EAAqC;AACnC,WAAKD,gBAAL,GAAwB,EAAxB;AACD;AACF,GAjBO;;AAmBAhD,oDAAR,UAAyB5uC,UAAzB,EAA6CvB,KAA7C,EAA8D;;AAE5D,QAAIqiB,OAAJ;;AACA,QAAI,CAACriB,KAAL,EAAY;AACVqiB,aAAO,GAAG,SAAV;AACD,KAFD,MAEO;AACLA,aAAO,GAAGriB,KAAK,CAACkU,GAAN,CAAU,aAAC;AAAI,gCAAiB,CAAC2hC,CAAD,CAAjB;AAAoB,OAAnC,EAAqC32C,IAArC,CAA0C,GAA1C,CAAV;AACD;;AACD,QAAMyzC,MAAM,GAAG,KAAKnB,aAAL,CAAmBjwC,UAAnB,EAA+B8gB,OAA/B,CAAf;;AACA,QAAIswB,MAAM,IAAIA,MAAM,CAACtpC,UAArB,EAAiC;AAC/BspC,YAAM,CAACtpC,UAAP,CAAkB,mBAAlB;AACD;AACF,GAZO;;AAcA8mC,iDAAR,UAAsB5uC,UAAtB,EAA0C8gB,OAA1C,EAAyD;AACvD,QAAMyzB,oBAAoB,GAAG,IAAIx0C,IAAJ,CAASC,UAAT,EAAqB1J,QAArB,EAA7B,CADuD,CACM;;AAC7D,QAAI86C,MAAJ;;AACA,QAAI,KAAK1B,OAAL,CAAa5vB,GAAb,CAAiBy0B,oBAAjB,CAAJ,EAA4C;AAC1C,UAAM5hC,GAAG,GAAG,KAAK+8B,OAAL,CAAar2C,GAAb,CAAiBk7C,oBAAjB,CAAZ;AACAnD,YAAM,GAAGz+B,GAAG,CAACtZ,GAAJ,CAAQynB,OAAR,CAAT;AACAnO,SAAG,CAAC2N,MAAJ,CAAWQ,OAAX;;AACA,UAAInO,GAAG,CAACiN,IAAJ,KAAa,CAAjB,EAAoB;AAClB,aAAK8vB,OAAL,CAAapvB,MAAb,CAAoBi0B,oBAApB;AACD;AACF,KAPD,MAOO;;AAELnD,YAAM,GAAGhrC,SAAT;AACD;;AACD,WAAOgrC,MAAP;AACD,GAfO;;AAiBAxC,kDAAR,UAAuB4F,UAAvB,EAA2CC,WAA3C,EAA8D;AAC5Dx7C,OAAG,CAAC,yBAAyBu7C,UAAzB,GAAsC,GAAtC,GAA4CC,WAA7C,CAAH;AACA,SAAKpE,UAAL,GAAkB,IAAlB;AACA,SAAK0D,kBAAL,GAA0B,IAA1B;AACA,SAAKzE,SAAL,CAAe7N,KAAf;;AACA,QAAI+S,UAAU,KAAK,eAAf,IAAkCA,UAAU,KAAK,mBAArD,EAA0E;;;;AAIxE,WAAKtD,sBAAL;;AACA,UAAI,KAAKA,sBAAL,IAA+B5C,4BAAnC,EAAiE;;AAE/D,aAAKsE,eAAL,GAAuB1E,8BAAvB,CAF+D;;;AAM/D,aAAKQ,kBAAL,CAAwBgG,qBAAxB;AACD;AACF;AACF,GAnBO;;AAqBA9F,0DAAR,UAA+B/zC,IAA/B,EAA6D;AAC3D,QAAI,KAAK85C,sBAAT,EAAiC;AAC/B,WAAKA,sBAAL,CAA4B95C,IAA5B;AACD,KAFD,MAEO;AACL,UAAI,SAASA,IAAb,EAAmB;AACjB+5C,eAAO,CAAC37C,GAAR,CACE,eAAgB4B,IAAI,CAAC,KAAD,CAAJ,CAAuBsJ,OAAvB,CAA+B,IAA/B,EAAqC,cAArC,CADlB;AAGD;AACF;AACF,GAVO;;AAYAyqC,iDAAR;yBAAA;;;AAEE,SAAK0B,OAAL;;;;;AAIA,WAAsB,6BAAKZ,OAAL,CAAarxB,MAAb,KAAqBw2B,cAA3C,EAA2C,QAA3C,EAA2CA,cAA3C,EAA6C;AAAxC,YAAMzd,OAAO,WAAb;;;AACH,eAAyB,8CAAO,CAAC/Y,MAAR,MAAgBy2B,cAAzC,EAAyC,QAAzC,EAAyCA,cAAzC,EAA2C;AAAtC,gBAAMnF,UAAU,WAAhB;AACH,iBAAKC,WAAL,CAAiBD,UAAjB;AACD;;;;;;;;;;;;AACF;;;;;;;;;;;;;AAED,SAAK,IAAIz3C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK05C,gBAAL,CAAsBz5C,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACrD,UAAI,KAAK05C,gBAAL,CAAsB15C,CAAtB,CAAJ,EAA8B;AAC5B,aAAK45C,QAAL,CAAc55C,CAAd;AACD;AACF;;AAED,WAAO,KAAKs5C,yBAAL,CAA+Br5C,MAAtC,EAA8C;AAC5C,UAAMs5C,OAAO,GAAG,KAAKD,yBAAL,CAA+BrN,KAA/B,EAAhB;AACA,WAAKoN,iBAAL,CACEE,OAAO,CAAC3lC,MADV,EAEE2lC,OAAO,CAACzxC,UAFV,EAGEyxC,OAAO,CAACv3C,IAHV,EAIEu3C,OAAO,CAAC3pC,UAJV;AAMD;AACF,GA3BO;;;;;;AAgCA8mC,qDAAR;AACE,QAAM3T,KAAK,GAA4B,EAAvC;AAEA,QAAI8Z,UAAU,GAAG,IAAjB;;AACA,QAAIb,eAAU/N,UAAd,EAA0B;AACxB4O,gBAAU,GAAG,YAAb;AACD,KAFD,MAEO,IAAIb,eAAUc,WAAd,EAA2B;AAChCD,gBAAU,GAAG,MAAb;AACD;;AAED9Z,SAAK,CAAC,SAAS8Z,UAAT,GAAsB,GAAtB,GAA4BxP,WAAW,CAACphC,OAAZ,CAAoB,KAApB,EAA2B,GAA3B,CAA7B,CAAL,GAAqE,CAArE;;AAEA,QAAI84B,sBAAJ,EAAuB;AACrBhC,WAAK,CAAC,mBAAD,CAAL,GAA6B,CAA7B;AACD,KAFD,MAEO,IAAIga,oBAAJ,EAAqB;AAC1Bha,WAAK,CAAC,uBAAD,CAAL,GAAiC,CAAjC;AACD;;AACD,SAAKG,WAAL,CAAiBH,KAAjB;AACD,GAlBO;;AAoBA2T,oDAAR;AACE,QAAMiE,MAAM,GAAG1V,aAAa,CAAC4R,WAAd,GAA4BmG,eAA5B,EAAf;AACA,WAAOpqC,aAAQ,KAAKqpC,iBAAbrpC,KAAmC+nC,MAA1C;AACD,GAHO;;AAv1BOjE,qDAA8B,CAA9B;;;;;AAKAA,2CAAoB,CAApB;AAs1BjB;AAAC,CAp4BD,CAA0Cd,aAA1C;ACnFA;;;;;;;;;;;;;;;;;AAyBA;;;;;;;AAKA;AAAA;AAAA;AAAwC5jC;;;;;;;;;AAwCtC,8BACU8/B,SADV,EAEUuE,aAFV,EAQUG,kBARV,EAQ+C;AAR/C,gBAUEh5B,qBAAO,IAVT;;AACU7C;AACAA;AAMAA;;;AA1CFA,iBAAqCvZ,UAAU,CAAC,SAAD,CAA/C;;;;;;;;AAQAuZ,qBAAoC,EAApC;;AAqCP;;AAlDDsiC,uDAAYla,KAAZ,EAA2C;AACzC,UAAM,IAAIthC,KAAJ,CAAU,yBAAV,CAAN;AACD,GAFD;;;;;;;;;AAqBOw7C,oCAAP,UAAoB12C,KAApB,EAAkCs1B,GAAlC,EAAqD;AACnD,QAAIA,GAAG,KAAK3tB,SAAZ,EAAuB;AACrB,aAAO,SAAS2tB,GAAhB;AACD,KAFD,MAEO;AACLl7B,kBACE4F,KAAK,CAACka,cAAN,GAAuB6e,SAAvB,EADF3+B,EAEE,gDAFFA;AAIA,aAAO4F,KAAK,CAACE,IAAN,CAAWrI,QAAX,EAAP;AACD;AACF,GAVM;;;;AAgCP6+C,kDACE12C,KADF,EAEEgxC,aAFF,EAGE1b,GAHF,EAIEjsB,UAJF,EAI6C;AAJ7C;;AAME,QAAM9H,UAAU,GAAGvB,KAAK,CAACE,IAAN,CAAWrI,QAAX,EAAnB;AACA,SAAK4oC,IAAL,CACE,uBAAuBl/B,UAAvB,GAAoC,GAApC,GAA0CvB,KAAK,CAACof,eAAN,EAD5C,EAH2C;;AAQ3C,QAAMu3B,QAAQ,GAAGD,kBAAkB,CAACE,YAAnB,CAAgC52C,KAAhC,EAAuCs1B,GAAvC,CAAjB;AACA,QAAMuhB,UAAU,GAAG,EAAnB;AACA,SAAKC,QAAL,CAAcH,QAAd,IAA0BE,UAA1B;AAEA,QAAME,qBAAqB,GAAG/2C,KAAK,CAChCka,cAD2B,GAE3B88B,2BAF2B,EAA9B;AAIA,SAAKC,YAAL,CACE11C,UAAU,GAAG,OADf,EAEEw1C,qBAFF,EAGE,UAAC/7C,KAAD,EAAQgU,MAAR,EAAc;AACZ,UAAIvT,IAAI,GAAGuT,MAAX;;AAEA,UAAIhU,KAAK,KAAK,GAAd,EAAmB;AACjBS,YAAI,GAAG,IAAP;AACAT,aAAK,GAAG,IAAR;AACD;;AAED,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBoZ,aAAI,CAAC07B,aAAL,CAAmBvuC,UAAnB,EAA+B9F,IAA/B;AAAmC;AAAe,aAAlD,EAAyD65B,GAAzD;AACD;;AAED,UAAIniB,aAAQiB,KAAI,CAAC0iC,QAAb3jC,EAAuBwjC,QAAvBxjC,MAAqC0jC,UAAzC,EAAqD;AACnD,YAAIK,QAAJ;;AACA,YAAI,CAACl8C,KAAL,EAAY;AACVk8C,kBAAM,GAAG,IAAT;AACD,SAFD,MAEO,IAAIl8C,KAAK,KAAK,GAAd,EAAmB;AACxBk8C,kBAAM,GAAG,mBAAT;AACD,SAFM,MAEA;AACLA,kBAAM,GAAG,gBAAgBl8C,KAAzB;AACD;;AAEDqO,kBAAU,CAAC6tC,QAAD,EAAS,IAAT,CAAV;AACD;AACF,KA3BH;AA6BD,GAjDD;;;;AAoDAR,oDAAS12C,KAAT,EAAuBs1B,GAAvB,EAAyC;AACvC,QAAMqhB,QAAQ,GAAGD,kBAAkB,CAACE,YAAnB,CAAgC52C,KAAhC,EAAuCs1B,GAAvC,CAAjB;AACA,WAAO,KAAKwhB,QAAL,CAAcH,QAAd,CAAP;AACD,GAHD;;;;AAMAD,4DAAiBpH,KAAjB,EAA8B;AAE7B,GAFD;;;;;;;;;;;;AAaQoH,8CAAR,UACEn1C,UADF,EAEEw1C,qBAFF,EAGEr6B,QAHF,EAG4D;AAH5D;;AAEE;AAAAq6B;AAA4D;;AAG5DA,yBAAqB,CAAC,QAAD,CAArB,GAAkC,QAAlC;AAEA,SAAK9G,kBAAL,CACGrV,QADH;AACW;AAAmB,SAD9B,EAEGL,IAFH,CAEQ,yBAAa;AACjB,UAAM4c,SAAS,GAAGC,aAAa,IAAIA,aAAa,CAAC7B,WAAjD;;AACA,UAAI4B,SAAJ,EAAe;AACbJ,6BAAqB,CAAC,MAAD,CAArB,GAAgCI,SAAhC;AACD;;AAED,UAAMnR,GAAG,GACP,CAAC5xB,KAAI,CAACm3B,SAAL,CAAelnC,MAAf,GAAwB,UAAxB,GAAqC,SAAtC,IACA+P,KAAI,CAACm3B,SAAL,CAAennC,IADf,GAEA7C,UAFA,GAGA,GAHA,GAIA,KAJA,GAKA6S,KAAI,CAACm3B,SAAL,CAAejnC,SALf,GAMA+yC,iBAAYN,qBAAZM,CAPF;;AASAjjC,WAAI,CAACqsB,IAAL,CAAU,8BAA8BuF,GAAxC;;AACA,UAAMsR,GAAG,GAAG,IAAIC,cAAJ,EAAZ;;AACAD,SAAG,CAAC5Q,kBAAJ,GAAyB;AACvB,YAAIhqB,QAAQ,IAAI46B,GAAG,CAACr7C,UAAJ,KAAmB,CAAnC,EAAsC;AACpCmY,eAAI,CAACqsB,IAAL,CACE,uBAAuBuF,GAAvB,GAA6B,oBAD/B,EAEEsR,GAAG,CAACle,MAFN,EAGE,WAHF,EAIEke,GAAG,CAACE,YAJN;;AAMA,cAAIhF,GAAG,GAAG,IAAV;;AACA,cAAI8E,GAAG,CAACle,MAAJ,IAAc,GAAd,IAAqBke,GAAG,CAACle,MAAJ,GAAa,GAAtC,EAA2C;AACzC,gBAAI;AACFoZ,iBAAG,GAAG96C,cAAS4/C,GAAG,CAACE,YAAb9/C,CAAN;AACD,aAFD,CAEE,OAAOW,CAAP,EAAU;AACV8C,kBAAI,CACF,uCACE6qC,GADF,GAEE,IAFF,GAGEsR,GAAG,CAACE,YAJJ,CAAJ;AAMD;;AACD96B,oBAAQ,CAAC,IAAD,EAAO81B,GAAP,CAAR;AACD,WAZD,MAYO;;AAEL,gBAAI8E,GAAG,CAACle,MAAJ,KAAe,GAAf,IAAsBke,GAAG,CAACle,MAAJ,KAAe,GAAzC,EAA8C;AAC5Cj+B,kBAAI,CACF,wCACE6qC,GADF,GAEE,WAFF,GAGEsR,GAAG,CAACle,MAJJ,CAAJ;AAMD;;AACD1c,oBAAQ,CAAC46B,GAAG,CAACle,MAAL,CAAR;AACD;;AACD1c,kBAAQ,GAAG,IAAX;AACD;AACF,OAnCD;;AAqCA46B,SAAG,CAAC7S,IAAJ,CAAS,KAAT,EAAgBuB,GAAhB;AAAmB;AAAoB,UAAvC;AACAsR,SAAG,CAACxN,IAAJ;AACD,KA1DH;AA2DD,GAlEO;;AAmEV;AAhMA,EAAwCuF,aAAxC;AC9BA;;;;;;;;;;;;;;;;;;AAkDA,IAAMoI,gBAAgB,GAAG,gBAAzB;AAEA;;;;AAGA;AAAA;AAAA;AA0BE,gBACSlM,SADT,EAEEmM,eAFF,EAGSC,GAHT,EAIEC,YAJF,EAIkD;AAJlD;;AACS;AAEA;AA5BT,2BAAkB,CAAlB;AAKQ,0BAAuC,IAAvC;AACA,uBAAc,IAAIhb,UAAJ,EAAd;AACA,wBAAe,CAAf;AAOA,wCAEG,IAFH;;;AAMA,yBAAgB,IAAI3b,kBAAJ,EAAhB,CAS0C;;AANlD,iCAAqD,IAArD;AAQE,QAAM42B,iBAAiB,GAAG,IAAIpd,iBAAJ,CAAsBkd,GAAtB,EAA2BC,YAA3B,CAA1B;AAEA,SAAKlX,MAAL,GAAcrF,YAAY,CAACsF,aAAb,CAA2B4K,SAA3B,CAAd;;AAEA,QAAImM,eAAe,IAAIj3C,YAAY,EAAnC,EAAuC;AACrC,WAAK07B,OAAL,GAAe,IAAIua,kBAAJ,CACb,KAAKnL,SADQ,EAEb,KAAKuE,aAAL,CAAmBr1C,IAAnB,CAAwB,IAAxB,CAFa,EAGbo9C,iBAHa,CAAf,CADqC;;AAQrCx7C,gBAAU,CAAC,KAAK0zC,gBAAL,CAAsBt1C,IAAtB,CAA2B,IAA3B,EAAiC,IAAjC,CAAD,EAAyC,CAAzC,CAAV;AACD,KATD,MASO;AACL,UAAMq9C,YAAY,GAAGH,GAAG,CAAC3c,OAAJ,CAAY,8BAAZ,CAArB,CADK;;AAGL,UAAI,OAAO8c,YAAP,KAAwB,WAAxB,IAAuCA,YAAY,KAAK,IAA5D,EAAkE;AAChE,YAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AACpC,gBAAM,IAAI58C,KAAJ,CACJ,oEADI,CAAN;AAGD;;AACD,YAAI;AACF3D,yBAAUugD,YAAVvgD;AACD,SAFD,CAEE,OAAOc,CAAP,EAAU;AACV,gBAAM,IAAI6C,KAAJ,CAAU,oCAAoC7C,CAA9C,CAAN;AACD;AACF;;AAED,WAAK0/C,qBAAL,GAA6B,IAAI5H,oBAAJ,CAC3B,KAAK5E,SADsB,EAE3B,KAAKuE,aAAL,CAAmBr1C,IAAnB,CAAwB,IAAxB,CAF2B,EAG3B,KAAKs1C,gBAAL,CAAsBt1C,IAAtB,CAA2B,IAA3B,CAH2B,EAI3B,KAAKu1C,mBAAL,CAAyBv1C,IAAzB,CAA8B,IAA9B,CAJ2B,EAK3Bo9C,iBAL2B,EAM3BC,YAN2B,CAA7B;AASA,WAAK3b,OAAL,GAAe,KAAK4b,qBAApB;AACD;;AAEDF,qBAAiB,CAACG,sBAAlB,CAAyC,iBAAK;AAC5C5jC,WAAI,CAAC+nB,OAAL,CAAa8b,gBAAb,CAA8B3I,KAA9B;AACD,KAFD,EA3CgD;;;AAiDhD,SAAK4I,cAAL,GAAsB7c,YAAY,CAAC8c,mBAAb,CACpB5M,SADoB,EAEpB;AAAM,iBAAIjP,aAAJ,CAAkBloB,KAAI,CAACssB,MAAvB,EAA+BtsB,KAAI,CAAC+nB,OAApC;AAA4C,KAF9B,CAAtB;AAKA,SAAKic,iBAAL,GAtDgD;;AAyDhD,SAAKC,SAAL,GAAiB,IAAIre,cAAJ,EAAjB;AACA,SAAKse,aAAL,GAAqB,IAAI5jB,QAAJ,CAAa;AAChC+C,oBAAc,EAAE,UAACz3B,KAAD,EAAQs1B,GAAR,EAAa0b,aAAb,EAA4B3nC,UAA5B,EAAsC;AACpD,YAAIkvC,UAAU,GAAY,EAA1B;;AACA,YAAMxtC,IAAI,GAAGqJ,KAAI,CAACikC,SAAL,CAAe7yB,OAAf,CAAuBxlB,KAAK,CAACE,IAA7B,CAAb,CAFoD;;;;AAKpD,YAAI,CAAC6K,IAAI,CAACsB,OAAL,EAAL,EAAqB;AACnBksC,oBAAU,GAAGnkC,KAAI,CAACkkC,aAAL,CAAmBE,oBAAnB,CACXx4C,KAAK,CAACE,IADK,EAEX6K,IAFW,CAAb;AAIA1O,oBAAU,CAAC;AACTgN,sBAAU,CAAC,IAAD,CAAV;AACD,WAFS,EAEP,CAFO,CAAV;AAGD;;AACD,eAAOkvC,UAAP;AACD,OAhB+B;AAiBhCzgB,mBAAa,EAAE,aAAQ;AAjBS,KAAb,CAArB;AAmBA,SAAK2gB,WAAL,CAAiB,WAAjB,EAA8B,KAA9B;AAEA,SAAKC,eAAL,GAAuB,IAAIhkB,QAAJ,CAAa;AAClC+C,oBAAc,EAAE,UAACz3B,KAAD,EAAQs1B,GAAR,EAAa0b,aAAb,EAA4B3nC,UAA5B,EAAsC;AACpD+K,aAAI,CAAC+nB,OAAL,CAAawW,MAAb,CAAoB3yC,KAApB,EAA2BgxC,aAA3B,EAA0C1b,GAA1C,EAA+C,UAAC8D,MAAD,EAAS39B,IAAT,EAAa;AAC1D,cAAMyxB,MAAM,GAAG7jB,UAAU,CAAC+vB,MAAD,EAAS39B,IAAT,CAAzB;;AACA2Y,eAAI,CAACukC,WAAL,CAAiBC,yBAAjB,CAA2C54C,KAAK,CAACE,IAAjD,EAAuDgtB,MAAvD;AACD,SAHD,EADoD;;;AAMpD,eAAO,EAAP;AACD,OARiC;AASlC4K,mBAAa,EAAE,UAAC93B,KAAD,EAAQs1B,GAAR,EAAW;AACxBlhB,aAAI,CAAC+nB,OAAL,CAAa0c,QAAb,CAAsB74C,KAAtB,EAA6Bs1B,GAA7B;AACD;AAXiC,KAAb,CAAvB;AAaD;;;;;;AAKDwjB;AACE,WACE,CAAC,KAAKvN,SAAL,CAAelnC,MAAf,GAAwB,UAAxB,GAAqC,SAAtC,IAAmD,KAAKknC,SAAL,CAAennC,IADpE;AAGD,GAJD;;;;;;AASA00C;AACE,WAAO,KAAKvN,SAAL,CAAejnC,SAAtB;AACD,GAFD;;;;;;AAOAw0C;AACE,QAAMC,UAAU,GAAG,KAAKV,SAAL,CAAe7yB,OAAf,CACjB,IAAIlkB,IAAJ,CAAS,wBAAT,CADiB,CAAnB;AAGA,QAAM03C,MAAM,GAAID,UAAU,CAACptC,GAAX,MAA+B,CAA/C;AACA,WAAO,IAAIkU,IAAJ,GAAWC,OAAX,KAAuBk5B,MAA9B;AACD,GAND;;;;;;AAWAF;AACE,WAAOn5B,kBAAkB,CAAC;AACxBivB,eAAS,EAAE,KAAKqK,UAAL;AADa,KAAD,CAAzB;AAGD,GAJD;;;;;;AASQH,iCAAR,UACEv3C,UADF,EAEE9F,IAFF,EAGEy9C,OAHF,EAIE5jB,GAJF,EAIoB;;AAGlB,SAAK6jB,eAAL;AACA,QAAMj5C,IAAI,GAAG,IAAIoB,IAAJ,CAASC,UAAT,CAAb;AACA9F,QAAI,GAAG,KAAK29C,4BAAL,GACH,KAAKA,4BAAL,CAAkC73C,UAAlC,EAA8C9F,IAA9C,CADG,GAEHA,IAFJ;AAGA,QAAIyxB,MAAM,GAAG,EAAb;;AACA,QAAIoI,GAAJ,EAAS;AACP,UAAI4jB,OAAJ,EAAa;AACX,YAAMG,cAAc,GAAGnlC,SACrBzY,IADqByY,EAErB,UAAColC,GAAD,EAAa;AAAK,+BAAY,CAACA,GAAD,CAAZ;AAAiB,SAFdplC,CAAvB;AAIAgZ,cAAM,GAAG,KAAKwrB,eAAL,CAAqBa,qBAArB,CACPr5C,IADO,EAEPm5C,cAFO,EAGP/jB,GAHO,CAAT;AAKD,OAVD,MAUO;AACL,YAAMkkB,UAAU,GAAGtrC,cAAY,CAACzS,IAAD,CAA/B;AACAyxB,cAAM,GAAG,KAAKwrB,eAAL,CAAqBe,yBAArB,CACPv5C,IADO,EAEPs5C,UAFO,EAGPlkB,GAHO,CAAT;AAKD;AACF,KAnBD,MAmBO,IAAI4jB,OAAJ,EAAa;AAClB,UAAMvtB,eAAe,GAAGzX,SACtBzY,IADsByY,EAEtB,UAAColC,GAAD,EAAa;AAAK,6BAAY,CAACA,GAAD,CAAZ;AAAiB,OAFbplC,CAAxB;AAIAgZ,YAAM,GAAG,KAAKwrB,eAAL,CAAqBgB,gBAArB,CAAsCx5C,IAAtC,EAA4CyrB,eAA5C,CAAT;AACD,KANM,MAMA;AACL,UAAMtT,IAAI,GAAGnK,cAAY,CAACzS,IAAD,CAAzB;AACAyxB,YAAM,GAAG,KAAKwrB,eAAL,CAAqBF,oBAArB,CAA0Ct4C,IAA1C,EAAgDmY,IAAhD,CAAT;AACD;;AACD,QAAI8N,YAAY,GAAGjmB,IAAnB;;AACA,QAAIgtB,MAAM,CAACxzB,MAAP,GAAgB,CAApB,EAAuB;;;AAGrBysB,kBAAY,GAAG,KAAKwzB,kBAAL,CAAwBz5C,IAAxB,CAAf;AACD;;AACD,SAAKy4C,WAAL,CAAiBC,yBAAjB,CAA2CzyB,YAA3C,EAAyD+G,MAAzD;AACD,GAjDO,CAnKV;;;AAuNE4rB,kDAAqBp8B,QAArB,EAA0E;AACxE,SAAK08B,4BAAL,GAAoC18B,QAApC;AACD,GAFD;;AAIQo8B,oCAAR,UAAyBc,aAAzB,EAA+C;AAC7C,SAAKnB,WAAL,CAAiB,WAAjB,EAA8BmB,aAA9B;;AACA,QAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAKC,sBAAL;AACD;AACF,GALO;;AAOAf,uCAAR,UAA4BznB,OAA5B,EAA2C;AAA3C;;AACErzB,QAAI,CAACqzB,OAAD,EAAU,UAACn6B,GAAD,EAAcC,KAAd,EAA4B;AACxCid,WAAI,CAACqkC,WAAL,CAAiBvhD,GAAjB,EAAsBC,KAAtB;AACD,KAFG,CAAJ;AAGD,GAJO;;AAMA2hD,+BAAR,UAAoBv3C,UAApB,EAAwCpK,KAAxC,EAAsD;AACpD,QAAM+I,IAAI,GAAG,IAAIoB,IAAJ,CAAS,YAAYC,UAArB,CAAb;AACA,QAAM6J,OAAO,GAAG8C,cAAY,CAAC/W,KAAD,CAA5B;AACA,SAAKkhD,SAAL,CAAeyB,cAAf,CAA8B55C,IAA9B,EAAoCkL,OAApC;AACA,QAAM8hB,MAAM,GAAG,KAAKorB,aAAL,CAAmBE,oBAAnB,CAAwCt4C,IAAxC,EAA8CkL,OAA9C,CAAf;AACA,SAAKutC,WAAL,CAAiBC,yBAAjB,CAA2C14C,IAA3C,EAAiDgtB,MAAjD;AACD,GANO;;AAQA4rB,mCAAR;AACE,WAAO,KAAKiB,YAAL,EAAP;AACD,GAFO;;AAIRjB,6CACE54C,IADF,EAEE85C,MAFF,EAGE9kC,WAHF,EAIE7L,UAJF,EAI2E;AAJ3E;;AAME,SAAKo3B,IAAL,CAAU,KAAV,EAAiB;AACfvgC,UAAI,EAAEA,IAAI,CAACrI,QAAL,EADS;AAEfV,WAAK,EAAE6iD,MAFQ;AAGf1yC,cAAQ,EAAE4N;AAHK,KAAjB,EAFyE;;;AAUzE,QAAM+K,YAAY,GAAG,KAAKg6B,oBAAL,EAArB;AACA,QAAMC,iBAAiB,GAAGhsC,cAAY,CAAC8rC,MAAD,EAAS9kC,WAAT,CAAtC;AACA,QAAMoL,QAAQ,GAAG,KAAKo4B,eAAL,CAAqBh5B,sBAArB,CAA4Cxf,IAA5C,CAAjB;AACA,QAAMkL,OAAO,GAAGyV,4BAA4B,CAC1Cq5B,iBAD0C,EAE1C55B,QAF0C,EAG1CL,YAH0C,CAA5C;AAMA,QAAM8R,OAAO,GAAG,KAAKooB,eAAL,EAAhB;AACA,QAAMjtB,MAAM,GAAG,KAAKwrB,eAAL,CAAqB0B,kBAArB,CACbl6C,IADa,EAEbkL,OAFa,EAGb2mB,OAHa,EAIb,IAJa,CAAf;AAMA,SAAK4mB,WAAL,CAAiBxb,WAAjB,CAA6BjQ,MAA7B;AACA,SAAKiP,OAAL,CAAayZ,GAAb,CACE11C,IAAI,CAACrI,QAAL,EADF,EAEEqiD,iBAAiB,CAACvuC,GAAlB;AAAqB;AAAa,QAAlC,CAFF,EAGE,UAACytB,MAAD,EAASma,WAAT,EAAoB;AAClB,UAAM8G,OAAO,GAAGjhB,MAAM,KAAK,IAA3B;;AACA,UAAI,CAACihB,OAAL,EAAc;AACZl/C,YAAI,CAAC,YAAY+E,IAAZ,GAAmB,WAAnB,GAAiCk5B,MAAlC,CAAJ;AACD;;AAED,UAAMkhB,WAAW,GAAGlmC,KAAI,CAACskC,eAAL,CAAqBxvB,YAArB,CAClB6I,OADkB,EAElB,CAACsoB,OAFiB,CAApB;;AAIAjmC,WAAI,CAACukC,WAAL,CAAiBC,yBAAjB,CAA2C14C,IAA3C,EAAiDo6C,WAAjD;;AACAlmC,WAAI,CAACmmC,sBAAL,CAA4BlxC,UAA5B,EAAwC+vB,MAAxC,EAAgDma,WAAhD;AACD,KAfH;AAiBA,QAAMptB,YAAY,GAAG,KAAKq0B,kBAAL,CAAwBt6C,IAAxB,CAArB;AACA,SAAKy5C,kBAAL,CAAwBxzB,YAAxB,EA7CyE;;AA+CzE,SAAKwyB,WAAL,CAAiBC,yBAAjB,CAA2CzyB,YAA3C,EAAyD,EAAzD;AACD,GApDD;;AAsDA2yB,oCACE54C,IADF,EAEEu6C,eAFF,EAGEpxC,UAHF,EAG2E;AAH3E;;AAKE,SAAKo3B,IAAL,CAAU,QAAV,EAAoB;AAAEvgC,UAAI,EAAEA,IAAI,CAACrI,QAAL,EAAR;AAAyBV,WAAK,EAAEsjD;AAAhC,KAApB,EAFyE;;AAKzE,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAMz6B,YAAY,GAAG,KAAKg6B,oBAAL,EAArB;AACA,QAAMtuB,eAAe,GAA0B,EAA/C;AACA3tB,QAAI,CAACy8C,eAAD,EAAkB,UAACE,UAAD,EAAqBC,YAArB,EAA0C;AAC9DF,WAAK,GAAG,KAAR;AACA/uB,qBAAe,CAACgvB,UAAD,CAAf,GAA8Bh6B,wBAAwB,CACpDzgB,IAAI,CAACmD,KAAL,CAAWs3C,UAAX,CADoD,EAEpDzsC,cAAY,CAAC0sC,YAAD,CAFwC,EAGpDxmC,KAAI,CAACskC,eAH+C,EAIpDz4B,YAJoD,CAAtD;AAMD,KARG,CAAJ;;AAUA,QAAI,CAACy6B,KAAL,EAAY;AACV,UAAMG,SAAO,GAAG,KAAKV,eAAL,EAAhB;AACA,UAAMjtB,MAAM,GAAG,KAAKwrB,eAAL,CAAqBoC,cAArB,CACb56C,IADa,EAEbyrB,eAFa,EAGbkvB,SAHa,CAAf;AAKA,WAAKlC,WAAL,CAAiBxb,WAAjB,CAA6BjQ,MAA7B;AACA,WAAKiP,OAAL,CAAapT,KAAb,CACE7oB,IAAI,CAACrI,QAAL,EADF,EAEE4iD,eAFF,EAGE,UAACrhB,MAAD,EAASma,WAAT,EAAoB;AAClB,YAAM8G,OAAO,GAAGjhB,MAAM,KAAK,IAA3B;;AACA,YAAI,CAACihB,OAAL,EAAc;AACZl/C,cAAI,CAAC,eAAe+E,IAAf,GAAsB,WAAtB,GAAoCk5B,MAArC,CAAJ;AACD;;AAED,YAAMkhB,WAAW,GAAGlmC,KAAI,CAACskC,eAAL,CAAqBxvB,YAArB,CAClB2xB,SADkB,EAElB,CAACR,OAFiB,CAApB;;AAIA,YAAMl0B,YAAY,GAChBm0B,WAAW,CAAC5gD,MAAZ,GAAqB,CAArB,GAAyB0a,KAAI,CAACulC,kBAAL,CAAwBz5C,IAAxB,CAAzB,GAAyDA,IAD3D;;AAEAkU,aAAI,CAACukC,WAAL,CAAiBC,yBAAjB,CAA2CzyB,YAA3C,EAAyDm0B,WAAzD;;AACAlmC,aAAI,CAACmmC,sBAAL,CAA4BlxC,UAA5B,EAAwC+vB,MAAxC,EAAgDma,WAAhD;AACD,OAjBH;AAoBAv1C,UAAI,CAACy8C,eAAD,EAAkB,UAACpd,WAAD,EAAoB;AACxC,YAAMlX,YAAY,GAAG/R,KAAI,CAAComC,kBAAL,CAAwBt6C,IAAI,CAACmD,KAAL,CAAWg6B,WAAX,CAAxB,CAArB;;AACAjpB,aAAI,CAACulC,kBAAL,CAAwBxzB,YAAxB;AACD,OAHG,CAAJ,CA5BU;;AAkCV,WAAKwyB,WAAL,CAAiBC,yBAAjB,CAA2C14C,IAA3C,EAAiD,EAAjD;AACD,KAnCD,MAmCO;AACL1F,SAAG,CAAC,sDAAD,CAAH;AACA,WAAK+/C,sBAAL,CAA4BlxC,UAA5B,EAAwC,IAAxC;AACD;AACF,GA5DD;;;;;;AAiEQyvC,0CAAR;AAAA;;AACE,SAAKrY,IAAL,CAAU,oBAAV;AAEA,QAAMxgB,YAAY,GAAG,KAAKg6B,oBAAL,EAArB;AACA,QAAMc,wBAAwB,GAAG,IAAI95B,kBAAJ,EAAjC;AACA,SAAKigB,aAAL,CAAmBlf,WAAnB,CAA+B1gB,IAAI,CAACwhB,KAApC,EAA2C,UAAC5iB,IAAD,EAAO6K,IAAP,EAAW;AACpD,UAAMiwC,QAAQ,GAAGr6B,wBAAwB,CACvCzgB,IADuC,EAEvC6K,IAFuC,EAGvCqJ,KAAI,CAACskC,eAHkC,EAIvCz4B,YAJuC,CAAzC;AAMA86B,8BAAwB,CAACv5B,QAAzB,CAAkCthB,IAAlC,EAAwC86C,QAAxC;AACD,KARD;AASA,QAAI9tB,MAAM,GAAY,EAAtB;AAEA6tB,4BAAwB,CAAC/4B,WAAzB,CAAqC1gB,IAAI,CAACwhB,KAA1C,EAAiD,UAAC5iB,IAAD,EAAOmY,IAAP,EAAW;AAC1D6U,YAAM,GAAGA,MAAM,CAACoC,MAAP,CACPlb,KAAI,CAACskC,eAAL,CAAqBF,oBAArB,CAA0Ct4C,IAA1C,EAAgDmY,IAAhD,CADO,CAAT;;AAGA,UAAM8N,YAAY,GAAG/R,KAAI,CAAComC,kBAAL,CAAwBt6C,IAAxB,CAArB;;AACAkU,WAAI,CAACulC,kBAAL,CAAwBxzB,YAAxB;AACD,KAND;AAQA,SAAK+a,aAAL,GAAqB,IAAIjgB,kBAAJ,EAArB;AACA,SAAK03B,WAAL,CAAiBC,yBAAjB,CAA2Ct3C,IAAI,CAACwhB,KAAhD,EAAuDoK,MAAvD;AACD,GA1BO;;AA4BR4rB,gDACE54C,IADF,EAEEmJ,UAFF,EAE2E;AAF3E;;AAIE,SAAK8yB,OAAL,CAAaxyB,kBAAb,CAAgCzJ,IAAI,CAACrI,QAAL,EAAhC,EAAiD,UAACuhC,MAAD,EAASma,WAAT,EAAoB;AACnE,UAAIna,MAAM,KAAK,IAAf,EAAqB;AACnBhlB,aAAI,CAAC8sB,aAAL,CAAmBvf,MAAnB,CAA0BzhB,IAA1B;AACD;;AACDkU,WAAI,CAACmmC,sBAAL,CAA4BlxC,UAA5B,EAAwC+vB,MAAxC,EAAgDma,WAAhD;AACD,KALD;AAMD,GAVD;;AAYAuF,6CACE54C,IADF,EAEE/I,KAFF,EAGEkS,UAHF,EAG2E;AAH3E;;AAKE,QAAM+B,OAAO,GAAG8C,cAAY,CAAC/W,KAAD,CAA5B;AACA,SAAKglC,OAAL,CAAa8e,eAAb,CACE/6C,IAAI,CAACrI,QAAL,EADF,EAEEuT,OAAO,CAACO,GAAR;AAAW;AAAa,QAAxB,CAFF,EAGE,UAACytB,MAAD,EAASma,WAAT,EAAoB;AAClB,UAAIna,MAAM,KAAK,IAAf,EAAqB;AACnBhlB,aAAI,CAAC8sB,aAAL,CAAmB1f,QAAnB,CAA4BthB,IAA5B,EAAkCkL,OAAlC;AACD;;AACDgJ,WAAI,CAACmmC,sBAAL,CAA4BlxC,UAA5B,EAAwC+vB,MAAxC,EAAgDma,WAAhD;AACD,KARH;AAUD,GAhBD;;AAkBAuF,yDACE54C,IADF,EAEE/I,KAFF,EAGEmQ,QAHF,EAIE+B,UAJF,EAI2E;AAJ3E;;AAME,QAAM+B,OAAO,GAAG8C,cAAY,CAAC/W,KAAD,EAAQmQ,QAAR,CAA5B;AACA,SAAK60B,OAAL,CAAa8e,eAAb,CACE/6C,IAAI,CAACrI,QAAL,EADF,EAEEuT,OAAO,CAACO,GAAR;AAAW;AAAa,QAAxB,CAFF,EAGE,UAACytB,MAAD,EAASma,WAAT,EAAoB;AAClB,UAAIna,MAAM,KAAK,IAAf,EAAqB;AACnBhlB,aAAI,CAAC8sB,aAAL,CAAmB1f,QAAnB,CAA4BthB,IAA5B,EAAkCkL,OAAlC;AACD;;AACDgJ,WAAI,CAACmmC,sBAAL,CAA4BlxC,UAA5B,EAAwC+vB,MAAxC,EAAgDma,WAAhD;AACD,KARH;AAUD,GAjBD;;AAmBAuF,gDACE54C,IADF,EAEEu6C,eAFF,EAGEpxC,UAHF,EAG2E;AAH3E;;AAKE,QAAIgD,aAAQouC,eAARpuC,CAAJ,EAA8B;AAC5B7R,SAAG,CACD,qEADC,CAAH;AAGA,WAAK+/C,sBAAL,CAA4BlxC,UAA5B,EAAwC,IAAxC;AACA;AACD;;AAED,SAAK8yB,OAAL,CAAa+e,iBAAb,CACEh7C,IAAI,CAACrI,QAAL,EADF,EAEE4iD,eAFF,EAGE,UAACrhB,MAAD,EAASma,WAAT,EAAoB;AAClB,UAAIna,MAAM,KAAK,IAAf,EAAqB;AACnBp7B,YAAI,CAACy8C,eAAD,EAAkB,UAAC5tC,SAAD,EAAoBC,SAApB,EAAsC;AAC1D,cAAMC,YAAY,GAAGmB,cAAY,CAACpB,SAAD,CAAjC;;AACAsH,eAAI,CAAC8sB,aAAL,CAAmB1f,QAAnB,CAA4BthB,IAAI,CAACmD,KAAL,CAAWwJ,SAAX,CAA5B,EAAmDE,YAAnD;AACD,SAHG,CAAJ;AAID;;AACDqH,WAAI,CAACmmC,sBAAL,CAA4BlxC,UAA5B,EAAwC+vB,MAAxC,EAAgDma,WAAhD;AACD,KAXH;AAaD,GA1BD;;AA4BAuF,sDAAyB94C,KAAzB,EAAuCqZ,iBAAvC,EAA2E;AACzE,QAAI6T,MAAJ;;AACA,QAAIltB,KAAK,CAACE,IAAN,CAAWgC,QAAX,OAA0B,OAA9B,EAAuC;AACrCgrB,YAAM,GAAG,KAAKorB,aAAL,CAAmBnoB,oBAAnB,CACPnwB,KADO,EAEPqZ,iBAFO,CAAT;AAID,KALD,MAKO;AACL6T,YAAM,GAAG,KAAKwrB,eAAL,CAAqBvoB,oBAArB,CACPnwB,KADO,EAEPqZ,iBAFO,CAAT;AAID;;AACD,SAAKs/B,WAAL,CAAiBwC,iBAAjB,CAAmCn7C,KAAK,CAACE,IAAzC,EAA+CgtB,MAA/C;AACD,GAdD;;AAgBA4rB,yDACE94C,KADF,EAEEqZ,iBAFF,EAEsC;;;AAIpC,QAAI6T,MAAJ;;AACA,QAAIltB,KAAK,CAACE,IAAN,CAAWgC,QAAX,OAA0B,OAA9B,EAAuC;AACrCgrB,YAAM,GAAG,KAAKorB,aAAL,CAAmB5nB,uBAAnB,CACP1wB,KADO,EAEPqZ,iBAFO,CAAT;AAID,KALD,MAKO;AACL6T,YAAM,GAAG,KAAKwrB,eAAL,CAAqBhoB,uBAArB,CACP1wB,KADO,EAEPqZ,iBAFO,CAAT;AAID;;AACD,SAAKs/B,WAAL,CAAiBwC,iBAAjB,CAAmCn7C,KAAK,CAACE,IAAzC,EAA+CgtB,MAA/C;AACD,GAnBD;;AAqBA4rB;AACE,QAAI,KAAKf,qBAAT,EAAgC;AAC9B,WAAKA,qBAAL,CAA2BvC,SAA3B,CAAqCiC,gBAArC;AACD;AACF,GAJD;;AAMAqB;AACE,QAAI,KAAKf,qBAAT,EAAgC;AAC9B,WAAKA,qBAAL,CAA2BqD,MAA3B,CAAkC3D,gBAAlC;AACD;AACF,GAJD;;AAMAqB,mCAAMuC,SAAN,EAAgC;AAA1B;AAAAA;AAA0B;;AAC9B,QAAI,OAAOlF,OAAP,KAAmB,WAAvB,EAAoC;AAClC;AACD;;AAED,QAAI3Z,KAAJ;;AACA,QAAI6e,SAAJ,EAAe;AACb,UAAI,CAAC,KAAKjf,cAAV,EAA0B;AACxB,aAAKA,cAAL,GAAsB,IAAIT,aAAJ,CAAkB,KAAK+E,MAAvB,CAAtB;AACD;;AACDlE,WAAK,GAAG,KAAKJ,cAAL,CAAoBxhC,GAApB,EAAR;AACD,KALD,MAKO;AACL4hC,WAAK,GAAG,KAAKkE,MAAL,CAAY9lC,GAAZ,EAAR;AACD;;AAED,QAAM0gD,WAAW,GAAGj6C,MAAM,CAAC/D,IAAP,CAAYk/B,KAAZ,EAAmB+e,MAAnB,CAClB,UAACC,aAAD,EAAgBC,YAAhB,EAA4B;AAC1B,iBAAI,CAACx4C,GAAL,CAASw4C,YAAY,CAAC/hD,MAAtB,EAA8B8hD,aAA9B;AAA4C,KAF5B,EAGlB,CAHkB,CAApB;AAMAx9C,QAAI,CAACw+B,KAAD,EAAQ,UAACV,IAAD,EAAe3kC,KAAf,EAA6B;AACvC,UAAIukD,UAAU,GAAG5f,IAAjB,CADuC;;AAGvC,WAAK,IAAIriC,CAAC,GAAGqiC,IAAI,CAACpiC,MAAlB,EAA0BD,CAAC,GAAG6hD,WAAW,GAAG,CAA5C,EAA+C7hD,CAAC,EAAhD,EAAoD;AAClDiiD,kBAAU,IAAI,GAAd;AACD;;AACDvF,aAAO,CAAC37C,GAAR,CAAYkhD,UAAU,GAAGvkD,KAAzB;AACD,KAPG,CAAJ;AAQD,GA7BD;;AA+BA2hD,mDAAsB6C,MAAtB,EAAoC;AAClC,SAAKjb,MAAL,CAAY4C,gBAAZ,CAA6BqY,MAA7B;AACA,SAAKzD,cAAL,CAAoB0D,WAApB,CAAgCD,MAAhC;AACD,GAHD;;AAKQ7C,wBAAR;AAAa;;SAAA,yCAAqB;AAArBv/C;;;AACX,QAAIuB,MAAM,GAAG,EAAb;;AACA,QAAI,KAAKi9C,qBAAT,EAAgC;AAC9Bj9C,YAAM,GAAG,KAAKi9C,qBAAL,CAA2Bp/C,EAA3B,GAAgC,GAAzC;AACD;;AACD6B,OAAG,MAAH,CAAG,MAAH,EAAGO,gBAACD,MAAD,GAAYvB,OAAZ,CAAH;AACD,GANO;;AAQRu/C,oDACEp8B,QADF,EAEE0c,MAFF,EAGEma,WAHF,EAG6B;AAE3B,QAAI72B,QAAJ,EAAc;AACZnc,oBAAc,CAAC;AACb,YAAI64B,MAAM,KAAK,IAAf,EAAqB;AACnB1c,kBAAQ,CAAC,IAAD,CAAR;AACD,SAFD,MAEO;AACL,cAAM3c,IAAI,GAAG,CAACq5B,MAAM,IAAI,OAAX,EAAoBj5B,WAApB,EAAb;AACA,cAAI3G,OAAO,GAAGuG,IAAd;;AACA,cAAIwzC,WAAJ,EAAiB;AACf/5C,mBAAO,IAAI,OAAO+5C,WAAlB;AACD;;AAED,cAAMv4C,KAAK,GAAG,IAAIE,KAAJ,CAAU1B,OAAV,CAAd,CAPK;;AASJwB,eAAa,CAAC+E,IAAd,GAAqBA,IAArB;AACD2c,kBAAQ,CAAC1hB,KAAD,CAAR;AACD;AACF,OAfa,CAAd;AAgBD;AACF,GAvBD;;AAyBAqG,wBAAIy3C,cAAJ,EAAI,UAAJ,EAAY;SAAZ;AACE,aAAO,KAAK+C,UAAL,KAAoB,KAAKA,UAAL,GAAkB,IAAIC,QAAJ,CAAa,IAAb,CAAtC,CAAP;AACD,KAFW;oBAAA;;AAAA,GAAZ;AAGF;AAAC,CA7kBD;ACvDA;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;AAMA;AAAA;AAAA;;;;AAgCE,wBAAY72C,MAAZ,EAA+B;AAC7B,SAAK82C,cAAL,GAAsB,IAAI71B,aAAJ,CAAkBjhB,MAAM,CAACkV,QAAP,EAAlB,CAAtB;AACA,SAAKxB,MAAL,GAAc1T,MAAM,CAACkV,QAAP,EAAd;AACA,SAAK6hC,UAAL,GAAkBC,YAAY,CAACC,aAAb,CAA2Bj3C,MAA3B,CAAlB;AACA,SAAKk3C,QAAL,GAAgBF,YAAY,CAACG,WAAb,CAAyBn3C,MAAzB,CAAhB;AACD;;;;;;AAKDg3C;AACE,WAAO,KAAKD,UAAZ;AACD,GAFD;;;;;;AAOAC;AACE,WAAO,KAAKE,QAAZ;AACD,GAFD;;;;;;;AAQAF,6CAAQlxC,IAAR,EAAuB;AACrB,WACE,KAAK4N,MAAL,CAAYzN,OAAZ,CAAoB,KAAKmxC,YAAL,EAApB,EAAyCtxC,IAAzC,KAAkD,CAAlD,IACA,KAAK4N,MAAL,CAAYzN,OAAZ,CAAoBH,IAApB,EAA0B,KAAKuxC,UAAL,EAA1B,KAAgD,CAFlD;AAID,GALD;;;;;;AAUAL,iDACE5jC,IADF,EAEEnhB,GAFF,EAGEssB,QAHF,EAIE2C,YAJF,EAKE/B,MALF,EAMEgC,oBANF,EAMqD;AAEnD,QAAI,CAAC,KAAKgJ,OAAL,CAAa,IAAIpkB,SAAJ,CAAc9T,GAAd,EAAmBssB,QAAnB,CAAb,CAAL,EAAiD;AAC/CA,cAAQ,GAAG7O,YAAY,CAAChI,UAAxB;AACD;;AACD,WAAO,KAAKovC,cAAL,CAAoB5uC,WAApB,CACLkL,IADK,EAELnhB,GAFK,EAGLssB,QAHK,EAIL2C,YAJK,EAKL/B,MALK,EAMLgC,oBANK,CAAP;AAQD,GAnBD;;;;;;AAwBA61B,oDACEx2B,OADF,EAEEmB,OAFF,EAGER,oBAHF,EAGqD;AAEnD,QAAIQ,OAAO,CAACxa,UAAR,EAAJ,EAA0B;;AAExBwa,aAAO,GAAGjS,YAAY,CAAChI,UAAvB;AACD;;AACD,QAAI2Y,QAAQ,GAAGsB,OAAO,CAACD,SAAR,CAAkB,KAAKhO,MAAvB,CAAf,CANmD;;AAQnD2M,YAAQ,GAAGA,QAAQ,CAACtY,cAAT,CAAwB2H,YAAY,CAAChI,UAArC,CAAX;AACA,QAAM4vC,IAAI,GAAG,IAAb;AACA31B,WAAO,CAACtR,YAAR,CAAqB7G,cAArB,EAAqC,UAACvX,GAAD,EAAM4V,SAAN,EAAe;AAClD,UAAI,CAACyvC,IAAI,CAACntB,OAAL,CAAa,IAAIpkB,SAAJ,CAAc9T,GAAd,EAAmB4V,SAAnB,CAAb,CAAL,EAAkD;AAChDwY,gBAAQ,GAAGA,QAAQ,CAACrY,oBAAT,CAA8B/V,GAA9B,EAAmCyd,YAAY,CAAChI,UAAhD,CAAX;AACD;AACF,KAJD;AAKA,WAAO,KAAKovC,cAAL,CAAoB1xB,cAApB,CACL5E,OADK,EAELH,QAFK,EAGLc,oBAHK,CAAP;AAKD,GAvBD;;;;;;AA4BA61B,oDAAex2B,OAAf,EAA8BvQ,WAA9B,EAA+C;;AAE7C,WAAOuQ,OAAP;AACD,GAHD;;;;;;AAQAw2B;AACE,WAAO,IAAP;AACD,GAFD;;;;;;AAOAA;AACE,WAAO,KAAKF,cAAZ;AACD,GAFD;;;;;;AAOAE;AACE,WAAO,KAAKtjC,MAAZ;AACD,GAFD;;;;;;;;AASesjC,+BAAf,UAA6Bh3C,MAA7B,EAAgD;AAC9C,QAAIA,MAAM,CAAC6W,QAAP,EAAJ,EAAuB;AACrB,UAAMM,SAAS,GAAGnX,MAAM,CAACoX,iBAAP,EAAlB;AACA,aAAOpX,MAAM,CAACkV,QAAP,GAAkBqiC,QAAlB,CAA2Bv3C,MAAM,CAAC8W,kBAAP,EAA3B,EAAwDK,SAAxD,CAAP;AACD,KAHD,MAGO;AACL,aAAOnX,MAAM,CAACkV,QAAP,GAAkBhE,OAAlB,EAAP;AACD;AACF,GAPc;;;;;;;;AAcA8lC,6BAAf,UAA2Bh3C,MAA3B,EAA8C;AAC5C,QAAIA,MAAM,CAAC+W,MAAP,EAAJ,EAAqB;AACnB,UAAMM,OAAO,GAAGrX,MAAM,CAACsX,eAAP,EAAhB;AACA,aAAOtX,MAAM,CAACkV,QAAP,GAAkBqiC,QAAlB,CAA2Bv3C,MAAM,CAACgX,gBAAP,EAA3B,EAAsDK,OAAtD,CAAP;AACD,KAHD,MAGO;AACL,aAAOrX,MAAM,CAACkV,QAAP,GAAkB3D,OAAlB,EAAP;AACD;AACF,GAPc;;AAQjB;AAAC,CA5KD;AClCA;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;AAMA;AAAA;AAAA;;;;AAgCE,yBAAYvR,MAAZ,EAA+B;AAC7B,SAAKw3C,aAAL,GAAqB,IAAIR,YAAJ,CAAiBh3C,MAAjB,CAArB;AACA,SAAK0T,MAAL,GAAc1T,MAAM,CAACkV,QAAP,EAAd;AACA,SAAKuiC,MAAL,GAAcz3C,MAAM,CAAC03C,QAAP,EAAd;AACA,SAAKC,QAAL,GAAgB,CAAC33C,MAAM,CAAC43C,cAAP,EAAjB;AACD;;;;;;AAKDC,kDACEzkC,IADF,EAEEnhB,GAFF,EAGEssB,QAHF,EAIE2C,YAJF,EAKE/B,MALF,EAMEgC,oBANF,EAMqD;AAEnD,QAAI,CAAC,KAAKq2B,aAAL,CAAmBrtB,OAAnB,CAA2B,IAAIpkB,SAAJ,CAAc9T,GAAd,EAAmBssB,QAAnB,CAA3B,CAAL,EAA+D;AAC7DA,cAAQ,GAAG7O,YAAY,CAAChI,UAAxB;AACD;;AACD,QAAI0L,IAAI,CAACxD,iBAAL,CAAuB3d,GAAvB,EAA4B+W,MAA5B,CAAmCuV,QAAnC,CAAJ,EAAkD;;AAEhD,aAAOnL,IAAP;AACD,KAHD,MAGO,IAAIA,IAAI,CAACc,WAAL,KAAqB,KAAKujC,MAA9B,EAAsC;AAC3C,aAAO,KAAKD,aAAL,CACJtxB,gBADI,GAEJhe,WAFI,CAGHkL,IAHG,EAIHnhB,GAJG,EAKHssB,QALG,EAMH2C,YANG,EAOH/B,MAPG,EAQHgC,oBARG,CAAP;AAUD,KAXM,MAWA;AACL,aAAO,KAAK22B,qBAAL,CACL1kC,IADK,EAELnhB,GAFK,EAGLssB,QAHK,EAILY,MAJK,EAKLgC,oBALK,CAAP;AAOD;AACF,GAlCD;;;;;;AAuCA02B,qDACEr3B,OADF,EAEEmB,OAFF,EAGER,oBAHF,EAGqD;AAEnD,QAAId,QAAJ;;AACA,QAAIsB,OAAO,CAACxa,UAAR,MAAwBwa,OAAO,CAACva,OAAR,EAA5B,EAA+C;;AAE7CiZ,cAAQ,GAAG3Q,YAAY,CAAChI,UAAb,CAAwBga,SAAxB,CAAkC,KAAKhO,MAAvC,CAAX;AACD,KAHD,MAGO;AACL,UACE,KAAK+jC,MAAL,GAAc,CAAd,GAAkB91B,OAAO,CAACzN,WAAR,EAAlB,IACAyN,OAAO,CAACP,SAAR,CAAkB,KAAK1N,MAAvB,CAFF,EAGE;;AAEA2M,gBAAQ,GAAG3Q,YAAY,CAAChI,UAAb,CAAwBga,SAAxB,CAAkC,KAAKhO,MAAvC,CAAX,CAFA;;AAIA,YAAItC,QAAQ,SAAZ;;AACA,YAAI,KAAKumC,QAAT,EAAmB;AACjBvmC,kBAAQ,GAAIuQ,OAAwB,CAACrQ,sBAAzB,CACV,KAAKkmC,aAAL,CAAmBH,UAAnB,EADU,EAEV,KAAK3jC,MAFK,CAAZ;AAID,SALD,MAKO;AACLtC,kBAAQ,GAAIuQ,OAAwB,CAAC1Q,eAAzB,CACV,KAAKumC,aAAL,CAAmBJ,YAAnB,EADU,EAEV,KAAK1jC,MAFK,CAAZ;AAID;;AACD,YAAItJ,KAAK,GAAG,CAAZ;;AACA,eAAOgH,QAAQ,CAAC2mC,OAAT,MAAsB3tC,KAAK,GAAG,KAAKqtC,MAA1C,EAAkD;AAChD,cAAMhpC,IAAI,GAAG2C,QAAQ,CAAC1C,OAAT,EAAb;AACA,cAAIspC,OAAO,SAAX;;AACA,cAAI,KAAKL,QAAT,EAAmB;AACjBK,mBAAO,GACL,KAAKtkC,MAAL,CAAYzN,OAAZ,CAAoB,KAAKuxC,aAAL,CAAmBJ,YAAnB,EAApB,EAAuD3oC,IAAvD,KAAgE,CADlE;AAED,WAHD,MAGO;AACLupC,mBAAO,GACL,KAAKtkC,MAAL,CAAYzN,OAAZ,CAAoBwI,IAApB,EAA0B,KAAK+oC,aAAL,CAAmBH,UAAnB,EAA1B,KAA8D,CADhE;AAED;;AACD,cAAIW,OAAJ,EAAa;AACX33B,oBAAQ,GAAGA,QAAQ,CAACrY,oBAAT,CAA8ByG,IAAI,CAAC/b,IAAnC,EAAyC+b,IAAI,CAAC3I,IAA9C,CAAX;AACAsE,iBAAK;AACN,WAHD,MAGO;;AAEL;AACD;AACF;AACF,OAtCD,MAsCO;;AAELiW,gBAAQ,GAAGsB,OAAO,CAACD,SAAR,CAAkB,KAAKhO,MAAvB,CAAX,CAFK;;AAIL2M,gBAAQ,GAAGA,QAAQ,CAACtY,cAAT,CACT2H,YAAY,CAAChI,UADJ,CAAX;AAGA,YAAIyJ,SAAS,SAAb;AACA,YAAIK,OAAO,SAAX;AACA,YAAI/T,GAAG,SAAP;AACA,YAAI2T,QAAQ,SAAZ;;AACA,YAAI,KAAKumC,QAAT,EAAmB;AACjBvmC,kBAAQ,GAAGiP,QAAQ,CAAC43B,kBAAT,CAA4B,KAAKvkC,MAAjC,CAAX;AACAvC,mBAAS,GAAG,KAAKqmC,aAAL,CAAmBH,UAAnB,EAAZ;AACA7lC,iBAAO,GAAG,KAAKgmC,aAAL,CAAmBJ,YAAnB,EAAV;AACA,cAAMc,cAAY,GAAG,KAAKxkC,MAAL,CAAY7E,UAAZ,EAArB;;AACApR,aAAG,GAAG,UAAC7F,CAAD,EAAeC,CAAf,EAA2B;AAAK,iCAAY,CAACA,CAAD,EAAID,CAAJ,CAAZ;AAAkB,WAAxD;AACD,SAND,MAMO;AACLwZ,kBAAQ,GAAGiP,QAAQ,CAAC9R,WAAT,CAAqB,KAAKmF,MAA1B,CAAX;AACAvC,mBAAS,GAAG,KAAKqmC,aAAL,CAAmBJ,YAAnB,EAAZ;AACA5lC,iBAAO,GAAG,KAAKgmC,aAAL,CAAmBH,UAAnB,EAAV;AACA55C,aAAG,GAAG,KAAKiW,MAAL,CAAY7E,UAAZ,EAAN;AACD;;AAED,YAAIzE,KAAK,GAAG,CAAZ;AACA,YAAI+tC,cAAc,GAAG,KAArB;;AACA,eAAO/mC,QAAQ,CAAC2mC,OAAT,EAAP,EAA2B;AACzB,cAAMtpC,IAAI,GAAG2C,QAAQ,CAAC1C,OAAT,EAAb;;AACA,cAAI,CAACypC,cAAD,IAAmB16C,GAAG,CAAC0T,SAAD,EAAY1C,IAAZ,CAAH,IAAwB,CAA/C,EAAkD;;AAEhD0pC,0BAAc,GAAG,IAAjB;AACD;;AACD,cAAMH,OAAO,GACXG,cAAc,IAAI/tC,KAAK,GAAG,KAAKqtC,MAA/B,IAAyCh6C,GAAG,CAACgR,IAAD,EAAO+C,OAAP,CAAH,IAAsB,CADjE;;AAEA,cAAIwmC,OAAJ,EAAa;AACX5tC,iBAAK;AACN,WAFD,MAEO;AACLiW,oBAAQ,GAAGA,QAAQ,CAACrY,oBAAT,CACTyG,IAAI,CAAC/b,IADI,EAETgd,YAAY,CAAChI,UAFJ,CAAX;AAID;AACF;AACF;AACF;;AACD,WAAO,KAAK8vC,aAAL,CACJtxB,gBADI,GAEJd,cAFI,CAEW5E,OAFX,EAEoBH,QAFpB,EAE8Bc,oBAF9B,CAAP;AAGD,GAhGD;;;;;;AAqGA02B,qDAAer3B,OAAf,EAA8BvQ,WAA9B,EAA+C;;AAE7C,WAAOuQ,OAAP;AACD,GAHD;;;;;;AAQAq3B;AACE,WAAO,IAAP;AACD,GAFD;;;;;;AAOAA;AACE,WAAO,KAAKL,aAAL,CAAmBtxB,gBAAnB,EAAP;AACD,GAFD;;;;;;AAOA2xB;AACE,WAAO,KAAKnkC,MAAZ;AACD,GAFD;;;;;;;;;;;;AAaQmkC,kDAAR,UACEzkC,IADF,EAEE+I,QAFF,EAGE8B,SAHF,EAIEkB,MAJF,EAKEi5B,iBALF,EAKkD;;AAGhD,QAAI36C,GAAJ;;AACA,QAAI,KAAKk6C,QAAT,EAAmB;AACjB,UAAMU,UAAQ,GAAG,KAAK3kC,MAAL,CAAY7E,UAAZ,EAAjB;;AACApR,SAAG,GAAG,UAAC7F,CAAD,EAAeC,CAAf,EAA2B;AAAK,yBAAQ,CAACA,CAAD,EAAID,CAAJ,CAAR;AAAc,OAApD;AACD,KAHD,MAGO;AACL6F,SAAG,GAAG,KAAKiW,MAAL,CAAY7E,UAAZ,EAAN;AACD;;AACD,QAAM8Y,aAAa,GAAGvU,IAAtB;AACAje,gBAAOwyB,aAAa,CAACzT,WAAd,OAAgC,KAAKujC,MAA5CtiD,EAAoD,EAApDA;AACA,QAAMmjD,iBAAiB,GAAG,IAAIvyC,SAAJ,CAAcoW,QAAd,EAAwB8B,SAAxB,CAA1B;AACA,QAAMs6B,cAAc,GAAG,KAAKZ,QAAL,GACnBhwB,aAAa,CAAC6wB,aAAd,CAA4B,KAAK9kC,MAAjC,CADmB,GAElBiU,aAAa,CAAC8wB,YAAd,CAA2B,KAAK/kC,MAAhC,CAFL;AAGA,QAAMskC,OAAO,GAAG,KAAKR,aAAL,CAAmBrtB,OAAnB,CAA2BmuB,iBAA3B,CAAhB;;AACA,QAAI3wB,aAAa,CAAC5H,QAAd,CAAuB5D,QAAvB,CAAJ,EAAsC;AACpC,UAAMu8B,YAAY,GAAG/wB,aAAa,CAAC/X,iBAAd,CAAgCuM,QAAhC,CAArB;AACA,UAAI4C,SAAS,GAAGI,MAAM,CAACw5B,kBAAP,CACd,KAAKjlC,MADS,EAEd6kC,cAFc,EAGd,KAAKZ,QAHS,CAAhB;;AAKA,aACE54B,SAAS,IAAI,IAAb,KACCA,SAAS,CAACrsB,IAAV,KAAmBypB,QAAnB,IAA+BwL,aAAa,CAAC5H,QAAd,CAAuBhB,SAAS,CAACrsB,IAAjC,CADhC,CADF,EAGE;;;;AAIAqsB,iBAAS,GAAGI,MAAM,CAACw5B,kBAAP,CACV,KAAKjlC,MADK,EAEVqL,SAFU,EAGV,KAAK44B,QAHK,CAAZ;AAKD;;AACD,UAAMiB,WAAW,GACf75B,SAAS,IAAI,IAAb,GAAoB,CAApB,GAAwBthB,GAAG,CAACshB,SAAD,EAAYu5B,iBAAZ,CAD7B;AAEA,UAAMO,eAAe,GACnBb,OAAO,IAAI,CAAC/5B,SAAS,CAAC7W,OAAV,EAAZ,IAAmCwxC,WAAW,IAAI,CADpD;;AAEA,UAAIC,eAAJ,EAAqB;AACnB,YAAIT,iBAAiB,IAAI,IAAzB,EAA+B;AAC7BA,2BAAiB,CAAC92B,gBAAlB,CACEb,MAAM,CAACgB,kBAAP,CAA0BtF,QAA1B,EAAoC8B,SAApC,EAA+Cy6B,YAA/C,CADF;AAGD;;AACD,eAAO/wB,aAAa,CAAC3f,oBAAd,CAAmCmU,QAAnC,EAA6C8B,SAA7C,CAAP;AACD,OAPD,MAOO;AACL,YAAIm6B,iBAAiB,IAAI,IAAzB,EAA+B;AAC7BA,2BAAiB,CAAC92B,gBAAlB,CACEb,MAAM,CAACc,kBAAP,CAA0BpF,QAA1B,EAAoCu8B,YAApC,CADF;AAGD;;AACD,YAAM3zB,aAAa,GAAG4C,aAAa,CAAC3f,oBAAd,CACpBmU,QADoB,EAEpBzM,YAAY,CAAChI,UAFO,CAAtB;AAIA,YAAMoxC,gBAAgB,GACpB/5B,SAAS,IAAI,IAAb,IAAqB,KAAKy4B,aAAL,CAAmBrtB,OAAnB,CAA2BpL,SAA3B,CADvB;;AAEA,YAAI+5B,gBAAJ,EAAsB;AACpB,cAAIV,iBAAiB,IAAI,IAAzB,EAA+B;AAC7BA,6BAAiB,CAAC92B,gBAAlB,CACEb,MAAM,CAACe,gBAAP,CAAwBzC,SAAS,CAACrsB,IAAlC,EAAwCqsB,SAAS,CAACjZ,IAAlD,CADF;AAGD;;AACD,iBAAOif,aAAa,CAAC/c,oBAAd,CACL+W,SAAS,CAACrsB,IADL,EAELqsB,SAAS,CAACjZ,IAFL,CAAP;AAID,SAVD,MAUO;AACL,iBAAOif,aAAP;AACD;AACF;AACF,KAzDD,MAyDO,IAAI9G,SAAS,CAAC7W,OAAV,EAAJ,EAAyB;;AAE9B,aAAOgM,IAAP;AACD,KAHM,MAGA,IAAI4kC,OAAJ,EAAa;AAClB,UAAIv6C,GAAG,CAAC86C,cAAD,EAAiBD,iBAAjB,CAAH,IAA0C,CAA9C,EAAiD;AAC/C,YAAIF,iBAAiB,IAAI,IAAzB,EAA+B;AAC7BA,2BAAiB,CAAC92B,gBAAlB,CACEb,MAAM,CAACc,kBAAP,CAA0Bg3B,cAAc,CAAC7lD,IAAzC,EAA+C6lD,cAAc,CAACzyC,IAA9D,CADF;AAGAsyC,2BAAiB,CAAC92B,gBAAlB,CACEb,MAAM,CAACe,gBAAP,CAAwBrF,QAAxB,EAAkC8B,SAAlC,CADF;AAGD;;AACD,eAAO0J,aAAa,CACjB3f,oBADI,CACiBmU,QADjB,EAC2B8B,SAD3B,EAEJjW,oBAFI,CAEiBuwC,cAAc,CAAC7lD,IAFhC,EAEsCgd,YAAY,CAAChI,UAFnD,CAAP;AAGD,OAZD,MAYO;AACL,eAAO0L,IAAP;AACD;AACF,KAhBM,MAgBA;AACL,aAAOA,IAAP;AACD;AACF,GArGO;;AAsGV;AAAC,CA/TD;ACpCA;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;AAMA;AAAA;AAAA;AAAA;AACU,qBAAY,KAAZ;AACA,qBAAY,KAAZ;AACA,yBAAgB,KAAhB;AACA,mBAAU,KAAV;AACA,uBAAc,KAAd;AAEA,kBAAS,CAAT;AACA,qBAAY,EAAZ;AACA,4BAAmC,IAAnC;AACA,2BAAkB,EAAlB;AACA,0BAAiC,IAAjC;AACA,yBAAgB,EAAhB;AAEA,kBAAS5J,cAAT;AAwXT;;;;;;AAzUCuvC;AACE,WAAO,KAAKC,SAAZ;AACD,GAFD;;;;;;AAOAD;AACE,QAAI,KAAKE,SAAL,KAAmB,EAAvB,EAA2B;;;;;AAKzB,aAAO,KAAKD,SAAZ;AACD,KAND,MAMO;AACL,aACE,KAAKC,SAAL,KAAmBF,WAAW,CAACG,wBAAZ,CAAqCC,cAD1D;AAGD;AACF,GAZD;;;;;;;AAkBAJ;AACE5jD,gBAAO,KAAK6jD,SAAZ7jD,EAAuB,kCAAvBA;AACA,WAAO,KAAKikD,gBAAZ;AACD,GAHD;;;;;;;;AAUAL;AACE5jD,gBAAO,KAAK6jD,SAAZ7jD,EAAuB,kCAAvBA;;AACA,QAAI,KAAKkkD,aAAT,EAAwB;AACtB,aAAO,KAAKC,eAAZ;AACD,KAFD,MAEO;AACL,aAAO7hD,QAAP;AACD;AACF,GAPD;;;;;;AAYAshD;AACE,WAAO,KAAKQ,OAAZ;AACD,GAFD;;;;;;;AAQAR;AACE5jD,gBAAO,KAAKokD,OAAZpkD,EAAqB,gCAArBA;AACA,WAAO,KAAKqkD,cAAZ;AACD,GAHD;;;;;;;;AAUAT;AACE5jD,gBAAO,KAAKokD,OAAZpkD,EAAqB,gCAArBA;;AACA,QAAI,KAAKskD,WAAT,EAAsB;AACpB,aAAO,KAAKC,aAAZ;AACD,KAFD,MAEO;AACL,aAAOhiD,QAAP;AACD;AACF,GAPD;;;;;;AAYAqhD;AACE,WAAO,KAAKY,SAAZ;AACD,GAFD;;;;;;AAOAZ;AACE,WAAO,KAAKY,SAAL,IAAkB,KAAKV,SAAL,KAAmB,EAA5C;AACD,GAFD;;;;;;;AAQAF;AACE5jD,gBAAO,KAAKwkD,SAAZxkD,EAAuB,kCAAvBA;AACA,WAAO,KAAKsiD,MAAZ;AACD,GAHD;;;;;;AAQAsB;AACE,WAAO,KAAKrlC,MAAZ;AACD,GAFD;;;;;;;AAQQqlC,gCAAR;AACE,QAAMruC,IAAI,GAAG,IAAIquC,WAAJ,EAAb;AACAruC,QAAI,CAACivC,SAAL,GAAiB,KAAKA,SAAtB;AACAjvC,QAAI,CAAC+sC,MAAL,GAAc,KAAKA,MAAnB;AACA/sC,QAAI,CAACsuC,SAAL,GAAiB,KAAKA,SAAtB;AACAtuC,QAAI,CAAC0uC,gBAAL,GAAwB,KAAKA,gBAA7B;AACA1uC,QAAI,CAAC2uC,aAAL,GAAqB,KAAKA,aAA1B;AACA3uC,QAAI,CAAC4uC,eAAL,GAAuB,KAAKA,eAA5B;AACA5uC,QAAI,CAAC6uC,OAAL,GAAe,KAAKA,OAApB;AACA7uC,QAAI,CAAC8uC,cAAL,GAAsB,KAAKA,cAA3B;AACA9uC,QAAI,CAAC+uC,WAAL,GAAmB,KAAKA,WAAxB;AACA/uC,QAAI,CAACgvC,aAAL,GAAqB,KAAKA,aAA1B;AACAhvC,QAAI,CAACgJ,MAAL,GAAc,KAAKA,MAAnB;AACAhJ,QAAI,CAACuuC,SAAL,GAAiB,KAAKA,SAAtB;AACA,WAAOvuC,IAAP;AACD,GAfO;;;;;;;AAqBRquC,0CAAMa,QAAN,EAAsB;AACpB,QAAMrgC,SAAS,GAAG,KAAKsgC,KAAL,EAAlB;AACAtgC,aAAS,CAACogC,SAAV,GAAsB,IAAtB;AACApgC,aAAS,CAACk+B,MAAV,GAAmBmC,QAAnB;AACArgC,aAAS,CAAC0/B,SAAV,GAAsB,EAAtB;AACA,WAAO1/B,SAAP;AACD,GAND;;;;;;;AAYAw/B,iDAAaa,QAAb,EAA6B;AAC3B,QAAMrgC,SAAS,GAAG,KAAKsgC,KAAL,EAAlB;AACAtgC,aAAS,CAACogC,SAAV,GAAsB,IAAtB;AACApgC,aAAS,CAACk+B,MAAV,GAAmBmC,QAAnB;AACArgC,aAAS,CAAC0/B,SAAV,GAAsBF,WAAW,CAACG,wBAAZ,CAAqCC,cAA3D;AACA,WAAO5/B,SAAP;AACD,GAND;;;;;;;AAYAw/B,gDAAYa,QAAZ,EAA4B;AAC1B,QAAMrgC,SAAS,GAAG,KAAKsgC,KAAL,EAAlB;AACAtgC,aAAS,CAACogC,SAAV,GAAsB,IAAtB;AACApgC,aAAS,CAACk+B,MAAV,GAAmBmC,QAAnB;AACArgC,aAAS,CAAC0/B,SAAV,GAAsBF,WAAW,CAACG,wBAAZ,CAAqCY,eAA3D;AACA,WAAOvgC,SAAP;AACD,GAND;;;;;;;;AAaAw/B,4CAAQnyC,UAAR,EAA6B3U,GAA7B,EAAgD;AAC9C,QAAMsnB,SAAS,GAAG,KAAKsgC,KAAL,EAAlB;AACAtgC,aAAS,CAACy/B,SAAV,GAAsB,IAAtB;;AACA,QAAIpyC,UAAU,KAAKlE,SAAnB,EAA8B;AAC5BkE,gBAAU,GAAG,IAAb;AACD;;AACD2S,aAAS,CAAC6/B,gBAAV,GAA6BxyC,UAA7B;;AACA,QAAI3U,GAAG,IAAI,IAAX,EAAiB;AACfsnB,eAAS,CAAC8/B,aAAV,GAA0B,IAA1B;AACA9/B,eAAS,CAAC+/B,eAAV,GAA4BrnD,GAA5B;AACD,KAHD,MAGO;AACLsnB,eAAS,CAAC8/B,aAAV,GAA0B,KAA1B;AACA9/B,eAAS,CAAC+/B,eAAV,GAA4B,EAA5B;AACD;;AACD,WAAO//B,SAAP;AACD,GAfD;;;;;;;;AAsBAw/B,0CAAMnyC,UAAN,EAA2B3U,GAA3B,EAA8C;AAC5C,QAAMsnB,SAAS,GAAG,KAAKsgC,KAAL,EAAlB;AACAtgC,aAAS,CAACggC,OAAV,GAAoB,IAApB;;AACA,QAAI3yC,UAAU,KAAKlE,SAAnB,EAA8B;AAC5BkE,gBAAU,GAAG,IAAb;AACD;;AACD2S,aAAS,CAACigC,cAAV,GAA2B5yC,UAA3B;;AACA,QAAI3U,GAAG,KAAKyQ,SAAZ,EAAuB;AACrB6W,eAAS,CAACkgC,WAAV,GAAwB,IAAxB;AACAlgC,eAAS,CAACmgC,aAAV,GAA0BznD,GAA1B;AACD,KAHD,MAGO;AACLsnB,eAAS,CAACkgC,WAAV,GAAwB,KAAxB;AACAlgC,eAAS,CAACmgC,aAAV,GAA0B,EAA1B;AACD;;AACD,WAAOngC,SAAP;AACD,GAfD;;;;;;;AAqBAw/B,4CAAQ5wC,KAAR,EAAoB;AAClB,QAAMoR,SAAS,GAAG,KAAKsgC,KAAL,EAAlB;AACAtgC,aAAS,CAAC7F,MAAV,GAAmBvL,KAAnB;AACA,WAAOoR,SAAP;AACD,GAJD;;;;;;AASAw/B;AACE,QAAMgB,uBAAuB,GAAGhB,WAAW,CAACG,wBAA5C;AACA,QAAM/gD,GAAG,GAA6B,EAAtC;;AACA,QAAI,KAAK6gD,SAAT,EAAoB;AAClB7gD,SAAG,CAAC4hD,uBAAuB,CAACC,iBAAzB,CAAH,GAAiD,KAAKZ,gBAAtD;;AACA,UAAI,KAAKC,aAAT,EAAwB;AACtBlhD,WAAG,CAAC4hD,uBAAuB,CAACE,gBAAzB,CAAH,GAAgD,KAAKX,eAArD;AACD;AACF;;AACD,QAAI,KAAKC,OAAT,EAAkB;AAChBphD,SAAG,CAAC4hD,uBAAuB,CAACG,eAAzB,CAAH,GAA+C,KAAKV,cAApD;;AACA,UAAI,KAAKC,WAAT,EAAsB;AACpBthD,WAAG,CAAC4hD,uBAAuB,CAACI,cAAzB,CAAH,GAA8C,KAAKT,aAAnD;AACD;AACF;;AACD,QAAI,KAAKC,SAAT,EAAoB;AAClBxhD,SAAG,CAAC4hD,uBAAuB,CAACK,KAAzB,CAAH,GAAqC,KAAK3C,MAA1C;AACA,UAAI4C,QAAQ,GAAG,KAAKpB,SAApB;;AACA,UAAIoB,QAAQ,KAAK,EAAjB,EAAqB;AACnB,YAAI,KAAKzC,cAAL,EAAJ,EAA2B;AACzByC,kBAAQ,GAAGN,uBAAuB,CAACZ,cAAnC;AACD,SAFD,MAEO;AACLkB,kBAAQ,GAAGN,uBAAuB,CAACD,eAAnC;AACD;AACF;;AACD3hD,SAAG,CAAC4hD,uBAAuB,CAACO,SAAzB,CAAH,GAAyCD,QAAzC;AACD,KA1BH;;;AA4BE,QAAI,KAAK3mC,MAAL,KAAgBlK,cAApB,EAAoC;AAClCrR,SAAG,CAAC4hD,uBAAuB,CAACQ,KAAzB,CAAH,GAAqC,KAAK7mC,MAAL,CAAY9gB,QAAZ,EAArC;AACD;;AACD,WAAOuF,GAAP;AACD,GAhCD;;;;;;AAqCA4gD;AACE,WAAO,EAAE,KAAKC,SAAL,IAAkB,KAAKO,OAAvB,IAAkC,KAAKI,SAAzC,CAAP;AACD,GAFD;;;;;;AAOAZ;AACE,WAAO,KAAKpvB,YAAL,MAAuB,KAAKjW,MAAL,KAAgBlK,cAA9C;AACD,GAFD;;;;;;AAOAuvC;AACE,QAAI,KAAKpvB,YAAL,EAAJ,EAAyB;AACvB,aAAO,IAAI1I,aAAJ,CAAkB,KAAK/L,QAAL,EAAlB,CAAP;AACD,KAFD,MAEO,IAAI,KAAKqC,QAAL,EAAJ,EAAqB;AAC1B,aAAO,IAAIsgC,aAAJ,CAAkB,IAAlB,CAAP;AACD,KAFM,MAEA;AACL,aAAO,IAAIb,YAAJ,CAAiB,IAAjB,CAAP;AACD;AACF,GARD;;;;;;;;AAeA+B;AACE,QAAMyB,cAAc,GAAGzB,WAAW,CAAC0B,qBAAnC;AACA,QAAMC,EAAE,GAAqC,EAA7C;;AAEA,QAAI,KAAK5mB,SAAL,EAAJ,EAAsB;AACpB,aAAO4mB,EAAP;AACD;;AAED,QAAIlhC,OAAJ;;AACA,QAAI,KAAK9F,MAAL,KAAgBlK,cAApB,EAAoC;AAClCgQ,aAAO,GAAGghC,cAAc,CAAChxC,cAAzB;AACD,KAFD,MAEO,IAAI,KAAKkK,MAAL,KAAgBT,WAApB,EAAiC;AACtCuG,aAAO,GAAGghC,cAAc,CAACvnC,WAAzB;AACD,KAFM,MAEA,IAAI,KAAKS,MAAL,KAAgB7M,SAApB,EAA+B;AACpC2S,aAAO,GAAGghC,cAAc,CAAC3zC,SAAzB;AACD,KAFM,MAEA;AACL1R,kBAAO,KAAKue,MAAL,YAAuBP,SAA9Bhe,EAAyC,0BAAzCA;AACAqkB,aAAO,GAAG,KAAK9F,MAAL,CAAY9gB,QAAZ,EAAV;AACD;;AACD8nD,MAAE,CAACF,cAAc,CAACG,QAAhB,CAAF,GAA8BroD,eAAUknB,OAAVlnB,CAA9B;;AAEA,QAAI,KAAK0mD,SAAT,EAAoB;AAClB0B,QAAE,CAACF,cAAc,CAACI,QAAhB,CAAF,GAA8BtoD,eAAU,KAAK8mD,gBAAf9mD,CAA9B;;AACA,UAAI,KAAK+mD,aAAT,EAAwB;AACtBqB,UAAE,CAACF,cAAc,CAACI,QAAhB,CAAF,IAA+B,MAAMtoD,eAAU,KAAKgnD,eAAfhnD,CAArC;AACD;AACF;;AAED,QAAI,KAAKinD,OAAT,EAAkB;AAChBmB,QAAE,CAACF,cAAc,CAACK,MAAhB,CAAF,GAA4BvoD,eAAU,KAAKknD,cAAflnD,CAA5B;;AACA,UAAI,KAAKmnD,WAAT,EAAsB;AACpBiB,UAAE,CAACF,cAAc,CAACK,MAAhB,CAAF,IAA6B,MAAMvoD,eAAU,KAAKonD,aAAfpnD,CAAnC;AACD;AACF;;AAED,QAAI,KAAKqnD,SAAT,EAAoB;AAClB,UAAI,KAAK/B,cAAL,EAAJ,EAA2B;AACzB8C,UAAE,CAACF,cAAc,CAACM,cAAhB,CAAF,GAAoC,KAAKrD,MAAzC;AACD,OAFD,MAEO;AACLiD,UAAE,CAACF,cAAc,CAACO,aAAhB,CAAF,GAAmC,KAAKtD,MAAxC;AACD;AACF;;AAED,WAAOiD,EAAP;AACD,GA5CD;;;;;;;;;AAnUwB3B,yCAA2B;AACjDiB,qBAAiB,EAAE,IAD8B;AAEjDC,oBAAgB,EAAE,IAF+B;AAGjDC,mBAAe,EAAE,IAHgC;AAIjDC,kBAAc,EAAE,IAJiC;AAKjDC,SAAK,EAAE,GAL0C;AAMjDE,aAAS,EAAE,IANsC;AAOjDnB,kBAAc,EAAE,GAPiC;AAQjDW,mBAAe,EAAE,GARgC;AASjDS,SAAK,EAAE;AAT0C,GAA3B;;;;;;;;AAkBAxB,sCAAwB;AAC9C4B,YAAQ,EAAE,SADoC;AAE9CnxC,kBAAc,EAAE,WAF8B;AAG9CyJ,eAAW,EAAE,QAHiC;AAI9CpM,aAAS,EAAE,MAJmC;AAK9C+zC,YAAQ,EAAE,SALoC;AAM9CC,UAAM,EAAE,OANsC;AAO9CC,kBAAc,EAAE,cAP8B;AAQ9CC,iBAAa,EAAE;AAR+B,GAAxB;;;;;;;AAgBRhC,wBAAU,IAAIA,WAAJ,EAAV;AA8UlB;AAtYA;ACnCA;;;;;;;;;;;;;;;;;;;;;AA6C+BvyC;;;;;;;;;;;;;;AAe7B,qBAAY+P,IAAZ,EAAwBtb,IAAxB,EAAkC;AAAlC;;AACE,QAAI,EAAEsb,IAAI,YAAYs9B,IAAlB,CAAJ,EAA6B;AAC3B,YAAM,IAAI59C,KAAJ,CACJ,2DADI,CAAN;AAGD,KAL+B;;;AAQhCkZ,8BAAMoH,IAAN,EAAYtb,IAAZ,EAAkB89C,WAAW,CAACiC,OAA9B,EAAuC,KAAvC,KAA6C,IAA7C;;AACD;;;;AAGDC;AACE52C,0BAAiB,eAAjBA,EAAkC,CAAlCA,EAAqC,CAArCA,EAAwCC,SAAS,CAAC7P,MAAlD4P;;AAEA,QAAI,KAAKpJ,IAAL,CAAUmM,OAAV,EAAJ,EAAyB;AACvB,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAKnM,IAAL,CAAUsI,OAAV,EAAP;AACD;AACF,GARD;;;;;;;AAcA03C,wCAAM3+C,UAAN,EAA+B;AAC7B+H,0BAAiB,iBAAjBA,EAAoC,CAApCA,EAAuC,CAAvCA,EAA0CC,SAAS,CAAC7P,MAApD4P;;AACA,QAAI,OAAO/H,UAAP,KAAsB,QAA1B,EAAoC;AAClCA,gBAAU,GAAGE,MAAM,CAACF,UAAD,CAAnB;AACD,KAFD,MAEO,IAAI,EAAEA,UAAU,YAAYD,IAAxB,CAAJ,EAAmC;AACxC,UAAI,KAAKpB,IAAL,CAAUgC,QAAV,OAAyB,IAA7B,EAAmC;AACjC4G,8BAAsB,CAAC,iBAAD,EAAoB,CAApB,EAAuBvH,UAAvB,EAAmC,KAAnC,CAAtB;AACD,OAFD,MAEO;AACLsH,0BAAkB,CAAC,iBAAD,EAAoB,CAApB,EAAuBtH,UAAvB,EAAmC,KAAnC,CAAlB;AACD;AACF;;AAED,WAAO,IAAI2+C,SAAJ,CAAc,KAAK1kC,IAAnB,EAAyB,KAAKtb,IAAL,CAAUmD,KAAV,CAAgB9B,UAAhB,CAAzB,CAAP;AACD,GAbD;;;;AAgBA2+C;AACE52C,0BAAiB,kBAAjBA,EAAqC,CAArCA,EAAwC,CAAxCA,EAA2CC,SAAS,CAAC7P,MAArD4P;AAEA,QAAM62C,UAAU,GAAG,KAAKjgD,IAAL,CAAUurB,MAAV,EAAnB;AACA,WAAO00B,UAAU,KAAK,IAAf,GAAsB,IAAtB,GAA6B,IAAID,SAAJ,CAAc,KAAK1kC,IAAnB,EAAyB2kC,UAAzB,CAApC;AACD,GALD;;;;AAQAD;AACE52C,0BAAiB,gBAAjBA,EAAmC,CAAnCA,EAAsC,CAAtCA,EAAyCC,SAAS,CAAC7P,MAAnD4P;AAEA,QAAIkQ,GAAG,GAAc,IAArB;;AACA,WAAOA,GAAG,CAACC,SAAJ,OAAoB,IAA3B,EAAiC;AAC/BD,SAAG,GAAGA,GAAG,CAACC,SAAJ,EAAN;AACD;;AACD,WAAOD,GAAP;AACD,GARD;;;;AAWA0mC;AACE,WAAO,KAAK1kC,IAAL,CAAU4kC,QAAjB;AACD,GAFD;;;;;;;;AASAF,sCACElG,MADF,EAEE3wC,UAFF,EAEwC;AAEtCC,0BAAiB,eAAjBA,EAAkC,CAAlCA,EAAqC,CAArCA,EAAwCC,SAAS,CAAC7P,MAAlD4P;AACAP,wBAAoB,CAAC,eAAD,EAAkB,KAAK7I,IAAvB,CAApB;AACAqH,2BAAuB,CAAC,eAAD,EAAkB,CAAlB,EAAqByyC,MAArB,EAA6B,KAAK95C,IAAlC,EAAwC,KAAxC,CAAvB;AACAsJ,0BAAiB,eAAjBA,EAAkC,CAAlCA,EAAqCH,UAArCG,EAAiD,IAAjDA;AAEA,QAAMC,QAAQ,GAAG,IAAIC,aAAJ,EAAjB;AACA,SAAK8R,IAAL,CAAU6kC,eAAV,CACE,KAAKngD,IADP,EAEE85C,MAFF;;AAGgB,QAHhB,EAIEvwC,QAAQ,CAACG,YAAT,CAAsBP,UAAtB,CAJF;AAMA,WAAOI,QAAQ,CAACI,OAAhB;AACD,GAjBD;;;;;;;;AAwBAq2C,yCACEl2C,aADF,EAEEX,UAFF,EAEwC;AAEtCC,0BAAiB,kBAAjBA,EAAqC,CAArCA,EAAwC,CAAxCA,EAA2CC,SAAS,CAAC7P,MAArD4P;AACAP,wBAAoB,CAAC,kBAAD,EAAqB,KAAK7I,IAA1B,CAApB;;AAEA,QAAItG,KAAK,CAACC,OAAN,CAAcmQ,aAAd,CAAJ,EAAkC;AAChC,UAAMC,gBAAgB,GAA6B,EAAnD;;AACA,WAAK,IAAIxQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuQ,aAAa,CAACtQ,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7CwQ,wBAAgB,CAAC,KAAKxQ,CAAN,CAAhB,GAA2BuQ,aAAa,CAACvQ,CAAD,CAAxC;AACD;;AACDuQ,mBAAa,GAAGC,gBAAhB;AACA9O,UAAI,CACF,0DACE,2DADF,GAEE,uDAFF,GAGE,mCAJA,CAAJ;AAMD;;AACDoN,gCAA4B,CAC1B,kBAD0B,EAE1B,CAF0B,EAG1ByB,aAH0B,EAI1B,KAAK9J,IAJqB,EAK1B,KAL0B,CAA5B;AAOAsJ,0BAAiB,kBAAjBA,EAAqC,CAArCA,EAAwCH,UAAxCG,EAAoD,IAApDA;AACA,QAAMC,QAAQ,GAAG,IAAIC,aAAJ,EAAjB;AACA,SAAK8R,IAAL,CAAUviB,MAAV,CACE,KAAKiH,IADP,EAEE8J,aAFF,EAGEP,QAAQ,CAACG,YAAT,CAAsBP,UAAtB,CAHF;AAKA,WAAOI,QAAQ,CAACI,OAAhB;AACD,GAnCD;;;;;;;;;AA2CAq2C,kDACElG,MADF,EAEE9kC,WAFF,EAGE7L,UAHF,EAGwC;AAEtCC,0BAAiB,2BAAjBA,EAA8C,CAA9CA,EAAiD,CAAjDA,EAAoDC,SAAS,CAAC7P,MAA9D4P;AACAP,wBAAoB,CAAC,2BAAD,EAA8B,KAAK7I,IAAnC,CAApB;AACAqH,2BAAuB,CACrB,2BADqB,EAErB,CAFqB,EAGrByyC,MAHqB,EAIrB,KAAK95C,IAJgB,EAKrB,KALqB,CAAvB;AAOAuI,oBAAgB,CAAC,2BAAD,EAA8B,CAA9B,EAAiCyM,WAAjC,EAA8C,KAA9C,CAAhB;AACA1L,0BAAiB,2BAAjBA,EAA8C,CAA9CA,EAAiDH,UAAjDG,EAA6D,IAA7DA;;AAEA,QAAI,KAAK0P,MAAL,OAAkB,SAAlB,IAA+B,KAAKA,MAAL,OAAkB,OAArD,EAA8D;AAC5D,YAAM,uCACJ,KAAKA,MAAL,EADI,GAEJ,yBAFF;AAGD;;AAED,QAAMzP,QAAQ,GAAG,IAAIC,aAAJ,EAAjB;AACA,SAAK8R,IAAL,CAAU6kC,eAAV,CACE,KAAKngD,IADP,EAEE85C,MAFF,EAGE9kC,WAHF,EAIEzL,QAAQ,CAACG,YAAT,CAAsBP,UAAtB,CAJF;AAMA,WAAOI,QAAQ,CAACI,OAAhB;AACD,GA/BD;;;;;;;AAqCAq2C,yCAAO72C,UAAP,EAA6C;AAC3CC,0BAAiB,kBAAjBA,EAAqC,CAArCA,EAAwC,CAAxCA,EAA2CC,SAAS,CAAC7P,MAArD4P;AACAP,wBAAoB,CAAC,kBAAD,EAAqB,KAAK7I,IAA1B,CAApB;AACAsJ,0BAAiB,kBAAjBA,EAAqC,CAArCA,EAAwCH,UAAxCG,EAAoD,IAApDA;AAEA,WAAO,KAAK9O,GAAL,CAAS,IAAT,EAAe2O,UAAf,CAAP;AACD,GAND;;;;;;;;;AAcA62C,8CACEI,iBADF,EAEEj3C,UAFF,EAGEk3C,YAHF,EAGwB;AAEtBj3C,0BAAiB,uBAAjBA,EAA0C,CAA1CA,EAA6C,CAA7CA,EAAgDC,SAAS,CAAC7P,MAA1D4P;AACAP,wBAAoB,CAAC,uBAAD,EAA0B,KAAK7I,IAA/B,CAApB;AACAsJ,0BAAiB,uBAAjBA,EAA0C,CAA1CA,EAA6C82C,iBAA7C92C,EAAgE,KAAhEA;AACAA,0BAAiB,uBAAjBA,EAA0C,CAA1CA,EAA6CH,UAA7CG,EAAyD,IAAzDA,EALsB;;;AAQtBP,mBAAe,CAAC,uBAAD,EAA0B,CAA1B,EAA6Bs3C,YAA7B,EAA2C,IAA3C,CAAf;;AAEA,QAAI,KAAKrnC,MAAL,OAAkB,SAAlB,IAA+B,KAAKA,MAAL,OAAkB,OAArD,EAA8D;AAC5D,YAAM,mCACJ,KAAKA,MAAL,EADI,GAEJ,yBAFF;AAGD;;AAED,QAAIqnC,YAAY,KAAK54C,SAArB,EAAgC;AAC9B44C,kBAAY,GAAG,IAAf;AACD;;AAED,QAAM92C,QAAQ,GAAG,IAAIC,aAAJ,EAAjB;;AACA,QAAI,OAAOL,UAAP,KAAsB,UAA1B,EAAsC;AACpCI,cAAQ,CAACI,OAAT,CAAiB+T,KAAjB,CAAuB,aAAQ,CAA/B;AACD;;AAED,QAAM4iC,eAAe,GAAG,UACtBxlD,KADsB,EAEtBmP,SAFsB,EAGtBC,QAHsB,EAGA;AAEtB,UAAIpP,KAAJ,EAAW;AACTyO,gBAAQ,CAACyU,MAAT,CAAgBljB,KAAhB;AACD,OAFD,MAEO;AACLyO,gBAAQ,CAACsU,OAAT,CAAiB,IAAI1T,iBAAJ,CAAsBF,SAAtB,EAAiCC,QAAjC,CAAjB;AACD;;AACD,UAAI,OAAOf,UAAP,KAAsB,UAA1B,EAAsC;AACpCA,kBAAU,CAACrO,KAAD,EAAQmP,SAAR,EAAmBC,QAAnB,CAAV;AACD;AACF,KAbD;;AAcA,SAAKoR,IAAL,CAAUilC,gBAAV,CACE,KAAKvgD,IADP,EAEEogD,iBAFF,EAGEE,eAHF,EAIED,YAJF;AAOA,WAAO92C,QAAQ,CAACI,OAAhB;AACD,GAlDD;;;;;;;;AAyDAq2C,8CACE54C,QADF,EAEE+B,UAFF,EAEwC;AAEtCC,0BAAiB,uBAAjBA,EAA0C,CAA1CA,EAA6C,CAA7CA,EAAgDC,SAAS,CAAC7P,MAA1D4P;AACAP,wBAAoB,CAAC,uBAAD,EAA0B,KAAK7I,IAA/B,CAApB;AACAuI,oBAAgB,CAAC,uBAAD,EAA0B,CAA1B,EAA6BnB,QAA7B,EAAuC,KAAvC,CAAhB;AACAkC,0BAAiB,uBAAjBA,EAA0C,CAA1CA,EAA6CH,UAA7CG,EAAyD,IAAzDA;AAEA,QAAMC,QAAQ,GAAG,IAAIC,aAAJ,EAAjB;AACA,SAAK8R,IAAL,CAAU6kC,eAAV,CACE,KAAKngD,IAAL,CAAUmD,KAAV,CAAgB,WAAhB,CADF,EAEEiE,QAFF,EAGE,IAHF,EAIEmC,QAAQ,CAACG,YAAT,CAAsBP,UAAtB,CAJF;AAMA,WAAOI,QAAQ,CAACI,OAAhB;AACD,GAjBD;;;;;;;;AAwBAq2C,uCAAK/oD,KAAL,EAAsBkS,UAAtB,EAA4D;AAC1DC,0BAAiB,gBAAjBA,EAAmC,CAAnCA,EAAsC,CAAtCA,EAAyCC,SAAS,CAAC7P,MAAnD4P;AACAP,wBAAoB,CAAC,gBAAD,EAAmB,KAAK7I,IAAxB,CAApB;AACAqH,2BAAuB,CAAC,gBAAD,EAAmB,CAAnB,EAAsBpQ,KAAtB,EAA6B,KAAK+I,IAAlC,EAAwC,IAAxC,CAAvB;AACAsJ,0BAAiB,gBAAjBA,EAAmC,CAAnCA,EAAsCH,UAAtCG,EAAkD,IAAlDA;AAEA,QAAMmB,GAAG,GAAG,KAAK6Q,IAAL,CAAUy9B,UAAV,EAAZ;AACA,QAAMthD,IAAI,GAAG4S,UAAU,CAACI,GAAD,CAAvB,CAP0D;;;;;;AAc1D,QAAM+1C,gBAAgB,GAAG,KAAKr9C,KAAL,CAAW1L,IAAX,CAAzB;AACA,QAAMgpD,OAAO,GAAG,KAAKt9C,KAAL,CAAW1L,IAAX,CAAhB;AAEA,QAAIkS,OAAJ;;AACA,QAAI1S,KAAK,IAAI,IAAb,EAAmB;AACjB0S,aAAO,GAAG62C,gBAAgB,CAAChmD,GAAjB,CAAqBvD,KAArB,EAA4BkS,UAA5B,EAAwCkxB,IAAxC,CAA6C;AAAM;AAAO,OAA1D,CAAV;AACD,KAFD,MAEO;AACL1wB,aAAO,GAAG8wB,OAAO,CAAC5c,OAAR,CAAgB4iC,OAAhB,CAAV;AACD;;AAEDD,oBAAgB,CAACnmB,IAAjB,GAAwB1wB,OAAO,CAAC0wB,IAAR,CAAa9/B,IAAb,CAAkBoP,OAAlB,CAAxB;AACA62C,oBAAgB,CAAC9iC,KAAjB,GAAyB/T,OAAO,CAAC0wB,IAAR,CAAa9/B,IAAb,CAAkBoP,OAAlB,EAA2BlC,SAA3B,CAAzB;;AAEA,QAAI,OAAO0B,UAAP,KAAsB,UAA1B,EAAsC;AACpCQ,aAAO,CAAC+T,KAAR,CAAc,aAAQ,CAAtB;AACD;;AAED,WAAO8iC,gBAAP;AACD,GAhCD;;;;;;AAqCAR;AACEn3C,wBAAoB,CAAC,wBAAD,EAA2B,KAAK7I,IAAhC,CAApB;AACA,WAAO,IAAIkJ,YAAJ,CAAiB,KAAKoS,IAAtB,EAA4B,KAAKtb,IAAjC,CAAP;AACD,GAHD;;AAKAmB,wBAAI6+C,mBAAJ,EAAI,UAAJ,EAAY;SAAZ;AACE,aAAO,KAAKU,YAAL,EAAP;AACD,KAFW;oBAAA;;AAAA,GAAZ;AAIAv/C,wBAAI6+C,mBAAJ,EAAI,KAAJ,EAAO;SAAP;AACE,aAAO,KAAKhnC,MAAL,EAAP;AACD,KAFM;oBAAA;;AAAA,GAAP;AAIA7X,wBAAI6+C,mBAAJ,EAAI,QAAJ,EAAU;SAAV;AACE,aAAO,KAAKzmC,SAAL,EAAP;AACD,KAFS;oBAAA;;AAAA,GAAV;AAIApY,wBAAI6+C,mBAAJ,EAAI,MAAJ,EAAQ;SAAR;AACE,aAAO,KAAKW,OAAL,EAAP;AACD,KAFO;oBAAA;;AAAA,GAAR;AAGF;AArVA,EAA+BllC;AAuV/B;;;;;;;;AAMAA,KAAK,CAACJ,sBAAN,GAA+B2kC,SAA/B;AACArwB,SAAS,CAACtU,sBAAV,GAAmC2kC,SAAnC;AC3YA;;;;;;;;;;;;;;;;;AAsBA;;;;AAGA;AAAA;AAAA;AAAA;;;AAGE,oBAA4C,EAA5C;AACA,sBAAa,CAAb;AACA,iBAAkB,IAAlB;AACD;;AAAD;AAAC,CAND;AAQA;;;;;;;AAKA;AAAA;AAAA;;;;;;;AAOE,gBACUY,KADV,EAEUC,OAFV,EAGUtoC,KAHV,EAGgD;AAFtC;AAAAqoC;AAAkB;;AAClB;AAAAC;AAA8B;;AAC9B;AAAAtoC,kBAAyBuoC,QAAzB;AAAsC;;AAFtC;AACA;AACA;AACN;;;;;;;;;AAQJC,qCAAQC,OAAR,EAA8B;;AAE5B,QAAIhhD,IAAI,GAAGghD,OAAO,YAAY5/C,IAAnB,GAA0B4/C,OAA1B,GAAoC,IAAI5/C,IAAJ,CAAS4/C,OAAT,CAA/C;AACA,QAAI79C,KAAK,GAAG,IAAZ;AAAA,QACEqQ,IAAI,GAAGxT,IAAI,CAACgC,QAAL,EADT;;AAEA,WAAOwR,IAAI,KAAK,IAAhB,EAAsB;AACpB,UAAM5G,SAAS,GAAGqG,aAAQ9P,KAAK,CAACoV,KAAN,CAAYyI,QAApB/N,EAA8BO,IAA9BP,KAAuC,IAAI6tC,QAAJ,EAAzD;AACA39C,WAAK,GAAG,IAAI49C,IAAJ,CAASvtC,IAAT,EAAerQ,KAAf,EAAsByJ,SAAtB,CAAR;AACA5M,UAAI,GAAGA,IAAI,CAACmC,QAAL,EAAP;AACAqR,UAAI,GAAGxT,IAAI,CAACgC,QAAL,EAAP;AACD;;AAED,WAAOmB,KAAP;AACD,GAbD;;;;;;;;AAoBA49C;AACE,WAAO,KAAKxoC,KAAL,CAAWthB,KAAlB;AACD,GAFD;;;;;;;;AASA8pD,sCAAS9pD,KAAT,EAAiB;AACfiD,gBAAO,OAAOjD,KAAP,KAAiB,WAAxBiD,EAAqC,+BAArCA;AACA,SAAKqe,KAAL,CAAWthB,KAAX,GAAmBA,KAAnB;AACA,SAAKgqD,cAAL;AACD,GAJD;;;;;;AASAF;AACE,SAAKxoC,KAAL,CAAWthB,KAAX,GAAmB,IAAnB;AACA,SAAKshB,KAAL,CAAWyI,QAAX,GAAsB,EAAtB;AACA,SAAKzI,KAAL,CAAW2oC,UAAX,GAAwB,CAAxB;AACA,SAAKD,cAAL;AACD,GALD;;;;;;AAUAF;AACE,WAAO,KAAKxoC,KAAL,CAAW2oC,UAAX,GAAwB,CAA/B;AACD,GAFD;;;;;;AAOAH;AACE,WAAO,KAAK1zC,QAAL,OAAoB,IAApB,IAA4B,CAAC,KAAK8zC,WAAL,EAApC;AACD,GAFD;;;;;;;;AASAJ,0CAAa5zC,MAAb,EAA4C;AAA5C;;AACErP,QAAI,CAAC,KAAKya,KAAL,CAAWyI,QAAZ,EAAsB,UAAC7d,KAAD,EAAgBkP,SAAhB,EAAsC;AAC9DlF,YAAM,CAAC,IAAI4zC,IAAJ,CAAY59C,KAAZ,EAAmB+Q,KAAnB,EAAyB7B,SAAzB,CAAD,CAAN;AACD,KAFG,CAAJ;AAGD,GAJD;;;;;;;;;;;;AAeA0uC,+CACE5zC,MADF,EAEEi0C,WAFF,EAGEC,aAHF,EAGyB;AAEvB,QAAID,WAAW,IAAI,CAACC,aAApB,EAAmC;AACjCl0C,YAAM,CAAC,IAAD,CAAN;AACD;;AAED,SAAKiI,YAAL,CAAkB,iBAAK;AACrBjS,WAAK,CAACm+C,iBAAN,CAAwBn0C,MAAxB;AAA8B;AAAmB,UAAjD,EAAuDk0C,aAAvD;AACD,KAFD;;AAIA,QAAID,WAAW,IAAIC,aAAnB,EAAkC;AAChCl0C,YAAM,CAAC,IAAD,CAAN;AACD;AACF,GAhBD;;;;;;;;;;;AA0BA4zC,6CACE5zC,MADF,EAEEi0C,WAFF,EAEuB;AAErB,QAAIv2C,IAAI,GAAGu2C,WAAW,GAAG,IAAH,GAAU,KAAK71B,MAAL,EAAhC;;AACA,WAAO1gB,IAAI,KAAK,IAAhB,EAAsB;AACpB,UAAIsC,MAAM,CAACtC,IAAD,CAAV,EAAkB;AAChB,eAAO,IAAP;AACD;;AACDA,UAAI,GAAGA,IAAI,CAAC0gB,MAAL,EAAP;AACD;;AACD,WAAO,KAAP;AACD,GAZD;;;;;;;;;;AAqBAw1B,iEAAoC5zC,MAApC,EAAmE;AACjE,SAAKiI,YAAL,CAAkB,iBAAK;AACrB,UAAIjS,KAAK,CAACkK,QAAN,OAAqB,IAAzB,EAA+B;AAC7BF,cAAM,CAAChK,KAAD,CAAN;AACD,OAFD,MAEO;AACLA,aAAK,CAACo+C,mCAAN,CAA0Cp0C,MAA1C;AACD;AACF,KAND;AAOD,GARD;;;;;;AAaA4zC;AACE,WAAO,IAAI3/C,IAAJ,CACL,KAAKy/C,OAAL,KAAiB,IAAjB,GACI,KAAKD,KADT,GAEI,KAAKC,OAAL,CAAa7gD,IAAb,KAAsB,GAAtB,GAA4B,KAAK4gD,KAHhC,CAAP;AAKD,GAND;;;;;;AAWAG;AACE,WAAO,KAAKH,KAAZ;AACD,GAFD;;;;;;AAOAG;AACE,WAAO,KAAKF,OAAZ;AACD,GAFD;;;;;;;;AASQE,kCAAR;AACE,QAAI,KAAKF,OAAL,KAAiB,IAArB,EAA2B;AACzB,WAAKA,OAAL,CAAaW,YAAb,CAA0B,KAAKZ,KAA/B,EAAsC,IAAtC;AACD;AACF,GAJO;;;;;;;;;;AAaAG,gCAAR,UAAqBp0C,SAArB,EAAwCxJ,KAAxC,EAAsD;AACpD,QAAMs+C,UAAU,GAAGt+C,KAAK,CAACgJ,OAAN,EAAnB;AACA,QAAMu1C,WAAW,GAAG5pD,cAAS,KAAKygB,KAAL,CAAWyI,QAApBlpB,EAA8B6U,SAA9B7U,CAApB;;AACA,QAAI2pD,UAAU,IAAIC,WAAlB,EAA+B;AAC7B,aAAO,KAAKnpC,KAAL,CAAWyI,QAAX,CAAoBrU,SAApB,CAAP;AACA,WAAK4L,KAAL,CAAW2oC,UAAX;AACA,WAAKD,cAAL;AACD,KAJD,MAIO,IAAI,CAACQ,UAAD,IAAe,CAACC,WAApB,EAAiC;AACtC,WAAKnpC,KAAL,CAAWyI,QAAX,CAAoBrU,SAApB,IAAiCxJ,KAAK,CAACoV,KAAvC;AACA,WAAKA,KAAL,CAAW2oC,UAAX;AACA,WAAKD,cAAL;AACD;AACF,GAZO;;AAaV;AAAC,CAnND;ACtCA;;;;;;;;;;;;;;;;AAiCA;AACA;AACA;AACA;;AAEA;;;;;AAGA,IAAYU,iBAAZ;;AAAA,WAAYA,iBAAZ,EAA6B;;;;AAI3BA,0DAJ2B;;;AAQ3BA,4DAR2B;;;AAY3BA,sEAZ2B;;;AAgB3BA,oFAhB2B;;AAmB3BA;AACD,CApBD,EAAYA,iBAAiB,KAAjBA,iBAAiB,MAA7B;AAsBA;;;;;;;AAOA;;;AACC/I,IAAY,CAACgJ,wBAAb,GAAwC,EAAxC;AAmCD;;;;AAIA;;AACChJ,IAAI,CAACiJ,SAAL,CAAuB3J,iBAAvB,GAA2C;;;;;;;AAO1C,OAAK4J,qBAAL,GAA6B,IAAIf,IAAJ,EAA7B;AACD,CARA;AAqBD;;;;;;;;;;AAQAnI,IAAI,CAACiJ,SAAL,CAAetB,gBAAf,GAAkC,UAChCvgD,IADgC,EAEhCogD,iBAFgC,EAGhCj3C,UAHgC,EAIhCk3C,YAJgC,EAIX;AAErB,OAAK9f,IAAL,CAAU,oBAAoBvgC,IAA9B,EAFqB;;AAKrB,MAAMqd,aAAa,GAAG,aAAa,CAAnC;;AACA,MAAM0kC,QAAQ,GAAG,IAAI/B,SAAJ,CAAc,IAAd,EAAoBhgD,IAApB,CAAjB;AACA+hD,UAAQ,CAACjkC,EAAT,CAAY,OAAZ,EAAqBT,aAArB;;AACA,MAAM2kC,SAAS,GAAG;AAChBD,YAAQ,CAACnkC,GAAT,CAAa,OAAb,EAAsBP,aAAtB;AACD,GAFD,CARqB;;;AAarB,MAAM4kC,WAAW,GAAgB;AAC/BjiD,QAAI,MAD2B;AAE/BjH,UAAM,EAAEqnD,iBAFuB;AAG/Bj3C,cAAU,YAHqB;;AAM/B+vB,UAAM,EAAE,IANuB;;AAS/BgpB,SAAK,EAAE1pD,aAAa,EATW;;AAY/B6nD,gBAAY,cAZmB;;AAe/B8B,cAAU,EAAE,CAfmB;;AAkB/BH,aAAS,WAlBsB;;AAqB/BI,eAAW,EAAE,IArBkB;AAuB/BC,kBAAc,EAAE,IAvBe;AAyB/BC,wBAAoB,EAAE,IAzBS;AA2B/BC,4BAAwB,EAAE,IA3BK;AA6B/BC,iCAA6B,EAAE;AA7BA,GAAjC,CAbqB;;AA8CrB,MAAMC,YAAY,GAAG,KAAKC,eAAL,CAAqB1iD,IAArB,CAArB;AACAiiD,aAAW,CAACK,oBAAZ,GAAmCG,YAAnC;AACA,MAAM3I,MAAM,GAAGmI,WAAW,CAAClpD,MAAZ,CAAmB0pD,YAAY,CAACh3C,GAAb,EAAnB,CAAf;;AACA,MAAIquC,MAAM,KAAKryC,SAAf,EAA0B;;AAExBw6C,eAAW,CAACD,SAAZ;AACAC,eAAW,CAACM,wBAAZ,GAAuC,IAAvC;AACAN,eAAW,CAACO,6BAAZ,GAA4C,IAA5C;;AACA,QAAIP,WAAW,CAAC94C,UAAhB,EAA4B;;AAE1B,UAAMe,QAAQ,GAAG,IAAIwO,YAAJ,CACfupC,WAAW,CAACK,oBADG,EAEf,IAAItC,SAAJ,CAAc,IAAd,EAAoBiC,WAAW,CAACjiD,IAAhC,CAFe,EAGfuO,cAHe,CAAjB;AAKA0zC,iBAAW,CAAC94C,UAAZ,CAAuB,IAAvB,EAA6B,KAA7B,EAAoCe,QAApC;AACD;AACF,GAdD,MAcO;AACLxC,wBAAoB,CAClB,oCADkB,EAElBoyC,MAFkB,EAGlBmI,WAAW,CAACjiD,IAHM,CAApB,CADK;;AAQLiiD,eAAW,CAAC/oB,MAAZ,GAAqByoB,iBAAiB,CAACgB,GAAvC;AACA,QAAMC,SAAS,GAAG,KAAKd,qBAAL,CAA2Be,OAA3B,CAAmC7iD,IAAnC,CAAlB;AACA,QAAM8iD,SAAS,GAAGF,SAAS,CAACv1C,QAAV,MAAwB,EAA1C;AACAy1C,aAAS,CAACxlD,IAAV,CAAe2kD,WAAf;AAEAW,aAAS,CAACG,QAAV,CAAmBD,SAAnB,EAbK;;;;AAkBL,QAAIE,eAAe,SAAnB;;AACA,QACE,OAAOlJ,MAAP,KAAkB,QAAlB,IACAA,MAAM,KAAK,IADX,IAEAhiD,cAASgiD,MAAThiD,EAAiB,WAAjBA,CAHF,EAIE;;AAEAkrD,qBAAe,GAAG/vC,aAAQ6mC,MAAR7mC,EAAuB,WAAvBA,CAAlB;AACA/Y,kBACEiN,eAAe,CAAC67C,eAAD,CADjB9oD,EAEE,+CACE,wEAHJA;AAKD,KAZD,MAYO;AACL,UAAM+oD,WAAW,GACf,KAAKzK,eAAL,CAAqBh5B,sBAArB,CAA4Cxf,IAA5C,KACAyU,YAAY,CAAChI,UAFf;AAGAu2C,qBAAe,GAAGC,WAAW,CAAC72C,WAAZ,GAA0BX,GAA1B,EAAlB;AACD;;AACDu3C;AAAe;AAAA,MAAqCA,eAApD;AAEA,QAAMjjC,YAAY,GAAG,KAAKg6B,oBAAL,EAArB;AACA,QAAMC,iBAAiB,GAAGhsC,cAAY,CAAC8rC,MAAD,EAASkJ,eAAT,CAAtC;AACA,QAAM93C,OAAO,GAAGyV,4BAA4B,CAC1Cq5B,iBAD0C,EAE1CyI,YAF0C,EAG1C1iC,YAH0C,CAA5C;AAKAkiC,eAAW,CAACM,wBAAZ,GAAuCvI,iBAAvC;AACAiI,eAAW,CAACO,6BAAZ,GAA4Ct3C,OAA5C;AACA+2C,eAAW,CAACI,cAAZ,GAA6B,KAAKpI,eAAL,EAA7B;AAEA,QAAMjtB,MAAM,GAAG,KAAKwrB,eAAL,CAAqB0B,kBAArB,CACbl6C,IADa,EAEbkL,OAFa,EAGb+2C,WAAW,CAACI,cAHC,EAIbJ,WAAW,CAAC5B,YAJC,CAAf;AAMA,SAAK5H,WAAL,CAAiBC,yBAAjB,CAA2C14C,IAA3C,EAAiDgtB,MAAjD;AAEA,SAAKk2B,sBAAL;AACD;AACF,CA/HD;AAiIA;;;;;;AAMA;;;AACCtK,IAAI,CAACiJ,SAAL,CAAuBa,eAAvB,GAAyC,UACxC1iD,IADwC,EAExCmjD,WAFwC,EAElB;AAEtB,SACE,KAAK3K,eAAL,CAAqBh5B,sBAArB,CAA4Cxf,IAA5C,EAAkDmjD,WAAlD,KACA1uC,YAAY,CAAChI,UAFf;AAID,CARA;AAUD;;;;;;;;;;AAUA;;;AACCmsC,IAAI,CAACiJ,SAAL,CAAuBqB,sBAAvB,GAAgD,UAC/Cr4C,IAD+C,EACO;AADP;;AAC/C;AAAAA,WAA4B,KAAKi3C,qBAAjC;AAAsD;;;AAGtD,MAAI,CAACj3C,IAAL,EAAW;AACT,SAAKu4C,oCAAL,CAA0Cv4C,IAA1C;AACD;;AAED,MAAIA,IAAI,CAACwC,QAAL,OAAoB,IAAxB,EAA8B;AAC5B,QAAMg2C,KAAK,GAAG,KAAKC,sBAAL,CAA4Bz4C,IAA5B,CAAd;AACA3Q,gBAAOmpD,KAAK,CAAC7pD,MAAN,GAAe,CAAtBU,EAAyB,uCAAzBA;AAEA,QAAMqpD,MAAM,GAAGF,KAAK,CAACjoC,KAAN,CACb,UAAC6mC,WAAD,EAAyB;AAAK,wBAAW,CAAC/oB,MAAZ,KAAuByoB,iBAAiB,CAACgB,GAAzC;AAA4C,KAD7D,CAAf,CAJ4B;;AAS5B,QAAIY,MAAJ,EAAY;AACV,WAAKC,qBAAL,CAA2B34C,IAAI,CAAC7K,IAAL,EAA3B,EAAwCqjD,KAAxC;AACD;AACF,GAZD,MAYO,IAAIx4C,IAAI,CAACs2C,WAAL,EAAJ,EAAwB;AAC7Bt2C,QAAI,CAACuK,YAAL,CAAkB,qBAAS;AACzBlB,WAAI,CAACgvC,sBAAL,CAA4Bt2C,SAA5B;AACD,KAFD;AAGD;AACF,CAzBA;AA2BD;;;;;;;AAOA;;;AACCgsC,IAAI,CAACiJ,SAAL,CAAuB2B,qBAAvB,GAA+C,UAC9CxjD,IAD8C,EAE9CqjD,KAF8C,EAE1B;AAF0B,mBAE1B;;;AAGpB,MAAMI,YAAY,GAAGJ,KAAK,CAACrvC,GAAN,CAAU,eAAG;AAChC,WAAO0vC,GAAG,CAACrB,cAAX;AACD,GAFoB,CAArB;AAGA,MAAMsB,WAAW,GAAG,KAAKjB,eAAL,CAAqB1iD,IAArB,EAA2ByjD,YAA3B,CAApB;AACA,MAAIG,UAAU,GAAGD,WAAjB;AACA,MAAME,UAAU,GAAGF,WAAW,CAACnuC,IAAZ,EAAnB;;AACA,OAAK,IAAIjc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8pD,KAAK,CAAC7pD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAMmqD,GAAG,GAAGL,KAAK,CAAC9pD,CAAD,CAAjB;AACAW,gBACEwpD,GAAG,CAACxqB,MAAJ,KAAeyoB,iBAAiB,CAACgB,GADnCzoD,EAEE,+DAFFA;AAIAwpD,OAAG,CAACxqB,MAAJ,GAAayoB,iBAAiB,CAACmC,IAA/B;AACAJ,OAAG,CAACvB,UAAJ;AACA,QAAMjgD,YAAY,GAAGd,IAAI,CAACc,YAAL,CAAkBlC,IAAlB,EAAwB0jD,GAAG,CAAC1jD,IAA5B,CAArB,CARqC;;AAUrC4jD,cAAU,GAAGA,UAAU,CAAC32C,WAAX,CACX/K;AAAY;AADD,MAEXwhD,GAAG,CAACnB,wBAFO,CAAb;AAID;;AAED,MAAMwB,UAAU,GAAGH,UAAU,CAACn4C,GAAX,CAAe,IAAf,CAAnB;AACA,MAAMu4C,UAAU,GAAGhkD,IAAnB,CA1BoB;;AA6BpB,OAAKi8B,OAAL,CAAayZ,GAAb,CACEsO,UAAU,CAACrsD,QAAX,EADF,EAEEosD,UAFF,EAGE,UAAC7qB,MAAD,EAAe;AACbhlB,SAAI,CAACqsB,IAAL,CAAU,0BAAV,EAAsC;AACpCvgC,UAAI,EAAEgkD,UAAU,CAACrsD,QAAX,EAD8B;AAEpCuhC,YAAM;AAF8B,KAAtC;;AAKA,QAAIlM,MAAM,GAAY,EAAtB;;AACA,QAAIkM,MAAM,KAAK,IAAf,EAAqB;;;AAGnB,UAAMnc,SAAS,GAAG,EAAlB;;AACA,WAAK,IAAIxjB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8pD,KAAK,CAAC7pD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC8pD,aAAK,CAAC9pD,CAAD,CAAL,CAAS2/B,MAAT,GAAkByoB,iBAAiB,CAACsC,SAApC;AACAj3B,cAAM,GAAGA,MAAM,CAACoC,MAAP,CACPlb,KAAI,CAACskC,eAAL,CAAqBxvB,YAArB,CAAkCq6B,KAAK,CAAC9pD,CAAD,CAAL,CAAS8oD,cAA3C,CADO,CAAT;;AAGA,YAAIgB,KAAK,CAAC9pD,CAAD,CAAL,CAAS4P,UAAb,EAAyB;;AAEvB,cAAM0B,IAAI,GAAGw4C,KAAK,CAAC9pD,CAAD,CAAL,CAASipD,6BAAtB;AACA,cAAMlpC,GAAG,GAAG,IAAI0mC,SAAJ,CAAc9rC,KAAd,EAAoBmvC,KAAK,CAAC9pD,CAAD,CAAL,CAASyG,IAA7B,CAAZ;AACA,cAAMkK,QAAQ,GAAG,IAAIwO,YAAJ,CAAiB7N,IAAjB,EAAuByO,GAAvB,EAA4B/K,cAA5B,CAAjB;AACAwO,mBAAS,CAACzf,IAAV,CACE+lD,KAAK,CAAC9pD,CAAD,CAAL,CAAS4P,UAAT,CAAoB5O,IAApB,CAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C2P,QAA3C,CADF;AAGD;;AACDm5C,aAAK,CAAC9pD,CAAD,CAAL,CAASyoD,SAAT;AACD,OAnBkB;;;AAsBnB9tC,WAAI,CAACkvC,oCAAL,CACElvC,KAAI,CAAC4tC,qBAAL,CAA2Be,OAA3B,CAAmC7iD,IAAnC,CADF,EAtBmB;;;AA0BnBkU,WAAI,CAACgvC,sBAAL;;AAEAhvC,WAAI,CAACukC,WAAL,CAAiBC,yBAAjB,CAA2C14C,IAA3C,EAAiDgtB,MAAjD,EA5BmB;;;AA+BnB,WAAK,IAAIzzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwjB,SAAS,CAACvjB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC8G,sBAAc,CAAC0c,SAAS,CAACxjB,CAAD,CAAV,CAAd;AACD;AACF,KAlCD,MAkCO;;AAEL,UAAI2/B,MAAM,KAAK,WAAf,EAA4B;AAC1B,aAAK,IAAI3/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8pD,KAAK,CAAC7pD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,cAAI8pD,KAAK,CAAC9pD,CAAD,CAAL,CAAS2/B,MAAT,KAAoByoB,iBAAiB,CAACuC,gBAA1C,EAA4D;AAC1Db,iBAAK,CAAC9pD,CAAD,CAAL,CAAS2/B,MAAT,GAAkByoB,iBAAiB,CAACwC,WAApC;AACD,WAFD,MAEO;AACLd,iBAAK,CAAC9pD,CAAD,CAAL,CAAS2/B,MAAT,GAAkByoB,iBAAiB,CAACgB,GAApC;AACD;AACF;AACF,OARD,MAQO;AACL1nD,YAAI,CACF,oBAAoB+oD,UAAU,CAACrsD,QAAX,EAApB,GAA4C,WAA5C,GAA0DuhC,MADxD,CAAJ;;AAGA,aAAK,IAAI3/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8pD,KAAK,CAAC7pD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC8pD,eAAK,CAAC9pD,CAAD,CAAL,CAAS2/B,MAAT,GAAkByoB,iBAAiB,CAACwC,WAApC;AACAd,eAAK,CAAC9pD,CAAD,CAAL,CAAS6oD,WAAT,GAAuBlpB,MAAvB;AACD;AACF;;AAEDhlB,WAAI,CAACulC,kBAAL,CAAwBz5C,IAAxB;AACD;AACF,GAlEH,EAmEE6jD,UAnEF;AAqED,CApGA;AAsGD;;;;;;;;;;;;AAYA;;;AACCjL,IAAI,CAACiJ,SAAL,CAAuBpI,kBAAvB,GAA4C,UAAStc,WAAT,EAA0B;AACrE,MAAMinB,uBAAuB,GAAG,KAAKC,2BAAL,CAAiClnB,WAAjC,CAAhC;AACA,MAAMn9B,IAAI,GAAGokD,uBAAuB,CAACpkD,IAAxB,EAAb;AAEA,MAAMqjD,KAAK,GAAG,KAAKC,sBAAL,CAA4Bc,uBAA5B,CAAd;AACA,OAAKE,sBAAL,CAA4BjB,KAA5B,EAAmCrjD,IAAnC;AAEA,SAAOA,IAAP;AACD,CARA;AAUD;;;;;;;AAOA;;;AACC44C,IAAI,CAACiJ,SAAL,CAAuByC,sBAAvB,GAAgD,UAC/CjB,KAD+C,EAE/CrjD,IAF+C,EAErC;AAEV,MAAIqjD,KAAK,CAAC7pD,MAAN,KAAiB,CAArB,EAAwB;AACtB,WADsB,CACf;AACR,GAJS;;;;AAQV,MAAMujB,SAAS,GAAG,EAAlB;AACA,MAAIiQ,MAAM,GAAY,EAAtB,CATU;;AAWV,MAAMu3B,WAAW,GAAGlB,KAAK,CAAC91B,MAAN,CAAa,aAAC;AAChC,WAAOooB,CAAC,CAACzc,MAAF,KAAayoB,iBAAiB,CAACgB,GAAtC;AACD,GAFmB,CAApB;AAGA,MAAMc,YAAY,GAAGc,WAAW,CAACvwC,GAAZ,CAAgB,aAAC;AACpC,WAAO2hC,CAAC,CAAC0M,cAAT;AACD,GAFoB,CAArB;;AAGA,OAAK,IAAI9oD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8pD,KAAK,CAAC7pD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAM0oD,WAAW,GAAGoB,KAAK,CAAC9pD,CAAD,CAAzB;AACA,QAAM2I,YAAY,GAAGd,IAAI,CAACc,YAAL,CAAkBlC,IAAlB,EAAwBiiD,WAAW,CAACjiD,IAApC,CAArB;AACA,QAAIwkD,gBAAgB,GAAG,KAAvB;AAAA,QACEpC,WAAW,SADb;AAEAloD,gBACEgI,YAAY,KAAK,IADnBhI,EAEE,+DAFFA;;AAKA,QAAI+nD,WAAW,CAAC/oB,MAAZ,KAAuByoB,iBAAiB,CAACwC,WAA7C,EAA0D;AACxDK,sBAAgB,GAAG,IAAnB;AACApC,iBAAW,GAAGH,WAAW,CAACG,WAA1B;AACAp1B,YAAM,GAAGA,MAAM,CAACoC,MAAP,CACP,KAAKopB,eAAL,CAAqBxvB,YAArB,CAAkCi5B,WAAW,CAACI,cAA9C,EAA8D,IAA9D,CADO,CAAT;AAGD,KAND,MAMO,IAAIJ,WAAW,CAAC/oB,MAAZ,KAAuByoB,iBAAiB,CAACgB,GAA7C,EAAkD;;AAEvD,UAAIV,WAAW,CAACE,UAAZ,IAA2BvJ,IAAY,CAACgJ,wBAA5C,EAAsE;AACpE4C,wBAAgB,GAAG,IAAnB;AACApC,mBAAW,GAAG,UAAd;AACAp1B,cAAM,GAAGA,MAAM,CAACoC,MAAP,CACP,KAAKopB,eAAL,CAAqBxvB,YAArB,CAAkCi5B,WAAW,CAACI,cAA9C,EAA8D,IAA9D,CADO,CAAT;AAGD,OAND,MAMO;;AAEL,YAAMY,WAAW,GAAG,KAAKP,eAAL,CAClBT,WAAW,CAACjiD,IADM,EAElByjD,YAFkB,CAApB;AAIAxB,mBAAW,CAACK,oBAAZ,GAAmCW,WAAnC;AACA,YAAMxuB,OAAO,GAAG4uB,KAAK,CAAC9pD,CAAD,CAAL,CAASR,MAAT,CAAgBkqD,WAAW,CAACx3C,GAAZ,EAAhB,CAAhB;;AACA,YAAIgpB,OAAO,KAAKhtB,SAAhB,EAA2B;AACzBC,8BAAoB,CAClB,oCADkB,EAElB+sB,OAFkB,EAGlBwtB,WAAW,CAACjiD,IAHM,CAApB;AAKA,cAAIykD,WAAW,GAAGz2C,cAAY,CAACymB,OAAD,CAA9B;AACA,cAAMiwB,mBAAmB,GACvB,OAAOjwB,OAAP,KAAmB,QAAnB,IACAA,OAAO,IAAI,IADX,IAEA38B,cAAS28B,OAAT38B,EAAkB,WAAlBA,CAHF;;AAIA,cAAI,CAAC4sD,mBAAL,EAA0B;;AAExBD,uBAAW,GAAGA,WAAW,CAAC33C,cAAZ,CAA2Bm2C,WAAW,CAAC72C,WAAZ,EAA3B,CAAd;AACD;;AAED,cAAMu4C,UAAU,GAAG1C,WAAW,CAACI,cAA/B;AACA,cAAMtiC,YAAY,GAAG,KAAKg6B,oBAAL,EAArB;AACA,cAAM6K,eAAe,GAAGjkC,4BAA4B,CAClD8jC,WADkD,EAElDxB,WAFkD,EAGlDljC,YAHkD,CAApD;AAMAkiC,qBAAW,CAACM,wBAAZ,GAAuCkC,WAAvC;AACAxC,qBAAW,CAACO,6BAAZ,GAA4CoC,eAA5C;AACA3C,qBAAW,CAACI,cAAZ,GAA6B,KAAKpI,eAAL,EAA7B,CA1ByB;;AA4BzBwJ,sBAAY,CAACnxB,MAAb,CAAoBmxB,YAAY,CAACpoD,OAAb,CAAqBspD,UAArB,CAApB,EAAsD,CAAtD;AACA33B,gBAAM,GAAGA,MAAM,CAACoC,MAAP,CACP,KAAKopB,eAAL,CAAqB0B,kBAArB,CACE+H,WAAW,CAACjiD,IADd,EAEE4kD,eAFF,EAGE3C,WAAW,CAACI,cAHd,EAIEJ,WAAW,CAAC5B,YAJd,CADO,CAAT;AAQArzB,gBAAM,GAAGA,MAAM,CAACoC,MAAP,CACP,KAAKopB,eAAL,CAAqBxvB,YAArB,CAAkC27B,UAAlC,EAA8C,IAA9C,CADO,CAAT;AAGD,SAxCD,MAwCO;AACLH,0BAAgB,GAAG,IAAnB;AACApC,qBAAW,GAAG,QAAd;AACAp1B,gBAAM,GAAGA,MAAM,CAACoC,MAAP,CACP,KAAKopB,eAAL,CAAqBxvB,YAArB,CAAkCi5B,WAAW,CAACI,cAA9C,EAA8D,IAA9D,CADO,CAAT;AAGD;AACF;AACF;;AACD,SAAK5J,WAAL,CAAiBC,yBAAjB,CAA2C14C,IAA3C,EAAiDgtB,MAAjD;AACAA,UAAM,GAAG,EAAT;;AACA,QAAIw3B,gBAAJ,EAAsB;;AAEpBnB,WAAK,CAAC9pD,CAAD,CAAL,CAAS2/B,MAAT,GAAkByoB,iBAAiB,CAACsC,SAApC,CAFoB;;;AAMpB,OAAC,UAASjC,SAAT,EAAkB;AACjB7lD,kBAAU,CAAC6lD,SAAD,EAAY5lD,IAAI,CAACC,KAAL,CAAW,CAAX,CAAZ,CAAV;AACD,OAFD,EAEGgnD,KAAK,CAAC9pD,CAAD,CAAL,CAASyoD,SAFZ;;AAIA,UAAIqB,KAAK,CAAC9pD,CAAD,CAAL,CAAS4P,UAAb,EAAyB;AACvB,YAAIi5C,WAAW,KAAK,QAApB,EAA8B;AAC5B,cAAM9oC,GAAG,GAAG,IAAI0mC,SAAJ,CAAc,IAAd,EAAoBqD,KAAK,CAAC9pD,CAAD,CAAL,CAASyG,IAA7B,CAAZ,CAD4B;;AAG5B,cAAM6kD;AAAS;AAAA,YAAwBxB,KAAK,CAAC9pD,CAAD,CAAL,CAAS+oD,oBAAhD;AACA,cAAMp4C,QAAQ,GAAG,IAAIwO,YAAJ,CAAiBmsC,SAAjB,EAA4BvrC,GAA5B,EAAiC/K,cAAjC,CAAjB;AACAwO,mBAAS,CAACzf,IAAV,CAAe+lD,KAAK,CAAC9pD,CAAD,CAAL,CAAS4P,UAAT,CAAoB5O,IAApB,CAAyB,IAAzB,EAA+B,IAA/B,EAAqC,KAArC,EAA4C2P,QAA5C,CAAf;AACD,SAND,MAMO;AACL6S,mBAAS,CAACzf,IAAV,CACE+lD,KAAK,CAAC9pD,CAAD,CAAL,CAAS4P,UAAT,CAAoB5O,IAApB,CAAyB,IAAzB,EAA+B,IAAIS,KAAJ,CAAUonD,WAAV,CAA/B,EAAuD,KAAvD,EAA8D,IAA9D,CADF;AAGD;AACF;AACF;AACF,GA5HS;;;AA+HV,OAAKgB,oCAAL,CAA0C,KAAKtB,qBAA/C,EA/HU;;AAkIV,OAAK,IAAIvoD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwjB,SAAS,CAACvjB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC8G,kBAAc,CAAC0c,SAAS,CAACxjB,CAAD,CAAV,CAAd;AACD,GApIS;;;AAuIV,OAAK2pD,sBAAL;AACD,CA1IA;AA4ID;;;;;;;;AAQA;;;AACCtK,IAAI,CAACiJ,SAAL,CAAuBwC,2BAAvB,GAAqD,UACpDrkD,IADoD,EAC1C;AAEV,MAAIgN,KAAJ,CAFU;;AAKV,MAAI83C,eAAe,GAAG,KAAKhD,qBAA3B;AACA90C,OAAK,GAAGhN,IAAI,CAACgC,QAAL,EAAR;;AACA,SAAOgL,KAAK,KAAK,IAAV,IAAkB83C,eAAe,CAACz3C,QAAhB,OAA+B,IAAxD,EAA8D;AAC5Dy3C,mBAAe,GAAGA,eAAe,CAACjC,OAAhB,CAAwB71C,KAAxB,CAAlB;AACAhN,QAAI,GAAGA,IAAI,CAACmC,QAAL,EAAP;AACA6K,SAAK,GAAGhN,IAAI,CAACgC,QAAL,EAAR;AACD;;AAED,SAAO8iD,eAAP;AACD,CAfA;AAiBD;;;;;;;AAOA;;;AACClM,IAAI,CAACiJ,SAAL,CAAuByB,sBAAvB,GAAgD,UAC/CwB,eAD+C,EACX;;AAGpC,MAAMC,gBAAgB,GAAkB,EAAxC;AACA,OAAKC,kCAAL,CAAwCF,eAAxC,EAAyDC,gBAAzD,EAJoC;;AAOpCA,kBAAgB,CAACxnD,IAAjB,CAAsB,UAACZ,CAAD,EAAIC,CAAJ,EAAK;AACzB,WAAOD,CAAC,CAACulD,KAAF,GAAUtlD,CAAC,CAACslD,KAAnB;AACD,GAFD;AAIA,SAAO6C,gBAAP;AACD,CAbA;AAeD;;;;;AAKA;;;AACCnM,IAAI,CAACiJ,SAAL,CAAuBmD,kCAAvB,GAA4D,UAC3Dn6C,IAD2D,EAE3Dw4C,KAF2D,EAEvC;AAFuC;;AAI3D,MAAMP,SAAS,GAAGj4C,IAAI,CAACwC,QAAL,EAAlB;;AACA,MAAIy1C,SAAS,KAAK,IAAlB,EAAwB;AACtB,SAAK,IAAIvpD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGupD,SAAS,CAACtpD,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC8pD,WAAK,CAAC/lD,IAAN,CAAWwlD,SAAS,CAACvpD,CAAD,CAApB;AACD;AACF;;AAEDsR,MAAI,CAACuK,YAAL,CAAkB,iBAAK;AACrBlB,SAAI,CAAC8wC,kCAAL,CAAwC7hD,KAAxC,EAA+CkgD,KAA/C;AACD,GAFD;AAGD,CAdA;AAgBD;;;;;;AAMA;;;AACCzK,IAAI,CAACiJ,SAAL,CAAuBuB,oCAAvB,GAA8D,UAC7Dv4C,IAD6D,EACpC;AADoC;;AAG7D,MAAMw4C,KAAK,GAAGx4C,IAAI,CAACwC,QAAL,EAAd;;AACA,MAAIg2C,KAAJ,EAAW;AACT,QAAI4B,EAAE,GAAG,CAAT;;AACA,SAAK,IAAIl+B,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGs8B,KAAK,CAAC7pD,MAAhC,EAAwCutB,IAAI,EAA5C,EAAgD;AAC9C,UAAIs8B,KAAK,CAACt8B,IAAD,CAAL,CAAYmS,MAAZ,KAAuByoB,iBAAiB,CAACsC,SAA7C,EAAwD;AACtDZ,aAAK,CAAC4B,EAAD,CAAL,GAAY5B,KAAK,CAACt8B,IAAD,CAAjB;AACAk+B,UAAE;AACH;AACF;;AACD5B,SAAK,CAAC7pD,MAAN,GAAeyrD,EAAf;AACAp6C,QAAI,CAACk4C,QAAL,CAAcM,KAAK,CAAC7pD,MAAN,GAAe,CAAf,GAAmB6pD,KAAnB,GAA2B,IAAzC;AACD;;AAEDx4C,MAAI,CAACuK,YAAL,CAAkB,qBAAS;AACzBlB,SAAI,CAACkvC,oCAAL,CAA0Cx2C,SAA1C;AACD,GAFD;AAGD,CAnBA;AAqBD;;;;;;;;AAQA;;;AACCgsC,IAAI,CAACiJ,SAAL,CAAuBvH,kBAAvB,GAA4C,UAASt6C,IAAT,EAAmB;AAAnB;;AAC3C,MAAMimB,YAAY,GAAG,KAAKo+B,2BAAL,CAAiCrkD,IAAjC,EAAuCA,IAAvC,EAArB;AAEA,MAAM8kD,eAAe,GAAG,KAAKhD,qBAAL,CAA2Be,OAA3B,CAAmC7iD,IAAnC,CAAxB;AAEA8kD,iBAAe,CAACI,eAAhB,CAAgC,UAACr6C,IAAD,EAA0B;AACxDqJ,SAAI,CAACixC,wBAAL,CAA8Bt6C,IAA9B;AACD,GAFD;AAIA,OAAKs6C,wBAAL,CAA8BL,eAA9B;AAEAA,iBAAe,CAACxD,iBAAhB,CAAkC,UAACz2C,IAAD,EAA0B;AAC1DqJ,SAAI,CAACixC,wBAAL,CAA8Bt6C,IAA9B;AACD,GAFD;AAIA,SAAOob,YAAP;AACD,CAhBA;AAkBD;;;;;;AAMA;;;AACC2yB,IAAI,CAACiJ,SAAL,CAAuBsD,wBAAvB,GAAkD,UACjDt6C,IADiD,EACxB;AAEzB,MAAMw4C,KAAK,GAAGx4C,IAAI,CAACwC,QAAL,EAAd;;AACA,MAAIg2C,KAAK,KAAK,IAAd,EAAoB;;;AAGlB,QAAMtmC,SAAS,GAAG,EAAlB,CAHkB;;;AAOlB,QAAIiQ,MAAM,GAAY,EAAtB;AACA,QAAIo4B,QAAQ,GAAG,CAAC,CAAhB;;AACA,SAAK,IAAI7rD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8pD,KAAK,CAAC7pD,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAI8pD,KAAK,CAAC9pD,CAAD,CAAL,CAAS2/B,MAAT,KAAoByoB,iBAAiB,CAACuC,gBAA1C,EAA4D,CAA5D,KAEO,IAAIb,KAAK,CAAC9pD,CAAD,CAAL,CAAS2/B,MAAT,KAAoByoB,iBAAiB,CAACmC,IAA1C,EAAgD;AACrD5pD,oBACEkrD,QAAQ,KAAK7rD,CAAC,GAAG,CADnBW,EAEE,iDAFFA;AAIAkrD,gBAAQ,GAAG7rD,CAAX,CALqD;;AAOrD8pD,aAAK,CAAC9pD,CAAD,CAAL,CAAS2/B,MAAT,GAAkByoB,iBAAiB,CAACuC,gBAApC;AACAb,aAAK,CAAC9pD,CAAD,CAAL,CAAS6oD,WAAT,GAAuB,KAAvB;AACD,OATM,MASA;AACLloD,oBACEmpD,KAAK,CAAC9pD,CAAD,CAAL,CAAS2/B,MAAT,KAAoByoB,iBAAiB,CAACgB,GADxCzoD,EAEE,wCAFFA,EADK;;AAMLmpD,aAAK,CAAC9pD,CAAD,CAAL,CAASyoD,SAAT;AACAh1B,cAAM,GAAGA,MAAM,CAACoC,MAAP,CACP,KAAKopB,eAAL,CAAqBxvB,YAArB,CAAkCq6B,KAAK,CAAC9pD,CAAD,CAAL,CAAS8oD,cAA3C,EAA2D,IAA3D,CADO,CAAT;;AAGA,YAAIgB,KAAK,CAAC9pD,CAAD,CAAL,CAAS4P,UAAb,EAAyB;AACvB,cAAMe,QAAQ,GAAwB,IAAtC;AACA6S,mBAAS,CAACzf,IAAV,CACE+lD,KAAK,CAAC9pD,CAAD,CAAL,CAAS4P,UAAT,CAAoB5O,IAApB,CAAyB,IAAzB,EAA+B,IAAIS,KAAJ,CAAU,KAAV,CAA/B,EAAiD,KAAjD,EAAwDkP,QAAxD,CADF;AAGD;AACF;AACF;;AACD,QAAIk7C,QAAQ,KAAK,CAAC,CAAlB,EAAqB;;AAEnBv6C,UAAI,CAACk4C,QAAL,CAAc,IAAd;AACD,KAHD,MAGO;;AAELM,WAAK,CAAC7pD,MAAN,GAAe4rD,QAAQ,GAAG,CAA1B;AACD,KA7CiB;;;AAgDlB,SAAK3M,WAAL,CAAiBC,yBAAjB,CAA2C7tC,IAAI,CAAC7K,IAAL,EAA3C,EAAwDgtB,MAAxD;;AACA,SAAK,IAAIzzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwjB,SAAS,CAACvjB,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC8G,oBAAc,CAAC0c,SAAS,CAACxjB,CAAD,CAAV,CAAd;AACD;AACF;AACF,CAzDA;ACluBD;;;;;;;;;;;;;;;;;AA6BA;;;AACA,IAAM8rD,mBAAmB,GAAG,aAA5B;AAEA;;;;;;;;;AAQA,IAAMC,mCAAmC,GAAG,iCAA5C;;AAEA,IAAIC,eAAJ;AAEA;;;;;AAGA;AAAA;AAAA;AAAA;;;;AAIU,kBAIJ,EAJI;;;;;;AAUA,0BAA0B,KAA1B;AAgIT;;AA9HQC,4BAAP;AACE,QAAI,CAACD,eAAL,EAAsB;AACpBA,qBAAe,GAAG,IAAIC,WAAJ,EAAlB;AACD;;AACD,WAAOD,eAAP;AACD,GALM,CAhBT;;;AAwBEC;;;;AACE,WAAsB,8BAAM,CAACpoD,IAAP,CAAY,KAAKqoD,MAAjB,IAAwBvP,cAA9C,EAA8C,QAA9C,EAA8CA,cAA9C,EAAgD;AAA3C,YAAMwP,OAAO,WAAb;;;AACH,eAAoB,6CAAM,CAACtoD,IAAP,CAAY,KAAKqoD,MAAL,CAAYC,OAAZ,CAAZ,KAAiCvP,cAArD,EAAqD,QAArD,EAAqDA,cAArD,EAAuD;AAAlD,gBAAMwP,KAAK,WAAX;AACH,iBAAKF,MAAL,CAAYC,OAAZ,EAAqBC,KAArB,EAA4BrQ,SAA5B;AACD;;;;;;;;;;;;AACF;;;;;;;;;;;;AACF,GAND;;AAQAkQ;;;;AACE,WAAsB,8BAAM,CAACpoD,IAAP,CAAY,KAAKqoD,MAAjB,IAAwBvP,cAA9C,EAA8C,QAA9C,EAA8CA,cAA9C,EAAgD;AAA3C,YAAMwP,OAAO,WAAb;;;AACH,eAAoB,6CAAM,CAACtoD,IAAP,CAAY,KAAKqoD,MAAL,CAAYC,OAAZ,CAAZ,KAAiCvP,cAArD,EAAqD,QAArD,EAAqDA,cAArD,EAAuD;AAAlD,gBAAMwP,KAAK,WAAX;AACH,iBAAKF,MAAL,CAAYC,OAAZ,EAAqBC,KAArB,EAA4BzK,MAA5B;AACD;;;;;;;;;;;;AACF;;;;;;;;;;;;AACF,GAND;;;;;;;;;AAcAsK,oDACE/N,GADF,EAEEC,YAFF,EAGE5R,GAHF,EAGc;AAEZ,QAAI6f,KAAK,GAAuB7f,GAAG,IAAI2R,GAAG,CAAC3c,OAAJ,CAAYuqB,mBAAZ,CAAvC;;AACA,QAAIM,KAAK,KAAKl+C,SAAd,EAAyB;AACvB1M,WAAK,CACH,gEACEsqD,mBADF,GAEE,gDAHC,CAAL;AAKD;;AAED,QAAIn/C,SAAS,GAAGF,aAAa,CAAC2/C,KAAD,CAA7B;AACA,QAAIt/C,QAAQ,GAAGH,SAAS,CAACG,QAAzB;AAEA,QAAIu/C,cAAc,GAAuBn+C,SAAzC;;AACA,QAAI,OAAOigC,OAAP,KAAmB,WAAvB,EAAoC;AAClCke,oBAAc,GAAGle,OAAO,CAACE,GAAR,CAAY0d,mCAAZ,CAAjB;AACD;;AACD,QAAIM,cAAJ,EAAoB;AAClBD,WAAK,GAAG,YAAUC,cAAV,GAAwB,MAAxB,GAA+Bv/C,QAAQ,CAACjC,SAAhD;AACA8B,eAAS,GAAGF,aAAa,CAAC2/C,KAAD,CAAzB;AACAt/C,cAAQ,GAAGH,SAAS,CAACG,QAArB;AACD;;AAEDyC,eAAW,CAAC,+BAAD,EAAkC,CAAlC,EAAqC5C,SAArC,CAAX;;AACA,QAAI,CAACA,SAAS,CAAClG,IAAV,CAAemM,OAAf,EAAL,EAA+B;AAC7BpR,WAAK,CACH,gEACE,+BAFC,CAAL;AAID;;AAED,QAAMugB,IAAI,GAAG,KAAKuqC,UAAL,CAAgBx/C,QAAhB,EAA0BoxC,GAA1B,EAA+BC,YAA/B,CAAb;AAEA,WAAOp8B,IAAI,CAAC4kC,QAAZ;AACD,GAtCD;;;;;;;;AA6CAsF,+CAAWlqC,IAAX,EAAqB;AACnB,QAAMwqC,QAAQ,GAAG7yC,aAAQ,KAAKwyC,MAAbxyC,EAAqBqI,IAAI,CAACm8B,GAAL,CAAShgD,IAA9Bwb,CAAjB,CADmB;;AAGnB,QAAI,CAAC6yC,QAAD,IAAa7yC,aAAQ6yC,QAAR7yC,EAAkBqI,IAAI,CAAC+vB,SAAL,CAAelmC,WAAf,EAAlB8N,MAAoDqI,IAArE,EAA2E;AACzEvgB,WAAK,CACH,cAAYugB,IAAI,CAACm8B,GAAL,CAAShgD,IAArB,GAAyB,GAAzB,GAA6B6jB,IAAI,CAAC+vB,SAAlC,GAA2C,6BADxC,CAAL;AAGD;;AACD/vB,QAAI,CAACg6B,SAAL;AACA,WAAOwQ,QAAQ,CAACxqC,IAAI,CAAC+vB,SAAL,CAAelmC,WAAf,EAAD,CAAf;AACD,GAVD;;;;;;;;;;;AAoBAqgD,+CACEn/C,QADF,EAEEoxC,GAFF,EAGEC,YAHF,EAGkD;AAEhD,QAAIoO,QAAQ,GAAG7yC,aAAQ,KAAKwyC,MAAbxyC,EAAqBwkC,GAAG,CAAChgD,IAAzBwb,CAAf;;AAEA,QAAI,CAAC6yC,QAAL,EAAe;AACbA,cAAQ,GAAG,EAAX;AACA,WAAKL,MAAL,CAAYhO,GAAG,CAAChgD,IAAhB,IAAwBquD,QAAxB;AACD;;AAED,QAAIxqC,IAAI,GAAGrI,aAAQ6yC,QAAR7yC,EAAkB5M,QAAQ,CAAClB,WAAT,EAAlB8N,CAAX;;AACA,QAAIqI,IAAJ,EAAU;AACRvgB,WAAK,CACH,yHADG,CAAL;AAGD;;AACDugB,QAAI,GAAG,IAAIs9B,IAAJ,CAASvyC,QAAT,EAAmB,KAAK0/C,cAAxB,EAAwCtO,GAAxC,EAA6CC,YAA7C,CAAP;AACAoO,YAAQ,CAACz/C,QAAQ,CAAClB,WAAT,EAAD,CAAR,GAAmCmW,IAAnC;AAEA,WAAOA,IAAP;AACD,GAtBD;;;;;;;AA4BAkqC,oDAAgBhO,eAAhB,EAAwC;AACtC,SAAKuO,cAAL,GAAsBvO,eAAtB;AACD,GAFD;;AAGF;AAAC,CA9ID;AC/CA;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;;AAyBE,oBAAoBvuC,KAApB,EAA+B;AAAX;;AAClB,QAAI,EAAEA,KAAK,YAAY2vC,IAAnB,CAAJ,EAA8B;AAC5B79C,WAAK,CACH,sEADG,CAAL;AAGD;;;;AAGD,SAAK2V,KAAL,GAAa,IAAIsvC,SAAJ,CAAc/2C,KAAd,EAAqB7H,IAAI,CAACwhB,KAA1B,CAAb;AAEA,SAAKojC,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,IAAtB,CAAhB;AACD;;AAED9kD,wBAAIy6C,kBAAJ,EAAI,KAAJ,EAAO;SAAP;AACE,aAAO,KAAK3yC,KAAL,CAAWwuC,GAAlB;AACD,KAFM;oBAAA;;AAAA,GAAP;;AAgBAmE,qCAAI57C,IAAJ,EAA6B;AAC3B,SAAKkmD,aAAL,CAAmB,KAAnB;AACA98C,0BAAiB,cAAjBA,EAAiC,CAAjCA,EAAoC,CAApCA,EAAuCC,SAAS,CAAC7P,MAAjD4P;;AAEA,QAAIpJ,IAAI,YAAYggD,SAApB,EAA+B;AAC7B,aAAO,KAAKmG,UAAL,CAAgBnmD,IAAI,CAACrI,QAAL,EAAhB,CAAP;AACD;;AAED,WAAOqI,IAAI,KAAKyH,SAAT,GAAqB,KAAKiJ,KAAL,CAAWvN,KAAX,CAAiBnD,IAAjB,CAArB,GAA8C,KAAK0Q,KAA1D;AACD,GATD;;;;;;;;;;AAkBAkrC,4CAAW9V,GAAX,EAAsB;;AAEpB,QAAMsgB,OAAO,GAAG,qBAAhB;AACA,SAAKF,aAAL,CAAmBE,OAAnB;AACAh9C,0BAAiBg9C,OAAjBh9C,EAA0B,CAA1BA,EAA6B,CAA7BA,EAAgCC,SAAS,CAAC7P,MAA1C4P;AACA,QAAMi9C,SAAS,GAAGrgD,aAAa,CAAC8/B,GAAD,CAA/B;AACAh9B,eAAW,CAACs9C,OAAD,EAAU,CAAV,EAAaC,SAAb,CAAX;AAEA,QAAMhgD,QAAQ,GAAGggD,SAAS,CAAChgD,QAA3B;;AACA,QAAIA,QAAQ,CAACnC,IAAT,KAAmB,KAAK+E,KAAL,CAAWoiC,SAAX,CAAkCnnC,IAAzD,EAA+D;AAC7DnJ,WAAK,CACHqrD,OAAO,GACL,mDADF,GAEE,SAFF,GAGE//C,QAAQ,CAACnC,IAHX,GAIE,gBAJF,GAKG,KAAK+E,KAAL,CAAWoiC,SAAX,CAAkCnnC,IALrC,GAME,GAPC,CAAL;AASD;;AAED,WAAO,KAAKoV,GAAL,CAAS+sC,SAAS,CAACrmD,IAAV,CAAerI,QAAf,EAAT,CAAP;AACD,GAtBD;;;;;;AA2BQikD,qCAAR,UAAsBwK,OAAtB,EAAqC;AACnC,QAAI,KAAKn9C,KAAL,KAAe,IAAnB,EAAyB;AACvBlO,WAAK,CAAC,iBAAiBqrD,OAAjB,GAA2B,yBAA5B,CAAL;AACD;AACF,GAJO;;;AAORxK;AACExyC,0BAAiB,oBAAjBA,EAAuC,CAAvCA,EAA0C,CAA1CA,EAA6CC,SAAS,CAAC7P,MAAvD4P;AACA,SAAK88C,aAAL,CAAmB,WAAnB;AACA,SAAKj9C,KAAL,CAAWqsC,SAAX;AACD,GAJD;;AAMAsG;AACExyC,0BAAiB,mBAAjBA,EAAsC,CAAtCA,EAAyC,CAAzCA,EAA4CC,SAAS,CAAC7P,MAAtD4P;AACA,SAAK88C,aAAL,CAAmB,UAAnB;AACA,SAAKj9C,KAAL,CAAWiyC,MAAX;AACD,GAJD;;AAxGgBU,yBAAc;AAC5B0K,aAAS,EAAE;AACT,aAAO;AADE,KADiB;AAI5BC,aAAS,EAAE,UAACjmC,KAAD,EAAc;AACvB,aAAO;AACL,eAAO;AACL,uBAAaA;AADR;AADF,OAAP;AAKD;AAV2B,GAAd;AA6GlB;AAjHA;;AAmHA;AAAA;AAAA;;AAEE,6BAAmB4/B,QAAnB,EAAqC;AAAlB;AAAsB;;;;AAGnC+F,uCAAN;;;;AAEG,aAAK/F,QAAL,CAAsBgG,aAAtB,CAAoC,QAApC;;AAEDV,mBAAW,CAACpV,WAAZ,GAA0BoW,UAA1B,CAAsC,KAAKtG,QAAL,CAAsBj3C,KAA5D;;AAEC,aAAKi3C,QAAL,CAAsBj3C,KAAtB,GAA8B,IAA9B;;AAEA,aAAKi3C,QAAL,CAAsBxvC,KAAtB,GAA8B,IAA9B;AACD,aAAKwvC,QAAL,CAAc8F,QAAd,GAAyB,IAAzB;AACA,aAAK9F,QAAL,GAAgB,IAAhB;;;;;;AACD,GAXK;;AAYR;AAAC,CAjBD;ACrJA;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;AAQO,IAAMuG,gBAAgB,GAAG;AAC9Brf,qBAAmB,CAACsf,aAApB;AACA9lB,uBAAqB,CAAC+lB,UAAtB;AACD,CAHM;;AAKA,IAAMC,eAAe,GAAG;AAC7BhmB,uBAAqB,CAAC8lB,aAAtB;AACD,CAFM;AAIP;;;AACO,IAAM3c,qBAAqB,GAAG;AACnC,SAAO3C,mBAAmB,CAAC,aAAD,CAAnB,EAAP;AACD,CAFM;;AAIA,IAAMyf,wBAAwB,GAAG,UACtCvtC,GADsC,EAEtCkD,QAFsC,EAET;;AAG5BlD,KAAG,CAACgC,IAAJ,CAASu8B,qBAAT,CAAuC7B,sBAAvC,GAAgEx5B,QAAhE;AACF,CANM;;AAQA,IAAM8f,KAAK,GAAG,UAAShjB,GAAT,EAAyB6hC,SAAzB,EAA4C;AAC/D7hC,KAAG,CAACgC,IAAJ,CAASghB,KAAT,CAAe6e,SAAf;AACD,CAFM;;AAIA,IAAM2L,qBAAqB,GAAG,UAASxtC,GAAT,EAAyBmiC,MAAzB,EAAuC;AAC1EniC,KAAG,CAACgC,IAAJ,CAASwrC,qBAAT,CAA+BrL,MAA/B;AACD,CAFM;;AAIA,IAAMxC,eAAe,GAAG,UAAS3/B,GAAT,EAAuB;AACpD,SAAOA,GAAG,CAACgC,IAAJ,CAAS29B,eAAhB;AACD,CAFM;;AAIA,IAAM8N,mBAAmB,GAAG,UACjCztC,GADiC,EAEjCkD,QAFiC,EAEiB;AAElD,SAAOlD,GAAG,CAACgC,IAAJ,CAAS0rC,oBAAT,CAA8BxqC,QAA9B,CAAP;AACD,CALM;;;;;;;;;;;;;AC/DP;;;;;;;;;;;;;;;;;AAuBO,IAAMyqC,cAAc,GAAGhX,oBAAvB;AAEP;;;;AAIA;;AACCA,oBAAoB,CAAC4R,SAArB,CAAuCqF,YAAvC,GAAsD,UACrD7lD,UADqD,EAErD8H,UAFqD,EAErB;AAEhC,OAAKynC,WAAL,CAAiB,GAAjB,EAAsB;AAAEO,KAAC,EAAE9vC;AAAL,GAAtB,EAAyC8H,UAAzC;AACD,CALA;AAOD;;;;AAIA;;;AACC8mC,oBAAoB,CAAC4R,SAArB,CAAuCsF,IAAvC,GAA8C,UAC7C5rD,IAD6C,EAE7C6rD,MAF6C,EAEjB;AAE5B,OAAKxW,WAAL,CAAiB,MAAjB,EAAyB;AAAEtL,KAAC,EAAE/pC;AAAL,GAAzB,EAAsC6rD,MAAtC;AACD,CALA,C,CAOD;;;AACO,IAAMC,kBAAkB,GAAG3b,UAA3B;AAEP;;;;;AAIO,IAAM4b,UAAU,GAAG,UAASC,OAAT,EAA8B;AACtD,MAAMC,MAAM,GAAGvX,oBAAoB,CAAC4R,SAArB,CAA+BnM,GAA9C;;AACAzF,sBAAoB,CAAC4R,SAArB,CAA+BnM,GAA/B,GAAqC,UACnCr0C,UADmC,EAEnC9F,IAFmC,EAGnC4N,UAHmC,EAInCqM,IAJmC,EAI/B;AAEJ,QAAIA,IAAI,KAAK/N,SAAb,EAAwB;AACtB+N,UAAI,GAAG+xC,OAAO,EAAd;AACD;;AACDC,UAAM,CAACjtC,IAAP,CAAY,IAAZ,EAAkBlZ,UAAlB,EAA8B9F,IAA9B,EAAoC4N,UAApC,EAAgDqM,IAAhD;AACD,GAVD;;AAWA,SAAO;AACLy6B,wBAAoB,CAAC4R,SAArB,CAA+BnM,GAA/B,GAAqC8R,MAArC;AACD,GAFD;AAGD,CAhBM;AAkBP;;;;;AAGO,IAAMC,gBAAgB,GAAG/iD,QAAzB;AAEP;;;;;AAIO,IAAMwa,eAAe,GAAG,UAASpf,KAAT,EAAqB;AAClD,SAAOA,KAAK,CAACof,eAAN,EAAP;AACD,CAFM;AAIP;;;;;;;AAKO,IAAMs4B,eAAe,GAAG,UAASA,eAAT,EAAiC;AAC9DgO,aAAW,CAACpV,WAAZ,GAA0BoH,eAA1B,CAA0CA,eAA1C;AACD,CAFM;;;;;;;;;;;;;AC5FP;;;;;;;;;;;;;;;;;IAmCMkQ,WAAW,GAAG9L,QAAQ,CAAC8L;;SAEbC,iBAAiBC,UAA2B;;AAE1D/gB,eAAa,CAAC+gB,QAAQ,CAAChhB,WAAV,CAAb,CAF0D;;AAK1D,MAAMxiC,SAAS,GAAIwjD,QAA+B,CAAC5B,QAAhC,CAAyC6B,iBAAzC,CACjB,IAAIC,mBAAJ,CACE,UADF,EAEE,UAAC5qC,SAAD,EAAY4oB,GAAZ,EAAe;;;AAGb,QAAM2R,GAAG,GAAGv6B,SAAS,CAAC6qC,WAAV,CAAsB,KAAtB,EAA6B3tB,YAA7B,EAAZ;AACA,QAAMsd,YAAY,GAAGx6B,SAAS,CAAC6qC,WAAV,CAAsB,eAAtB,CAArB;AAEA,WAAOvC,WAAW,CAACpV,WAAZ,GAA0B4X,eAA1B,CACLvQ,GADK,EAELC,YAFK,EAGL5R,GAHK,CAAP;AAKD,GAbH,EAaG;AAAA;AAbH,IAgBGmiB,eAhBH;AAkBI;AACEjI,aAAS,WADX;AAEEvkC,SAAK,OAFP;AAGEmgC,YAAQ,UAHV;AAIEljC,gBAAY,cAJd;AAKE3e,iBAAa,eALf;AAMEisD,YAAQ,UANV;AAOE0B,eAAW,aAPb;AAQEQ,eAAW;AARb,GAlBJ,EA6BGC,oBA7BH,CA6BwB,IA7BxB,CADiB,CAAnB;AAiCAP,UAAQ,CAACQ,eAAT,CAAyB3wD,IAAzB,EAA+BqvC,OAA/B;;AAEA,MAAIjrC,gBAAJ,EAAiB;AACfwsD,UAAM,CAACC,OAAP,GAAiBlkD,SAAjB;AACD;AACF;;AAEDujD,gBAAgB,CAACY,QAAD,CAAhB","names":["domStorage_","DOMStorageWrapper","key","value","removeItem","prefixedName_","setItem","stringify","storedVal","getItem","jsonEval","name","prefix_","toString","MemoryStorage","cache_","contains","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","str","utf8Bytes","stringToByteArray","Sha1","update","sha1Bytes","digest","base64","encodeByteArray","buildLogMessage_","varArgs","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","assert","logLevel","LogLevel","VERBOSE","log","bind","set","remove","get","logWrapper","prefix","tslib","error","fatal","Error","warn","warnIfPageIsSecure","location","protocol","indexOf","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","isNodeSdk","document","readyState","called_1","wrappedFn_1","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","hasOwnProperty","doubleToIEEE754String","v","ebits","fbits","bias","s","f","ln","Infinity","abs","pow","min","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","isChromeExtensionContentScript","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","path","toUpperCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","stack","beingCrawled","userAgent","search","setTimeoutNonBlocking","time","timeout","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","Object","Path","pathString","encodeURIComponent","String","begin","slice","pieces","childPathObj","childPieces","outerPath","innerPath","outer","getFront","inner","relativePath","popFront","left","right","leftKeys","rightKeys","cmp","other","getLength","j","errorPrefix_","parts_","byteLength_","max","stringLength","checkValid_","ValidationPath","child","last","pop","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN","LAST_SESSION_PARAM","WEBSOCKET","LONG_POLLING","host","secure","namespace","webSocketOnly","persistenceKey","includeNamespaceInQueryParams","domain","internalHost","RepoInfo","isCustomHost","newHost","isCacheableHost","type","params","connURL","needsQueryParam","pairs","toURLString","decodePath","pathStringDecoded","piece","decodeURIComponent","replace","decodeQuery","queryString","results","charAt","_c","segment","kv","parseRepoInfo","dataURL","parsedUrl","parseDatabaseURL","scheme","repoInfo","subdomain","port","colonInd","slashInd","questionMarkInd","queryParams","parts","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","undefined","validateFirebaseData","errorPrefixFxn","errorPrefix","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergePaths","mergePaths","curPath","comparePaths","prevPath","validateFirebaseMergeDataArg","getBack","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","validateBoolean","bool","repo_","OnDisconnect","onComplete","validateArgCount","arguments","validateCallback","deferred","Deferred","onDisconnectCancel","wrapCallback","promise","onDisconnectSet","onDisconnectSetWithPriority","objectToMerge","newObjectToMerge","onDisconnectUpdate","committed","snapshot","TransactionResult","toJSON","nextPushId","PUSH_CHARS","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","random","node","NamedNode","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","__EMPTY_NODE","__extends","KeyIndex","val","assertionError","indexValue","KEY_INDEX","MAX_NODE","setMaxNode","priorityHashText","validatePriorityNode","priorityNode","isLeafNode","isEmpty","getPriority","__childrenNodeConstructor","value_","priorityNode_","LeafNode","EMPTY_NODE","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","index","action","exportFormat","getValue","lazyHash_","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","nodeFromJSON","setNodeFromJSON","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","SortedMapIterator","result","color","LLRBNode","RED","SortedMap","count","inorderTraversal","reverseTraversal","min_","maxKey","n","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","LLRBEmptyNode","comparator_","root_","BLACK","rightParent","minKey","resultGenerator","LOG_2","logBase2","num","bitMask","current_","mask","bits_","Base12Num","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","buildFrom12Array","base12","root","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","_defaultIndexMap","fallbackObject","indexes_","indexSet_","IndexMap","indexKey","sortedMap","safeGet","indexDefinition","existingChildren","sawIndexedValue","iter","getIterator","Wrap","next","getNext","isDefinedOn","newIndex","getCompare","indexName","newIndexSet","newIndexes","map","indexedChildren","_this","existingSnap","newChildren","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","children_","indexMap_","ChildrenNode","Default","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","toHash_1","childHash","hash","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","_super","MaxNode","defineProperties","MAX","setPriorityMaxNode","USE_HINZE","json","jsonLeaf","children_1","childrenHavePriority_1","hinzeJsonObj","childSet","sortedChildSet","node_1","childData","ValueIndex","valueNode","VALUE_INDEX","indexPath_","PathIndex","snap","aChild","extractChild","bChild","node_","ref_","index_","DataSnapshot","exportVal","childPathString","childPath","childRef","childrenNode","getKey","numChildren","getRef","eventRegistration","prevName","DataEvent","ref","getParent","getEventRunner","getPath","CancelEvent","callback_","cancelCallback_","context_","ValueEventRegistration","change","getQueryParams","getIndex","snapshotNode","eventData","ctx","getEventType","cancelCB_1","call","cb_1","callbacks_","ChildEventRegistration","eventToCheck","cancelCB_2","cb_2","otherKeys","thisKeys","otherCount","thisCount","otherKey","thisKey","every","__referenceConstructor","repo","queryParams_","orderByCalled_","Query","startNode","endNode","hasStart","getIndexStartValue","hasEnd","getIndexEndValue","tooManyArgsError","wrongArgTypeError","startName","getIndexStartName","endName","getIndexEndName","hasLimit","hasAnchoredLimit","callback","cancelCallbackOrContext","context","ret","getCancelAndContextArgs_","onValueEvent","cancel","callbacks","onChildEvent","cancelCallback","container","addEventCallbackForQuery","validateContextObject","valueCallback","removeEventCallbackForQuery","userCallback","failureCallbackOrContext","firstCall","catch","onceCallback","off","resolve","on","err","reject","limit","limitToFirst","limitToLast","validateNoPreviousOrderByCall_","parsedPath","newParams","orderBy","validateQueryEndpoints_","startAt","validateLimit_","endAt","toUrlEncodedString","getQueryObject","queryObject","sameRepo","samePath","sameQueryIdentifier","queryIdentifier","cancelOrContext","ExistingValueProvider","syncTree","syncTree_","DeferredValueProvider","calcCompleteEventCache","generateWithValues","values","Date","getTime","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","op","existing","unused","delta","existingNode","leaf","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","Map","SparseSnapshotTree","children","size","childKey","has","find","clear","remember","self_1","tree","forget","safeToRemove","delete","prefixPath","func","forEachTree","forEach","OperationType","fromUser","fromServer","queryId","tagged","OperationSource","affectedTree","revert","ACK_USER_WRITE","User","AckUserWrite","subtree","Empty","emptyChildrenSingleton","EmptyChildren","ImmutableTree","childSnap","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","fullPath","toSet","newChild","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","nextChild","foreachOnPath_","currentRelativePath","foreach_","source","LISTEN_COMPLETE","ListenComplete","OVERWRITE","Overwrite","MERGE","Merge","fullyInitialized_","filtered_","CacheNode","isFullyInitialized","isCompleteForChild","hasChild","eventCache_","serverCache_","ViewCache","eventSnap","complete","filtered","serverSnap","getNode","oldSnap","Change","VALUE","CHILD_ADDED","CHILD_REMOVED","newSnapshot","oldSnapshot","CHILD_CHANGED","CHILD_MOVED","IndexedFilter","affectedPath","optChangeAccumulator","isIndexed","oldChild","trackChildChange","childRemovedChange","childAddedChange","childChangedChange","withIndex","newSnap","ChildChangeAccumulator","oldChange","changeMap","oldType","from","NoCompleteChildSource_","NO_COMPLETE_CHILD_SOURCE","writes_","viewCache_","optCompleteServerCache_","WriteTreeCompleteChildSource","getEventCache","serverNode","getServerCache","calcCompleteChild","completeServerData","getCompleteServerSnap","nodes","calcIndexedSlice","viewCache","changes","filter_","ViewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","newViewCache","filterServerNode","overwrite","applyUserOverwrite_","isFiltered","applyServerOverwrite_","merge","applyUserMerge_","applyServerMerge_","ackUserWrite","ackUserWrite_","revertUserWrite_","listenComplete_","getChanges","maybeAddValueEvent_","ProcessorResult","isLeafOrEmpty","oldCompleteSnap","getCompleteEventSnap","valueChange","changePath","oldEventSnap","shadowingWrite","newEventCache","serverCache","completeChildren","completeEventChildren","calcCompleteEventChildren","updateFullNode","completeNode","oldEventNode","updatedPriority","calcEventCacheAfterServerOverwrite","childChangePath","newEventChild","eventChildUpdate","updateEventSnap","filtersNodes","changedSnap","oldServerSnap","newServerCache","serverFilter","getIndexedFilter","newServerNode","isCompleteForPath","updateServerSnap","generateEventCacheAfterServerEvent_","getCompleteChild","parent","newEventSnap","changedChildren","curViewCache","foreach","writePath","cacheHasChild_","viewMergeTree","serverChild","applyMerge_","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","completeServerCache","oldEventCache","serverChildren","query_","EventGenerator","eventCache","eventRegistrations","events","moves","indexedValueChanged","childMovedChange","generateEventsForType_","registrations","filteredChanges","filter","compareChanges_","materializedChange","materializeSingleChange_","registration","respondsTo","createEvent","getPredecessorChildName","aWrapped","bWrapped","initialViewCache","indexFilter","getNodeFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","View","cache","loadsAllData","eventRegistrations_","cancelError","cancelEvents","path_1","maybeEvent","createCancelEvent","remaining","matches","hasAnyCallback","concat","applyOperation","assertIndexed","generateEventsForChanges_","initialChanges","eventNode","generateEventsForChanges","SyncPoint","views","optCompleteServerCache","view","serverCacheComplete","eventCacheComplete","addEventRegistration","getInitialEvents","removed","hadCompleteView","hasCompleteView","entries","viewQueryId","removeEventRegistration","getQuery","getCompleteServerCache","getCompleteView","viewForQuery","writeTree_","CompoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree","updates","newWrite","addWrite","getCompleteNode","shadowingNode","applySubtreeWrite","writeTree","priorityWrite_1","WriteTree","WriteTreeRef","writeId","visible","lastWriteId_","allWrites_","visibleWrites_","addWrites","record","findIndex","writeToRemove","splice","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","removeWrite","treePath","writeIdsToExclude","includeHiddenWrites","subMerge","childCompoundWrite","hasCompleteWrite","layeredCache","write","mergeAtPath","layerTree_","completeServerChildren","topLevelSet","merge_1","getCompleteChildren","existingEventSnap","existingServerSnap","childMerge","toIterate","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","deepNode","treePath_","existingServerCache","listenProvider_","SyncTree","newData","pendingWriteTree_","addOverwrite","applyOperationToSyncPoints_","addMerge","changeTree","fromObject","getWrite","needToReevaluate","affectedTree_1","Server","tag","queryKey","queryKeyForTag_","r","parseQueryKey_","queryPath","forServerTaggedQuery","applyTaggedOperation_","foundAncestorDefaultView","syncPointTree_","foreachOnPath","pathToSyncPoint","sp","syncPoint","foreachChild","childSyncPoint","viewAlreadyExists","viewExistsForQuery","makeQueryKey_","queryToTagMap","getNextQueryTag_","tagToQueryMap","childWrites","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","findOnPath","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","listener","createListenerForView_","startListening","queryForListening_","tagForQuery_","hashFn","defaultTag","stopListening","queryToRemove","tagToRemove","removeTags_","includeHiddenSets","fold","maybeChildSyncPoint","childMap","completeView","views_1","getQueryViews","_key","childViews","queries","removedQuery","removedQueryKey","removedQueryTag","isDefault","queriesToStop","queries_1","childQueries","queryToStop","status","applyTaggedListenComplete","applyListenComplete","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","SnapshotHolder","rootNode_","newSnapshotNode","app_","authProvider_","auth_","getImmediate","then","auth","AuthTokenProvider","forceRefresh","Promise","getToken","addAuthTokenListener","removeAuthTokenListener","errorMessage","options","StatsCollection","amount","counters_","deepCopy","StatsManager","hashString","collections_","creatorFunction","reporters_","collection_","StatsListener","newStats","last_","stat","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","REPORT_STATS_INTERVAL","collection","server_","statsListener_","reportStats_","StatsReporter","statsToReport_","stats","reportedStats","haveStatsToReport","reportStats","EventQueue","eventDataList","currList","eventPath","eventLists_","EventList","add","queueEvents","raiseQueuedEventsMatchingPredicate_","changedPath","recursionDepth_","sentAll","eventList","raise","events_","eventFn","allowedEvents_","EventEmitter","listeners_","listeners","validateEventType_","getInitialEvent","et","hidden","visibilityChange","visible_","trigger","VisibilityMonitor","isMobileCordova","online_","OnlineMonitor","onMessage_","PacketReceiver","responseNum","closeAfterResponse","onClose","currentResponseNum","requestNum","pendingResponses","toProcess","this_1","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","MAX_URL_DATA_SIZE","SEG_HEADER_SIZE","MAX_PAYLOAD_SIZE","KEEPALIVE_REQUEST_INTERVAL","LP_CONNECT_TIMEOUT","connId","transportSessionId","lastSessionId","log_","stats_","getCollection","urlFn","connectionURL","BrowserPollConnection","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","uniqueCallbackIdentifier","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow_","forceDisallow_","createElement","close","myDisconnFrame","removeChild","shutdown_","dataStr","bytesSent","incrementCounter","base64data","base64Encode","enqueueSegment","pw","src","style","display","appendChild","bytesReceived","commandCB","onMessageCB","Set","myIFrame","createIFrame_","script","currentDomain","iframeContents","doc","open","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","outstandingRequests","pendingSegs","currentSerial","theURL","curDataString","nextSeg","d","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","doNewRequest","keepaliveTimeout","readyStateCB","loadCB","doNodeLongPoll","newScript_1","async","onload","onreadystatechange","rstate","parentNode","onerror","SDK_VERSION","setSDKVersion","version","WEBSOCKET_MAX_FRAME_SIZE","WEBSOCKET_KEEPALIVE_INTERVAL","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","device","ENV_CONSTANTS","NODE_ADMIN","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","handleIncomingFrame","m","isOldAndroid","navigator","oldAndroidRegex","oldAndroidMatch","match","parseFloat","isInMemoryStorage","frames","totalFrames","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","keepaliveTimer","clearInterval","setInterval","send","initTransports_","TransportManager","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","__values","transport","UPGRADE_TIMEOUT","DELAY_BEFORE_SENDING_EXTRA_REQUESTS","BYTES_SENT_HEALTHY_OVERRIDE","BYTES_RECEIVED_HEALTHY_OVERRIDE","MESSAGE_TYPE","MESSAGE_DATA","CONTROL_SHUTDOWN","CONTROL_RESET","CONTROL_ERROR","CONTROL_PONG","SWITCH_ACK","END_TRANSMISSION","PING","SERVER_HELLO","repoInfo_","onReady_","onKill_","transportManager_","start_","Connection","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","connectionCount","onConnectionLost_","everConnected","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","pendingDataMessages","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","updateHost","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","ServerActions","token","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","RECONNECT_MAX_DELAY_FOR_ADMINS","RECONNECT_DELAY_MULTIPLIER","RECONNECT_DELAY_RESET_TIMEOUT","SERVER_KILL_INTERRUPT_REASON","INVALID_AUTH_TOKEN_THRESHOLD","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","authOverride_","PersistentConnection","nextPersistentConnectionId_","scheduleConnect_","getInstance","onVisible_","onOnline_","onResponse","curReqNum","requestNumber_","connected_","realtime_","sendRequest","requestCBHash_","currentHashFn","listens","listenSpec","sendListen_","req","p","warnOnListenWarnings_","currentListenSpec","removeListen_","warnings","indexSpec","indexPath","authToken_","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isFirebaseSecret","isAdmin","maxReconnectDelay_","token_1","authMethod","isValidFormat","requestData","cred","res","invalidAuthTokenCount_","onAuthRevoked_","listen","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","request","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","establishConnectionTimer_","establishConnection_","reconnectDelay_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectSucceeded","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","onDisconnect_1","onRealtimeDisconnect_","connId_1","nextConnectionId_","lastSessionId_1","canceled_1","connection_1","closeFn_1","sendRequestFn","forceTokenRefresh_","accessToken","interrupt","CONSTANTS","interruptReasons_","serverTimeOffset","put","q","normalizedPathString","statusCode","explanation","notifyForInvalidToken","securityDebugCallback_","console","_d","_f","clientName","NODE_CLIENT","isReactNative","currentlyOnline","ReadonlyRestClient","listenId","getListenId_","thisListen","listens_","queryStringParameters","toRestQueryStringParameters","restRequest_","status_1","authToken","authTokenData","querystring","xhr","XMLHttpRequest","responseText","INTERRUPT_REASON","forceRestClient","app","authProvider","authTokenProvider","authOverride","persistentConnection_","addTokenChangeListener","refreshAuthToken","statsReporter_","getOrCreateReporter","transactionsInit_","infoData_","infoSyncTree_","infoEvents","applyServerOverwrite","updateInfo_","serverSyncTree_","eventQueue_","raiseEventsForChangedPath","unlisten","Repo","offsetNode","offset","serverTime","isMerge","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","applyTaggedQueryMerge","taggedSnap","applyTaggedQueryOverwrite","applyServerMerge","rerunTransactions_","connectStatus","runOnDisconnectEvents_","updateSnapshot","nextWriteId_","newVal","generateServerValues","newNodeUnresolved","getNextWriteId_","applyUserOverwrite","success","clearEvents","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","applyUserMerge","resolvedOnDisconnectTree","resolved","onDisconnectPut","onDisconnectMerge","raiseEventsAtPath","resume","showDelta","longestName","reduce","previousValue","currentValue","paddedStat","metric","includeStat","__database","Database","indexedFilter_","startPost_","RangedFilter","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","self","makePost","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","LimitedFilter","fullLimitUpdateChild_","hasNext","inRange","getReverseIterator","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","oldChildSnap","getChildAfterChild","compareNext","remainsInWindow","nextChildInRange","QueryParams","startSet_","viewFrom_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","limitSet_","newLimit","copy_","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","DEFAULT","Reference","parentPath","database","setWithPriority","transactionUpdate","applyLocally","promiseComplete","startTransaction","thennablePushRef","pushRef","databaseProp","getRoot","name_","parent_","TreeNode","Tree","pathObj","updateParents_","childCount","hasChildren","includeSelf","childrenFirst","forEachDescendant","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","TransactionStatus","MAX_TRANSACTION_RETRIES_","prototype","transactionQueueTree_","watchRef","unwatcher","transaction","order","retryCount","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","RUN","queueNode","subTree","nodeQueue","setValue","priorityForNode","currentNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","allRun","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","SENT","dataToSend","pathToSend","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","txnsToRerun","abortTransaction","newDataNode","hasExplicitPriority","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","forEachAncestor","abortTransactionsOnNode_","lastSent","DATABASE_URL_OPTION","FIREBASE_DATABASE_EMULATOR_HOST_VAR","_staticInstance","RepoManager","repos_","appName","dbUrl","dbEmulatorHost","createRepo","appRepos","useRestClient_","INTERNAL","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","TIMESTAMP","increment","deleteRepo","forceLongPolling","forceDisallow","forceAllow","forceWebSockets","setSecurityDebugCallback","statsIncrementCounter","interceptServerData","interceptServerData_","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","hijackHash","newHash","oldPut","ConnectionTarget","ServerValue","registerDatabase","instance","registerComponent","Component","getProvider","databaseFromApp","setServiceProps","TEST_ACCESS","setMultipleInstances","registerVersion","module","exports","firebase"],"sources":["../src/core/storage/DOMStorageWrapper.ts","../src/core/storage/MemoryStorage.ts","../src/core/storage/storage.ts","../src/core/util/util.ts","../src/core/util/Path.ts","../src/realtime/Constants.ts","../src/core/RepoInfo.ts","../src/core/util/libs/parser.ts","../src/core/util/validation.ts","../src/api/onDisconnect.ts","../src/api/TransactionResult.ts","../src/core/util/NextPushId.ts","../src/core/snap/Node.ts","../src/core/snap/indexes/Index.ts","../src/core/snap/indexes/KeyIndex.ts","../src/core/snap/snap.ts","../src/core/snap/LeafNode.ts","../src/core/snap/indexes/PriorityIndex.ts","../src/core/util/SortedMap.ts","../src/core/snap/childSet.ts","../src/core/snap/IndexMap.ts","../src/core/snap/comparators.ts","../src/core/snap/ChildrenNode.ts","../src/core/snap/nodeFromJSON.ts","../src/core/snap/indexes/ValueIndex.ts","../src/core/snap/indexes/PathIndex.ts","../src/api/DataSnapshot.ts","../src/core/view/Event.ts","../src/core/view/EventRegistration.ts","../src/api/Query.ts","../src/core/util/ServerValues.ts","../src/core/SparseSnapshotTree.ts","../src/core/operation/Operation.ts","../src/core/operation/AckUserWrite.ts","../src/core/util/ImmutableTree.ts","../src/core/operation/ListenComplete.ts","../src/core/operation/Overwrite.ts","../src/core/operation/Merge.ts","../src/core/view/CacheNode.ts","../src/core/view/ViewCache.ts","../src/core/view/Change.ts","../src/core/view/filter/IndexedFilter.ts","../src/core/view/ChildChangeAccumulator.ts","../src/core/view/CompleteChildSource.ts","../src/core/view/ViewProcessor.ts","../src/core/view/EventGenerator.ts","../src/core/view/View.ts","../src/core/SyncPoint.ts","../src/core/CompoundWrite.ts","../src/core/WriteTree.ts","../src/core/SyncTree.ts","../src/core/SnapshotHolder.ts","../src/core/AuthTokenProvider.ts","../src/core/stats/StatsCollection.ts","../src/core/stats/StatsManager.ts","../src/core/stats/StatsListener.ts","../src/core/stats/StatsReporter.ts","../src/core/view/EventQueue.ts","../src/core/util/EventEmitter.ts","../src/core/util/VisibilityMonitor.ts","../src/core/util/OnlineMonitor.ts","../src/realtime/polling/PacketReceiver.ts","../src/realtime/BrowserPollConnection.ts","../src/core/version.ts","../src/realtime/WebSocketConnection.ts","../src/realtime/TransportManager.ts","../src/realtime/Connection.ts","../src/core/ServerActions.ts","../src/core/PersistentConnection.ts","../src/core/ReadonlyRestClient.ts","../src/core/Repo.ts","../src/core/view/filter/RangedFilter.ts","../src/core/view/filter/LimitedFilter.ts","../src/core/view/QueryParams.ts","../src/api/Reference.ts","../src/core/util/Tree.ts","../src/core/Repo_transaction.ts","../src/core/RepoManager.ts","../src/api/Database.ts","../src/api/internal.ts","../src/api/test_access.ts","../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param {string} key The key to save the value under\n   * @param {?Object} value The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*} The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  /**\n   * @param {string} key\n   */\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param {string} domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return {?} Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function(\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../../api/Query';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { SessionStorage } from '../storage/storage';\nimport { Logger, LogLevel } from '@firebase/logger';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexport const LUIDGenerator: () => number = (function() {\n  let id = 1;\n  return function() {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexport const sha1 = function(str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\n/**\n * @param {...*} varArgs\n * @return {string}\n * @private\n */\nconst buildLogMessage_ = function(...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function(\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\n/**\n *\n * @param {...(string|Arguments)} varArgs\n */\nexport const log = function(...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexport const logWrapper = function(\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function(...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const error = function(...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\n/**\n * @param {...string} varArgs\n */\nexport const fatal = function(...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\n/**\n * @param {...*} varArgs\n */\nexport const warn = function(...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function() {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\n/**\n * @param {!String} methodName\n */\nexport const warnAboutUnsupportedMethod = function(methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexport const isInvalidJSONNumber = function(data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\n/**\n * @param {function()} fn\n */\nexport const executeWhenDOMReady = function(fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function() {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexport const nameCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexport const stringCompare = function(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexport const requireKey = function(\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\n/**\n * @param {*} obj\n * @return {string}\n */\nexport const ObjectToUniqueKey = function(obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function(\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj The object or array to iterate over\n * @param fn The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexport const bindCallback = function(\n  callback: (a: unknown) => void,\n  context?: object | null\n): Function {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexport const doubleToIEEE754String = function(v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexport const isChromeExtensionContentScript = function(): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexport const isWindowsStoreApp = function(): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexport const errorForServerCode = function(code: string, query: Query): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query.path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n};\n\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexport const tryParseInt = function(str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= -2147483648 && intVal <= 2147483647) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexport const exceptionGuard = function(fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} varArgs Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function(\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function(): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexport const exportPropGetter = function(\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function(\n  fn: Function,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from './util';\nimport { stringLength } from '@firebase/util';\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  private pieces_: string[];\n  private pieceNum_: number;\n\n  /**\n   * Singleton to represent an empty path\n   *\n   * @const\n   */\n  static get Empty() {\n    return new Path('');\n  }\n\n  /**\n   * @param {string|Array.<string>} pathOrString Path string to parse,\n   *      or another path, or the raw tokens array\n   * @param {number=} pieceNum\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  getFront(): string | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    return this.pieces_[this.pieceNum_];\n  }\n\n  /**\n   * @return {number} The number of segments in this path\n   */\n  getLength(): number {\n    return this.pieces_.length - this.pieceNum_;\n  }\n\n  /**\n   * @return {!Path}\n   */\n  popFront(): Path {\n    let pieceNum = this.pieceNum_;\n    if (pieceNum < this.pieces_.length) {\n      pieceNum++;\n    }\n    return new Path(this.pieces_, pieceNum);\n  }\n\n  /**\n   * @return {?string}\n   */\n  getBack(): string | null {\n    if (this.pieceNum_ < this.pieces_.length) {\n      return this.pieces_[this.pieces_.length - 1];\n    }\n\n    return null;\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  toUrlEncodedString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n      }\n    }\n\n    return pathString || '/';\n  }\n\n  /**\n   * Shallow copy of the parts of the path.\n   *\n   * @param {number=} begin\n   * @return {!Array<string>}\n   */\n  slice(begin: number = 0): string[] {\n    return this.pieces_.slice(this.pieceNum_ + begin);\n  }\n\n  /**\n   * @return {?Path}\n   */\n  parent(): Path | null {\n    if (this.pieceNum_ >= this.pieces_.length) {\n      return null;\n    }\n\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length - 1; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @param {string|!Path} childPathObj\n   * @return {!Path}\n   */\n  child(childPathObj: string | Path): Path {\n    const pieces = [];\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      pieces.push(this.pieces_[i]);\n    }\n\n    if (childPathObj instanceof Path) {\n      for (\n        let i = childPathObj.pieceNum_;\n        i < childPathObj.pieces_.length;\n        i++\n      ) {\n        pieces.push(childPathObj.pieces_[i]);\n      }\n    } else {\n      const childPieces = childPathObj.split('/');\n      for (let i = 0; i < childPieces.length; i++) {\n        if (childPieces[i].length > 0) {\n          pieces.push(childPieces[i]);\n        }\n      }\n    }\n\n    return new Path(pieces, 0);\n  }\n\n  /**\n   * @return {boolean} True if there are no segments in this path\n   */\n  isEmpty(): boolean {\n    return this.pieceNum_ >= this.pieces_.length;\n  }\n\n  /**\n   * @param {!Path} outerPath\n   * @param {!Path} innerPath\n   * @return {!Path} The path from outerPath to innerPath\n   */\n  static relativePath(outerPath: Path, innerPath: Path): Path {\n    const outer = outerPath.getFront(),\n      inner = innerPath.getFront();\n    if (outer === null) {\n      return innerPath;\n    } else if (outer === inner) {\n      return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n    } else {\n      throw new Error(\n        'INTERNAL ERROR: innerPath (' +\n          innerPath +\n          ') is not within ' +\n          'outerPath (' +\n          outerPath +\n          ')'\n      );\n    }\n  }\n\n  /**\n   * @param {!Path} left\n   * @param {!Path} right\n   * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n   */\n  static comparePaths(left: Path, right: Path): number {\n    const leftKeys = left.slice();\n    const rightKeys = right.slice();\n    for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n      const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n      if (cmp !== 0) {\n        return cmp;\n      }\n    }\n    if (leftKeys.length === rightKeys.length) {\n      return 0;\n    }\n    return leftKeys.length < rightKeys.length ? -1 : 1;\n  }\n\n  /**\n   *\n   * @param {Path} other\n   * @return {boolean} true if paths are the same.\n   */\n  equals(other: Path): boolean {\n    if (this.getLength() !== other.getLength()) {\n      return false;\n    }\n\n    for (\n      let i = this.pieceNum_, j = other.pieceNum_;\n      i <= this.pieces_.length;\n      i++, j++\n    ) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {!Path} other\n   * @return {boolean} True if this path is a parent (or the same as) other\n   */\n  contains(other: Path): boolean {\n    let i = this.pieceNum_;\n    let j = other.pieceNum_;\n    if (this.getLength() > other.getLength()) {\n      return false;\n    }\n    while (i < this.pieces_.length) {\n      if (this.pieces_[i] !== other.pieces_[j]) {\n        return false;\n      }\n      ++i;\n      ++j;\n    }\n    return true;\n  }\n} // end Path\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  /** @type {!Array<string>} */\n  private parts_: string[];\n  /** @type {number} Initialize to number of '/' chars needed in path. */\n  private byteLength_: number;\n\n  /**\n   * @param {!Path} path Initial Path.\n   * @param {string} errorPrefix_ Prefix for any error messages.\n   */\n  constructor(path: Path, private errorPrefix_: string) {\n    /** @type {!Array<string>} */\n    this.parts_ = path.slice();\n    /** @type {number} Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    this.checkValid_();\n  }\n\n  /** @const {number} Maximum key depth. */\n  static get MAX_PATH_DEPTH() {\n    return 32;\n  }\n\n  /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n  static get MAX_PATH_LENGTH_BYTES() {\n    return 768;\n  }\n\n  /** @param {string} child */\n  push(child: string) {\n    // Count the needed '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ += 1;\n    }\n    this.parts_.push(child);\n    this.byteLength_ += stringLength(child);\n    this.checkValid_();\n  }\n\n  pop() {\n    const last = this.parts_.pop();\n    this.byteLength_ -= stringLength(last);\n    // Un-count the previous '/'\n    if (this.parts_.length > 0) {\n      this.byteLength_ -= 1;\n    }\n  }\n\n  private checkValid_() {\n    if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n      throw new Error(\n        this.errorPrefix_ +\n          'has a key path longer than ' +\n          ValidationPath.MAX_PATH_LENGTH_BYTES +\n          ' bytes (' +\n          this.byteLength_ +\n          ').'\n      );\n    }\n    if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n      throw new Error(\n        this.errorPrefix_ +\n          'path specified exceeds the maximum depth that can be written (' +\n          ValidationPath.MAX_PATH_DEPTH +\n          ') or object contains a cycle ' +\n          this.toErrorString()\n      );\n    }\n  }\n\n  /**\n   * String for use in error messages - uses '.' notation for path.\n   *\n   * @return {string}\n   */\n  toErrorString(): string {\n    if (this.parts_.length === 0) {\n      return '';\n    }\n    return \"in property '\" + this.parts_.join('.') + \"'\";\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\nexport const FORGE_DOMAIN = 'firebaseio.com';\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { PersistentStorage } from './storage/storage';\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nexport class RepoInfo {\n  host: string;\n  domain: string;\n  internalHost: string;\n\n  /**\n   * @param {string} host Hostname portion of the url for the repo\n   * @param {boolean} secure Whether or not this repo is accessed over ssl\n   * @param {string} namespace The namespace represented by the repo\n   * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n   * @param {string=} persistenceKey Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public secure: boolean,\n    public namespace: string,\n    public webSocketOnly: boolean,\n    public persistenceKey: string = '',\n    public includeNamespaceInQueryParams: boolean = false\n  ) {\n    this.host = host.toLowerCase();\n    this.domain = this.host.substr(this.host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this.host;\n  }\n\n  needsQueryParam(): boolean {\n    return (\n      this.host !== this.internalHost ||\n      this.isCustomHost() ||\n      this.includeNamespaceInQueryParams\n    );\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isDemoHost() {\n    return this.domain === 'firebaseio-demo.com';\n  }\n\n  isCustomHost() {\n    return (\n      this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  updateHost(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this.host, this.internalHost);\n      }\n    }\n  }\n\n  /**\n   * Returns the websocket URL for this repo\n   * @param {string} type of connection\n   * @param {Object} params list\n   * @return {string} The URL for this repo\n   */\n  connectionURL(type: string, params: { [k: string]: string }): string {\n    assert(typeof type === 'string', 'typeof type must == string');\n    assert(typeof params === 'object', 'typeof params must == object');\n\n    let connURL: string;\n    if (type === WEBSOCKET) {\n      connURL =\n        (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n    } else if (type === LONG_POLLING) {\n      connURL =\n        (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n    } else {\n      throw new Error('Unknown connection type: ' + type);\n    }\n    if (this.needsQueryParam()) {\n      params['ns'] = this.namespace;\n    }\n\n    const pairs: string[] = [];\n\n    each(params, (key: string, value: string) => {\n      pairs.push(key + '=' + value);\n    });\n\n    return connURL + pairs.join('&');\n  }\n\n  /** @return {string} */\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  /** @return {string} */\n  toURLString(): string {\n    return (this.secure ? 'https://' : 'http://') + this.host;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../Path';\nimport { RepoInfo } from '../../RepoInfo';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @param {!string} queryString\n * @return {!{[key:string]:string}} key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\n/**\n *\n * @param {!string} dataURL\n * @return {{repoInfo: !RepoInfo, path: !Path}}\n */\nexport const parseRepoInfo = function(\n  dataURL: string\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string, namespace: string}}\n */\nexport const parseDatabaseURL = function(\n  dataURL: string\n): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = dataURL.length;\n    }\n\n    const parts = host.split('.');\n    if (parts.length === 3) {\n      // Normalize namespaces to lowercase to share storage / connection.\n      domain = parts[1];\n      subdomain = parts[0].toLowerCase();\n      // We interpret the subdomain of a 3 component URL as the namespace name.\n      namespace = subdomain;\n    } else if (parts.length === 2) {\n      domain = parts[0];\n    } else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, ValidationPath } from './Path';\nimport {\n  contains,\n  safeGet,\n  errorPrefix as errorPrefixFxn,\n  stringLength\n} from '@firebase/util';\nimport { isInvalidJSONNumber, each } from './util';\n\nimport { RepoInfo } from '../RepoInfo';\n\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\n/**\n * @param {*} key\n * @return {boolean}\n */\nexport const isValidKey = function(key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidPathString = function(pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexport const isValidRootPathString = function(pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexport const isValidPriority = function(priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  validateFirebaseData(\n    errorPrefixFxn(fnName, argumentNumber, optional),\n    data,\n    path\n  );\n};\n\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexport const validateFirebaseData = function(\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        path.toErrorString() +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString()\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        path.toErrorString() +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              path.toErrorString() +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      path.push(key);\n      validateFirebaseData(errorPrefix, value, path);\n      path.pop();\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          path.toErrorString() +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexport const validateFirebaseMergePaths = function(\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = curPath.slice();\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(Path.comparePaths);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && prevPath.contains(curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexport const validateFirebaseMergeDataArg = function(\n  fnName: string,\n  argumentNumber: number,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, argumentNumber, optional);\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, path.child(curPath));\n    if (curPath.getBack() === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function(\n  fnName: string,\n  argumentNumber: number,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateEventType = function(\n  fnName: string,\n  argumentNumber: number,\n  eventType: string,\n  optional: boolean\n) {\n  if (optional && eventType === undefined) {\n    return;\n  }\n\n  switch (eventType) {\n    case 'value':\n    case 'child_added':\n    case 'child_removed':\n    case 'child_changed':\n    case 'child_moved':\n      break;\n    default:\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n          '\"child_changed\", or \"child_moved\".'\n      );\n  }\n};\n\nexport const validateKey = function(\n  fnName: string,\n  argumentNumber: number,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\nexport const validatePathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function(\n  fnName: string,\n  argumentNumber: number,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentNumber, pathString, optional);\n};\n\nexport const validateWritablePath = function(fnName: string, path: Path) {\n  if (path.getFront() === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function(\n  fnName: string,\n  argumentNumber: number,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, false) +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateCredential = function(\n  fnName: string,\n  argumentNumber: number,\n  cred: unknown,\n  optional: boolean\n) {\n  if (optional && cred === undefined) {\n    return;\n  }\n  if (!(typeof cred === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid credential (a string).'\n    );\n  }\n};\n\nexport const validateBoolean = function(\n  fnName: string,\n  argumentNumber: number,\n  bool: unknown,\n  optional: boolean\n) {\n  if (optional && bool === undefined) {\n    return;\n  }\n  if (typeof bool !== 'boolean') {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) + 'must be a boolean.'\n    );\n  }\n};\n\nexport const validateString = function(\n  fnName: string,\n  argumentNumber: number,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentNumber, optional) +\n        'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function(\n  fnName: string,\n  argumentNumber: number,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentNumber, optional) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentNumber, optional) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\nimport {\n  validateWritablePath,\n  validateFirebaseDataArg,\n  validatePriority,\n  validateFirebaseMergeDataArg\n} from '../core/util/validation';\nimport { warn } from '../core/util/util';\n\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { Indexable } from '../core/util/misc';\n\n/**\n * @constructor\n */\nexport class OnDisconnect {\n  /**\n   * @param {!Repo} repo_\n   * @param {!Path} path_\n   */\n  constructor(private repo_: Repo, private path_: Path) {}\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  cancel(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n    validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectCancel(\n      this.path_,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n    validateWritablePath('OnDisconnect.remove', this.path_);\n    validateCallback('OnDisconnect.remove', 1, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  set(value: unknown, onComplete?: (a: Error | null) => void): Promise<void> {\n    validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.set', this.path_);\n    validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n    validateCallback('OnDisconnect.set', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSet(\n      this.path_,\n      value,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} value\n   * @param {number|string|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      1,\n      value,\n      this.path_,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n    validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectSetWithPriority(\n      this.path_,\n      value,\n      priority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!firebase.Promise}\n   */\n  update(\n    objectToMerge: Indexable,\n    onComplete?: (a: Error | null) => void\n  ): Promise<void> {\n    validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n    validateWritablePath('OnDisconnect.update', this.path_);\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n          'existing data, or an Object with integer keys if you really do want to only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      1,\n      objectToMerge,\n      this.path_,\n      false\n    );\n    validateCallback('OnDisconnect.update', 2, onComplete, true);\n    const deferred = new Deferred<void>();\n    this.repo_.onDisconnectUpdate(\n      this.path_,\n      objectToMerge,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from './DataSnapshot';\nimport { validateArgCount } from '@firebase/util';\n\nexport class TransactionResult {\n  /**\n   * A type for the resolve value of Firebase.transaction.\n   * @constructor\n   * @dict\n   * @param {boolean} committed\n   * @param {DataSnapshot} snapshot\n   */\n  constructor(public committed: boolean, public snapshot: DataSnapshot) {}\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): object {\n    validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function() {\n  // Modeled after base64 web-safe chars, but ordered by ASCII.\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function(now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @return {boolean} Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @return {!Node} The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param {!Node} newPriorityNode New priority to set for the node.\n   * @return {!Node} Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param {string} childName The name of the child to retrieve.\n   * @return {!Node} The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param {!Path} path The path of the child to retrieve.\n   * @return {!Node} The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param {!string} childName The name of the child to find the predecessor of.\n   * @param {!Node} childNode The node to find the predecessor of.\n   * @param {!Index} index The index to use to determine the predecessor\n   * @return {?string} The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param {string} childName The name of the child to update.\n   * @param {!Node} newChildNode The new child node\n   * @return {!Node} The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param {!Path} path The path of the child to update.\n   * @param {!Node} newChildNode The new child node, which may be an empty node\n   * @return {!Node} The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   * @param {!string} childName\n   * @return {boolean}\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @return {boolean} True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @return {number} The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param {!Index} index\n   * @param {function(string, !Node)} action Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @return {*} The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat True for export format (also wire protocol format).\n   * @return Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @return {string} hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param {!Node} other Another node\n   * @return {!number} -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @param {!Node} other\n   * @return {boolean} Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!Node} This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {boolean}\n   */\n  isIndexed(indexDefinition: Index): boolean;\n}\n\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  /**\n   *\n   * @param {!string} name\n   * @param {!Node} node\n   * @return {NamedNode}\n   */\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node, NamedNode } from '../Node';\nimport { MIN_NAME, MAX_NAME } from '../../util/util';\nimport { Comparator } from '../../util/SortedMap';\n\n/**\n *\n * @constructor\n */\nexport abstract class Index {\n  /**\n   * @param {!NamedNode} a\n   * @param {!NamedNode} b\n   * @return {number}\n   */\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  /**\n   * @param {!Node} node\n   * @return {boolean}\n   */\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   * @param {!Node} oldNode\n   * @param {!Node} newNode\n   * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @return {!NamedNode} a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { Node, NamedNode } from '../Node';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildrenNode } from '../ChildrenNode';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\nimport { Indexable } from '../util/misc';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexport const priorityHashText = function(priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexport const validatePriorityNode = function(priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\nimport { priorityHashText, validatePriorityNode } from './snap';\nimport { Node } from './Node';\nimport { Path } from '../util/Path';\nimport { Index } from './indexes/Index';\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Indexable } from '../util/misc';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   * @type {Array.<!string>}\n   * @const\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @implements {Node}\n   * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n   *                                         The object type is possible in the event of a deferred value\n   * @param {!Node=} priorityNode_ The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (path.isEmpty()) {\n      return this;\n    } else if (path.getFront() === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          path.popFront(),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @return {Object|string|number|boolean} The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   * @param {!LeafNode} otherLeaf\n   * @return {!number}\n   * @private\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(): Node {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    /**\n     * @inheritDoc\n     */\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { LeafNode } from '../LeafNode';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class PriorityIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  /** @private\n   * @type {Array.<!LLRBNode>}\n   */\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @template K, V, T\n   * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n   * @param {?K} startKey\n   * @param {function(K, K): number} comparator\n   * @param {boolean} isReverse_ Whether or not to iterate in reverse\n   * @param {(function(K, V):T)=} resultGenerator_\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = ({ key: node.key, value: node.value } as unknown) as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return ({ key: node.key, value: node.value } as unknown) as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @template K, V\n   * @param {!K} key Key associated with this node.\n   * @param {!V} value Value associated with this node.\n   * @param {?boolean} color Whether this node is red.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n   * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param {?K} key New key for the node, or null.\n   * @param {?V} value New value for the node, or null.\n   * @param {?boolean} color New color for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n   * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n   * @return {!LLRBNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {*} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @return {!Object} The minimum node in the tree.\n   * @private\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @return {!K} The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   *\n   * @param {!Object} key Key to insert.\n   * @param {!Object} value Value to insert.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param {!Object} key The key of the item to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @private\n   * @return {!LLRBNode} New tree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @private\n   * @return {boolean} True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @return {!LLRBEmptyNode} The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBNode} New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @param {Comparator} comparator Comparator.\n   * @return {!LLRBEmptyNode} New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @return {number} The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @return {boolean} True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param {function(!K, !V)} action Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @return {boolean} True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  /**\n   * @return {null}\n   */\n  minKey(): null {\n    return null;\n  }\n\n  /**\n   * @return {null}\n   */\n  maxKey(): null {\n    return null;\n  }\n\n  /**\n   * @private\n   * @return {number} Not sure what this returns exactly. :-).\n   */\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @private\n   * @return {boolean} Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   * @const\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @template K, V\n   * @param {function(K, K):number} comparator_ Key comparator.\n   * @param {LLRBNode=} root_ (Optional) Root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param {!K} key Key to be added.\n   * @param {!V} value Value to be added.\n   * @return {!SortedMap.<K, V>} New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param {!K} key The key to remove.\n   * @return {!SortedMap.<K, V>} New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param {!K} key The key to look up.\n   * @return {?V} The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param {K} key The key to find the predecessor of\n   * @return {?K} The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @return {boolean} True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @return {number} The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @return {?K} The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @return {?K} The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!K, !V):*} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param {function(!Object, !Object)} action Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @return {*} True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @template T\n   * @param {(function(K, V):T)=} resultGenerator\n   * @return {SortedMapIterator.<K, V, T>} The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\n/**\n * @constructor\n */\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  /**\n   * @param {number} length\n   */\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexport const buildChildSet = function<K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function(\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      return new LLRBNode(\n        key,\n        (namedNode.node as unknown) as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function(base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function(chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : ((namedNode as unknown) as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          (namedNode.node as unknown) as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function(pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\nimport { buildChildSet } from './childSet';\n\nimport { NamedNode, Node } from './Node';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { Index } from './indexes/Index';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { sha1, MAX_NAME, MIN_NAME } from '../util/util';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { Node, NamedNode } from './Node';\nimport { validatePriorityNode, priorityHashText, setMaxNode } from './snap';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { Path } from '../util/Path';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   *\n   * @param {!SortedMap.<string, !Node>} children_ List of children\n   * of this node..\n   * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n   * @param {!IndexMap} indexMap_\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(path.popFront());\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = path.getFront();\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        path.getFront() !== '.priority' || path.getLength() === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        path.popFront(),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  /**\n   * @private\n   * @type {RegExp}\n   */\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[(key as unknown) as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   * @param {!Index} indexDefinition\n   * @return {?string}\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {?NamedNode}\n   */\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {SortedMapIterator}\n   */\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  /**\n   *\n   * @param {!NamedNode} startPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  /**\n   * @param {!NamedNode} endPost\n   * @param {!Index} indexDefinition\n   * @return {!SortedMapIterator}\n   */\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   * @private\n   * @param {!Index} indexDefinition\n   * @return {?SortedMap.<NamedNode, Node>}\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { contains, assert } from '@firebase/util';\n\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { IndexMap } from './IndexMap';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\nimport { Indexable } from '../util/misc';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from './Index';\nimport { NamedNode, Node } from '../Node';\nimport { nameCompare } from '../../util/util';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nexport class ValueIndex extends Index {\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {string} name\n   * @return {!NamedNode}\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @return {!string} String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { Index } from './Index';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\nimport { Path } from '../../util/Path';\n\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !indexPath_.isEmpty() && indexPath_.getFront() !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  /**\n   * @param {!Node} snap\n   * @return {!Node}\n   * @protected\n   */\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.indexPath_.slice().join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { validateArgCount, validateCallback } from '@firebase/util';\nimport { validatePathString } from '../core/util/validation';\nimport { Path } from '../core/util/Path';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { Reference } from './Reference';\nimport { Index } from '../core/snap/indexes/Index';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\n\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nexport class DataSnapshot {\n  /**\n   * @param {!Node} node_ A SnapshotNode to wrap.\n   * @param {!Reference} ref_ The ref of the location this snapshot came from.\n   * @param {!Index} index_ The iteration order for this snapshot\n   */\n  constructor(\n    private readonly node_: Node,\n    private readonly ref_: Reference,\n    private readonly index_: Index\n  ) {}\n\n  /**\n   * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n   * empty.\n   *\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  val(): unknown {\n    validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n    return this.node_.val();\n  }\n\n  /**\n   * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n   * the entire node contents.\n   * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n   */\n  exportVal(): unknown {\n    validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n    return this.node_.val(true);\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users\n  toJSON(): unknown {\n    // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n    validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n    return this.exportVal();\n  }\n\n  /**\n   * Returns whether the snapshot contains a non-null value.\n   *\n   * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n   */\n  exists(): boolean {\n    validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n    return !this.node_.isEmpty();\n  }\n\n  /**\n   * Returns a DataSnapshot of the specified child node's contents.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {!DataSnapshot} DataSnapshot for child node.\n   */\n  child(childPathString: string): DataSnapshot {\n    validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n    // Ensure the childPath is a string (can be a number)\n    childPathString = String(childPathString);\n    validatePathString('DataSnapshot.child', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    const childRef = this.ref_.child(childPath);\n    return new DataSnapshot(\n      this.node_.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n\n  /**\n   * Returns whether the snapshot contains a child at the specified path.\n   *\n   * @param {!string} childPathString Path to a child.\n   * @return {boolean} Whether the child exists.\n   */\n  hasChild(childPathString: string): boolean {\n    validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n    validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n\n    const childPath = new Path(childPathString);\n    return !this.node_.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns the priority of the object, or null if no priority was set.\n   *\n   * @return {string|number|null} The priority.\n   */\n  getPriority(): string | number | null {\n    validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this.node_.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * Iterates through child nodes and calls the specified action for each one.\n   *\n   * @param {function(!DataSnapshot)} action Callback function to be called\n   * for each child.\n   * @return {boolean} True if forEach was canceled by action returning true for\n   * one of the child nodes.\n   */\n  forEach(action: (d: DataSnapshot) => boolean | void): boolean {\n    validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n    validateCallback('DataSnapshot.forEach', 1, action, false);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this.node_ as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this.index_, (key, node) => {\n      return action(\n        new DataSnapshot(node, this.ref_.child(key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns whether this DataSnapshot has children.\n   * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n   */\n  hasChildren(): boolean {\n    validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n\n    if (this.node_.isLeafNode()) {\n      return false;\n    } else {\n      return !this.node_.isEmpty();\n    }\n  }\n\n  get key() {\n    return this.ref_.getKey();\n  }\n\n  /**\n   * Returns the number of children for this DataSnapshot.\n   * @return {number} The number of children that this DataSnapshot contains.\n   */\n  numChildren(): number {\n    validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n\n    return this.node_.numChildren();\n  }\n\n  /**\n   * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n   */\n  getRef(): Reference {\n    validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n\n    return this.ref_;\n  }\n\n  get ref() {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { EventRegistration } from './EventRegistration';\nimport { DataSnapshot } from '../../api/DataSnapshot';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path;\n\n  /**\n   * @return {!string}\n   */\n  getEventType(): string;\n\n  /**\n   * @return {!function()}\n   */\n  getEventRunner(): () => void;\n\n  /**\n   * @return {!string}\n   */\n  toString(): string;\n}\n\nexport type EventType =\n  | 'value'\n  | ' child_added'\n  | ' child_changed'\n  | ' child_moved'\n  | ' child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nexport class DataEvent implements Event {\n  /**\n   * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n   * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n   * @param {!DataSnapshot} snapshot The data backing the event\n   * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: DataSnapshot,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    const ref = this.snapshot.getRef();\n    if (this.eventType === 'value') {\n      return ref.path;\n    } else {\n      return ref.getParent().path;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return this.eventType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  /**\n   * @param {EventRegistration} eventRegistration\n   * @param {Error} error\n   * @param {!Path} path\n   */\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getPath(): Path {\n    return this.path;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventType(): string {\n    return 'cancel';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DataSnapshot } from '../../api/DataSnapshot';\nimport { DataEvent, CancelEvent, Event, EventType } from './Event';\nimport { contains, assert } from '@firebase/util';\n\nimport { Path } from '../util/Path';\nimport { Change } from './Change';\nimport { Query } from '../../api/Query';\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   * @param {!string} eventType\n   * @return {boolean}\n   */\n  respondsTo(eventType: string): boolean;\n\n  /**\n   * @param {!Change} change\n   * @param {!Query} query\n   * @return {!Event}\n   */\n  createEvent(change: Change, query: Query): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   * @param {!Event} eventData\n   * @return {function()}\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  /**\n   * @param {!Error} error\n   * @param {!Path} path\n   * @return {?CancelEvent}\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  /**\n   * @param {!EventRegistration} other\n   * @return {boolean}\n   */\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   * @return {boolean}\n   */\n  hasAnyCallback(): boolean;\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  /**\n   * @param {?function(!DataSnapshot)} callback_\n   * @param {?function(Error)} cancelCallback_\n   * @param {?Object} context_\n   */\n  constructor(\n    private callback_: ((d: DataSnapshot) => void) | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_: {} | null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(change.snapshotNode, query.getRef(), index)\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callback_;\n      return function() {\n        cb.call(ctx, (eventData as DataEvent).snapshot);\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callback_ || !this.callback_) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return (\n        other.callback_ === this.callback_ && other.context_ === this.context_\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callback_ !== null;\n  }\n}\n\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nexport class ChildEventRegistration implements EventRegistration {\n  /**\n   * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n   * @param {?function(Error)} cancelCallback_\n   * @param {Object=} context_\n   */\n  constructor(\n    private callbacks_: {\n      [k: string]: (d: DataSnapshot, s?: string | null) => void;\n    } | null,\n    private cancelCallback_: ((e: Error) => void) | null,\n    private context_?: {}\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return contains(this.callbacks_, eventToCheck);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.cancelCallback_) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  createEvent(change: Change, query: Query): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const ref = query.getRef().child(/** @type {!string} */ change.childName);\n    const index = query.getQueryParams().getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, ref, index),\n      change.prevName\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    const ctx = this.context_;\n    if (eventData.getEventType() === 'cancel') {\n      assert(\n        this.cancelCallback_,\n        'Raising a cancel event on a listener with no cancel callback'\n      );\n      const cancelCB = this.cancelCallback_;\n      return function() {\n        // We know that error exists, we checked above that this is a cancel event\n        cancelCB.call(ctx, (eventData as CancelEvent).error);\n      };\n    } else {\n      const cb = this.callbacks_[(eventData as DataEvent).eventType];\n      return function() {\n        cb.call(\n          ctx,\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n      };\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      if (!this.callbacks_ || !other.callbacks_) {\n        return true;\n      } else if (this.context_ === other.context_) {\n        const otherKeys = Object.keys(other.callbacks_);\n        const thisKeys = Object.keys(this.callbacks_);\n        const otherCount = otherKeys.length;\n        const thisCount = thisKeys.length;\n        if (otherCount === thisCount) {\n          // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n          // If event types don't match, not a match\n          // If count is not 1, exact match across all\n\n          if (otherCount === 1) {\n            const otherKey = otherKeys[0];\n            const thisKey = thisKeys[0];\n            return (\n              thisKey === otherKey &&\n              (!other.callbacks_[otherKey] ||\n                !this.callbacks_[thisKey] ||\n                other.callbacks_[otherKey] === this.callbacks_[thisKey])\n            );\n          } else {\n            // Exact match on each key.\n            return thisKeys.every(\n              eventType =>\n                other.callbacks_[eventType] === this.callbacks_[eventType]\n            );\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  hasAnyCallback(): boolean {\n    return this.callbacks_ !== null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  errorPrefix,\n  validateArgCount,\n  validateCallback,\n  validateContextObject,\n  Deferred\n} from '@firebase/util';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { MIN_NAME, MAX_NAME, ObjectToUniqueKey } from '../core/util/util';\nimport { Path } from '../core/util/Path';\nimport {\n  isValidPriority,\n  validateEventType,\n  validatePathString,\n  validateFirebaseDataArg,\n  validateKey\n} from '../core/util/validation';\n\nimport {\n  ValueEventRegistration,\n  ChildEventRegistration,\n  EventRegistration\n} from '../core/view/EventRegistration';\n\nimport { Repo } from '../core/Repo';\nimport { QueryParams } from '../core/view/QueryParams';\nimport { Reference } from './Reference';\nimport { DataSnapshot } from './DataSnapshot';\n\nlet __referenceConstructor: new (repo: Repo, path: Path) => Query;\n\nexport interface SnapshotCallback {\n  (a: DataSnapshot, b?: string | null): unknown;\n}\n\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nexport class Query {\n  static set __referenceConstructor(val) {\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  constructor(\n    public repo: Repo,\n    public path: Path,\n    private queryParams_: QueryParams,\n    private orderByCalled_: boolean\n  ) {}\n\n  /**\n   * Validates start/end values for queries.\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateQueryEndpoints_(params: QueryParams) {\n    let startNode = null;\n    let endNode = null;\n    if (params.hasStart()) {\n      startNode = params.getIndexStartValue();\n    }\n    if (params.hasEnd()) {\n      endNode = params.getIndexEndValue();\n    }\n\n    if (params.getIndex() === KEY_INDEX) {\n      const tooManyArgsError =\n        'Query: When ordering by key, you may only pass one argument to ' +\n        'startAt(), endAt(), or equalTo().';\n      const wrongArgTypeError =\n        'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n        'or equalTo() must be a string.';\n      if (params.hasStart()) {\n        const startName = params.getIndexStartName();\n        if (startName !== MIN_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof startNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n      if (params.hasEnd()) {\n        const endName = params.getIndexEndName();\n        if (endName !== MAX_NAME) {\n          throw new Error(tooManyArgsError);\n        } else if (typeof endNode !== 'string') {\n          throw new Error(wrongArgTypeError);\n        }\n      }\n    } else if (params.getIndex() === PRIORITY_INDEX) {\n      if (\n        (startNode != null && !isValidPriority(startNode)) ||\n        (endNode != null && !isValidPriority(endNode))\n      ) {\n        throw new Error(\n          'Query: When ordering by priority, the first argument passed to startAt(), ' +\n            'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).'\n        );\n      }\n    } else {\n      assert(\n        params.getIndex() instanceof PathIndex ||\n          params.getIndex() === VALUE_INDEX,\n        'unknown index type.'\n      );\n      if (\n        (startNode != null && typeof startNode === 'object') ||\n        (endNode != null && typeof endNode === 'object')\n      ) {\n        throw new Error(\n          'Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n            'an object.'\n        );\n      }\n    }\n  }\n\n  /**\n   * Validates that limit* has been called with the correct combination of parameters\n   * @param {!QueryParams} params\n   * @private\n   */\n  private static validateLimit_(params: QueryParams) {\n    if (\n      params.hasStart() &&\n      params.hasEnd() &&\n      params.hasLimit() &&\n      !params.hasAnchoredLimit()\n    ) {\n      throw new Error(\n        \"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\"\n      );\n    }\n  }\n\n  /**\n   * Validates that no other order by call has been made\n   * @param {!string} fnName\n   * @private\n   */\n  private validateNoPreviousOrderByCall_(fnName: string) {\n    if (this.orderByCalled_ === true) {\n      throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n    }\n  }\n\n  /**\n   * @return {!QueryParams}\n   */\n  getQueryParams(): QueryParams {\n    return this.queryParams_;\n  }\n\n  /**\n   * @return {!Reference}\n   */\n  getRef(): Reference {\n    validateArgCount('Query.ref', 0, 0, arguments.length);\n    // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n    // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n    // method gets called.\n    return new Query.__referenceConstructor(this.repo, this.path) as Reference;\n  }\n\n  /**\n   * @param {!string} eventType\n   * @param {!function(DataSnapshot, string=)} callback\n   * @param {(function(Error)|Object)=} cancelCallbackOrContext\n   * @param {Object=} context\n   * @return {!function(DataSnapshot, string=)}\n   */\n  on(\n    eventType: string,\n    callback: SnapshotCallback,\n    cancelCallbackOrContext?: ((a: Error) => unknown) | object | null,\n    context?: object | null\n  ): SnapshotCallback {\n    validateArgCount('Query.on', 2, 4, arguments.length);\n    validateEventType('Query.on', 1, eventType, false);\n    validateCallback('Query.on', 2, callback, false);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.on',\n      cancelCallbackOrContext,\n      context\n    );\n\n    if (eventType === 'value') {\n      this.onValueEvent(callback, ret.cancel, ret.context);\n    } else {\n      const callbacks: { [k: string]: typeof callback } = {};\n      callbacks[eventType] = callback;\n      this.onChildEvent(callbacks, ret.cancel, ret.context);\n    }\n    return callback;\n  }\n\n  /**\n   * @param {!function(!DataSnapshot)} callback\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  protected onValueEvent(\n    callback: (a: DataSnapshot) => void,\n    cancelCallback: ((a: Error) => void) | null,\n    context: object | null\n  ) {\n    const container = new ValueEventRegistration(\n      callback,\n      cancelCallback || null,\n      context || null\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n   * @param {?function(Error)} cancelCallback\n   * @param {?Object} context\n   * @protected\n   */\n  onChildEvent(\n    callbacks: { [k: string]: SnapshotCallback },\n    cancelCallback: ((a: Error) => unknown) | null,\n    context: object | null\n  ) {\n    const container = new ChildEventRegistration(\n      callbacks,\n      cancelCallback,\n      context\n    );\n    this.repo.addEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * @param {string=} eventType\n   * @param {(function(!DataSnapshot, ?string=))=} callback\n   * @param {Object=} context\n   */\n  off(\n    eventType?: string,\n    callback?: SnapshotCallback,\n    context?: object | null\n  ): void {\n    validateArgCount('Query.off', 0, 3, arguments.length);\n    validateEventType('Query.off', 1, eventType, true);\n    validateCallback('Query.off', 2, callback, true);\n    validateContextObject('Query.off', 3, context, true);\n\n    let container: EventRegistration | null = null;\n    let callbacks: { [k: string]: typeof callback } | null = null;\n    if (eventType === 'value') {\n      const valueCallback = callback || null;\n      container = new ValueEventRegistration(\n        valueCallback,\n        null,\n        context || null\n      );\n    } else if (eventType) {\n      if (callback) {\n        callbacks = {};\n        callbacks[eventType] = callback;\n      }\n      container = new ChildEventRegistration(callbacks, null, context || null);\n    }\n    this.repo.removeEventCallbackForQuery(this, container);\n  }\n\n  /**\n   * Attaches a listener, waits for the first event, and then removes the listener\n   * @param {!string} eventType\n   * @param {!function(!DataSnapshot, string=)} userCallback\n   * @param failureCallbackOrContext\n   * @param context\n   * @return {!firebase.Promise}\n   */\n  once(\n    eventType: string,\n    userCallback?: SnapshotCallback,\n    failureCallbackOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): Promise<DataSnapshot> {\n    validateArgCount('Query.once', 1, 4, arguments.length);\n    validateEventType('Query.once', 1, eventType, false);\n    validateCallback('Query.once', 2, userCallback, true);\n\n    const ret = Query.getCancelAndContextArgs_(\n      'Query.once',\n      failureCallbackOrContext,\n      context\n    );\n\n    // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n    // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n    // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n    // against the Promise specification.\n    let firstCall = true;\n    const deferred = new Deferred<DataSnapshot>();\n\n    // A dummy error handler in case a user wasn't expecting promises\n    deferred.promise.catch(() => {});\n\n    const onceCallback = (snapshot: DataSnapshot) => {\n      // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n      // triggers multiple events (e.g. child_added or child_changed).\n      if (firstCall) {\n        firstCall = false;\n        this.off(eventType, onceCallback);\n\n        if (userCallback) {\n          userCallback.bind(ret.context)(snapshot);\n        }\n        deferred.resolve(snapshot);\n      }\n    };\n\n    this.on(\n      eventType,\n      onceCallback,\n      /*cancel=*/ err => {\n        this.off(eventType, onceCallback);\n\n        if (ret.cancel) {\n          ret.cancel.bind(ret.context)(err);\n        }\n        deferred.reject(err);\n      }\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Set a limit and anchor it to the start of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToFirst(limit: number): Query {\n    validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToFirst: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToFirst: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToFirst(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Set a limit and anchor it to the end of the window.\n   * @param {!number} limit\n   * @return {!Query}\n   */\n  limitToLast(limit: number): Query {\n    validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n    if (\n      typeof limit !== 'number' ||\n      Math.floor(limit) !== limit ||\n      limit <= 0\n    ) {\n      throw new Error(\n        'Query.limitToLast: First argument must be a positive integer.'\n      );\n    }\n    if (this.queryParams_.hasLimit()) {\n      throw new Error(\n        'Query.limitToLast: Limit was already set (by another call to limit, ' +\n          'limitToFirst, or limitToLast).'\n      );\n    }\n\n    return new Query(\n      this.repo,\n      this.path,\n      this.queryParams_.limitToLast(limit),\n      this.orderByCalled_\n    );\n  }\n\n  /**\n   * Given a child path, return a new query ordered by the specified grandchild path.\n   * @param {!string} path\n   * @return {!Query}\n   */\n  orderByChild(path: string): Query {\n    validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n    if (path === '$key') {\n      throw new Error(\n        'Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.'\n      );\n    } else if (path === '$priority') {\n      throw new Error(\n        'Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.'\n      );\n    } else if (path === '$value') {\n      throw new Error(\n        'Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.'\n      );\n    }\n    validatePathString('Query.orderByChild', 1, path, false);\n    this.validateNoPreviousOrderByCall_('Query.orderByChild');\n    const parsedPath = new Path(path);\n    if (parsedPath.isEmpty()) {\n      throw new Error(\n        'Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = this.queryParams_.orderBy(index);\n    Query.validateQueryEndpoints_(newParams);\n\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the KeyIndex\n   * @return {!Query}\n   */\n  orderByKey(): Query {\n    validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByKey');\n    const newParams = this.queryParams_.orderBy(KEY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the PriorityIndex\n   * @return {!Query}\n   */\n  orderByPriority(): Query {\n    validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n    const newParams = this.queryParams_.orderBy(PRIORITY_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * Return a new query ordered by the ValueIndex\n   * @return {!Query}\n   */\n  orderByValue(): Query {\n    validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n    this.validateNoPreviousOrderByCall_('Query.orderByValue');\n    const newParams = this.queryParams_.orderBy(VALUE_INDEX);\n    Query.validateQueryEndpoints_(newParams);\n    return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  startAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.startAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n    validateKey('Query.startAt', 2, name, true);\n\n    const newParams = this.queryParams_.startAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.startAt: Starting point was already set (by another call to startAt ' +\n          'or equalTo).'\n      );\n    }\n\n    // Calling with no params tells us to start at the beginning.\n    if (value === undefined) {\n      value = null;\n      name = null;\n    }\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * @param {number|string|boolean|null} value\n   * @param {?string=} name\n   * @return {!Query}\n   */\n  endAt(\n    value: number | string | boolean | null = null,\n    name?: string | null\n  ): Query {\n    validateArgCount('Query.endAt', 0, 2, arguments.length);\n    validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n    validateKey('Query.endAt', 2, name, true);\n\n    const newParams = this.queryParams_.endAt(value, name);\n    Query.validateLimit_(newParams);\n    Query.validateQueryEndpoints_(newParams);\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.endAt: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n\n    return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n  }\n\n  /**\n   * Load the selection of children with exactly the specified value, and, optionally,\n   * the specified name.\n   * @param {number|string|boolean|null} value\n   * @param {string=} name\n   * @return {!Query}\n   */\n  equalTo(value: number | string | boolean | null, name?: string) {\n    validateArgCount('Query.equalTo', 1, 2, arguments.length);\n    validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n    validateKey('Query.equalTo', 2, name, true);\n    if (this.queryParams_.hasStart()) {\n      throw new Error(\n        'Query.equalTo: Starting point was already set (by another call to startAt or ' +\n          'equalTo).'\n      );\n    }\n    if (this.queryParams_.hasEnd()) {\n      throw new Error(\n        'Query.equalTo: Ending point was already set (by another call to endAt or ' +\n          'equalTo).'\n      );\n    }\n    return this.startAt(value, name).endAt(value, name);\n  }\n\n  /**\n   * @return {!string} URL for this location.\n   */\n  toString(): string {\n    validateArgCount('Query.toString', 0, 0, arguments.length);\n\n    return this.repo.toString() + this.path.toUrlEncodedString();\n  }\n\n  // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n  // for end-users.\n  toJSON() {\n    // An optional spacer argument is unnecessary for a string.\n    validateArgCount('Query.toJSON', 0, 1, arguments.length);\n    return this.toString();\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   * @return {!Object}\n   */\n  queryObject(): object {\n    return this.queryParams_.getQueryObject();\n  }\n\n  /**\n   * @return {!string}\n   */\n  queryIdentifier(): string {\n    const obj = this.queryObject();\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * Return true if this query and the provided query are equivalent; otherwise, return false.\n   * @param {Query} other\n   * @return {boolean}\n   */\n  isEqual(other: Query): boolean {\n    validateArgCount('Query.isEqual', 1, 1, arguments.length);\n    if (!(other instanceof Query)) {\n      const error =\n        'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n      throw new Error(error);\n    }\n\n    const sameRepo = this.repo === other.repo;\n    const samePath = this.path.equals(other.path);\n    const sameQueryIdentifier =\n      this.queryIdentifier() === other.queryIdentifier();\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  /**\n   * Helper used by .on and .once to extract the context and or cancel arguments.\n   * @param {!string} fnName The function name (on or once)\n   * @param {(function(Error)|Object)=} cancelOrContext\n   * @param {Object=} context\n   * @return {{cancel: ?function(Error), context: ?Object}}\n   * @private\n   */\n  private static getCancelAndContextArgs_(\n    fnName: string,\n    cancelOrContext?: ((a: Error) => void) | object | null,\n    context?: object | null\n  ): { cancel: ((a: Error) => void) | null; context: object | null } {\n    const ret: {\n      cancel: ((a: Error) => void) | null;\n      context: object | null;\n    } = { cancel: null, context: null };\n    if (cancelOrContext && context) {\n      ret.cancel = cancelOrContext as (a: Error) => void;\n      validateCallback(fnName, 3, ret.cancel, true);\n\n      ret.context = context;\n      validateContextObject(fnName, 4, ret.context, true);\n    } else if (cancelOrContext) {\n      // we have either a cancel callback or a context.\n      if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n        // it's a context!\n        ret.context = cancelOrContext;\n      } else if (typeof cancelOrContext === 'function') {\n        ret.cancel = cancelOrContext as (a: Error) => void;\n      } else {\n        throw new Error(\n          errorPrefix(fnName, 3, true) +\n            ' must either be a cancel callback or a context object.'\n        );\n      }\n    }\n    return ret;\n  }\n\n  get ref(): Reference {\n    return this.getRef();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from './Path';\nimport { SparseSnapshotTree } from '../SparseSnapshotTree';\nimport { LeafNode } from '../snap/LeafNode';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { SyncTree } from '../SyncTree';\nimport { Indexable } from './misc';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = this.path_.child(childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return this.syncTree_.calcCompleteEventCache(this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexport const generateWithValues = function(\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexport const resolveDeferredLeafValue = function(\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function(\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function(\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!Path} path path to which write is relative\n * @param {!Node} node new data written at path\n * @param {!SyncTree} syncTree current data\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexport const resolveDeferredValueTree = function(\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexport const resolveDeferredValueSnapshot = function(\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from './util/Path';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport class SparseSnapshotTree {\n  private value: Node | null = null;\n\n  private readonly children: Map<string, SparseSnapshotTree> = new Map();\n\n  /**\n   * Gets the node stored at the given path if one exists.\n   *\n   * @param path Path to look up snapshot for.\n   * @return The retrieved node, or null.\n   */\n  find(path: Path): Node | null {\n    if (this.value != null) {\n      return this.value.getChild(path);\n    } else if (!path.isEmpty() && this.children.size > 0) {\n      const childKey = path.getFront();\n      path = path.popFront();\n      if (this.children.has(childKey)) {\n        const childTree = this.children.get(childKey);\n        return childTree.find(path);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores the given node at the specified path. If there is already a node\n   * at a shallower path, it merges the new data into that snapshot node.\n   *\n   * @param path Path to look up snapshot for.\n   * @param data The new data, or null.\n   */\n  remember(path: Path, data: Node) {\n    if (path.isEmpty()) {\n      this.value = data;\n      this.children.clear();\n    } else if (this.value !== null) {\n      this.value = this.value.updateChild(path, data);\n    } else {\n      const childKey = path.getFront();\n      if (!this.children.has(childKey)) {\n        this.children.set(childKey, new SparseSnapshotTree());\n      }\n\n      const child = this.children.get(childKey);\n      path = path.popFront();\n      child.remember(path, data);\n    }\n  }\n\n  /**\n   * Purge the data at path from the cache.\n   *\n   * @param path Path to look up snapshot for.\n   * @return True if this node should now be removed.\n   */\n  forget(path: Path): boolean {\n    if (path.isEmpty()) {\n      this.value = null;\n      this.children.clear();\n      return true;\n    } else {\n      if (this.value !== null) {\n        if (this.value.isLeafNode()) {\n          // We're trying to forget a node that doesn't exist\n          return false;\n        } else {\n          const value = this.value;\n          this.value = null;\n\n          const self = this;\n          value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n            self.remember(new Path(key), tree);\n          });\n\n          return this.forget(path);\n        }\n      } else if (this.children.size > 0) {\n        const childKey = path.getFront();\n        path = path.popFront();\n        if (this.children.has(childKey)) {\n          const safeToRemove = this.children.get(childKey).forget(path);\n          if (safeToRemove) {\n            this.children.delete(childKey);\n          }\n        }\n\n        return this.children.size === 0;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Recursively iterates through all of the stored tree and calls the\n   * callback on each one.\n   *\n   * @param prefixPath Path to look up node for.\n   * @param func The function to invoke for each tree.\n   */\n  forEachTree(prefixPath: Path, func: (a: Path, b: Node) => unknown) {\n    if (this.value !== null) {\n      func(prefixPath, this.value);\n    } else {\n      this.forEachChild((key, tree) => {\n        const path = new Path(prefixPath.toString() + '/' + key);\n        tree.forEachTree(path, func);\n      });\n    }\n  }\n\n  /**\n   * Iterates through each immediate child and triggers the callback.\n   *\n   * @param func The function to invoke for each child.\n   */\n  forEachChild(func: (a: string, b: SparseSnapshotTree) => void) {\n    this.children.forEach((tree, key) => {\n      func(key, tree);\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  /**\n   * @type {!OperationSource}\n   */\n  source: OperationSource;\n\n  /**\n   * @type {!OperationType}\n   */\n  type: OperationType;\n\n  /**\n   * @type {!Path}\n   */\n  path: Path;\n\n  /**\n   * @param {string} childName\n   * @return {?Operation}\n   */\n  operationForChild(childName: string): Operation | null;\n}\n\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nexport class OperationSource {\n  constructor(\n    public fromUser: boolean,\n    public fromServer: boolean,\n    public queryId: string | null,\n    public tagged: boolean\n  ) {\n    assert(!tagged || fromServer, 'Tagged queries must be from server.');\n  }\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static User = new OperationSource(\n    /*fromUser=*/ true,\n    false,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @const\n   * @type {!OperationSource}\n   */\n  static Server = new OperationSource(\n    false,\n    /*fromServer=*/ true,\n    null,\n    /*tagged=*/ false\n  );\n\n  /**\n   * @param {string} queryId\n   * @return {!OperationSource}\n   */\n  static forServerTaggedQuery = function(queryId: string): OperationSource {\n    return new OperationSource(\n      false,\n      /*fromServer=*/ true,\n      queryId,\n      /*tagged=*/ true\n    );\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { ImmutableTree } from '../util/ImmutableTree';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = OperationSource.User;\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n   * @param {!boolean} revert\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): AckUserWrite {\n    if (!this.path.isEmpty()) {\n      assert(\n        this.path.getFront() === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        this.path.popFront(),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(Path.Empty, childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SortedMap } from './SortedMap';\nimport { Path } from './Path';\nimport { stringCompare, each } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static Empty = new ImmutableTree<any>(null);\n\n  /**\n   * @template T\n   * @param {!Object.<string, !T>} obj\n   * @return {!ImmutableTree.<!T>}\n   */\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = ImmutableTree.Empty;\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  /**\n   * @template T\n   * @param {?T} value\n   * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n   */\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n   * on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param {!Path} relativePath The remainder of the path\n   * @param {function(T):boolean} predicate The predicate to satisfy to return a\n   *   node\n   * @return {?{path:!Path, value:!T}}\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: Path.Empty, value: this.value };\n    } else {\n      if (relativePath.isEmpty()) {\n        return null;\n      } else {\n        const front = relativePath.getFront();\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue = child.findRootMostMatchingPathAndValue(\n            relativePath.popFront(),\n            predicate\n          );\n          if (childExistingPathAndValue != null) {\n            const fullPath = new Path(front).child(\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   * @param {!Path} relativePath\n   * @return {?{path: !Path, value: !T}}\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @param {!Path} relativePath\n   * @return {!ImmutableTree.<T>} The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return this;\n    } else {\n      const front = relativePath.getFront();\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(relativePath.popFront());\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param {!Path} relativePath Path to set value at.\n   * @param {?T} toSet Value to set.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.set(relativePath.popFront(), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param {!Path} relativePath Path to value to remove.\n   * @return {!ImmutableTree.<T>} Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      if (this.children.isEmpty()) {\n        return ImmutableTree.Empty;\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(relativePath.popFront());\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return ImmutableTree.Empty;\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param {!Path} relativePath Path to get value for.\n   * @return {?T} Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (relativePath.isEmpty()) {\n      return this.value;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(relativePath.popFront());\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param {!Path} relativePath Path to replace subtree for.\n   * @param {!ImmutableTree} newTree New tree.\n   * @return {!ImmutableTree} Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (relativePath.isEmpty()) {\n      return newTree;\n    } else {\n      const front = relativePath.getFront();\n      const child = this.children.get(front) || ImmutableTree.Empty;\n      const newChild = child.setTree(relativePath.popFront(), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   * @template V\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(Path.Empty, fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   * @template V\n   * @param {!Path} pathSoFar\n   * @param {function(Path, ?T, Object.<string, V>):V} fn\n   * @return {V}\n   * @private\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   * @template V\n   * @param {!Path} path\n   * @param {!function(!Path, !T):?V} f\n   * @return {?V}\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, Path.Empty, f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathToFollow.isEmpty()) {\n        return null;\n      } else {\n        const front = pathToFollow.getFront()!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathToFollow.popFront(),\n            pathSoFar.child(front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {!Path} path\n   * @param {!function(!Path, !T)} f\n   * @returns {!ImmutableTree.<T>}\n   */\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, Path.Empty, f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathToFollow.isEmpty()) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathToFollow.getFront();\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathToFollow.popFront(),\n          currentRelativePath.child(front),\n          f\n        );\n      } else {\n        return ImmutableTree.Empty;\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param {function(!Path, !T)} f A function to be called with\n   *   the path from the root of the tree to a node, and the value at that node.\n   *   Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(Path.Empty, f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(currentRelativePath.child(childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  /**\n   *\n   * @param {function(string, !T)} f\n   */\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { Operation, OperationSource, OperationType } from './Operation';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (this.path.isEmpty()) {\n      return new ListenComplete(this.source, Path.Empty);\n    } else {\n      return new ListenComplete(this.source, this.path.popFront());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Path } from '../util/Path';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (this.path.isEmpty()) {\n      return new Overwrite(\n        this.source,\n        Path.Empty,\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, this.path.popFront(), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\nimport { Path } from '../util/Path';\nimport { assert } from '@firebase/util';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Node } from '../snap/Node';\n\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  operationForChild(childName: string): Operation {\n    if (this.path.isEmpty()) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, Path.Empty, childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, Path.Empty, childTree);\n      }\n    } else {\n      assert(\n        this.path.getFront() === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, this.path.popFront(), this.children);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  /**\n   * @param {!Node} node_\n   * @param {boolean} fullyInitialized_\n   * @param {boolean} filtered_\n   */\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   * @return {boolean}\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   * @return {boolean}\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {boolean}\n   */\n  isCompleteForPath(path: Path): boolean {\n    if (path.isEmpty()) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = path.getFront();\n    return this.isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!string} key\n   * @return {boolean}\n   */\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  /**\n   * @return {!Node}\n   */\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { Node } from '../snap/Node';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nexport class ViewCache {\n  /**\n   *\n   * @param {!CacheNode} eventCache_\n   * @param {!CacheNode} serverCache_\n   */\n  constructor(\n    private readonly eventCache_: CacheNode,\n    private readonly serverCache_: CacheNode\n  ) {}\n\n  /**\n   * @const\n   * @type {ViewCache}\n   */\n  static Empty = new ViewCache(\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    ),\n    new CacheNode(\n      ChildrenNode.EMPTY_NODE,\n      /*fullyInitialized=*/ false,\n      /*filtered=*/ false\n    )\n  );\n\n  /**\n   * @param {!Node} eventSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateEventSnap(\n    eventSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      new CacheNode(eventSnap, complete, filtered),\n      this.serverCache_\n    );\n  }\n\n  /**\n   * @param {!Node} serverSnap\n   * @param {boolean} complete\n   * @param {boolean} filtered\n   * @return {!ViewCache}\n   */\n  updateServerSnap(\n    serverSnap: Node,\n    complete: boolean,\n    filtered: boolean\n  ): ViewCache {\n    return new ViewCache(\n      this.eventCache_,\n      new CacheNode(serverSnap, complete, filtered)\n    );\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getEventCache(): CacheNode {\n    return this.eventCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteEventSnap(): Node | null {\n    return this.eventCache_.isFullyInitialized()\n      ? this.eventCache_.getNode()\n      : null;\n  }\n\n  /**\n   * @return {!CacheNode}\n   */\n  getServerCache(): CacheNode {\n    return this.serverCache_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getCompleteServerSnap(): Node | null {\n    return this.serverCache_.isFullyInitialized()\n      ? this.serverCache_.getNode()\n      : null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nexport class Change {\n  constructor(\n    public type: string,\n    public snapshotNode: Node,\n    public childName?: string,\n    public oldSnap?: Node,\n    public prevName?: string | null\n  ) {}\n\n  /**\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static valueChange(snapshot: Node): Change {\n    return new Change(Change.VALUE, snapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childAddedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_ADDED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childRemovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} newSnapshot\n   * @param {!Node} oldSnapshot\n   * @return {!Change}\n   */\n  static childChangedChange(\n    childKey: string,\n    newSnapshot: Node,\n    oldSnapshot: Node\n  ): Change {\n    return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n  }\n\n  /**\n   * @param {string} childKey\n   * @param {!Node} snapshot\n   * @return {!Change}\n   */\n  static childMovedChange(childKey: string, snapshot: Node): Change {\n    return new Change(Change.CHILD_MOVED, snapshot, childKey);\n  }\n\n  //event types\n  /** Event type for a child added */\n  static CHILD_ADDED = 'child_added';\n\n  /** Event type for a child removed */\n  static CHILD_REMOVED = 'child_removed';\n\n  /** Event type for a child changed */\n  static CHILD_CHANGED = 'child_changed';\n\n  /** Event type for a child moved */\n  static CHILD_MOVED = 'child_moved';\n\n  /** Event type for a value change */\n  static VALUE = 'value';\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { Node } from '../../snap/Node';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            Change.childRemovedChange(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(\n          Change.childAddedChange(key, newChild)\n        );\n      } else {\n        optChangeAccumulator.trackChildChange(\n          Change.childChangedChange(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              Change.childRemovedChange(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                Change.childChangedChange(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              Change.childAddedChange(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return false;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Change } from './Change';\nimport { assert, assertionError } from '@firebase/util';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === Change.CHILD_ADDED ||\n        type === Change.CHILD_CHANGED ||\n        type === Change.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (type === Change.CHILD_ADDED && oldType === Change.CHILD_REMOVED) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === Change.CHILD_REMOVED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childRemovedChange(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childAddedChange(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === Change.CHILD_CHANGED &&\n        oldType === Change.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          Change.childChangedChange(\n            childKey,\n            change.snapshotNode,\n            oldChange.oldSnap\n          )\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './CacheNode';\nimport { NamedNode, Node } from '../snap/Node';\nimport { Index } from '../snap/indexes/Index';\nimport { WriteTreeRef } from '../WriteTree';\nimport { ViewCache } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  /**\n   * @param {!string} childKey\n   * @return {?Node}\n   */\n  getCompleteChild(childKey: string): Node | null;\n\n  /**\n   * @param {!Index} index\n   * @param {!NamedNode} child\n   * @param {boolean} reverse\n   * @return {?NamedNode}\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\n// eslint-disable-next-line @typescript-eslint/class-name-casing\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  /**\n   * @param {!WriteTreeRef} writes_\n   * @param {!ViewCache} viewCache_\n   * @param {?Node} optCompleteServerCache_\n   */\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.getEventCache();\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.getServerCache();\n      return this.writes_.calcCompleteChild(childKey, serverNode);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : this.viewCache_.getCompleteServerSnap();\n    const nodes = this.writes_.calcIndexedSlice(\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { assert, assertionError } from '@firebase/util';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport { Change } from './Change';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport { Path } from '../util/Path';\nimport {\n  WriteTreeCompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  CompleteChildSource\n} from './CompleteChildSource';\nimport { ViewCache } from './ViewCache';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { WriteTreeRef } from '../WriteTree';\nimport { Overwrite } from '../operation/Overwrite';\nimport { Merge } from '../operation/Merge';\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Node } from '../snap/Node';\n\n/**\n * @constructor\n * @struct\n */\nexport class ProcessorResult {\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Array.<!Change>} changes\n   */\n  constructor(\n    public readonly viewCache: ViewCache,\n    public readonly changes: Change[]\n  ) {}\n}\n\n/**\n * @constructor\n */\nexport class ViewProcessor {\n  /**\n   * @param {!NodeFilter} filter_\n   */\n  constructor(private readonly filter_: NodeFilter) {}\n\n  /**\n   * @param {!ViewCache} viewCache\n   */\n  assertIndexed(viewCache: ViewCache) {\n    assert(\n      viewCache\n        .getEventCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Event snap not indexed'\n    );\n    assert(\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isIndexed(this.filter_.getIndex()),\n      'Server snap not indexed'\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @return {!ProcessorResult}\n   */\n  applyOperation(\n    oldViewCache: ViewCache,\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null\n  ): ProcessorResult {\n    const accumulator = new ChildChangeAccumulator();\n    let newViewCache, filterServerNode;\n    if (operation.type === OperationType.OVERWRITE) {\n      const overwrite = operation as Overwrite;\n      if (overwrite.source.fromUser) {\n        newViewCache = this.applyUserOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(overwrite.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered  and the\n        // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n        // again\n        filterServerNode =\n          overwrite.source.tagged ||\n          (oldViewCache.getServerCache().isFiltered() &&\n            !overwrite.path.isEmpty());\n        newViewCache = this.applyServerOverwrite_(\n          oldViewCache,\n          overwrite.path,\n          overwrite.snap,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.MERGE) {\n      const merge = operation as Merge;\n      if (merge.source.fromUser) {\n        newViewCache = this.applyUserMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        assert(merge.source.fromServer, 'Unknown source.');\n        // We filter the node if it's a tagged update or the node has been previously filtered\n        filterServerNode =\n          merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n        newViewCache = this.applyServerMerge_(\n          oldViewCache,\n          merge.path,\n          merge.children,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.ACK_USER_WRITE) {\n      const ackUserWrite = operation as AckUserWrite;\n      if (!ackUserWrite.revert) {\n        newViewCache = this.ackUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          ackUserWrite.affectedTree,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      } else {\n        newViewCache = this.revertUserWrite_(\n          oldViewCache,\n          ackUserWrite.path,\n          writesCache,\n          completeCache,\n          accumulator\n        );\n      }\n    } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n      newViewCache = this.listenComplete_(\n        oldViewCache,\n        operation.path,\n        writesCache,\n        accumulator\n      );\n    } else {\n      throw assertionError('Unknown operation type: ' + operation.type);\n    }\n    const changes = accumulator.getChanges();\n    ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n    return new ProcessorResult(newViewCache, changes);\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!ViewCache} newViewCache\n   * @param {!Array.<!Change>} accumulator\n   * @private\n   */\n  private static maybeAddValueEvent_(\n    oldViewCache: ViewCache,\n    newViewCache: ViewCache,\n    accumulator: Change[]\n  ) {\n    const eventSnap = newViewCache.getEventCache();\n    if (eventSnap.isFullyInitialized()) {\n      const isLeafOrEmpty =\n        eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n      const oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n      if (\n        accumulator.length > 0 ||\n        !oldViewCache.getEventCache().isFullyInitialized() ||\n        (isLeafOrEmpty &&\n          !eventSnap.getNode().equals(/** @type {!Node} */ oldCompleteSnap)) ||\n        !eventSnap\n          .getNode()\n          .getPriority()\n          .equals(oldCompleteSnap.getPriority())\n      ) {\n        accumulator.push(\n          Change.valueChange(\n            /** @type {!Node} */ newViewCache.getCompleteEventSnap()\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} changePath\n   * @param {!WriteTreeRef} writesCache\n   * @param {!CompleteChildSource} source\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private generateEventCacheAfterServerEvent_(\n    viewCache: ViewCache,\n    changePath: Path,\n    writesCache: WriteTreeRef,\n    source: CompleteChildSource,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = viewCache.getEventCache();\n    if (writesCache.shadowingWrite(changePath) != null) {\n      // we have a shadowing write, ignore changes\n      return viewCache;\n    } else {\n      let newEventCache, serverNode;\n      if (changePath.isEmpty()) {\n        // TODO: figure out how this plays with \"sliding ack windows\"\n        assert(\n          viewCache.getServerCache().isFullyInitialized(),\n          'If change path is empty, we must have complete server data'\n        );\n        if (viewCache.getServerCache().isFiltered()) {\n          // We need to special case this, because we need to only apply writes to complete children, or\n          // we might end up raising events for incomplete children. If the server data is filtered deep\n          // writes cannot be guaranteed to be complete\n          const serverCache = viewCache.getCompleteServerSnap();\n          const completeChildren =\n            serverCache instanceof ChildrenNode\n              ? serverCache\n              : ChildrenNode.EMPTY_NODE;\n          const completeEventChildren = writesCache.calcCompleteEventChildren(\n            completeChildren\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeEventChildren,\n            accumulator\n          );\n        } else {\n          const completeNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          newEventCache = this.filter_.updateFullNode(\n            viewCache.getEventCache().getNode(),\n            completeNode,\n            accumulator\n          );\n        }\n      } else {\n        const childKey = changePath.getFront();\n        if (childKey === '.priority') {\n          assert(\n            changePath.getLength() === 1,\n            \"Can't have a priority with additional path components\"\n          );\n          const oldEventNode = oldEventSnap.getNode();\n          serverNode = viewCache.getServerCache().getNode();\n          // we might have overwrites for this priority\n          const updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(\n            changePath,\n            oldEventNode,\n            serverNode\n          );\n          if (updatedPriority != null) {\n            newEventCache = this.filter_.updatePriority(\n              oldEventNode,\n              updatedPriority\n            );\n          } else {\n            // priority didn't change, keep old node\n            newEventCache = oldEventSnap.getNode();\n          }\n        } else {\n          const childChangePath = changePath.popFront();\n          // update child\n          let newEventChild;\n          if (oldEventSnap.isCompleteForChild(childKey)) {\n            serverNode = viewCache.getServerCache().getNode();\n            const eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n            if (eventChildUpdate != null) {\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey)\n                .updateChild(childChangePath, eventChildUpdate);\n            } else {\n              // Nothing changed, just keep the old child\n              newEventChild = oldEventSnap\n                .getNode()\n                .getImmediateChild(childKey);\n            }\n          } else {\n            newEventChild = writesCache.calcCompleteChild(\n              childKey,\n              viewCache.getServerCache()\n            );\n          }\n          if (newEventChild != null) {\n            newEventCache = this.filter_.updateChild(\n              oldEventSnap.getNode(),\n              childKey,\n              newEventChild,\n              childChangePath,\n              source,\n              accumulator\n            );\n          } else {\n            // no complete child available or no change\n            newEventCache = oldEventSnap.getNode();\n          }\n        }\n      }\n      return viewCache.updateEventSnap(\n        newEventCache,\n        oldEventSnap.isFullyInitialized() || changePath.isEmpty(),\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyServerOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerSnap = oldViewCache.getServerCache();\n    let newServerCache;\n    const serverFilter = filterServerNode\n      ? this.filter_\n      : this.filter_.getIndexedFilter();\n    if (changePath.isEmpty()) {\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        changedSnap,\n        null\n      );\n    } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n      // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n      const newServerNode = oldServerSnap\n        .getNode()\n        .updateChild(changePath, changedSnap);\n      newServerCache = serverFilter.updateFullNode(\n        oldServerSnap.getNode(),\n        newServerNode,\n        null\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (\n        !oldServerSnap.isCompleteForPath(changePath) &&\n        changePath.getLength() > 1\n      ) {\n        // We don't update incomplete nodes with updates intended for other listeners\n        return oldViewCache;\n      }\n      const childChangePath = changePath.popFront();\n      const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n      const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n      if (childKey === '.priority') {\n        newServerCache = serverFilter.updatePriority(\n          oldServerSnap.getNode(),\n          newChildNode\n        );\n      } else {\n        newServerCache = serverFilter.updateChild(\n          oldServerSnap.getNode(),\n          childKey,\n          newChildNode,\n          childChangePath,\n          NO_COMPLETE_CHILD_SOURCE,\n          null\n        );\n      }\n    }\n    const newViewCache = oldViewCache.updateServerSnap(\n      newServerCache,\n      oldServerSnap.isFullyInitialized() || changePath.isEmpty(),\n      serverFilter.filtersNodes()\n    );\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      newViewCache,\n      completeCache\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      changePath,\n      writesCache,\n      source,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} oldViewCache\n   * @param {!Path} changePath\n   * @param {!Node} changedSnap\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  applyUserOverwrite_(\n    oldViewCache: ViewCache,\n    changePath: Path,\n    changedSnap: Node,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldEventSnap = oldViewCache.getEventCache();\n    let newViewCache, newEventCache;\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      oldViewCache,\n      completeCache\n    );\n    if (changePath.isEmpty()) {\n      newEventCache = this.filter_.updateFullNode(\n        oldViewCache.getEventCache().getNode(),\n        changedSnap,\n        accumulator\n      );\n      newViewCache = oldViewCache.updateEventSnap(\n        newEventCache,\n        true,\n        this.filter_.filtersNodes()\n      );\n    } else {\n      const childKey = changePath.getFront();\n      if (childKey === '.priority') {\n        newEventCache = this.filter_.updatePriority(\n          oldViewCache.getEventCache().getNode(),\n          changedSnap\n        );\n        newViewCache = oldViewCache.updateEventSnap(\n          newEventCache,\n          oldEventSnap.isFullyInitialized(),\n          oldEventSnap.isFiltered()\n        );\n      } else {\n        const childChangePath = changePath.popFront();\n        const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        let newChild;\n        if (childChangePath.isEmpty()) {\n          // Child overwrite, we can replace the child\n          newChild = changedSnap;\n        } else {\n          const childNode = source.getCompleteChild(childKey);\n          if (childNode != null) {\n            if (\n              childChangePath.getBack() === '.priority' &&\n              childNode.getChild(childChangePath.parent()).isEmpty()\n            ) {\n              // This is a priority update on an empty node. If this node exists on the server, the\n              // server will send down the priority in the update, so ignore for now\n              newChild = childNode;\n            } else {\n              newChild = childNode.updateChild(childChangePath, changedSnap);\n            }\n          } else {\n            // There is no complete child node available\n            newChild = ChildrenNode.EMPTY_NODE;\n          }\n        }\n        if (!oldChild.equals(newChild)) {\n          const newEventSnap = this.filter_.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n          newViewCache = oldViewCache.updateEventSnap(\n            newEventSnap,\n            oldEventSnap.isFullyInitialized(),\n            this.filter_.filtersNodes()\n          );\n        } else {\n          newViewCache = oldViewCache;\n        }\n      }\n    }\n    return newViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {string} childKey\n   * @return {boolean}\n   * @private\n   */\n  private static cacheHasChild_(\n    viewCache: ViewCache,\n    childKey: string\n  ): boolean {\n    return viewCache.getEventCache().isCompleteForChild(childKey);\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyUserMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    changedChildren.foreach((relativePath, childNode) => {\n      const writePath = path.child(relativePath);\n      if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n        curViewCache = this.applyUserOverwrite_(\n          curViewCache,\n          writePath,\n          childNode,\n          writesCache,\n          serverCache,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!Node} node\n   * @param {ImmutableTree.<!Node>} merge\n   * @return {!Node}\n   * @private\n   */\n  private applyMerge_(node: Node, merge: ImmutableTree<Node>): Node {\n    merge.foreach((relativePath, childNode) => {\n      node = node.updateChild(relativePath, childNode);\n    });\n    return node;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!ImmutableTree.<!Node>} changedChildren\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache\n   * @param {boolean} filterServerNode\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private applyServerMerge_(\n    viewCache: ViewCache,\n    path: Path,\n    changedChildren: ImmutableTree<Node>,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    filterServerNode: boolean,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n    // wait for the complete data update coming soon.\n    if (\n      viewCache\n        .getServerCache()\n        .getNode()\n        .isEmpty() &&\n      !viewCache.getServerCache().isFullyInitialized()\n    ) {\n      return viewCache;\n    }\n\n    // HACK: In the case of a limit query, there may be some changes that bump things out of the\n    // window leaving room for new items.  It's important we process these changes first, so we\n    // iterate the changes twice, first processing any that affect items currently in view.\n    // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n    // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n    // not the other.\n    let curViewCache = viewCache;\n    let viewMergeTree;\n    if (path.isEmpty()) {\n      viewMergeTree = changedChildren;\n    } else {\n      viewMergeTree = ImmutableTree.Empty.setTree(path, changedChildren);\n    }\n    const serverNode = viewCache.getServerCache().getNode();\n    viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n      if (serverNode.hasChild(childKey)) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n    viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n      const isUnknownDeepMerge =\n        !viewCache.getServerCache().isCompleteForChild(childKey) &&\n        childMergeTree.value == null;\n      if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n        const serverChild = viewCache\n          .getServerCache()\n          .getNode()\n          .getImmediateChild(childKey);\n        const newChild = this.applyMerge_(serverChild, childMergeTree);\n        curViewCache = this.applyServerOverwrite_(\n          curViewCache,\n          new Path(childKey),\n          newChild,\n          writesCache,\n          serverCache,\n          filterServerNode,\n          accumulator\n        );\n      }\n    });\n\n    return curViewCache;\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} ackPath\n   * @param {!ImmutableTree<!boolean>} affectedTree\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private ackUserWrite_(\n    viewCache: ViewCache,\n    ackPath: Path,\n    affectedTree: ImmutableTree<boolean>,\n    writesCache: WriteTreeRef,\n    completeCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    if (writesCache.shadowingWrite(ackPath) != null) {\n      return viewCache;\n    }\n\n    // Only filter server node if it is currently filtered\n    const filterServerNode = viewCache.getServerCache().isFiltered();\n\n    // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n    // now that it won't be shadowed.\n    const serverCache = viewCache.getServerCache();\n    if (affectedTree.value != null) {\n      // This is an overwrite.\n      if (\n        (ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n        serverCache.isCompleteForPath(ackPath)\n      ) {\n        return this.applyServerOverwrite_(\n          viewCache,\n          ackPath,\n          serverCache.getNode().getChild(ackPath),\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else if (ackPath.isEmpty()) {\n        // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n        // should just re-apply whatever we have in our cache as a merge.\n        let changedChildren = ImmutableTree.Empty;\n        serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n          changedChildren = changedChildren.set(new Path(name), node);\n        });\n        return this.applyServerMerge_(\n          viewCache,\n          ackPath,\n          changedChildren,\n          writesCache,\n          completeCache,\n          filterServerNode,\n          accumulator\n        );\n      } else {\n        return viewCache;\n      }\n    } else {\n      // This is a merge.\n      let changedChildren = ImmutableTree.Empty;\n      affectedTree.foreach((mergePath, value) => {\n        const serverCachePath = ackPath.child(mergePath);\n        if (serverCache.isCompleteForPath(serverCachePath)) {\n          changedChildren = changedChildren.set(\n            mergePath,\n            serverCache.getNode().getChild(serverCachePath)\n          );\n        }\n      });\n      return this.applyServerMerge_(\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private listenComplete_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    const oldServerNode = viewCache.getServerCache();\n    const newViewCache = viewCache.updateServerSnap(\n      oldServerNode.getNode(),\n      oldServerNode.isFullyInitialized() || path.isEmpty(),\n      oldServerNode.isFiltered()\n    );\n    return this.generateEventCacheAfterServerEvent_(\n      newViewCache,\n      path,\n      writesCache,\n      NO_COMPLETE_CHILD_SOURCE,\n      accumulator\n    );\n  }\n\n  /**\n   * @param {!ViewCache} viewCache\n   * @param {!Path} path\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @param {!ChildChangeAccumulator} accumulator\n   * @return {!ViewCache}\n   * @private\n   */\n  private revertUserWrite_(\n    viewCache: ViewCache,\n    path: Path,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null,\n    accumulator: ChildChangeAccumulator\n  ): ViewCache {\n    let complete;\n    if (writesCache.shadowingWrite(path) != null) {\n      return viewCache;\n    } else {\n      const source = new WriteTreeCompleteChildSource(\n        writesCache,\n        viewCache,\n        completeServerCache\n      );\n      const oldEventCache = viewCache.getEventCache().getNode();\n      let newEventCache;\n      if (path.isEmpty() || path.getFront() === '.priority') {\n        let newNode;\n        if (viewCache.getServerCache().isFullyInitialized()) {\n          newNode = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n        } else {\n          const serverChildren = viewCache.getServerCache().getNode();\n          assert(\n            serverChildren instanceof ChildrenNode,\n            'serverChildren would be complete if leaf node'\n          );\n          newNode = writesCache.calcCompleteEventChildren(\n            serverChildren as ChildrenNode\n          );\n        }\n        newNode = newNode as Node;\n        newEventCache = this.filter_.updateFullNode(\n          oldEventCache,\n          newNode,\n          accumulator\n        );\n      } else {\n        const childKey = path.getFront();\n        let newChild = writesCache.calcCompleteChild(\n          childKey,\n          viewCache.getServerCache()\n        );\n        if (\n          newChild == null &&\n          viewCache.getServerCache().isCompleteForChild(childKey)\n        ) {\n          newChild = oldEventCache.getImmediateChild(childKey);\n        }\n        if (newChild != null) {\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            newChild,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else if (\n          viewCache\n            .getEventCache()\n            .getNode()\n            .hasChild(childKey)\n        ) {\n          // No complete child available, delete the existing one, if any\n          newEventCache = this.filter_.updateChild(\n            oldEventCache,\n            childKey,\n            ChildrenNode.EMPTY_NODE,\n            path.popFront(),\n            source,\n            accumulator\n          );\n        } else {\n          newEventCache = oldEventCache;\n        }\n        if (\n          newEventCache.isEmpty() &&\n          viewCache.getServerCache().isFullyInitialized()\n        ) {\n          // We might have reverted all child writes. Maybe the old event was a leaf node\n          complete = writesCache.calcCompleteEventCache(\n            viewCache.getCompleteServerSnap()\n          );\n          if (complete.isLeafNode()) {\n            newEventCache = this.filter_.updateFullNode(\n              newEventCache,\n              complete,\n              accumulator\n            );\n          }\n        }\n      }\n      complete =\n        viewCache.getServerCache().isFullyInitialized() ||\n        writesCache.shadowingWrite(Path.Empty) != null;\n      return viewCache.updateEventSnap(\n        newEventCache,\n        complete,\n        this.filter_.filtersNodes()\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../snap/Node';\nimport { Change } from './Change';\nimport { assertionError } from '@firebase/util';\nimport { Query } from '../../api/Query';\nimport { Index } from '../snap/indexes/Index';\nimport { EventRegistration } from './EventRegistration';\nimport { Event } from './Event';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nexport class EventGenerator {\n  private index_: Index;\n\n  /**\n   *\n   * @param {!Query} query_\n   */\n  constructor(private query_: Query) {\n    /**\n     * @private\n     * @type {!Index}\n     */\n    this.index_ = this.query_.getQueryParams().getIndex();\n  }\n\n  /**\n   * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n   * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n   *\n   * Notes:\n   *  - child_moved events will be synthesized at this time for any child_changed events that affect\n   *    our index.\n   *  - prevName will be calculated based on the index ordering.\n   *\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {!Array.<!EventRegistration>} eventRegistrations\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistrations: EventRegistration[]\n  ): Event[] {\n    const events: Event[] = [];\n    const moves: Change[] = [];\n\n    changes.forEach(change => {\n      if (\n        change.type === Change.CHILD_CHANGED &&\n        this.index_.indexedValueChanged(\n          change.oldSnap as Node,\n          change.snapshotNode\n        )\n      ) {\n        moves.push(\n          Change.childMovedChange(\n            change.childName as string,\n            change.snapshotNode\n          )\n        );\n      }\n    });\n\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_REMOVED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_ADDED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_MOVED,\n      moves,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.CHILD_CHANGED,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n    this.generateEventsForType_(\n      events,\n      Change.VALUE,\n      changes,\n      eventRegistrations,\n      eventCache\n    );\n\n    return events;\n  }\n\n  /**\n   * Given changes of a single change type, generate the corresponding events.\n   *\n   * @param {!Array.<!Event>} events\n   * @param {!string} eventType\n   * @param {!Array.<!Change>} changes\n   * @param {!Array.<!EventRegistration>} registrations\n   * @param {!Node} eventCache\n   * @private\n   */\n  private generateEventsForType_(\n    events: Event[],\n    eventType: string,\n    changes: Change[],\n    registrations: EventRegistration[],\n    eventCache: Node\n  ) {\n    const filteredChanges = changes.filter(change => change.type === eventType);\n\n    filteredChanges.sort(this.compareChanges_.bind(this));\n    filteredChanges.forEach(change => {\n      const materializedChange = this.materializeSingleChange_(\n        change,\n        eventCache\n      );\n      registrations.forEach(registration => {\n        if (registration.respondsTo(change.type)) {\n          events.push(\n            registration.createEvent(materializedChange, this.query_)\n          );\n        }\n      });\n    });\n  }\n\n  /**\n   * @param {!Change} change\n   * @param {!Node} eventCache\n   * @return {!Change}\n   * @private\n   */\n  private materializeSingleChange_(change: Change, eventCache: Node): Change {\n    if (change.type === 'value' || change.type === 'child_removed') {\n      return change;\n    } else {\n      change.prevName = eventCache.getPredecessorChildName(\n        /** @type {!string} */\n        change.childName,\n        change.snapshotNode,\n        this.index_\n      );\n      return change;\n    }\n  }\n\n  /**\n   * @param {!Change} a\n   * @param {!Change} b\n   * @return {number}\n   * @private\n   */\n  private compareChanges_(a: Change, b: Change) {\n    if (a.childName == null || b.childName == null) {\n      throw assertionError('Should only compare child_ events.');\n    }\n    const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n    const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n    return this.index_.compare(aWrapped, bWrapped);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { ViewProcessor } from './ViewProcessor';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { CacheNode } from './CacheNode';\nimport { ViewCache } from './ViewCache';\nimport { EventGenerator } from './EventGenerator';\nimport { assert } from '@firebase/util';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Change } from './Change';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Query } from '../../api/Query';\nimport { EventRegistration } from './EventRegistration';\nimport { Node } from '../snap/Node';\nimport { Path } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\nimport { CancelEvent, Event } from './Event';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nexport class View {\n  private processor_: ViewProcessor;\n  private viewCache_: ViewCache;\n  private eventRegistrations_: EventRegistration[] = [];\n  private eventGenerator_: EventGenerator;\n\n  /**\n   *\n   * @param {!Query} query_\n   * @param {!ViewCache} initialViewCache\n   */\n  constructor(private query_: Query, initialViewCache: ViewCache) {\n    const params = this.query_.getQueryParams();\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = params.getNodeFilter();\n\n    /**\n     * @type {ViewProcessor}\n     * @private\n     */\n    this.processor_ = new ViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.getServerCache();\n    const initialEventCache = initialViewCache.getEventCache();\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    /**\n     * @type {!ViewCache}\n     * @private\n     */\n    this.viewCache_ = new ViewCache(newEventCache, newServerCache);\n\n    /**\n     * @type {!EventGenerator}\n     * @private\n     */\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  /**\n   * @return {!Query}\n   */\n  getQuery(): Query {\n    return this.query_;\n  }\n\n  /**\n   * @return {?Node}\n   */\n  getServerCache(): Node | null {\n    return this.viewCache_.getServerCache().getNode();\n  }\n\n  /**\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    const cache = this.viewCache_.getCompleteServerSnap();\n    if (cache) {\n      // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n      // we need to see if it contains the child we're interested in.\n      if (\n        this.query_.getQueryParams().loadsAllData() ||\n        (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())\n      ) {\n        return cache.getChild(path);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isEmpty(): boolean {\n    return this.eventRegistrations_.length === 0;\n  }\n\n  /**\n   * @param {!EventRegistration} eventRegistration\n   */\n  addEventRegistration(eventRegistration: EventRegistration) {\n    this.eventRegistrations_.push(eventRegistration);\n  }\n\n  /**\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    const cancelEvents: CancelEvent[] = [];\n    if (cancelError) {\n      assert(\n        eventRegistration == null,\n        'A cancel should cancel all event registrations.'\n      );\n      const path = this.query_.path;\n      this.eventRegistrations_.forEach(registration => {\n        cancelError /** @type {!Error} */ = cancelError;\n        const maybeEvent = registration.createCancelEvent(cancelError, path);\n        if (maybeEvent) {\n          cancelEvents.push(maybeEvent);\n        }\n      });\n    }\n\n    if (eventRegistration) {\n      let remaining = [];\n      for (let i = 0; i < this.eventRegistrations_.length; ++i) {\n        const existing = this.eventRegistrations_[i];\n        if (!existing.matches(eventRegistration)) {\n          remaining.push(existing);\n        } else if (eventRegistration.hasAnyCallback()) {\n          // We're removing just this one\n          remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n          break;\n        }\n      }\n      this.eventRegistrations_ = remaining;\n    } else {\n      this.eventRegistrations_ = [];\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Applies the given Operation, updates our cache, and returns the appropriate events.\n   *\n   * @param {!Operation} operation\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} completeServerCache\n   * @return {!Array.<!Event>}\n   */\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    completeServerCache: Node | null\n  ): Event[] {\n    if (\n      operation.type === OperationType.MERGE &&\n      operation.source.queryId !== null\n    ) {\n      assert(\n        this.viewCache_.getCompleteServerSnap(),\n        'We should always have a full cache before handling merges'\n      );\n      assert(\n        this.viewCache_.getCompleteEventSnap(),\n        'Missing event cache, even though we have a server cache'\n      );\n    }\n\n    const oldViewCache = this.viewCache_;\n    const result = this.processor_.applyOperation(\n      oldViewCache,\n      operation,\n      writesCache,\n      completeServerCache\n    );\n    this.processor_.assertIndexed(result.viewCache);\n\n    assert(\n      result.viewCache.getServerCache().isFullyInitialized() ||\n        !oldViewCache.getServerCache().isFullyInitialized(),\n      'Once a server snap is complete, it should never go back'\n    );\n\n    this.viewCache_ = result.viewCache;\n\n    return this.generateEventsForChanges_(\n      result.changes,\n      result.viewCache.getEventCache().getNode(),\n      null\n    );\n  }\n\n  /**\n   * @param {!EventRegistration} registration\n   * @return {!Array.<!Event>}\n   */\n  getInitialEvents(registration: EventRegistration): Event[] {\n    const eventSnap = this.viewCache_.getEventCache();\n    const initialChanges: Change[] = [];\n    if (!eventSnap.getNode().isLeafNode()) {\n      const eventNode = eventSnap.getNode() as ChildrenNode;\n      eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        initialChanges.push(Change.childAddedChange(key, childNode));\n      });\n    }\n    if (eventSnap.isFullyInitialized()) {\n      initialChanges.push(Change.valueChange(eventSnap.getNode()));\n    }\n    return this.generateEventsForChanges_(\n      initialChanges,\n      eventSnap.getNode(),\n      registration\n    );\n  }\n\n  /**\n   * @private\n   * @param {!Array.<!Change>} changes\n   * @param {!Node} eventCache\n   * @param {EventRegistration=} eventRegistration\n   * @return {!Array.<!Event>}\n   */\n  generateEventsForChanges_(\n    changes: Change[],\n    eventCache: Node,\n    eventRegistration?: EventRegistration\n  ): Event[] {\n    const registrations = eventRegistration\n      ? [eventRegistration]\n      : this.eventRegistrations_;\n    return this.eventGenerator_.generateEventsForChanges(\n      changes,\n      eventCache,\n      registrations\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CacheNode } from './view/CacheNode';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { assert } from '@firebase/util';\nimport { ViewCache } from './view/ViewCache';\nimport { View } from './view/View';\nimport { Operation } from './operation/Operation';\nimport { WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { Event } from './view/Event';\nimport { Reference, ReferenceConstructor } from '../api/Reference';\n\nlet __referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  static set __referenceConstructor(val: ReferenceConstructor) {\n    assert(\n      !__referenceConstructor,\n      '__referenceConstructor has already been defined'\n    );\n    __referenceConstructor = val;\n  }\n\n  static get __referenceConstructor() {\n    assert(__referenceConstructor, 'Reference.ts has not been loaded');\n    return __referenceConstructor;\n  }\n\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  private readonly views: Map<string, View> = new Map();\n\n  isEmpty(): boolean {\n    return this.views.size === 0;\n  }\n\n  applyOperation(\n    operation: Operation,\n    writesCache: WriteTreeRef,\n    optCompleteServerCache: Node | null\n  ): Event[] {\n    const queryId = operation.source.queryId;\n    if (queryId !== null) {\n      const view = this.views.get(queryId);\n      assert(view != null, 'SyncTree gave us an op for an invalid query.');\n      return view.applyOperation(\n        operation,\n        writesCache,\n        optCompleteServerCache\n      );\n    } else {\n      let events: Event[] = [];\n\n      for (const view of this.views.values()) {\n        events = events.concat(\n          view.applyOperation(operation, writesCache, optCompleteServerCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @param {!Query} query\n   * @param {!EventRegistration} eventRegistration\n   * @param {!WriteTreeRef} writesCache\n   * @param {?Node} serverCache Complete server cache, if we have it.\n   * @param {boolean} serverCacheComplete\n   * @return {!Array.<!Event>} Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration,\n    writesCache: WriteTreeRef,\n    serverCache: Node | null,\n    serverCacheComplete: boolean\n  ): Event[] {\n    const queryId = query.queryIdentifier();\n    let view = this.views.get(queryId);\n    if (!view) {\n      // TODO: make writesCache take flag for complete server node\n      let eventCache = writesCache.calcCompleteEventCache(\n        serverCacheComplete ? serverCache : null\n      );\n      let eventCacheComplete = false;\n      if (eventCache) {\n        eventCacheComplete = true;\n      } else if (serverCache instanceof ChildrenNode) {\n        eventCache = writesCache.calcCompleteEventChildren(serverCache);\n        eventCacheComplete = false;\n      } else {\n        eventCache = ChildrenNode.EMPTY_NODE;\n        eventCacheComplete = false;\n      }\n      const viewCache = new ViewCache(\n        new CacheNode(\n          /** @type {!Node} */ eventCache,\n          eventCacheComplete,\n          false\n        ),\n        new CacheNode(\n          /** @type {!Node} */ serverCache,\n          serverCacheComplete,\n          false\n        )\n      );\n      view = new View(query, viewCache);\n      this.views.set(queryId, view);\n    }\n\n    // This is guaranteed to exist now, we just created anything that was missing\n    view.addEventRegistration(eventRegistration);\n    return view.getInitialEvents(eventRegistration);\n  }\n\n  /**\n   * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n   *\n   * If query is the default query, we'll check all views for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n   *\n   * @param {!Query} query\n   * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n   * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): { removed: Query[]; events: Event[] } {\n    const queryId = query.queryIdentifier();\n    const removed: Query[] = [];\n    let cancelEvents: Event[] = [];\n    const hadCompleteView = this.hasCompleteView();\n    if (queryId === 'default') {\n      // When you do ref.off(...), we search all views for the registration to remove.\n      for (const [viewQueryId, view] of this.views.entries()) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(viewQueryId);\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    } else {\n      // remove the callback from the specific view.\n      const view = this.views.get(queryId);\n      if (view) {\n        cancelEvents = cancelEvents.concat(\n          view.removeEventRegistration(eventRegistration, cancelError)\n        );\n        if (view.isEmpty()) {\n          this.views.delete(queryId);\n\n          // We'll deal with complete views later.\n          if (\n            !view\n              .getQuery()\n              .getQueryParams()\n              .loadsAllData()\n          ) {\n            removed.push(view.getQuery());\n          }\n        }\n      }\n    }\n\n    if (hadCompleteView && !this.hasCompleteView()) {\n      // We removed our last complete view.\n      removed.push(\n        new SyncPoint.__referenceConstructor(query.repo, query.path)\n      );\n    }\n\n    return { removed, events: cancelEvents };\n  }\n\n  getQueryViews(): View[] {\n    const result = [];\n    for (const view of this.views.values()) {\n      if (\n        !view\n          .getQuery()\n          .getQueryParams()\n          .loadsAllData()\n      ) {\n        result.push(view);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @param path The path to the desired complete snapshot\n   * @return A complete cache, if it exists\n   */\n  getCompleteServerCache(path: Path): Node | null {\n    let serverCache: Node | null = null;\n    for (const view of this.views.values()) {\n      serverCache = serverCache || view.getCompleteServerCache(path);\n    }\n    return serverCache;\n  }\n\n  viewForQuery(query: Query): View | null {\n    const params = query.getQueryParams();\n    if (params.loadsAllData()) {\n      return this.getCompleteView();\n    } else {\n      const queryId = query.queryIdentifier();\n      return this.views.get(queryId);\n    }\n  }\n\n  viewExistsForQuery(query: Query): boolean {\n    return this.viewForQuery(query) != null;\n  }\n\n  hasCompleteView(): boolean {\n    return this.getCompleteView() != null;\n  }\n\n  getCompleteView(): View | null {\n    for (const view of this.views.values()) {\n      if (\n        view\n          .getQuery()\n          .getQueryParams()\n          .loadsAllData()\n      ) {\n        return view;\n      }\n    }\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { Path } from './util/Path';\nimport { Node, NamedNode } from './snap/Node';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { assert } from '@firebase/util';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(private writeTree_: ImmutableTree<Node>) {}\n\n  static Empty = new CompoundWrite(new ImmutableTree(null));\n\n  addWrite(path: Path, node: Node): CompoundWrite {\n    if (path.isEmpty()) {\n      return new CompoundWrite(new ImmutableTree(node));\n    } else {\n      const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n      if (rootmost != null) {\n        const rootMostPath = rootmost.path;\n        let value = rootmost.value;\n        const relativePath = Path.relativePath(rootMostPath, path);\n        value = value.updateChild(relativePath, node);\n        return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n      } else {\n        const subtree = new ImmutableTree(node);\n        const newWriteTree = this.writeTree_.setTree(path, subtree);\n        return new CompoundWrite(newWriteTree);\n      }\n    }\n  }\n\n  addWrites(path: Path, updates: { [name: string]: Node }): CompoundWrite {\n    let newWrite = this as CompoundWrite;\n    each(updates, (childKey: string, node: Node) => {\n      newWrite = newWrite.addWrite(path.child(childKey), node);\n    });\n    return newWrite;\n  }\n\n  /**\n   * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n   * location, which must be removed by calling this method with that path.\n   *\n   * @param path The path at which a write and all deeper writes should be removed\n   * @return {!CompoundWrite} The new CompoundWrite with the removed path\n   */\n  removeWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return CompoundWrite.Empty;\n    } else {\n      const newWriteTree = this.writeTree_.setTree(path, ImmutableTree.Empty);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n\n  /**\n   * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n   * considered \"complete\".\n   *\n   * @param path The path to check for\n   * @return Whether there is a complete write at that path\n   */\n  hasCompleteWrite(path: Path): boolean {\n    return this.getCompleteNode(path) != null;\n  }\n\n  /**\n   * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n   * writes from deeper paths, but will return child nodes from a more shallow path.\n   *\n   * @param path The path to get a complete write\n   * @return The node if complete at that path, or null otherwise.\n   */\n  getCompleteNode(path: Path): Node | null {\n    const rootmost = this.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      return this.writeTree_\n        .get(rootmost.path)\n        .getChild(Path.relativePath(rootmost.path, path));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Returns all children that are guaranteed to be a complete overwrite.\n   *\n   * @return A list of all complete children.\n   */\n  getCompleteChildren(): NamedNode[] {\n    const children: NamedNode[] = [];\n    const node = this.writeTree_.value;\n    if (node != null) {\n      // If it's a leaf node, it has no children; so nothing to do.\n      if (!node.isLeafNode()) {\n        (node as ChildrenNode).forEachChild(\n          PRIORITY_INDEX,\n          (childName, childNode) => {\n            children.push(new NamedNode(childName, childNode));\n          }\n        );\n      }\n    } else {\n      this.writeTree_.children.inorderTraversal((childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      });\n    }\n    return children;\n  }\n\n  childCompoundWrite(path: Path): CompoundWrite {\n    if (path.isEmpty()) {\n      return this;\n    } else {\n      const shadowingNode = this.getCompleteNode(path);\n      if (shadowingNode != null) {\n        return new CompoundWrite(new ImmutableTree(shadowingNode));\n      } else {\n        return new CompoundWrite(this.writeTree_.subtree(path));\n      }\n    }\n  }\n\n  /**\n   * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n   * @return Whether this CompoundWrite is empty\n   */\n  isEmpty(): boolean {\n    return this.writeTree_.isEmpty();\n  }\n\n  /**\n   * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n   * node\n   * @param node The node to apply this CompoundWrite to\n   * @return The node with all writes applied\n   */\n  apply(node: Node): Node {\n    return applySubtreeWrite(Path.Empty, this.writeTree_, node);\n  }\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(relativePath.child(childKey), childTree, node);\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(relativePath.child('.priority'), priorityWrite);\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { safeGet, assert, assertionError } from '@firebase/util';\n\nimport { Path } from './util/Path';\nimport { CompoundWrite } from './CompoundWrite';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { NamedNode, Node } from './snap/Node';\nimport { CacheNode } from './view/CacheNode';\nimport { Index } from './snap/indexes/Index';\nimport { each } from './util/util';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nexport class WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   *\n   * @type {!CompoundWrite}\n   * @private\n   */\n  private visibleWrites_: CompoundWrite = CompoundWrite.Empty;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   *\n   * @type {!Array.<!WriteRecord>}\n   * @private\n   */\n  private allWrites_: WriteRecord[] = [];\n\n  private lastWriteId_ = -1;\n\n  /**\n   * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n   *\n   * @param {!Path} path\n   * @return {!WriteTreeRef}\n   */\n  childWrites(path: Path): WriteTreeRef {\n    return new WriteTreeRef(path, this);\n  }\n\n  /**\n   * Record a new overwrite from user code.\n   *\n   * @param {!Path} path\n   * @param {!Node} snap\n   * @param {!number} writeId\n   * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n   */\n  addOverwrite(path: Path, snap: Node, writeId: number, visible?: boolean) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older write on top of newer ones'\n    );\n    if (visible === undefined) {\n      visible = true;\n    }\n    this.allWrites_.push({\n      path,\n      snap,\n      writeId,\n      visible\n    });\n\n    if (visible) {\n      this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n    }\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * Record a new merge from user code.\n   *\n   * @param {!Path} path\n   * @param {!Object.<string, !Node>} changedChildren\n   * @param {!number} writeId\n   */\n  addMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ) {\n    assert(\n      writeId > this.lastWriteId_,\n      'Stacking an older merge on top of newer ones'\n    );\n    this.allWrites_.push({\n      path,\n      children: changedChildren,\n      writeId,\n      visible: true\n    });\n\n    this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n    this.lastWriteId_ = writeId;\n  }\n\n  /**\n   * @param {!number} writeId\n   * @return {?WriteRecord}\n   */\n  getWrite(writeId: number): WriteRecord | null {\n    for (let i = 0; i < this.allWrites_.length; i++) {\n      const record = this.allWrites_[i];\n      if (record.writeId === writeId) {\n        return record;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n   * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n   *\n   * @param {!number} writeId\n   * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n   * events as a result).\n   */\n  removeWrite(writeId: number): boolean {\n    // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n    // out of order.\n    //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n    //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n    const idx = this.allWrites_.findIndex(s => {\n      return s.writeId === writeId;\n    });\n    assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n    const writeToRemove = this.allWrites_[idx];\n    this.allWrites_.splice(idx, 1);\n\n    let removedWriteWasVisible = writeToRemove.visible;\n    let removedWriteOverlapsWithOtherWrites = false;\n\n    let i = this.allWrites_.length - 1;\n\n    while (removedWriteWasVisible && i >= 0) {\n      const currentWrite = this.allWrites_[i];\n      if (currentWrite.visible) {\n        if (\n          i >= idx &&\n          this.recordContainsPath_(currentWrite, writeToRemove.path)\n        ) {\n          // The removed write was completely shadowed by a subsequent write.\n          removedWriteWasVisible = false;\n        } else if (writeToRemove.path.contains(currentWrite.path)) {\n          // Either we're covering some writes or they're covering part of us (depending on which came first).\n          removedWriteOverlapsWithOtherWrites = true;\n        }\n      }\n      i--;\n    }\n\n    if (!removedWriteWasVisible) {\n      return false;\n    } else if (removedWriteOverlapsWithOtherWrites) {\n      // There's some shadowing going on. Just rebuild the visible writes from scratch.\n      this.resetTree_();\n      return true;\n    } else {\n      // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n      if (writeToRemove.snap) {\n        this.visibleWrites_ = this.visibleWrites_.removeWrite(\n          writeToRemove.path\n        );\n      } else {\n        const children = writeToRemove.children;\n        each(children, (childName: string) => {\n          this.visibleWrites_ = this.visibleWrites_.removeWrite(\n            writeToRemove.path.child(childName)\n          );\n        });\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n   * No server data is considered.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  getCompleteWriteData(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n   * writes), attempt to calculate a complete snapshot for the given path\n   *\n   * @param {!Path} treePath\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    treePath: Path,\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    if (!writeIdsToExclude && !includeHiddenWrites) {\n      const shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n      if (shadowingNode != null) {\n        return shadowingNode;\n      } else {\n        const subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n        if (subMerge.isEmpty()) {\n          return completeServerCache;\n        } else if (\n          completeServerCache == null &&\n          !subMerge.hasCompleteWrite(Path.Empty)\n        ) {\n          // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n          return null;\n        } else {\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return subMerge.apply(layeredCache);\n        }\n      }\n    } else {\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      if (!includeHiddenWrites && merge.isEmpty()) {\n        return completeServerCache;\n      } else {\n        // If the server cache is null, and we don't have a complete cache, we need to return null\n        if (\n          !includeHiddenWrites &&\n          completeServerCache == null &&\n          !merge.hasCompleteWrite(Path.Empty)\n        ) {\n          return null;\n        } else {\n          const filter = function(write: WriteRecord) {\n            return (\n              (write.visible || includeHiddenWrites) &&\n              (!writeIdsToExclude ||\n                !~writeIdsToExclude.indexOf(write.writeId)) &&\n              (write.path.contains(treePath) || treePath.contains(write.path))\n            );\n          };\n          const mergeAtPath = WriteTree.layerTree_(\n            this.allWrites_,\n            filter,\n            treePath\n          );\n          const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n          return mergeAtPath.apply(layeredCache);\n        }\n      }\n    }\n  }\n\n  /**\n   * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n   * Used when creating new views, to pre-fill their complete event children snapshot.\n   *\n   * @param {!Path} treePath\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    treePath: Path,\n    completeServerChildren: ChildrenNode | null\n  ) {\n    let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n    const topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n    if (topLevelSet) {\n      if (!topLevelSet.isLeafNode()) {\n        // we're shadowing everything. Return the children.\n        topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            childSnap\n          );\n        });\n      }\n      return completeChildren;\n    } else if (completeServerChildren) {\n      // Layer any children we have on top of this\n      // We know we don't have a top-level set, so just enumerate existing children\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      completeServerChildren.forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          const node = merge\n            .childCompoundWrite(new Path(childName))\n            .apply(childNode);\n          completeChildren = completeChildren.updateImmediateChild(\n            childName,\n            node\n          );\n        }\n      );\n      // Add any complete children we have from the set\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    } else {\n      // We don't have anything to layer on top of. Layer on any children we have\n      // Note that we can return an empty snap if we have a defined delete\n      const merge = this.visibleWrites_.childCompoundWrite(treePath);\n      merge.getCompleteChildren().forEach(namedNode => {\n        completeChildren = completeChildren.updateImmediateChild(\n          namedNode.name,\n          namedNode.node\n        );\n      });\n      return completeChildren;\n    }\n  }\n\n  /**\n   * Given that the underlying server data has updated, determine what, if anything, needs to be\n   * applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events\n   *\n   * Either existingEventSnap or existingServerSnap must exist\n   *\n   * @param {!Path} treePath\n   * @param {!Path} childPath\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    treePath: Path,\n    childPath: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    assert(\n      existingEventSnap || existingServerSnap,\n      'Either existingEventSnap or existingServerSnap must exist'\n    );\n    const path = treePath.child(childPath);\n    if (this.visibleWrites_.hasCompleteWrite(path)) {\n      // At this point we can probably guarantee that we're in case 2, meaning no events\n      // May need to check visibility while doing the findRootMostValueAndPath call\n      return null;\n    } else {\n      // No complete shadowing. We're either partially shadowing or not shadowing at all.\n      const childMerge = this.visibleWrites_.childCompoundWrite(path);\n      if (childMerge.isEmpty()) {\n        // We're not shadowing at all. Case 1\n        return existingServerSnap.getChild(childPath);\n      } else {\n        // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n        // However this is tricky to find out, since user updates don't necessary change the server\n        // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n        // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n        // only check if the updates change the serverNode.\n        // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n        return childMerge.apply(existingServerSnap.getChild(childPath));\n      }\n    }\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!Path} treePath\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerSnap\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    treePath: Path,\n    childKey: string,\n    existingServerSnap: CacheNode\n  ): Node | null {\n    const path = treePath.child(childKey);\n    const shadowingNode = this.visibleWrites_.getCompleteNode(path);\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      if (existingServerSnap.isCompleteForChild(childKey)) {\n        const childMerge = this.visibleWrites_.childCompoundWrite(path);\n        return childMerge.apply(\n          existingServerSnap.getNode().getImmediateChild(childKey)\n        );\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.visibleWrites_.getCompleteNode(path);\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window.\n   */\n  calcIndexedSlice(\n    treePath: Path,\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    let toIterate: Node;\n    const merge = this.visibleWrites_.childCompoundWrite(treePath);\n    const shadowingNode = merge.getCompleteNode(Path.Empty);\n    if (shadowingNode != null) {\n      toIterate = shadowingNode;\n    } else if (completeServerData != null) {\n      toIterate = merge.apply(completeServerData);\n    } else {\n      // no children to iterate on\n      return [];\n    }\n    toIterate = toIterate.withIndex(index);\n    if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n      const nodes = [];\n      const cmp = index.getCompare();\n      const iter = reverse\n        ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n        : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n      let next = iter.getNext();\n      while (next && nodes.length < count) {\n        if (cmp(next, startPost) !== 0) {\n          nodes.push(next);\n        }\n        next = iter.getNext();\n      }\n      return nodes;\n    } else {\n      return [];\n    }\n  }\n\n  private recordContainsPath_(writeRecord: WriteRecord, path: Path): boolean {\n    if (writeRecord.snap) {\n      return writeRecord.path.contains(path);\n    } else {\n      for (const childName in writeRecord.children) {\n        if (\n          writeRecord.children.hasOwnProperty(childName) &&\n          writeRecord.path.child(childName).contains(path)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n\n  /**\n   * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n   */\n  private resetTree_() {\n    this.visibleWrites_ = WriteTree.layerTree_(\n      this.allWrites_,\n      WriteTree.DefaultFilter_,\n      Path.Empty\n    );\n    if (this.allWrites_.length > 0) {\n      this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n    } else {\n      this.lastWriteId_ = -1;\n    }\n  }\n\n  /**\n   * The default filter used when constructing the tree. Keep everything that's visible.\n   */\n  private static DefaultFilter_(write: WriteRecord) {\n    return write.visible;\n  }\n\n  /**\n   * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n   * event data at that path.\n   */\n  private static layerTree_(\n    writes: WriteRecord[],\n    filter: (w: WriteRecord) => boolean,\n    treeRoot: Path\n  ): CompoundWrite {\n    let compoundWrite = CompoundWrite.Empty;\n    for (let i = 0; i < writes.length; ++i) {\n      const write = writes[i];\n      // Theory, a later set will either:\n      // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n      // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n      if (filter(write)) {\n        const writePath = write.path;\n        let relativePath;\n        if (write.snap) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            compoundWrite = compoundWrite.addWrite(\n              Path.Empty,\n              write.snap.getChild(relativePath)\n            );\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else if (write.children) {\n          if (treeRoot.contains(writePath)) {\n            relativePath = Path.relativePath(treeRoot, writePath);\n            compoundWrite = compoundWrite.addWrites(\n              relativePath,\n              write.children\n            );\n          } else if (writePath.contains(treeRoot)) {\n            relativePath = Path.relativePath(writePath, treeRoot);\n            if (relativePath.isEmpty()) {\n              compoundWrite = compoundWrite.addWrites(\n                Path.Empty,\n                write.children\n              );\n            } else {\n              const child = safeGet(write.children, relativePath.getFront());\n              if (child) {\n                // There exists a child in this node that matches the root path\n                const deepNode = child.getChild(relativePath.popFront());\n                compoundWrite = compoundWrite.addWrite(Path.Empty, deepNode);\n              }\n            }\n          } else {\n            // There is no overlap between root path and write path, ignore write\n          }\n        } else {\n          throw assertionError('WriteRecord should have .snap or .children');\n        }\n      }\n    }\n    return compoundWrite;\n  }\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nexport class WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   *\n   * @type {!Path}\n   * @private\n   * @const\n   */\n  private readonly treePath_: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   *\n   * @type {!WriteTree}\n   * @private\n   * @const\n   */\n  private readonly writeTree_: WriteTree;\n\n  /**\n   * @param {!Path} path\n   * @param {!WriteTree} writeTree\n   */\n  constructor(path: Path, writeTree: WriteTree) {\n    this.treePath_ = path;\n    this.writeTree_ = writeTree;\n  }\n\n  /**\n   * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n   * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n   * can lead to a more expensive calculation.\n   *\n   * @param {?Node} completeServerCache\n   * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n   * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n   * @return {?Node}\n   */\n  calcCompleteEventCache(\n    completeServerCache: Node | null,\n    writeIdsToExclude?: number[],\n    includeHiddenWrites?: boolean\n  ): Node | null {\n    return this.writeTree_.calcCompleteEventCache(\n      this.treePath_,\n      completeServerCache,\n      writeIdsToExclude,\n      includeHiddenWrites\n    );\n  }\n\n  /**\n   * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n   * mix of the given server data and write data.\n   *\n   * @param {?ChildrenNode} completeServerChildren\n   * @return {!ChildrenNode}\n   */\n  calcCompleteEventChildren(\n    completeServerChildren: ChildrenNode | null\n  ): ChildrenNode {\n    return this.writeTree_.calcCompleteEventChildren(\n      this.treePath_,\n      completeServerChildren\n    ) as ChildrenNode;\n  }\n\n  /**\n   * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n   * if anything, needs to be applied to the event cache.\n   *\n   * Possibilities:\n   *\n   * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n   *\n   * 2. Some write is completely shadowing. No events to be raised\n   *\n   * 3. Is partially shadowed. Events should be raised\n   *\n   * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n   *\n   * @param {!Path} path\n   * @param {?Node} existingEventSnap\n   * @param {?Node} existingServerSnap\n   * @return {?Node}\n   */\n  calcEventCacheAfterServerOverwrite(\n    path: Path,\n    existingEventSnap: Node | null,\n    existingServerSnap: Node | null\n  ): Node | null {\n    return this.writeTree_.calcEventCacheAfterServerOverwrite(\n      this.treePath_,\n      path,\n      existingEventSnap,\n      existingServerSnap\n    );\n  }\n\n  /**\n   * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n   * a higher path, this will return the child of that write relative to the write and this path.\n   * Returns null if there is no write at this path.\n   *\n   * @param {!Path} path\n   * @return {?Node}\n   */\n  shadowingWrite(path: Path): Node | null {\n    return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n  }\n\n  /**\n   * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n   * the window, but may now be in the window\n   *\n   * @param {?Node} completeServerData\n   * @param {!NamedNode} startPost\n   * @param {!number} count\n   * @param {boolean} reverse\n   * @param {!Index} index\n   * @return {!Array.<!NamedNode>}\n   */\n  calcIndexedSlice(\n    completeServerData: Node | null,\n    startPost: NamedNode,\n    count: number,\n    reverse: boolean,\n    index: Index\n  ): NamedNode[] {\n    return this.writeTree_.calcIndexedSlice(\n      this.treePath_,\n      completeServerData,\n      startPost,\n      count,\n      reverse,\n      index\n    );\n  }\n\n  /**\n   * Returns a complete child for a given server snap after applying all user writes or null if there is no\n   * complete child for this ChildKey.\n   *\n   * @param {!string} childKey\n   * @param {!CacheNode} existingServerCache\n   * @return {?Node}\n   */\n  calcCompleteChild(\n    childKey: string,\n    existingServerCache: CacheNode\n  ): Node | null {\n    return this.writeTree_.calcCompleteChild(\n      this.treePath_,\n      childKey,\n      existingServerCache\n    );\n  }\n\n  /**\n   * Return a WriteTreeRef for a child.\n   *\n   * @param {string} childName\n   * @return {!WriteTreeRef}\n   */\n  child(childName: string): WriteTreeRef {\n    return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\nimport { errorForServerCode, each } from './util/util';\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport { Operation, OperationSource } from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { Path } from './util/Path';\nimport { SyncPoint } from './SyncPoint';\nimport { WriteTree, WriteTreeRef } from './WriteTree';\nimport { Query } from '../api/Query';\nimport { Node } from './snap/Node';\nimport { Event } from './view/Event';\nimport { EventRegistration } from './view/EventRegistration';\nimport { View } from './view/View';\n\n/**\n * @typedef {{\n *   startListening: function(\n *     !Query,\n *     ?number,\n *     function():string,\n *     function(!string, *):!Array.<!Event>\n *   ):!Array.<!Event>,\n *\n *   stopListening: function(!Query, ?number)\n * }}\n */\nexport interface ListenProvider {\n  startListening(\n    query: Query,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: Query, b: number | null): void;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  private syncPointTree_: ImmutableTree<SyncPoint> = ImmutableTree.Empty;\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  private pendingWriteTree_ = new WriteTree();\n\n  private readonly tagToQueryMap: Map<number, string> = new Map();\n  private readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(private listenProvider_: ListenProvider) {}\n\n  /**\n   * Apply the data changes for a user-generated set() or transaction() call.\n   *\n   * @return Events to raise.\n   */\n  applyUserOverwrite(\n    path: Path,\n    newData: Node,\n    writeId: number,\n    visible?: boolean\n  ): Event[] {\n    // Record pending write.\n    this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n\n    if (!visible) {\n      return [];\n    } else {\n      return this.applyOperationToSyncPoints_(\n        new Overwrite(OperationSource.User, path, newData)\n      );\n    }\n  }\n\n  /**\n   * Apply the data from a user-generated update() call\n   *\n   * @return Events to raise.\n   */\n  applyUserMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    writeId: number\n  ): Event[] {\n    // Record pending merge.\n    this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.User, path, changeTree)\n    );\n  }\n\n  /**\n   * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n   *\n   * @param revert True if the given write failed and needs to be reverted\n   * @return Events to raise.\n   */\n  ackUserWrite(writeId: number, revert: boolean = false) {\n    const write = this.pendingWriteTree_.getWrite(writeId);\n    const needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n    if (!needToReevaluate) {\n      return [];\n    } else {\n      let affectedTree = ImmutableTree.Empty;\n      if (write.snap != null) {\n        // overwrite\n        affectedTree = affectedTree.set(Path.Empty, true);\n      } else {\n        each(write.children, (pathString: string, node: Node) => {\n          affectedTree = affectedTree.set(new Path(pathString), node);\n        });\n      }\n      return this.applyOperationToSyncPoints_(\n        new AckUserWrite(write.path, affectedTree, revert)\n      );\n    }\n  }\n\n  /**\n   * Apply new server data for the specified path..\n   *\n   * @return Events to raise.\n   */\n  applyServerOverwrite(path: Path, newData: Node): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new Overwrite(OperationSource.Server, path, newData)\n    );\n  }\n\n  /**\n   * Apply new server data to be merged in at the specified path.\n   *\n   * @return Events to raise.\n   */\n  applyServerMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node }\n  ): Event[] {\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n\n    return this.applyOperationToSyncPoints_(\n      new Merge(OperationSource.Server, path, changeTree)\n    );\n  }\n\n  /**\n   * Apply a listen complete for a query\n   *\n   * @return Events to raise.\n   */\n  applyListenComplete(path: Path): Event[] {\n    return this.applyOperationToSyncPoints_(\n      new ListenComplete(OperationSource.Server, path)\n    );\n  }\n\n  /**\n   * Apply new server data for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryOverwrite(path: Path, snap: Node, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey != null) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new Overwrite(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        snap\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // Query must have been removed already\n      return [];\n    }\n  }\n\n  /**\n   * Apply server data to be merged in for the specified tagged query.\n   *\n   * @return Events to raise.\n   */\n  applyTaggedQueryMerge(\n    path: Path,\n    changedChildren: { [k: string]: Node },\n    tag: number\n  ): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const changeTree = ImmutableTree.fromObject(changedChildren);\n      const op = new Merge(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath,\n        changeTree\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Apply a listen complete for a tagged query\n   *\n   * @return Events to raise.\n   */\n  applyTaggedListenComplete(path: Path, tag: number): Event[] {\n    const queryKey = this.queryKeyForTag_(tag);\n    if (queryKey) {\n      const r = SyncTree.parseQueryKey_(queryKey);\n      const queryPath = r.path,\n        queryId = r.queryId;\n      const relativePath = Path.relativePath(queryPath, path);\n      const op = new ListenComplete(\n        OperationSource.forServerTaggedQuery(queryId),\n        relativePath\n      );\n      return this.applyTaggedOperation_(queryPath, op);\n    } else {\n      // We've already removed the query. No big deal, ignore the update\n      return [];\n    }\n  }\n\n  /**\n   * Add an event callback for the specified query.\n   *\n   * @return Events to raise.\n   */\n  addEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration\n  ): Event[] {\n    const path = query.path;\n\n    let serverCache: Node | null = null;\n    let foundAncestorDefaultView = false;\n    // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n    // Consider optimizing this once there's a better understanding of what actual behavior will be.\n    this.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n      const relativePath = Path.relativePath(pathToSyncPoint, path);\n      serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || sp.hasCompleteView();\n    });\n    let syncPoint = this.syncPointTree_.get(path);\n    if (!syncPoint) {\n      syncPoint = new SyncPoint();\n      this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n    } else {\n      foundAncestorDefaultView =\n        foundAncestorDefaultView || syncPoint.hasCompleteView();\n      serverCache = serverCache || syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let serverCacheComplete;\n    if (serverCache != null) {\n      serverCacheComplete = true;\n    } else {\n      serverCacheComplete = false;\n      serverCache = ChildrenNode.EMPTY_NODE;\n      const subtree = this.syncPointTree_.subtree(path);\n      subtree.foreachChild((childName, childSyncPoint) => {\n        const completeCache = childSyncPoint.getCompleteServerCache(Path.Empty);\n        if (completeCache) {\n          serverCache = serverCache.updateImmediateChild(\n            childName,\n            completeCache\n          );\n        }\n      });\n    }\n\n    const viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n    if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n      // We need to track a tag for this query\n      const queryKey = SyncTree.makeQueryKey_(query);\n      assert(\n        !this.queryToTagMap.has(queryKey),\n        'View does not exist, but we have a tag'\n      );\n      const tag = SyncTree.getNextQueryTag_();\n      this.queryToTagMap.set(queryKey, tag);\n      this.tagToQueryMap.set(tag, queryKey);\n    }\n    const writesCache = this.pendingWriteTree_.childWrites(path);\n    let events = syncPoint.addEventRegistration(\n      query,\n      eventRegistration,\n      writesCache,\n      serverCache,\n      serverCacheComplete\n    );\n    if (!viewAlreadyExists && !foundAncestorDefaultView) {\n      const view /** @type !View */ = syncPoint.viewForQuery(query);\n      events = events.concat(this.setupListener_(query, view));\n    }\n    return events;\n  }\n\n  /**\n   * Remove event callback(s).\n   *\n   * If query is the default query, we'll check all queries for the specified eventRegistration.\n   * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n   *\n   * @param eventRegistration If null, all callbacks are removed.\n   * @param cancelError If a cancelError is provided, appropriate cancel events will be returned.\n   * @return Cancel events, if cancelError was provided.\n   */\n  removeEventRegistration(\n    query: Query,\n    eventRegistration: EventRegistration | null,\n    cancelError?: Error\n  ): Event[] {\n    // Find the syncPoint first. Then deal with whether or not it has matching listeners\n    const path = query.path;\n    const maybeSyncPoint = this.syncPointTree_.get(path);\n    let cancelEvents: Event[] = [];\n    // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n    // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n    // not loadsAllData().\n    if (\n      maybeSyncPoint &&\n      (query.queryIdentifier() === 'default' ||\n        maybeSyncPoint.viewExistsForQuery(query))\n    ) {\n      /**\n       * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n       */\n      const removedAndEvents = maybeSyncPoint.removeEventRegistration(\n        query,\n        eventRegistration,\n        cancelError\n      );\n      if (maybeSyncPoint.isEmpty()) {\n        this.syncPointTree_ = this.syncPointTree_.remove(path);\n      }\n      const removed = removedAndEvents.removed;\n      cancelEvents = removedAndEvents.events;\n      // We may have just removed one of many listeners and can short-circuit this whole process\n      // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n      // properly set up.\n      //\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query.getQueryParams().loadsAllData();\n        });\n      const covered = this.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) => {\n          return parentSyncPoint.hasCompleteView();\n        }\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = this.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = this.collectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.getQuery();\n            const listener = this.createListenerForView_(view);\n            this.listenProvider_.startListening(\n              SyncTree.queryForListening_(newQuery),\n              this.tagForQuery_(newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        } else {\n          // There's nothing below us, so nothing we need to start listening on\n        }\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          this.listenProvider_.stopListening(\n            SyncTree.queryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: Query) => {\n            const tagToRemove = this.queryToTagMap.get(\n              SyncTree.makeQueryKey_(queryToRemove)\n            );\n            this.listenProvider_.stopListening(\n              SyncTree.queryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n      // Now, clear all of the tags we're tracking for the removed listens\n      this.removeTags_(removed);\n    } else {\n      // No-op, this listener must've been already removed\n    }\n    return cancelEvents;\n  }\n\n  /**\n   * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n   * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n   * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n   *     <incremented total> as the write is applied locally and then acknowledged at the server.\n   *\n   * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n   *\n   * @param path The path to the data we want\n   * @param writeIdsToExclude A specific set to be excluded\n   */\n  calcCompleteEventCache(path: Path, writeIdsToExclude?: number[]): Node {\n    const includeHiddenSets = true;\n    const writeTree = this.pendingWriteTree_;\n    const serverCache = this.syncPointTree_.findOnPath(\n      path,\n      (pathSoFar, syncPoint) => {\n        const relativePath = Path.relativePath(pathSoFar, path);\n        const serverCache = syncPoint.getCompleteServerCache(relativePath);\n        if (serverCache) {\n          return serverCache;\n        }\n      }\n    );\n    return writeTree.calcCompleteEventCache(\n      path,\n      serverCache,\n      writeIdsToExclude,\n      includeHiddenSets\n    );\n  }\n\n  /**\n   * This collapses multiple unfiltered views into a single view, since we only need a single\n   * listener for them.\n   */\n  private collectDistinctViewsForSubTree_(\n    subtree: ImmutableTree<SyncPoint>\n  ): View[] {\n    return subtree.fold<View[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n          const completeView = maybeChildSyncPoint.getCompleteView();\n          return [completeView];\n        } else {\n          // No complete view here, flatten any deeper listens into an array\n          let views: View[] = [];\n          if (maybeChildSyncPoint) {\n            views = maybeChildSyncPoint.getQueryViews();\n          }\n          each(childMap, (_key: string, childViews: View[]) => {\n            views = views.concat(childViews);\n          });\n          return views;\n        }\n      }\n    );\n  }\n\n  private removeTags_(queries: Query[]) {\n    for (let j = 0; j < queries.length; ++j) {\n      const removedQuery = queries[j];\n      if (!removedQuery.getQueryParams().loadsAllData()) {\n        // We should have a tag for this\n        const removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n        const removedQueryTag = this.queryToTagMap.get(removedQueryKey);\n        this.queryToTagMap.delete(removedQueryKey);\n        this.tagToQueryMap.delete(removedQueryTag);\n      }\n    }\n  }\n\n  /**\n   * Normalizes a query to a query we send the server for listening\n   *\n   * @return The normalized query\n   */\n  private static queryForListening_(query: Query): Query {\n    if (\n      query.getQueryParams().loadsAllData() &&\n      !query.getQueryParams().isDefault()\n    ) {\n      // We treat queries that load all data as default queries\n      // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n      // from Query\n      return query.getRef()!;\n    } else {\n      return query;\n    }\n  }\n\n  /**\n   * For a given new listen, manage the de-duplication of outstanding subscriptions.\n   *\n   * @return This method can return events to support synchronous data sources\n   */\n  private setupListener_(query: Query, view: View): Event[] {\n    const path = query.path;\n    const tag = this.tagForQuery_(query);\n    const listener = this.createListenerForView_(view);\n\n    const events = this.listenProvider_.startListening(\n      SyncTree.queryForListening_(query),\n      tag,\n      listener.hashFn,\n      listener.onComplete\n    );\n\n    const subtree = this.syncPointTree_.subtree(path);\n    // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n    // may need to shadow other listens as well.\n    if (tag) {\n      assert(\n        !subtree.value.hasCompleteView(),\n        \"If we're adding a query, it shouldn't be shadowed\"\n      );\n    } else {\n      // Shadow everything at or below this location, this is a default listener.\n      const queriesToStop = subtree.fold<Query[]>(\n        (relativePath, maybeChildSyncPoint, childMap) => {\n          if (\n            !relativePath.isEmpty() &&\n            maybeChildSyncPoint &&\n            maybeChildSyncPoint.hasCompleteView()\n          ) {\n            return [maybeChildSyncPoint.getCompleteView().getQuery()];\n          } else {\n            // No default listener here, flatten any deeper queries into an array\n            let queries: Query[] = [];\n            if (maybeChildSyncPoint) {\n              queries = queries.concat(\n                maybeChildSyncPoint.getQueryViews().map(view => view.getQuery())\n              );\n            }\n            each(childMap, (_key: string, childQueries: Query[]) => {\n              queries = queries.concat(childQueries);\n            });\n            return queries;\n          }\n        }\n      );\n      for (let i = 0; i < queriesToStop.length; ++i) {\n        const queryToStop = queriesToStop[i];\n        this.listenProvider_.stopListening(\n          SyncTree.queryForListening_(queryToStop),\n          this.tagForQuery_(queryToStop)\n        );\n      }\n    }\n    return events;\n  }\n\n  private createListenerForView_(\n    view: View\n  ): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n    const query = view.getQuery();\n    const tag = this.tagForQuery_(query);\n\n    return {\n      hashFn: () => {\n        const cache = view.getServerCache() || ChildrenNode.EMPTY_NODE;\n        return cache.hash();\n      },\n      onComplete: (status: string): Event[] => {\n        if (status === 'ok') {\n          if (tag) {\n            return this.applyTaggedListenComplete(query.path, tag);\n          } else {\n            return this.applyListenComplete(query.path);\n          }\n        } else {\n          // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n          // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n          const error = errorForServerCode(status, query);\n          return this.removeEventRegistration(\n            query,\n            /*eventRegistration*/ null,\n            error\n          );\n        }\n      }\n    };\n  }\n\n  /**\n   * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n   */\n  private static makeQueryKey_(query: Query): string {\n    return query.path.toString() + '$' + query.queryIdentifier();\n  }\n\n  /**\n   * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n   */\n  private static parseQueryKey_(\n    queryKey: string\n  ): { queryId: string; path: Path } {\n    const splitIndex = queryKey.indexOf('$');\n    assert(\n      splitIndex !== -1 && splitIndex < queryKey.length - 1,\n      'Bad queryKey.'\n    );\n    return {\n      queryId: queryKey.substr(splitIndex + 1),\n      path: new Path(queryKey.substr(0, splitIndex))\n    };\n  }\n\n  /**\n   * Return the query associated with the given tag, if we have one\n   */\n  private queryKeyForTag_(tag: number): string | null {\n    return this.tagToQueryMap.get(tag);\n  }\n\n  /**\n   * Return the tag associated with the given query.\n   */\n  private tagForQuery_(query: Query): number | null {\n    const queryKey = SyncTree.makeQueryKey_(query);\n    return this.queryToTagMap.get(queryKey);\n  }\n\n  /**\n   * Static tracker for next query tag.\n   */\n  private static nextQueryTag_ = 1;\n\n  /**\n   * Static accessor for query tags.\n   */\n  private static getNextQueryTag_(): number {\n    return SyncTree.nextQueryTag_++;\n  }\n\n  /**\n   * A helper method to apply tagged operations\n   */\n  private applyTaggedOperation_(\n    queryPath: Path,\n    operation: Operation\n  ): Event[] {\n    const syncPoint = this.syncPointTree_.get(queryPath);\n    assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n    const writesCache = this.pendingWriteTree_.childWrites(queryPath);\n    return syncPoint.applyOperation(\n      operation,\n      writesCache,\n      /*serverCache=*/ null\n    );\n  }\n\n  /**\n   * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n   *\n   * NOTES:\n   * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n   *\n   * - We call applyOperation() on each SyncPoint passing three things:\n   *   1. A version of the Operation that has been made relative to the SyncPoint location.\n   *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n   *   3. A snapshot Node with cached server data, if we have it.\n   *\n   * - We concatenate all of the events returned by each SyncPoint and return the result.\n   */\n  private applyOperationToSyncPoints_(operation: Operation): Event[] {\n    return this.applyOperationHelper_(\n      operation,\n      this.syncPointTree_,\n      /*serverCache=*/ null,\n      this.pendingWriteTree_.childWrites(Path.Empty)\n    );\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    if (operation.path.isEmpty()) {\n      return this.applyOperationDescendantsHelper_(\n        operation,\n        syncPointTree,\n        serverCache,\n        writesCache\n      );\n    } else {\n      const syncPoint = syncPointTree.get(Path.Empty);\n\n      // If we don't have cached server data, see if we can get it from this SyncPoint.\n      if (serverCache == null && syncPoint != null) {\n        serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n      }\n\n      let events: Event[] = [];\n      const childName = operation.path.getFront();\n      const childOperation = operation.operationForChild(childName);\n      const childTree = syncPointTree.children.get(childName);\n      if (childTree && childOperation) {\n        const childServerCache = serverCache\n          ? serverCache.getImmediateChild(childName)\n          : null;\n        const childWritesCache = writesCache.child(childName);\n        events = events.concat(\n          this.applyOperationHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n\n      if (syncPoint) {\n        events = events.concat(\n          syncPoint.applyOperation(operation, writesCache, serverCache)\n        );\n      }\n\n      return events;\n    }\n  }\n\n  /**\n   * Recursive helper for applyOperationToSyncPoints_\n   */\n  private applyOperationDescendantsHelper_(\n    operation: Operation,\n    syncPointTree: ImmutableTree<SyncPoint>,\n    serverCache: Node | null,\n    writesCache: WriteTreeRef\n  ): Event[] {\n    const syncPoint = syncPointTree.get(Path.Empty);\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPoint.getCompleteServerCache(Path.Empty);\n    }\n\n    let events: Event[] = [];\n    syncPointTree.children.inorderTraversal((childName, childTree) => {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writesCache.child(childName);\n      const childOperation = operation.operationForChild(childName);\n      if (childOperation) {\n        events = events.concat(\n          this.applyOperationDescendantsHelper_(\n            childOperation,\n            childTree,\n            childServerCache,\n            childWritesCache\n          )\n        );\n      }\n    });\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPoint.applyOperation(operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Path } from './util/Path';\nimport { Node } from './snap/Node';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { log, warn } from './util/util';\nimport { FirebaseApp } from '@firebase/app-types';\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n  constructor(\n    private app_: FirebaseApp,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.get().then(auth => (this.auth_ = auth));\n    }\n  }\n\n  /**\n   * @param {boolean} forceRefresh\n   * @return {!Promise<FirebaseAuthTokenData>}\n   */\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return Promise.resolve(null);\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void) {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      setTimeout(() => listener(null), 0);\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void) {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken() {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.app_.name +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.app_.options) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { RepoInfo } from '../RepoInfo';\n\nexport class StatsManager {\n  private static collections_: { [k: string]: StatsCollection } = {};\n  private static reporters_: { [k: string]: unknown } = {};\n\n  static getCollection(repoInfo: RepoInfo): StatsCollection {\n    const hashString = repoInfo.toString();\n\n    if (!this.collections_[hashString]) {\n      this.collections_[hashString] = new StatsCollection();\n    }\n\n    return this.collections_[hashString];\n  }\n\n  static getOrCreateReporter<T>(\n    repoInfo: RepoInfo,\n    creatorFunction: () => T\n  ): T {\n    const hashString = repoInfo.toString();\n\n    if (!this.reporters_[hashString]) {\n      this.reporters_[hashString] = creatorFunction();\n    }\n\n    return this.reporters_[hashString] as T;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StatsCollection } from './StatsCollection';\nimport { each } from '../util/util';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\nimport { setTimeoutNonBlocking, each } from '../util/util';\nimport { StatsListener } from './StatsListener';\nimport { StatsCollection } from './StatsCollection';\nimport { ServerActions } from '../ServerActions';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\n/**\n * @constructor\n */\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  private statsToReport_: { [k: string]: boolean } = {};\n\n  /**\n   * @param collection\n   * @param server_\n   */\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  includeStat(stat: string) {\n    this.statsToReport_[stat] = true;\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\nimport { log, logger, exceptionGuard } from '../util/util';\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nexport class EventQueue {\n  /**\n   * @private\n   * @type {!Array.<EventList>}\n   */\n  private eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   * @private\n   * @type {!number}\n   */\n  private recursionDepth_ = 0;\n\n  /**\n   * @param {!Array.<Event>} eventDataList The new events to queue.\n   */\n  queueEvents(eventDataList: Event[]) {\n    // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n    let currList = null;\n    for (let i = 0; i < eventDataList.length; i++) {\n      const eventData = eventDataList[i];\n      const eventPath = eventData.getPath();\n      if (currList !== null && !eventPath.equals(currList.getPath())) {\n        this.eventLists_.push(currList);\n        currList = null;\n      }\n\n      if (currList === null) {\n        currList = new EventList(eventPath);\n      }\n\n      currList.add(eventData);\n    }\n    if (currList) {\n      this.eventLists_.push(currList);\n    }\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones)\n   * for the specified path.\n   *\n   * It is assumed that the new events are all for the specified path.\n   *\n   * @param {!Path} path The path to raise events for.\n   * @param {!Array.<Event>} eventDataList The new events to raise.\n   */\n  raiseEventsAtPath(path: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) =>\n      eventPath.equals(path)\n    );\n  }\n\n  /**\n   * Queues the specified events and synchronously raises all events (including previously queued ones) for\n   * locations related to the specified change path (i.e. all ancestors and descendants).\n   *\n   * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n   *\n   * @param {!Path} changedPath The path to raise events for.\n   * @param {!Array.<!Event>} eventDataList The events to raise\n   */\n  raiseEventsForChangedPath(changedPath: Path, eventDataList: Event[]) {\n    this.queueEvents(eventDataList);\n\n    this.raiseQueuedEventsMatchingPredicate_((eventPath: Path) => {\n      return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n    });\n  }\n\n  /**\n   * @param {!function(!Path):boolean} predicate\n   * @private\n   */\n  private raiseQueuedEventsMatchingPredicate_(\n    predicate: (path: Path) => boolean\n  ) {\n    this.recursionDepth_++;\n\n    let sentAll = true;\n    for (let i = 0; i < this.eventLists_.length; i++) {\n      const eventList = this.eventLists_[i];\n      if (eventList) {\n        const eventPath = eventList.getPath();\n        if (predicate(eventPath)) {\n          this.eventLists_[i].raise();\n          this.eventLists_[i] = null;\n        } else {\n          sentAll = false;\n        }\n      }\n    }\n\n    if (sentAll) {\n      this.eventLists_ = [];\n    }\n\n    this.recursionDepth_--;\n  }\n}\n\n/**\n * @param {!Path} path\n * @constructor\n */\nexport class EventList {\n  /**\n   * @type {!Array.<Event>}\n   * @private\n   */\n  private events_: Event[] = [];\n\n  constructor(private readonly path_: Path) {}\n\n  /**\n   * @param {!Event} eventData\n   */\n  add(eventData: Event) {\n    this.events_.push(eventData);\n  }\n\n  /**\n   * Iterates through the list and raises each event\n   */\n  raise() {\n    for (let i = 0; i < this.events_.length; i++) {\n      const eventData = this.events_[i];\n      if (eventData !== null) {\n        this.events_[i] = null;\n        const eventFn = eventData.getEventRunner();\n        if (logger) {\n          log('event: ' + eventData.toString());\n        }\n        exceptionGuard(eventFn);\n      }\n    }\n  }\n\n  /**\n   * @return {!Path}\n   */\n  getPath(): Path {\n    return this.path_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  /**\n   * @param {!Array.<string>} allowedEvents_\n   */\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @param {!string} eventType\n   * @return {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   * @param {!string} eventType\n   * @param {...*} varArgs\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from './EventEmitter';\nimport { assert } from '@firebase/util';\n\ndeclare const document: Document;\n\n/**\n * @extends {EventEmitter}\n */\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * @param {!string} eventType\n   * @return {Array.<boolean>}\n   */\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  /**\n   * @return {boolean}\n   */\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   * @param {number} requestNum\n   * @param {Array} data\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { base64Encode, stringify, isNodeSdk } from '@firebase/util';\n\nimport { Transport } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param {string} connId An identifier for this connection, used for logging\n   * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\n   * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\n   *                                         transport session\n   * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n   *                                     connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) =>\n      repoInfo.connectionURL(LONG_POLLING, params);\n  }\n\n  /**\n   *\n   * @param {function(Object)} onMessage Callback when messages arrive\n   * @param {function()} onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[\n          FIREBASE_LONGPOLL_CALLBACK_ID_PARAM\n        ] = this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.href &&\n        location.href.indexOf(FORGE_DOMAIN) !== -1\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   * @private\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   * @private\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param {!Object} data The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   * @param {!string} id\n   * @param {!string} pw\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   * @param {*} args\n   * @private\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/interface-name-prefix\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[\n        FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier\n      ] = onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   * @private\n   * @return {Element}\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param {!string} id - The ID of this connection\n   * @param {!string} pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param {!string} url - The URL of the script tag.\n   * @param {!number} serial - The serial number of the request.\n   * @private\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param {!string} url - The URL for the script tag source.\n   * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange = function() {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const rstate = (newScript as any).readyState;\n            if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              newScript.onload = (newScript as any).onreadystatechange = null;\n              if (newScript.parentNode) {\n                newScript.parentNode.removeChild(newScript);\n              }\n              loadCB();\n            }\n          };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n// SDK_VERSION should be set before any database instance is created\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport {\n  assert,\n  CONSTANTS as ENV_CONSTANTS,\n  jsonEval,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { StatsManager } from '../core/stats/StatsManager';\nimport {\n  FORGE_DOMAIN,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Transport } from './Transport';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { SDK_VERSION } from '../core/version';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n\n  /**\n   * @param {string} connId identifier for this transport\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = StatsManager.getCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId\n    );\n  }\n\n  /**\n   * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n   * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n   * @return {string} connection url\n   * @private\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.href &&\n      location.href.indexOf(FORGE_DOMAIN) !== -1\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    return repoInfo.connectionURL(WEBSOCKET, urlParams);\n  }\n\n  /**\n   *\n   * @param onMessage Callback when messages arrive\n   * @param onDisconnect Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = ENV_CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`\n          }\n        };\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        this.mySock = new WebSocketImpl(this.connURL);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   * @type {number}\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   * @type {number}\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   * @return {boolean}\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param {number} frameCount The number of frames we are expecting from the server\n   * @private\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @param {!String} data\n   * @return {?String} Any remaining data to be process, or null if there is none\n   * @private\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param {Object} data The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param {string} str String to send.\n   * @private\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { WebSocketConnection } from './WebSocketConnection';\nimport { warn, each } from '../core/util/util';\nimport { TransportConstructor } from './Transport';\nimport { RepoInfo } from '../core/RepoInfo';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  /**\n   * @const\n   * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n   */\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo\n   * @private\n   */\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n   * initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n   * transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { PROTOCOL_VERSION } from './Constants';\nimport { TransportManager } from './TransportManager';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Transport, TransportConstructor } from './Transport';\nimport { Indexable } from '../core/util/misc';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param {!string} id - an id for this connection\n   * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\n   * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   * @private\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      undefined,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  /**\n   * @return {!string}\n   * @private\n   */\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   *\n   * @param {Object} dataMsg An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Object} handshake The handshake data returned from the server\n   * @private\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.updateHost(host);\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.updateHost(host);\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   *\n   * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   * @private\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  /**\n   *\n   * @param {string} reason\n   * @private\n   */\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   *\n   * @private\n   */\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Query } from '../api/Query';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  /**\n   * @param {!Query} query\n   * @param {function():string} currentHashFn\n   * @param {?number} tag\n   * @param {function(string, *)} onComplete\n   */\n  abstract listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   *\n   * @param {!Query} query\n   * @param {?number} tag\n   */\n  abstract unlisten(query: Query, tag: number | null): void;\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   * @param {string=} hash\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, ?string)} onComplete\n   * @param {string=} hash\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param {string} token The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {*} data\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {string} pathString\n   * @param {function(string, string)=} onComplete\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  /**\n   * @param {Object.<string, *>} stats\n   */\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  isEmpty,\n  safeGet,\n  CONSTANTS,\n  stringify,\n  assert,\n  isAdmin,\n  isValidFormat,\n  isMobileCordova,\n  isReactNative,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { Path } from './util/Path';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { OnlineMonitor } from './util/OnlineMonitor';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { ServerActions } from './ServerActions';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { Query } from '../api/Query';\nimport { SDK_VERSION } from './version';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_AUTH_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: Query;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  /** Map<path, Map<queryId, ListenSpec>> */\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingPutCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @implements {ServerActions}\n   * @param repoInfo_ Data about the namespace we are connecting to\n   * @param onDataUpdate_ A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n    this.scheduleConnect_(0);\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const queryId = query.queryIdentifier();\n    const pathString = query.path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query.queryObject();\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: Query) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' +\n          query\n            .getQueryParams()\n            .getIndex()\n            .toString() +\n          '\"';\n        const indexPath = query.path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: Query, tag: number | null) {\n    const pathString = query.path.toString();\n    const queryId = query.queryIdentifier();\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query.getQueryParams().isDefault() ||\n        !query.getQueryParams().loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const self = this;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function() {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function(msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      // First fetch auth token, and establish connection after fetching the token was successful\n      this.authTokenProvider_\n        .getToken(forceRefresh)\n        .then(result => {\n          if (!canceled) {\n            log('getToken() completed. Creating connection.');\n            self.authToken_ = result && result.accessToken;\n            connection = new Connection(\n              connId,\n              self.repoInfo_,\n              onDataMessage,\n              onReady,\n              onDisconnect,\n              /* onKill= */ reason => {\n                warn(reason + ' (' + self.repoInfo_.toString() + ')');\n                self.interrupt(SERVER_KILL_INTERRUPT_REASON);\n              },\n              lastSessionId\n            );\n          } else {\n            log('getToken() completed but was canceled');\n          }\n        })\n        .then(null, error => {\n          self.log_('Failed to get token: ' + error);\n          if (!canceled) {\n            if (CONSTANTS.NODE_ADMIN) {\n              // This may be a critical error for the Admin Node.js SDK, so log a warning.\n              // But getToken() may also just have temporarily failed, so we still want to\n              // continue retrying.\n              warn(error);\n            }\n            closeFn();\n          }\n        });\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (CONSTANTS.NODE_ADMIN) {\n      clientName = 'admin_node';\n    } else if (CONSTANTS.NODE_CLIENT) {\n      clientName = 'node';\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, jsonEval, safeGet, querystring } from '@firebase/util';\nimport { logWrapper, warn } from './util/util';\n\nimport { ServerActions } from './ServerActions';\nimport { RepoInfo } from './RepoInfo';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { Query } from '../api/Query';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   *\n   * @private {!Object.<string, !Object>}\n   */\n  private listens_: { [k: string]: object } = {};\n\n  /**\n   * @param {!Query} query\n   * @param {?number=} tag\n   * @return {string}\n   * @private\n   */\n  static getListenId_(query: Query, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query.getQueryParams().isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query.path.toString();\n    }\n  }\n\n  /**\n   * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n   * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n   * @param {AuthTokenProvider} authTokenProvider_\n   * @implements {ServerActions}\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: Query,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query.path.toString();\n    this.log_(\n      'Listen called for ' + pathString + ' ' + query.queryIdentifier()\n    );\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = query\n      .getQueryParams()\n      .toRestQueryStringParameters();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: Query, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   *\n   * @param {!string} pathString\n   * @param {!Object.<string, *>} queryStringParameters\n   * @param {?function(?number, *=)} callback\n   * @private\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    this.authTokenProvider_\n      .getToken(/*forceRefresh=*/ false)\n      .then(authTokenData => {\n        const authToken = authTokenData && authTokenData.accessToken;\n        if (authToken) {\n          queryStringParameters['auth'] = authToken;\n        }\n\n        const url =\n          (this.repoInfo_.secure ? 'https://' : 'http://') +\n          this.repoInfo_.host +\n          pathString +\n          '?' +\n          'ns=' +\n          this.repoInfo_.namespace +\n          querystring(queryStringParameters);\n\n        this.log_('Sending REST request for ' + url);\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = () => {\n          if (callback && xhr.readyState === 4) {\n            this.log_(\n              'REST Response for ' + url + ' received. status:',\n              xhr.status,\n              'response:',\n              xhr.responseText\n            );\n            let res = null;\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                res = jsonEval(xhr.responseText);\n              } catch (e) {\n                warn(\n                  'Failed to parse JSON response for ' +\n                    url +\n                    ': ' +\n                    xhr.responseText\n                );\n              }\n              callback(null, res);\n            } else {\n              // 401 and 404 are expected.\n              if (xhr.status !== 401 && xhr.status !== 404) {\n                warn(\n                  'Got unsuccessful REST response for ' +\n                    url +\n                    ' Status: ' +\n                    xhr.status\n                );\n              }\n              callback(xhr.status);\n            }\n            callback = null;\n          }\n        };\n\n        xhr.open('GET', url, /*asynchronous=*/ true);\n        xhr.send();\n      });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { Path } from './util/Path';\nimport { SparseSnapshotTree } from './SparseSnapshotTree';\nimport { SyncTree } from './SyncTree';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport { stringify, map, isEmpty } from '@firebase/util';\nimport { beingCrawled, each, exceptionGuard, warn, log } from './util/util';\n\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { StatsManager } from './stats/StatsManager';\nimport { StatsReporter } from './stats/StatsReporter';\nimport { StatsListener } from './stats/StatsListener';\nimport { EventQueue } from './view/EventQueue';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { RepoInfo } from './RepoInfo';\nimport { Database } from '../api/Database';\nimport { ServerActions } from './ServerActions';\nimport { Query } from '../api/Query';\nimport { EventRegistration } from './view/EventRegistration';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { Event } from './view/Event';\nimport { Node } from './snap/Node';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport { Indexable } from './util/misc';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  dataUpdateCount = 0;\n  private infoSyncTree_: SyncTree;\n  private serverSyncTree_: SyncTree;\n\n  private stats_: StatsCollection;\n  private statsListener_: StatsListener | null = null;\n  private eventQueue_ = new EventQueue();\n  private nextWriteId_ = 1;\n  private server_: ServerActions;\n  private statsReporter_: StatsReporter;\n  private transactionsInit_: () => void;\n  private infoData_: SnapshotHolder;\n  private abortTransactions_: (path: Path) => Path;\n  private rerunTransactions_: (changedPath: Path) => Path;\n  private interceptServerDataCallback_:\n    | ((a: string, b: unknown) => void)\n    | null = null;\n  private __database: Database;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  private onDisconnect_ = new SparseSnapshotTree();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    forceRestClient: boolean,\n    public app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>\n  ) {\n    const authTokenProvider = new AuthTokenProvider(app, authProvider);\n\n    this.stats_ = StatsManager.getCollection(repoInfo_);\n\n    if (forceRestClient || beingCrawled()) {\n      this.server_ = new ReadonlyRestClient(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        authTokenProvider\n      );\n\n      // Minor hack: Fire onConnect immediately, since there's no actual connection.\n      setTimeout(this.onConnectStatus_.bind(this, true), 0);\n    } else {\n      const authOverride = app.options['databaseAuthVariableOverride'];\n      // Validate authOverride\n      if (typeof authOverride !== 'undefined' && authOverride !== null) {\n        if (typeof authOverride !== 'object') {\n          throw new Error(\n            'Only objects are supported for option databaseAuthVariableOverride'\n          );\n        }\n        try {\n          stringify(authOverride);\n        } catch (e) {\n          throw new Error('Invalid authOverride provided: ' + e);\n        }\n      }\n\n      this.persistentConnection_ = new PersistentConnection(\n        this.repoInfo_,\n        this.onDataUpdate_.bind(this),\n        this.onConnectStatus_.bind(this),\n        this.onServerInfoUpdate_.bind(this),\n        authTokenProvider,\n        authOverride\n      );\n\n      this.server_ = this.persistentConnection_;\n    }\n\n    authTokenProvider.addTokenChangeListener(token => {\n      this.server_.refreshAuthToken(token);\n    });\n\n    // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n    // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n    this.statsReporter_ = StatsManager.getOrCreateReporter(\n      repoInfo_,\n      () => new StatsReporter(this.stats_, this.server_)\n    );\n\n    this.transactionsInit_();\n\n    // Used for .info.\n    this.infoData_ = new SnapshotHolder();\n    this.infoSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        let infoEvents: Event[] = [];\n        const node = this.infoData_.getNode(query.path);\n        // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n        // on initial data...\n        if (!node.isEmpty()) {\n          infoEvents = this.infoSyncTree_.applyServerOverwrite(\n            query.path,\n            node\n          );\n          setTimeout(() => {\n            onComplete('ok');\n          }, 0);\n        }\n        return infoEvents;\n      },\n      stopListening: () => {}\n    });\n    this.updateInfo_('connected', false);\n\n    this.serverSyncTree_ = new SyncTree({\n      startListening: (query, tag, currentHashFn, onComplete) => {\n        this.server_.listen(query, currentHashFn, tag, (status, data) => {\n          const events = onComplete(status, data);\n          this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n        });\n        // No synchronous events for network-backed sync trees\n        return [];\n      },\n      stopListening: (query, tag) => {\n        this.server_.unlisten(query, tag);\n      }\n    });\n  }\n\n  /**\n   * @return The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n\n  /**\n   * @return The namespace represented by the repo.\n   */\n  name(): string {\n    return this.repoInfo_.namespace;\n  }\n\n  /**\n   * @return The time in milliseconds, taking the server offset into account if we have one.\n   */\n  serverTime(): number {\n    const offsetNode = this.infoData_.getNode(\n      new Path('.info/serverTimeOffset')\n    );\n    const offset = (offsetNode.val() as number) || 0;\n    return new Date().getTime() + offset;\n  }\n\n  /**\n   * Generate ServerValues using some variables from the repo object.\n   */\n  generateServerValues(): Indexable {\n    return generateWithValues({\n      timestamp: this.serverTime()\n    });\n  }\n\n  /**\n   * Called by realtime when we get new messages from the server.\n   */\n  private onDataUpdate_(\n    pathString: string,\n    data: unknown,\n    isMerge: boolean,\n    tag: number | null\n  ) {\n    // For testing.\n    this.dataUpdateCount++;\n    const path = new Path(pathString);\n    data = this.interceptServerDataCallback_\n      ? this.interceptServerDataCallback_(pathString, data)\n      : data;\n    let events = [];\n    if (tag) {\n      if (isMerge) {\n        const taggedChildren = map(\n          data as { [k: string]: unknown },\n          (raw: unknown) => nodeFromJSON(raw)\n        );\n        events = this.serverSyncTree_.applyTaggedQueryMerge(\n          path,\n          taggedChildren,\n          tag\n        );\n      } else {\n        const taggedSnap = nodeFromJSON(data);\n        events = this.serverSyncTree_.applyTaggedQueryOverwrite(\n          path,\n          taggedSnap,\n          tag\n        );\n      }\n    } else if (isMerge) {\n      const changedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n    } else {\n      const snap = nodeFromJSON(data);\n      events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n    }\n    let affectedPath = path;\n    if (events.length > 0) {\n      // Since we have a listener outstanding for each transaction, receiving any events\n      // is a proxy for some change having occurred.\n      affectedPath = this.rerunTransactions_(path);\n    }\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n  }\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  interceptServerData_(callback: ((a: string, b: unknown) => unknown) | null) {\n    this.interceptServerDataCallback_ = callback;\n  }\n\n  private onConnectStatus_(connectStatus: boolean) {\n    this.updateInfo_('connected', connectStatus);\n    if (connectStatus === false) {\n      this.runOnDisconnectEvents_();\n    }\n  }\n\n  private onServerInfoUpdate_(updates: object) {\n    each(updates, (key: string, value: unknown) => {\n      this.updateInfo_(key, value);\n    });\n  }\n\n  private updateInfo_(pathString: string, value: unknown) {\n    const path = new Path('/.info/' + pathString);\n    const newNode = nodeFromJSON(value);\n    this.infoData_.updateSnapshot(path, newNode);\n    const events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n  }\n\n  private getNextWriteId_(): number {\n    return this.nextWriteId_++;\n  }\n\n  setWithPriority(\n    path: Path,\n    newVal: unknown,\n    newPriority: number | string | null,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('set', {\n      path: path.toString(),\n      value: newVal,\n      priority: newPriority\n    });\n\n    // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n    // (b) store unresolved paths on JSON parse\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n    const existing = this.serverSyncTree_.calcCompleteEventCache(path);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      existing,\n      serverValues\n    );\n\n    const writeId = this.getNextWriteId_();\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      writeId,\n      true\n    );\n    this.eventQueue_.queueEvents(events);\n    this.server_.put(\n      path.toString(),\n      newNodeUnresolved.val(/*export=*/ true),\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('set at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = this.serverSyncTree_.ackUserWrite(\n          writeId,\n          !success\n        );\n        this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n    const affectedPath = this.abortTransactions_(path);\n    this.rerunTransactions_(affectedPath);\n    // We queued the events above, so just flush the queue here\n    this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n  }\n\n  update(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.log_('update', { path: path.toString(), value: childrenToMerge });\n\n    // Start with our existing data and merge each child into it.\n    let empty = true;\n    const serverValues = this.generateServerValues();\n    const changedChildren: { [k: string]: Node } = {};\n    each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n      empty = false;\n      changedChildren[changedKey] = resolveDeferredValueTree(\n        path.child(changedKey),\n        nodeFromJSON(changedValue),\n        this.serverSyncTree_,\n        serverValues\n      );\n    });\n\n    if (!empty) {\n      const writeId = this.getNextWriteId_();\n      const events = this.serverSyncTree_.applyUserMerge(\n        path,\n        changedChildren,\n        writeId\n      );\n      this.eventQueue_.queueEvents(events);\n      this.server_.merge(\n        path.toString(),\n        childrenToMerge,\n        (status, errorReason) => {\n          const success = status === 'ok';\n          if (!success) {\n            warn('update at ' + path + ' failed: ' + status);\n          }\n\n          const clearEvents = this.serverSyncTree_.ackUserWrite(\n            writeId,\n            !success\n          );\n          const affectedPath =\n            clearEvents.length > 0 ? this.rerunTransactions_(path) : path;\n          this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n          this.callOnCompleteCallback(onComplete, status, errorReason);\n        }\n      );\n\n      each(childrenToMerge, (changedPath: string) => {\n        const affectedPath = this.abortTransactions_(path.child(changedPath));\n        this.rerunTransactions_(affectedPath);\n      });\n\n      // We queued the events above, so just flush the queue here\n      this.eventQueue_.raiseEventsForChangedPath(path, []);\n    } else {\n      log(\"update() called with empty data.  Don't do anything.\");\n      this.callOnCompleteCallback(onComplete, 'ok');\n    }\n  }\n\n  /**\n   * Applies all of the changes stored up in the onDisconnect_ tree.\n   */\n  private runOnDisconnectEvents_() {\n    this.log_('onDisconnectEvents');\n\n    const serverValues = this.generateServerValues();\n    const resolvedOnDisconnectTree = new SparseSnapshotTree();\n    this.onDisconnect_.forEachTree(Path.Empty, (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        this.serverSyncTree_,\n        serverValues\n      );\n      resolvedOnDisconnectTree.remember(path, resolved);\n    });\n    let events: Event[] = [];\n\n    resolvedOnDisconnectTree.forEachTree(Path.Empty, (path, snap) => {\n      events = events.concat(\n        this.serverSyncTree_.applyServerOverwrite(path, snap)\n      );\n      const affectedPath = this.abortTransactions_(path);\n      this.rerunTransactions_(affectedPath);\n    });\n\n    this.onDisconnect_ = new SparseSnapshotTree();\n    this.eventQueue_.raiseEventsForChangedPath(Path.Empty, events);\n  }\n\n  onDisconnectCancel(\n    path: Path,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    this.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n      if (status === 'ok') {\n        this.onDisconnect_.forget(path);\n      }\n      this.callOnCompleteCallback(onComplete, status, errorReason);\n    });\n  }\n\n  onDisconnectSet(\n    path: Path,\n    value: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectSetWithPriority(\n    path: Path,\n    value: unknown,\n    priority: unknown,\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    const newNode = nodeFromJSON(value, priority);\n    this.server_.onDisconnectPut(\n      path.toString(),\n      newNode.val(/*export=*/ true),\n      (status, errorReason) => {\n        if (status === 'ok') {\n          this.onDisconnect_.remember(path, newNode);\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  onDisconnectUpdate(\n    path: Path,\n    childrenToMerge: { [k: string]: unknown },\n    onComplete: ((status: Error | null, errorReason?: string) => void) | null\n  ) {\n    if (isEmpty(childrenToMerge)) {\n      log(\n        \"onDisconnect().update() called with empty data.  Don't do anything.\"\n      );\n      this.callOnCompleteCallback(onComplete, 'ok');\n      return;\n    }\n\n    this.server_.onDisconnectMerge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        if (status === 'ok') {\n          each(childrenToMerge, (childName: string, childNode: unknown) => {\n            const newChildNode = nodeFromJSON(childNode);\n            this.onDisconnect_.remember(path.child(childName), newChildNode);\n          });\n        }\n        this.callOnCompleteCallback(onComplete, status, errorReason);\n      }\n    );\n  }\n\n  addEventCallbackForQuery(query: Query, eventRegistration: EventRegistration) {\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.addEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  removeEventCallbackForQuery(\n    query: Query,\n    eventRegistration: EventRegistration\n  ) {\n    // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n    // a little bit by handling the return values anyways.\n    let events;\n    if (query.path.getFront() === '.info') {\n      events = this.infoSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    } else {\n      events = this.serverSyncTree_.removeEventRegistration(\n        query,\n        eventRegistration\n      );\n    }\n    this.eventQueue_.raiseEventsAtPath(query.path, events);\n  }\n\n  interrupt() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.interrupt(INTERRUPT_REASON);\n    }\n  }\n\n  resume() {\n    if (this.persistentConnection_) {\n      this.persistentConnection_.resume(INTERRUPT_REASON);\n    }\n  }\n\n  stats(showDelta: boolean = false) {\n    if (typeof console === 'undefined') {\n      return;\n    }\n\n    let stats: { [k: string]: unknown };\n    if (showDelta) {\n      if (!this.statsListener_) {\n        this.statsListener_ = new StatsListener(this.stats_);\n      }\n      stats = this.statsListener_.get();\n    } else {\n      stats = this.stats_.get();\n    }\n\n    const longestName = Object.keys(stats).reduce(\n      (previousValue, currentValue) =>\n        Math.max(currentValue.length, previousValue),\n      0\n    );\n\n    each(stats, (stat: string, value: unknown) => {\n      let paddedStat = stat;\n      // pad stat names to be the same length (plus 2 extra spaces).\n      for (let i = stat.length; i < longestName + 2; i++) {\n        paddedStat += ' ';\n      }\n      console.log(paddedStat + value);\n    });\n  }\n\n  statsIncrementCounter(metric: string) {\n    this.stats_.incrementCounter(metric);\n    this.statsReporter_.includeStat(metric);\n  }\n\n  private log_(...varArgs: unknown[]) {\n    let prefix = '';\n    if (this.persistentConnection_) {\n      prefix = this.persistentConnection_.id + ':';\n    }\n    log(prefix, ...varArgs);\n  }\n\n  callOnCompleteCallback(\n    callback: ((status: Error | null, errorReason?: string) => void) | null,\n    status: string,\n    errorReason?: string | null\n  ) {\n    if (callback) {\n      exceptionGuard(() => {\n        if (status === 'ok') {\n          callback(null);\n        } else {\n          const code = (status || 'error').toUpperCase();\n          let message = code;\n          if (errorReason) {\n            message += ': ' + errorReason;\n          }\n\n          const error = new Error(message);\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (error as any).code = code;\n          callback(error);\n        }\n      });\n    }\n  }\n\n  get database(): Database {\n    return this.__database || (this.__database = new Database(this));\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { NodeFilter } from './NodeFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Index } from '../../snap/indexes/Index';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class RangedFilter implements NodeFilter {\n  /**\n   * @type {!IndexedFilter}\n   * @const\n   * @private\n   */\n  private indexedFilter_: IndexedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private index_: Index;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private startPost_: NamedNode;\n\n  /**\n   * @const\n   * @type {!NamedNode}\n   * @private\n   */\n  private endPost_: NamedNode;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  /**\n   * @return {!NamedNode}\n   */\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  /**\n   * @param {!NamedNode} node\n   * @return {boolean}\n   */\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  /**\n   * @param {!QueryParams} params\n   * @return {!NamedNode}\n   * @private\n   */\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RangedFilter } from './RangedFilter';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Node, NamedNode } from '../../snap/Node';\nimport { assert } from '@firebase/util';\nimport { Change } from '../Change';\nimport { NodeFilter } from './NodeFilter';\nimport { Index } from '../../snap/indexes/Index';\nimport { IndexedFilter } from './IndexedFilter';\nimport { QueryParams } from '../QueryParams';\nimport { Path } from '../../util/Path';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nexport class LimitedFilter implements NodeFilter {\n  /**\n   * @const\n   * @type {RangedFilter}\n   * @private\n   */\n  private readonly rangedFilter_: RangedFilter;\n\n  /**\n   * @const\n   * @type {!Index}\n   * @private\n   */\n  private readonly index_: Index;\n\n  /**\n   * @const\n   * @type {number}\n   * @private\n   */\n  private readonly limit_: number;\n\n  /**\n   * @const\n   * @type {boolean}\n   * @private\n   */\n  private readonly reverse_: boolean;\n\n  /**\n   * @param {!QueryParams} params\n   */\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  filtersNodes(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @param {!Node} snap\n   * @param {string} childKey\n   * @param {!Node} childSnap\n   * @param {!CompleteChildSource} source\n   * @param {?ChildChangeAccumulator} changeAccumulator\n   * @return {!Node}\n   * @private\n   */\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childChangedChange(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              Change.childAddedChange(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            Change.childRemovedChange(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            Change.childAddedChange(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\nimport { MIN_NAME, MAX_NAME } from '../util/util';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { RangedFilter } from './filter/RangedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { Index } from '../snap/indexes/Index';\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nexport class QueryParams {\n  private limitSet_ = false;\n  private startSet_ = false;\n  private startNameSet_ = false;\n  private endSet_ = false;\n  private endNameSet_ = false;\n\n  private limit_ = 0;\n  private viewFrom_ = '';\n  private indexStartValue_: unknown | null = null;\n  private indexStartName_ = '';\n  private indexEndValue_: unknown | null = null;\n  private indexEndName_ = '';\n\n  private index_ = PRIORITY_INDEX;\n\n  /**\n   * Wire Protocol Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly WIRE_PROTOCOL_CONSTANTS_ = {\n    INDEX_START_VALUE: 'sp',\n    INDEX_START_NAME: 'sn',\n    INDEX_END_VALUE: 'ep',\n    INDEX_END_NAME: 'en',\n    LIMIT: 'l',\n    VIEW_FROM: 'vf',\n    VIEW_FROM_LEFT: 'l',\n    VIEW_FROM_RIGHT: 'r',\n    INDEX: 'i'\n  };\n\n  /**\n   * REST Query Constants\n   * @const\n   * @enum {string}\n   * @private\n   */\n  private static readonly REST_QUERY_CONSTANTS_ = {\n    ORDER_BY: 'orderBy',\n    PRIORITY_INDEX: '$priority',\n    VALUE_INDEX: '$value',\n    KEY_INDEX: '$key',\n    START_AT: 'startAt',\n    END_AT: 'endAt',\n    LIMIT_TO_FIRST: 'limitToFirst',\n    LIMIT_TO_LAST: 'limitToLast'\n  };\n\n  /**\n   * Default, empty query parameters\n   * @type {!QueryParams}\n   * @const\n   */\n  static readonly DEFAULT = new QueryParams();\n\n  /**\n   * @return {boolean}\n   */\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @return {boolean} True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return (\n        this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT\n      );\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   * @return {*}\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * @return {*}\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   * @return {!string}\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  /**\n   * @return {boolean}\n   */\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @return {boolean} True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   * @return {!number}\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  /**\n   * @return {!Index}\n   */\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  /**\n   * @return {!QueryParams}\n   * @private\n   */\n  private copy_(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limit(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = '';\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToFirst(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n    return newParams;\n  }\n\n  /**\n   * @param {!number} newLimit\n   * @return {!QueryParams}\n   */\n  limitToLast(newLimit: number): QueryParams {\n    const newParams = this.copy_();\n    newParams.limitSet_ = true;\n    newParams.limit_ = newLimit;\n    newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  startAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.startSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexStartValue_ = indexValue;\n    if (key != null) {\n      newParams.startNameSet_ = true;\n      newParams.indexStartName_ = key;\n    } else {\n      newParams.startNameSet_ = false;\n      newParams.indexStartName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {*} indexValue\n   * @param {?string=} key\n   * @return {!QueryParams}\n   */\n  endAt(indexValue: unknown, key?: string | null): QueryParams {\n    const newParams = this.copy_();\n    newParams.endSet_ = true;\n    if (indexValue === undefined) {\n      indexValue = null;\n    }\n    newParams.indexEndValue_ = indexValue;\n    if (key !== undefined) {\n      newParams.endNameSet_ = true;\n      newParams.indexEndName_ = key;\n    } else {\n      newParams.endNameSet_ = false;\n      newParams.indexEndName_ = '';\n    }\n    return newParams;\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {!QueryParams}\n   */\n  orderBy(index: Index): QueryParams {\n    const newParams = this.copy_();\n    newParams.index_ = index;\n    return newParams;\n  }\n\n  /**\n   * @return {!Object}\n   */\n  getQueryObject(): {} {\n    const WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n    const obj: { [k: string]: unknown } = {};\n    if (this.startSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n      if (this.startNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n      }\n    }\n    if (this.endSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n      if (this.endNameSet_) {\n        obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n      }\n    }\n    if (this.limitSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n      let viewFrom = this.viewFrom_;\n      if (viewFrom === '') {\n        if (this.isViewFromLeft()) {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n        } else {\n          viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n        }\n      }\n      obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n    }\n    // For now, priority index is the default, so we only specify if it's some other index\n    if (this.index_ !== PRIORITY_INDEX) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n    }\n    return obj;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  /**\n   * @return {!NodeFilter}\n   */\n  getNodeFilter(): NodeFilter {\n    if (this.loadsAllData()) {\n      return new IndexedFilter(this.getIndex());\n    } else if (this.hasLimit()) {\n      return new LimitedFilter(this);\n    } else {\n      return new RangedFilter(this);\n    }\n  }\n\n  /**\n   * Returns a set of REST query string parameters representing this query.\n   *\n   * @return {!Object.<string,*>} query string parameters\n   */\n  toRestQueryStringParameters(): { [k: string]: string | number } {\n    const REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n    const qs: { [k: string]: string | number } = {};\n\n    if (this.isDefault()) {\n      return qs;\n    }\n\n    let orderBy;\n    if (this.index_ === PRIORITY_INDEX) {\n      orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n    } else if (this.index_ === VALUE_INDEX) {\n      orderBy = REST_CONSTANTS.VALUE_INDEX;\n    } else if (this.index_ === KEY_INDEX) {\n      orderBy = REST_CONSTANTS.KEY_INDEX;\n    } else {\n      assert(this.index_ instanceof PathIndex, 'Unrecognized index type!');\n      orderBy = this.index_.toString();\n    }\n    qs[REST_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n    if (this.startSet_) {\n      qs[REST_CONSTANTS.START_AT] = stringify(this.indexStartValue_);\n      if (this.startNameSet_) {\n        qs[REST_CONSTANTS.START_AT] += ',' + stringify(this.indexStartName_);\n      }\n    }\n\n    if (this.endSet_) {\n      qs[REST_CONSTANTS.END_AT] = stringify(this.indexEndValue_);\n      if (this.endNameSet_) {\n        qs[REST_CONSTANTS.END_AT] += ',' + stringify(this.indexEndName_);\n      }\n    }\n\n    if (this.limitSet_) {\n      if (this.isViewFromLeft()) {\n        qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n      } else {\n        qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n      }\n    }\n\n    return qs;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { OnDisconnect } from './onDisconnect';\nimport { TransactionResult } from './TransactionResult';\nimport { warn } from '../core/util/util';\nimport { nextPushId } from '../core/util/NextPushId';\nimport { Query } from './Query';\nimport { Repo } from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport { QueryParams } from '../core/view/QueryParams';\nimport {\n  validateRootPathString,\n  validatePathString,\n  validateFirebaseMergeDataArg,\n  validateBoolean,\n  validatePriority,\n  validateFirebaseDataArg,\n  validateWritablePath\n} from '../core/util/validation';\nimport { validateArgCount, validateCallback, Deferred } from '@firebase/util';\n\nimport { SyncPoint } from '../core/SyncPoint';\nimport { Database } from './Database';\nimport { DataSnapshot } from './DataSnapshot';\nimport * as types from '@firebase/database-types';\n\nexport interface ReferenceConstructor {\n  new (repo: Repo, path: Path): Reference;\n}\n\nexport class Reference extends Query {\n  then: Promise<Reference>['then'];\n  catch: Promise<Reference>['catch'];\n\n  /**\n   * Call options:\n   *   new Reference(Repo, Path) or\n   *   new Reference(url: string, string|RepoManager)\n   *\n   * Externally - this is the firebase.database.Reference type.\n   *\n   * @param {!Repo} repo\n   * @param {(!Path)} path\n   * @extends {Query}\n   */\n  constructor(repo: Repo, path: Path) {\n    if (!(repo instanceof Repo)) {\n      throw new Error(\n        'new Reference() no longer supported - use app.database().'\n      );\n    }\n\n    // call Query's constructor, passing in the repo and path.\n    super(repo, path, QueryParams.DEFAULT, false);\n  }\n\n  /** @return {?string} */\n  getKey(): string | null {\n    validateArgCount('Reference.key', 0, 0, arguments.length);\n\n    if (this.path.isEmpty()) {\n      return null;\n    } else {\n      return this.path.getBack();\n    }\n  }\n\n  /**\n   * @param {!(string|Path)} pathString\n   * @return {!Reference}\n   */\n  child(pathString: string | Path): Reference {\n    validateArgCount('Reference.child', 1, 1, arguments.length);\n    if (typeof pathString === 'number') {\n      pathString = String(pathString);\n    } else if (!(pathString instanceof Path)) {\n      if (this.path.getFront() === null) {\n        validateRootPathString('Reference.child', 1, pathString, false);\n      } else {\n        validatePathString('Reference.child', 1, pathString, false);\n      }\n    }\n\n    return new Reference(this.repo, this.path.child(pathString));\n  }\n\n  /** @return {?Reference} */\n  getParent(): Reference | null {\n    validateArgCount('Reference.parent', 0, 0, arguments.length);\n\n    const parentPath = this.path.parent();\n    return parentPath === null ? null : new Reference(this.repo, parentPath);\n  }\n\n  /** @return {!Reference} */\n  getRoot(): Reference {\n    validateArgCount('Reference.root', 0, 0, arguments.length);\n\n    let ref: Reference = this;\n    while (ref.getParent() !== null) {\n      ref = ref.getParent();\n    }\n    return ref;\n  }\n\n  /** @return {!Database} */\n  databaseProp(): Database {\n    return this.repo.database;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  set(\n    newVal: unknown,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.set', 1, 2, arguments.length);\n    validateWritablePath('Reference.set', this.path);\n    validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n    validateCallback('Reference.set', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      /*priority=*/ null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {!Object} objectToMerge\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  update(\n    objectToMerge: object,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.update', 1, 2, arguments.length);\n    validateWritablePath('Reference.update', this.path);\n\n    if (Array.isArray(objectToMerge)) {\n      const newObjectToMerge: { [k: string]: unknown } = {};\n      for (let i = 0; i < objectToMerge.length; ++i) {\n        newObjectToMerge['' + i] = objectToMerge[i];\n      }\n      objectToMerge = newObjectToMerge;\n      warn(\n        'Passing an Array to Firebase.update() is deprecated. ' +\n          'Use set() if you want to overwrite the existing data, or ' +\n          'an Object with integer keys if you really do want to ' +\n          'only update some of the children.'\n      );\n    }\n    validateFirebaseMergeDataArg(\n      'Reference.update',\n      1,\n      objectToMerge,\n      this.path,\n      false\n    );\n    validateCallback('Reference.update', 2, onComplete, true);\n    const deferred = new Deferred();\n    this.repo.update(\n      this.path,\n      objectToMerge as { [k: string]: unknown },\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*} newVal\n   * @param {string|number|null} newPriority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setWithPriority(\n    newVal: unknown,\n    newPriority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n    validateWritablePath('Reference.setWithPriority', this.path);\n    validateFirebaseDataArg(\n      'Reference.setWithPriority',\n      1,\n      newVal,\n      this.path,\n      false\n    );\n    validatePriority('Reference.setWithPriority', 2, newPriority, false);\n    validateCallback('Reference.setWithPriority', 3, onComplete, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.setWithPriority failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n    }\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path,\n      newVal,\n      newPriority,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  remove(onComplete?: (a: Error | null) => void): Promise<unknown> {\n    validateArgCount('Reference.remove', 0, 1, arguments.length);\n    validateWritablePath('Reference.remove', this.path);\n    validateCallback('Reference.remove', 1, onComplete, true);\n\n    return this.set(null, onComplete);\n  }\n\n  /**\n   * @param {function(*):*} transactionUpdate\n   * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n   * @param {boolean=} applyLocally\n   * @return {!Promise}\n   */\n  transaction(\n    transactionUpdate: (a: unknown) => unknown,\n    onComplete?: (a: Error | null, b: boolean, c: DataSnapshot | null) => void,\n    applyLocally?: boolean\n  ): Promise<TransactionResult> {\n    validateArgCount('Reference.transaction', 1, 3, arguments.length);\n    validateWritablePath('Reference.transaction', this.path);\n    validateCallback('Reference.transaction', 1, transactionUpdate, false);\n    validateCallback('Reference.transaction', 2, onComplete, true);\n    // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n    // to expose it.\n    validateBoolean('Reference.transaction', 3, applyLocally, true);\n\n    if (this.getKey() === '.length' || this.getKey() === '.keys') {\n      throw 'Reference.transaction failed: ' +\n        this.getKey() +\n        ' is a read-only object.';\n    }\n\n    if (applyLocally === undefined) {\n      applyLocally = true;\n    }\n\n    const deferred = new Deferred<TransactionResult>();\n    if (typeof onComplete === 'function') {\n      deferred.promise.catch(() => {});\n    }\n\n    const promiseComplete = function(\n      error: Error,\n      committed: boolean,\n      snapshot: DataSnapshot\n    ) {\n      if (error) {\n        deferred.reject(error);\n      } else {\n        deferred.resolve(new TransactionResult(committed, snapshot));\n      }\n      if (typeof onComplete === 'function') {\n        onComplete(error, committed, snapshot);\n      }\n    };\n    this.repo.startTransaction(\n      this.path,\n      transactionUpdate,\n      promiseComplete,\n      applyLocally\n    );\n\n    return deferred.promise;\n  }\n\n  /**\n   * @param {string|number|null} priority\n   * @param {function(?Error)=} onComplete\n   * @return {!Promise}\n   */\n  setPriority(\n    priority: string | number | null,\n    onComplete?: (a: Error | null) => void\n  ): Promise<unknown> {\n    validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n    validateWritablePath('Reference.setPriority', this.path);\n    validatePriority('Reference.setPriority', 1, priority, false);\n    validateCallback('Reference.setPriority', 2, onComplete, true);\n\n    const deferred = new Deferred();\n    this.repo.setWithPriority(\n      this.path.child('.priority'),\n      priority,\n      null,\n      deferred.wrapCallback(onComplete)\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * @param {*=} value\n   * @param {function(?Error)=} onComplete\n   * @return {!Reference}\n   */\n  push(value?: unknown, onComplete?: (a: Error | null) => void): Reference {\n    validateArgCount('Reference.push', 0, 2, arguments.length);\n    validateWritablePath('Reference.push', this.path);\n    validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n    validateCallback('Reference.push', 2, onComplete, true);\n\n    const now = this.repo.serverTime();\n    const name = nextPushId(now);\n\n    // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n    // We use child() to create handles to two different references. The first is turned into a\n    // ThennableReference below by adding then() and catch() methods and is used as the\n    // return value of push(). The second remains a regular Reference and is used as the fulfilled\n    // value of the first ThennableReference.\n    const thennablePushRef = this.child(name);\n    const pushRef = this.child(name);\n\n    let promise;\n    if (value != null) {\n      promise = thennablePushRef.set(value, onComplete).then(() => pushRef);\n    } else {\n      promise = Promise.resolve(pushRef);\n    }\n\n    thennablePushRef.then = promise.then.bind(promise);\n    thennablePushRef.catch = promise.then.bind(promise, undefined);\n\n    if (typeof onComplete === 'function') {\n      promise.catch(() => {});\n    }\n\n    return thennablePushRef;\n  }\n\n  /**\n   * @return {!OnDisconnect}\n   */\n  onDisconnect(): OnDisconnect {\n    validateWritablePath('Reference.onDisconnect', this.path);\n    return new OnDisconnect(this.repo, this.path);\n  }\n\n  get database(): Database {\n    return this.databaseProp();\n  }\n\n  get key(): string | null {\n    return this.getKey();\n  }\n\n  get parent(): Reference | null {\n    return this.getParent();\n  }\n\n  get root(): Reference {\n    return this.getRoot();\n  }\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery.__referenceConstructor = Reference;\nSyncPoint.__referenceConstructor = Reference;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Path } from './Path';\n\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport class TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: { [name: string]: TreeNode<T> } = {};\n  childCount = 0;\n  value: T | null = null;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @template T\n   * @param {string=} name_ Optional name of the node.\n   * @param {Tree=} parent_ Optional parent node.\n   * @param {TreeNode=} node_ Optional node to wrap.\n   */\n  constructor(\n    private name_: string = '',\n    private parent_: Tree<T> | null = null,\n    private node_: TreeNode<T> = new TreeNode<T>()\n  ) {}\n\n  /**\n   * Returns a sub-Tree for the given path.\n   *\n   * @param {!(string|Path)} pathObj Path to look up.\n   * @return {!Tree.<T>} Tree for path.\n   */\n  subTree(pathObj: string | Path): Tree<T> {\n    // TODO: Require pathObj to be Path?\n    let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n    let child = this as Tree<T>,\n      next = path.getFront();\n    while (next !== null) {\n      const childNode = safeGet(child.node_.children, next) || new TreeNode();\n      child = new Tree(next, child, childNode);\n      path = path.popFront();\n      next = path.getFront();\n    }\n\n    return child;\n  }\n\n  /**\n   * Returns the data associated with this tree node.\n   *\n   * @return {?T} The data or null if no data exists.\n   */\n  getValue(): T | null {\n    return this.node_.value;\n  }\n\n  /**\n   * Sets data to this tree node.\n   *\n   * @param {!T} value Value to set.\n   */\n  setValue(value: T) {\n    assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n    this.node_.value = value;\n    this.updateParents_();\n  }\n\n  /**\n   * Clears the contents of the tree node (its value and all children).\n   */\n  clear() {\n    this.node_.value = null;\n    this.node_.children = {};\n    this.node_.childCount = 0;\n    this.updateParents_();\n  }\n\n  /**\n   * @return {boolean} Whether the tree has any children.\n   */\n  hasChildren(): boolean {\n    return this.node_.childCount > 0;\n  }\n\n  /**\n   * @return {boolean} Whether the tree is empty (no value or children).\n   */\n  isEmpty(): boolean {\n    return this.getValue() === null && !this.hasChildren();\n  }\n\n  /**\n   * Calls action for each child of this tree node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachChild(action: (tree: Tree<T>) => void) {\n    each(this.node_.children, (child: string, childTree: TreeNode<T>) => {\n      action(new Tree<T>(child, this, childTree));\n    });\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants, calling action for each one.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n   *   false.\n   * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n   *   parent.\n   */\n  forEachDescendant(\n    action: (tree: Tree<T>) => void,\n    includeSelf?: boolean,\n    childrenFirst?: boolean\n  ) {\n    if (includeSelf && !childrenFirst) {\n      action(this);\n    }\n\n    this.forEachChild(child => {\n      child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n    });\n\n    if (includeSelf && childrenFirst) {\n      action(this);\n    }\n  }\n\n  /**\n   * Calls action on each ancestor node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n   *   true to abort.\n   * @param {boolean=} includeSelf Whether to call action on this node as well.\n   * @return {boolean} true if the action callback returned true.\n   */\n  forEachAncestor(\n    action: (tree: Tree<T>) => unknown,\n    includeSelf?: boolean\n  ): boolean {\n    let node = includeSelf ? this : this.parent();\n    while (node !== null) {\n      if (action(node)) {\n        return true;\n      }\n      node = node.parent();\n    }\n    return false;\n  }\n\n  /**\n   * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n   * is found, action is called on it and traversal does not continue inside the node.\n   * Action is *not* called on this node.\n   *\n   * @param {function(!Tree.<T>)} action Action to be called for each child.\n   */\n  forEachImmediateDescendantWithValue(action: (tree: Tree<T>) => void) {\n    this.forEachChild(child => {\n      if (child.getValue() !== null) {\n        action(child);\n      } else {\n        child.forEachImmediateDescendantWithValue(action);\n      }\n    });\n  }\n\n  /**\n   * @return {!Path} The path of this tree node, as a Path.\n   */\n  path(): Path {\n    return new Path(\n      this.parent_ === null\n        ? this.name_\n        : this.parent_.path() + '/' + this.name_\n    );\n  }\n\n  /**\n   * @return {string} The name of the tree node.\n   */\n  name(): string {\n    return this.name_;\n  }\n\n  /**\n   * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n   */\n  parent(): Tree<T> | null {\n    return this.parent_;\n  }\n\n  /**\n   * Adds or removes this child from its parent based on whether it's empty or not.\n   *\n   * @private\n   */\n  private updateParents_() {\n    if (this.parent_ !== null) {\n      this.parent_.updateChild_(this.name_, this);\n    }\n  }\n\n  /**\n   * Adds or removes the passed child to this tree node, depending on whether it's empty.\n   *\n   * @param {string} childName The name of the child to update.\n   * @param {!Tree.<T>} child The child to update.\n   * @private\n   */\n  private updateChild_(childName: string, child: Tree<T>) {\n    const childEmpty = child.isEmpty();\n    const childExists = contains(this.node_.children, childName);\n    if (childEmpty && childExists) {\n      delete this.node_.children[childName];\n      this.node_.childCount--;\n      this.updateParents_();\n    } else if (!childEmpty && !childExists) {\n      this.node_.children[childName] = child.node_;\n      this.node_.childCount++;\n      this.updateParents_();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, safeGet } from '@firebase/util';\nimport { Reference } from '../api/Reference';\nimport { DataSnapshot } from '../api/DataSnapshot';\nimport { Path } from './util/Path';\nimport { Tree } from './util/Tree';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { LUIDGenerator, warn, exceptionGuard } from './util/util';\nimport { resolveDeferredValueSnapshot } from './util/ServerValues';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\n\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Repo } from './Repo';\nimport { Event } from './view/Event';\n\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n\n/**\n * @enum {number}\n */\nexport enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo as any).MAX_TRANSACTION_RETRIES_ = 25;\n\n/**\n * @typedef {{\n *   path: !Path,\n *   update: function(*):*,\n *   onComplete: ?function(?Error, boolean, ?DataSnapshot),\n *   status: ?TransactionStatus,\n *   order: !number,\n *   applyLocally: boolean,\n *   retryCount: !number,\n *   unwatcher: function(),\n *   abortReason: ?string,\n *   currentWriteId: !number,\n *   currentInputSnapshot: ?Node,\n *   currentOutputSnapshotRaw: ?Node,\n *   currentOutputSnapshotResolved: ?Node\n * }}\n */\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (a: Error | null, b: boolean, c: DataSnapshot | null) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * Setup the transaction data structures\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).transactionsInit_ = function() {\n  /**\n   * Stores queues of outstanding transactions for Firebase locations.\n   *\n   * @type {!Tree.<Array.<!Transaction>>}\n   * @private\n   */\n  this.transactionQueueTree_ = new Tree<Transaction[]>();\n};\n\ndeclare module './Repo' {\n  interface Repo {\n    startTransaction(\n      path: Path,\n      transactionUpdate: (a: unknown) => void,\n      onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n      applyLocally: boolean\n    ): void;\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo.prototype.startTransaction = function(\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((a: Error, b: boolean, c: DataSnapshot) => void) | null,\n  applyLocally: boolean\n) {\n  this.log_('transaction on ' + path);\n\n  // Add a watch to make sure we get server updates.\n  const valueCallback = function() {};\n  const watchRef = new Reference(this, path);\n  watchRef.on('value', valueCallback);\n  const unwatcher = function() {\n    watchRef.off('value', valueCallback);\n  };\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n\n    // One of TransactionStatus enums.\n    status: null,\n\n    // Used when combining transactions at different locations to figure out which one goes first.\n    order: LUIDGenerator(),\n\n    // Whether to raise local events for this transaction.\n    applyLocally,\n\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n\n    // Stores why a transaction was aborted.\n    abortReason: null,\n\n    currentWriteId: null,\n\n    currentInputSnapshot: null,\n\n    currentOutputSnapshotRaw: null,\n\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = this.getLatestState_(path);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      // We just set the input snapshot, so this cast should be safe\n      const snapshot = new DataSnapshot(\n        transaction.currentInputSnapshot,\n        new Reference(this, transaction.path),\n        PRIORITY_INDEX\n      );\n      transaction.onComplete(null, false, snapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = this.transactionQueueTree_.subTree(path);\n    const nodeQueue = queueNode.getValue() || [];\n    nodeQueue.push(transaction);\n\n    queueNode.setValue(nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our transaction state, since the user could\n    // start new transactions from the event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        this.serverSyncTree_.calcCompleteEventCache(path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n    priorityForNode /** @type {null|number|string} */ = priorityForNode;\n\n    const serverValues = this.generateServerValues();\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = this.getNextWriteId_();\n\n    const events = this.serverSyncTree_.applyUserOverwrite(\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n    this.sendReadyTransactions_();\n  }\n};\n\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getLatestState_ = function(\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n};\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendReadyTransactions_ = function(\n  node: Tree<Transaction[]> = this.transactionQueueTree_\n) {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    this.pruneCompletedTransactionsBelowNode_(node);\n  }\n\n  if (node.getValue() !== null) {\n    const queue = this.buildTransactionQueue_(node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      this.sendTransactionQueue_(node.path(), queue);\n    }\n  } else if (node.hasChildren()) {\n    node.forEachChild(childNode => {\n      this.sendReadyTransactions_(childNode);\n    });\n  }\n};\n\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).sendTransactionQueue_ = function(\n  path: Path,\n  queue: Transaction[]\n) {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = this.getLatestState_(path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = Path.relativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  this.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      this.log_('transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this transaction is complete, it should be set\n            const node = queue[i].currentOutputSnapshotResolved as Node;\n            const ref = new Reference(this, queue[i].path);\n            const snapshot = new DataSnapshot(node, ref, PRIORITY_INDEX);\n            callbacks.push(\n              queue[i].onComplete.bind(null, null, true, snapshot)\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        this.pruneCompletedTransactionsBelowNode_(\n          this.transactionQueueTree_.subTree(path)\n        );\n        // There may be pending transactions that we can now send.\n        this.sendReadyTransactions_();\n\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        this.rerunTransactions_(path);\n      }\n    },\n    latestHash\n  );\n};\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactions_ = function(changedPath: Path): Path {\n  const rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n  const path = rootMostTransactionNode.path();\n\n  const queue = this.buildTransactionQueue_(rootMostTransactionNode);\n  this.rerunTransactionQueue_(queue, path);\n\n  return path;\n};\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).rerunTransactionQueue_ = function(\n  queue: Transaction[],\n  path: Path\n) {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n  // the callback could trigger more transactions or sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = Path.relativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      if (transaction.retryCount >= (Repo as any).MAX_TRANSACTION_RETRIES_) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = this.getLatestState_(\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = this.generateServerValues();\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = this.getNextWriteId_();\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            this.serverSyncTree_.applyUserOverwrite(\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true)\n          );\n        }\n      }\n    }\n    this.eventQueue_.raiseEventsForChangedPath(path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n      // So defer the unwatcher until we're done.\n      (function(unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          const ref = new Reference(this, queue[i].path);\n          // We set this field immediately, so it's safe to cast to an actual snapshot\n          const lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n          const snapshot = new DataSnapshot(lastInput, ref, PRIORITY_INDEX);\n          callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n        } else {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  this.sendReadyTransactions_();\n};\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).getAncestorTransactionNode_ = function(\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n  let transactionNode = this.transactionQueueTree_;\n  front = path.getFront();\n  while (front !== null && transactionNode.getValue() === null) {\n    transactionNode = transactionNode.subTree(front);\n    path = path.popFront();\n    front = path.getFront();\n  }\n\n  return transactionNode;\n};\n\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).buildTransactionQueue_ = function(\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => {\n    return a.order - b.order;\n  });\n\n  return transactionQueue;\n};\n\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).aggregateTransactionQueuesForNode_ = function(\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n) {\n  const nodeQueue = node.getValue();\n  if (nodeQueue !== null) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  node.forEachChild(child => {\n    this.aggregateTransactionQueuesForNode_(child, queue);\n  });\n};\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).pruneCompletedTransactionsBelowNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    node.setValue(queue.length > 0 ? queue : null);\n  }\n\n  node.forEachChild(childNode => {\n    this.pruneCompletedTransactionsBelowNode_(childNode);\n  });\n};\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactions_ = function(path: Path): Path {\n  const affectedPath = this.getAncestorTransactionNode_(path).path();\n\n  const transactionNode = this.transactionQueueTree_.subTree(path);\n\n  transactionNode.forEachAncestor((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  this.abortTransactionsOnNode_(transactionNode);\n\n  transactionNode.forEachDescendant((node: Tree<Transaction[]>) => {\n    this.abortTransactionsOnNode_(node);\n  });\n\n  return affectedPath;\n};\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(Repo.prototype as any).abortTransactionsOnNode_ = function(\n  node: Tree<Transaction[]>\n) {\n  const queue = node.getValue();\n  if (queue !== null) {\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n    // can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true)\n        );\n        if (queue[i].onComplete) {\n          const snapshot: DataSnapshot | null = null;\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, snapshot)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      node.setValue(null);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { safeGet } from '@firebase/util';\nimport { Repo } from './Repo';\nimport { fatal } from './util/util';\nimport { parseRepoInfo } from './util/libs/parser';\nimport { validateUrl } from './util/validation';\nimport './Repo_transaction';\nimport { Database } from '../api/Database';\nimport { RepoInfo } from './RepoInfo';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n/** @const {string} */\nconst DATABASE_URL_OPTION = 'databaseURL';\n\n/**\n * This variable is also defined in the firebase node.js admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\nlet _staticInstance: RepoManager;\n\n/**\n * Creates and caches Repo instances.\n */\nexport class RepoManager {\n  /**\n   * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n   */\n  private repos_: {\n    [appName: string]: {\n      [dbUrl: string]: Repo;\n    };\n  } = {};\n\n  /**\n   * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n   * @private {boolean}\n   */\n  private useRestClient_: boolean = false;\n\n  static getInstance(): RepoManager {\n    if (!_staticInstance) {\n      _staticInstance = new RepoManager();\n    }\n    return _staticInstance;\n  }\n\n  // TODO(koss): Remove these functions unless used in tests?\n  interrupt() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].interrupt();\n      }\n    }\n  }\n\n  resume() {\n    for (const appName of Object.keys(this.repos_)) {\n      for (const dbUrl of Object.keys(this.repos_[appName])) {\n        this.repos_[appName][dbUrl].resume();\n      }\n    }\n  }\n\n  /**\n   * This function should only ever be called to CREATE a new database instance.\n   *\n   * @param {!FirebaseApp} app\n   * @return {!Database}\n   */\n  databaseFromApp(\n    app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    url?: string\n  ): Database {\n    let dbUrl: string | undefined = url || app.options[DATABASE_URL_OPTION];\n    if (dbUrl === undefined) {\n      fatal(\n        \"Can't determine Firebase Database URL.  Be sure to include \" +\n          DATABASE_URL_OPTION +\n          ' option when calling firebase.initializeApp().'\n      );\n    }\n\n    let parsedUrl = parseRepoInfo(dbUrl);\n    let repoInfo = parsedUrl.repoInfo;\n\n    let dbEmulatorHost: string | undefined = undefined;\n    if (typeof process !== 'undefined') {\n      dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n    }\n    if (dbEmulatorHost) {\n      dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n      parsedUrl = parseRepoInfo(dbUrl);\n      repoInfo = parsedUrl.repoInfo;\n    }\n\n    validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n    if (!parsedUrl.path.isEmpty()) {\n      fatal(\n        'Database URL must point to the root of a Firebase Database ' +\n          '(not including a child path).'\n      );\n    }\n\n    const repo = this.createRepo(repoInfo, app, authProvider);\n\n    return repo.database;\n  }\n\n  /**\n   * Remove the repo and make sure it is disconnected.\n   *\n   * @param {!Repo} repo\n   */\n  deleteRepo(repo: Repo) {\n    const appRepos = safeGet(this.repos_, repo.app.name);\n    // This should never happen...\n    if (!appRepos || safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n      fatal(\n        `Database ${repo.app.name}(${repo.repoInfo_}) has already been deleted.`\n      );\n    }\n    repo.interrupt();\n    delete appRepos[repo.repoInfo_.toURLString()];\n  }\n\n  /**\n   * Ensures a repo doesn't already exist and then creates one using the\n   * provided app.\n   *\n   * @param {!RepoInfo} repoInfo The metadata about the Repo\n   * @param {!FirebaseApp} app\n   * @return {!Repo} The Repo object for the specified server / repoName.\n   */\n  createRepo(\n    repoInfo: RepoInfo,\n    app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>\n  ): Repo {\n    let appRepos = safeGet(this.repos_, app.name);\n\n    if (!appRepos) {\n      appRepos = {};\n      this.repos_[app.name] = appRepos;\n    }\n\n    let repo = safeGet(appRepos, repoInfo.toURLString());\n    if (repo) {\n      fatal(\n        'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n      );\n    }\n    repo = new Repo(repoInfo, this.useRestClient_, app, authProvider);\n    appRepos[repoInfo.toURLString()] = repo;\n\n    return repo;\n  }\n\n  /**\n   * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n   * @param {boolean} forceRestClient\n   */\n  forceRestClient(forceRestClient: boolean) {\n    this.useRestClient_ = forceRestClient;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { fatal } from '../core/util/util';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { Path } from '../core/util/Path';\nimport { Reference } from './Reference';\nimport { Repo } from '../core/Repo';\nimport { RepoManager } from '../core/RepoManager';\nimport { validateArgCount } from '@firebase/util';\nimport { validateUrl } from '../core/util/validation';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { FirebaseDatabase } from '@firebase/database-types';\n\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nexport class Database implements FirebaseService {\n  INTERNAL: DatabaseInternals;\n  private root_: Reference;\n\n  static readonly ServerValue = {\n    TIMESTAMP: {\n      '.sv': 'timestamp'\n    },\n    increment: (delta: number) => {\n      return {\n        '.sv': {\n          'increment': delta\n        }\n      };\n    }\n  };\n\n  /**\n   * The constructor should not be called by users of our public API.\n   * @param {!Repo} repo_\n   */\n  constructor(private repo_: Repo) {\n    if (!(repo_ instanceof Repo)) {\n      fatal(\n        \"Don't call new Database() directly - please use firebase.database().\"\n      );\n    }\n\n    /** @type {Reference} */\n    this.root_ = new Reference(repo_, Path.Empty);\n\n    this.INTERNAL = new DatabaseInternals(this);\n  }\n\n  get app(): FirebaseApp {\n    return this.repo_.app;\n  }\n\n  /**\n   * Returns a reference to the root or to the path specified in the provided\n   * argument.\n   *\n   * @param {string|Reference=} path The relative string path or an existing\n   * Reference to a database location.\n   * @throws If a Reference is provided, throws if it does not belong to the\n   * same project.\n   * @return {!Reference} Firebase reference.\n   */\n  ref(path?: string): Reference;\n  ref(path?: Reference): Reference;\n  ref(path?: string | Reference): Reference {\n    this.checkDeleted_('ref');\n    validateArgCount('database.ref', 0, 1, arguments.length);\n\n    if (path instanceof Reference) {\n      return this.refFromURL(path.toString());\n    }\n\n    return path !== undefined ? this.root_.child(path) : this.root_;\n  }\n\n  /**\n   * Returns a reference to the root or the path specified in url.\n   * We throw a exception if the url is not in the same domain as the\n   * current repo.\n   * @param {string} url\n   * @return {!Reference} Firebase reference.\n   */\n  refFromURL(url: string): Reference {\n    /** @const {string} */\n    const apiName = 'database.refFromURL';\n    this.checkDeleted_(apiName);\n    validateArgCount(apiName, 1, 1, arguments.length);\n    const parsedURL = parseRepoInfo(url);\n    validateUrl(apiName, 1, parsedURL);\n\n    const repoInfo = parsedURL.repoInfo;\n    if (repoInfo.host !== (this.repo_.repoInfo_ as RepoInfo).host) {\n      fatal(\n        apiName +\n          ': Host name does not match the current database: ' +\n          '(found ' +\n          repoInfo.host +\n          ' but expected ' +\n          (this.repo_.repoInfo_ as RepoInfo).host +\n          ')'\n      );\n    }\n\n    return this.ref(parsedURL.path.toString());\n  }\n\n  /**\n   * @param {string} apiName\n   */\n  private checkDeleted_(apiName: string) {\n    if (this.repo_ === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n\n  // Make individual repo go offline.\n  goOffline() {\n    validateArgCount('database.goOffline', 0, 0, arguments.length);\n    this.checkDeleted_('goOffline');\n    this.repo_.interrupt();\n  }\n\n  goOnline() {\n    validateArgCount('database.goOnline', 0, 0, arguments.length);\n    this.checkDeleted_('goOnline');\n    this.repo_.resume();\n  }\n}\n\nexport class DatabaseInternals {\n  /** @param {!Database} database */\n  constructor(public database: Database) {}\n\n  /** @return {Promise<void>} */\n  async delete(): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).checkDeleted_('delete');\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    RepoManager.getInstance().deleteRepo((this.database as any).repo_ as Repo);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).repo_ = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.database as any).root_ = null;\n    this.database.INTERNAL = null;\n    this.database = null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { Reference } from './Reference';\n\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\n\nexport const forceLongPolling = function() {\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n};\n\nexport const forceWebSockets = function() {\n  BrowserPollConnection.forceDisallow();\n};\n\n/* Used by App Manager */\nexport const isWebSocketsAvailable = function(): boolean {\n  return WebSocketConnection['isAvailable']();\n};\n\nexport const setSecurityDebugCallback = function(\n  ref: Reference,\n  callback: (a: object) => void\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (ref.repo.persistentConnection_ as any).securityDebugCallback_ = callback;\n};\n\nexport const stats = function(ref: Reference, showDelta?: boolean) {\n  ref.repo.stats(showDelta);\n};\n\nexport const statsIncrementCounter = function(ref: Reference, metric: string) {\n  ref.repo.statsIncrementCounter(metric);\n};\n\nexport const dataUpdateCount = function(ref: Reference): number {\n  return ref.repo.dataUpdateCount;\n};\n\nexport const interceptServerData = function(\n  ref: Reference,\n  callback: ((a: string, b: unknown) => void) | null\n) {\n  return ref.repo.interceptServerData_(callback);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoManager } from '../core/RepoManager';\nimport { Connection } from '../realtime/Connection';\nimport { Query } from './Query';\n\nexport const DataConnection = PersistentConnection;\n\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function(\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function(\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexport const hijackHash = function(newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function(\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function() {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexport const queryIdentifier = function(query: Query) {\n  return query.queryIdentifier();\n};\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexport const forceRestClient = function(forceRestClient: boolean) {\n  RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app';\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { Database } from './src/api/Database';\nimport { DataSnapshot } from './src/api/DataSnapshot';\nimport { Query } from './src/api/Query';\nimport { Reference } from './src/api/Reference';\nimport { enableLogging } from './src/core/util/util';\nimport { RepoManager } from './src/core/RepoManager';\nimport * as INTERNAL from './src/api/internal';\nimport * as TEST_ACCESS from './src/api/test_access';\nimport { isNodeSdk } from '@firebase/util';\nimport * as types from '@firebase/database-types';\nimport { setSDKVersion } from './src/core/version';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nconst ServerValue = Database.ServerValue;\n\nexport function registerDatabase(instance: FirebaseNamespace) {\n  // set SDK_VERSION\n  setSDKVersion(instance.SDK_VERSION);\n\n  // Register the Database Service with the 'firebase' namespace.\n  const namespace = (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'database',\n      (container, url) => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const authProvider = container.getProvider('auth-internal');\n\n        return RepoManager.getInstance().databaseFromApp(\n          app,\n          authProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps(\n        // firebase.database namespace properties\n        {\n          Reference,\n          Query,\n          Database,\n          DataSnapshot,\n          enableLogging,\n          INTERNAL,\n          ServerValue,\n          TEST_ACCESS\n        }\n      )\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n\n  if (isNodeSdk()) {\n    module.exports = namespace;\n  }\n}\n\nregisterDatabase(firebase);\n\n// Types to export for the admin SDK\nexport { Database, Query, Reference, enableLogging, ServerValue };\n\nexport { DataSnapshot } from './src/api/DataSnapshot';\nexport { OnDisconnect } from './src/api/onDisconnect';\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    database?: {\n      (app?: FirebaseApp): types.FirebaseDatabase;\n      enableLogging: typeof types.enableLogging;\n      ServerValue: types.ServerValue;\n      Database: typeof types.FirebaseDatabase;\n    };\n  }\n  interface FirebaseApp {\n    database?(databaseURL?: string): types.FirebaseDatabase;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}