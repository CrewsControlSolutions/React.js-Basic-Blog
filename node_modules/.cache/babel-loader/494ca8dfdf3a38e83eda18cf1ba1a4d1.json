{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar firebase = _interopDefault(require('@firebase/app'));\n\nrequire('@firebase/installations');\n\nvar tslib = require('tslib');\n\nvar util = require('@firebase/util');\n\nvar logger$1 = require('@firebase/logger');\n\nvar component = require('@firebase/component');\n\nvar name = \"@firebase/performance\";\nvar version = \"0.3.2\";\n/**\r\n * @license\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\n\nvar TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\n\nvar TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\n\nvar TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\n\nvar OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\nvar FIRST_PAINT_COUNTER_NAME = '_fp';\nvar FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\nvar FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\nvar CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\nvar CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';\nvar SERVICE = 'performance';\nvar SERVICE_NAME = 'Performance';\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar _a;\n\nvar ERROR_DESCRIPTION_MAP = (_a = {}, _a[\"trace started\"\n/* TRACE_STARTED_BEFORE */\n] = 'Trace {$traceName} was started before.', _a[\"trace stopped\"\n/* TRACE_STOPPED_BEFORE */\n] = 'Trace {$traceName} is not running.', _a[\"no window\"\n/* NO_WINDOW */\n] = 'Window is not available.', _a[\"no app id\"\n/* NO_APP_ID */\n] = 'App id is not available.', _a[\"no project id\"\n/* NO_PROJECT_ID */\n] = 'Project id is not available.', _a[\"no api key\"\n/* NO_API_KEY */\n] = 'Api key is not available.', _a[\"invalid cc log\"\n/* INVALID_CC_LOG */\n] = 'Attempted to queue invalid cc event', _a[\"FB not default\"\n/* FB_NOT_DEFAULT */\n] = 'Performance can only start when Firebase app instance is the default one.', _a[\"RC response not ok\"\n/* RC_NOT_OK */\n] = 'RC response is not ok', _a[\"invalid attribute name\"\n/* INVALID_ATTRIBUTE_NAME */\n] = 'Attribute name {$attributeName} is invalid.', _a[\"invalid attribute value\"\n/* INVALID_ATTRIBUTE_VALUE */\n] = 'Attribute value {$attributeValue} is invalid.', _a[\"invalid custom metric name\"\n/* INVALID_CUSTOM_METRIC_NAME */\n] = 'Custom metric name {$customMetricName} is invalid', _a[\"invalid String merger input\"\n/* INVALID_STRING_MERGER_PARAMETER */\n] = 'Input for String merger is invalid, contact support team to resolve.', _a);\nvar ERROR_FACTORY = new util.ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar apiInstance;\nvar windowInstance;\n/**\r\n * This class holds a reference to various browser related objects injected by\r\n * set methods.\r\n */\n\nvar Api =\n/** @class */\nfunction () {\n  function Api(window) {\n    this.window = window;\n\n    if (!window) {\n      throw ERROR_FACTORY.create(\"no window\"\n      /* NO_WINDOW */\n      );\n    }\n\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  Api.prototype.getUrl = function () {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  };\n\n  Api.prototype.mark = function (name) {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n\n    this.performance.mark(name);\n  };\n\n  Api.prototype.measure = function (measureName, mark1, mark2) {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n\n    this.performance.measure(measureName, mark1, mark2);\n  };\n\n  Api.prototype.getEntriesByType = function (type) {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n\n    return this.performance.getEntriesByType(type);\n  };\n\n  Api.prototype.getEntriesByName = function (name) {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n\n    return this.performance.getEntriesByName(name);\n  };\n\n  Api.prototype.getTimeOrigin = function () {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);\n  };\n\n  Api.prototype.requiredApisAvailable = function () {\n    if (fetch && Promise && this.navigator && this.navigator.cookieEnabled) {\n      return true;\n    }\n\n    return false;\n  };\n\n  Api.prototype.setupObserver = function (entryType, callback) {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n\n    var observer = new this.PerformanceObserver(function (list) {\n      for (var _i = 0, _a = list.getEntries(); _i < _a.length; _i++) {\n        var entry = _a[_i]; // `entry` is a PerformanceEntry instance.\n\n        callback(entry);\n      }\n    }); // Start observing the entry types you care about.\n\n    observer.observe({\n      entryTypes: [entryType]\n    });\n  };\n\n  Api.getInstance = function () {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n\n    return apiInstance;\n  };\n\n  return Api;\n}();\n\nfunction setupApi(window) {\n  windowInstance = window;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction mergeStrings(part1, part2) {\n  var sizeDiff = part1.length - part2.length;\n\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(\"invalid String merger input\"\n    /* INVALID_STRING_MERGER_PARAMETER */\n    );\n  }\n\n  var resultArray = [];\n\n  for (var i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar settingsServiceInstance;\n\nvar SettingsService =\n/** @class */\nfunction () {\n  function SettingsService() {\n    // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n    this.instrumentationEnabled = true; // The variable which controls logging of custom traces.\n\n    this.dataCollectionEnabled = true; // Configuration flags set through remote config.\n\n    this.loggingEnabled = false; // Sampling rate between 0 and 1.\n\n    this.tracesSamplingRate = 1;\n    this.networkRequestsSamplingRate = 1; // Address of logging service.\n\n    this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto'; // Performance event transport endpoint URL which should be compatible with proto3.\n    // New Address for transport service, not configurable via Remote Config.\n\n    this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n    this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n    this.shouldSendToFl = false; // Source type for performance event logs.\n\n    this.logSource = 462; // Flags which control per session logging of traces and network requests.\n\n    this.logTraceAfterSampling = false;\n    this.logNetworkAfterSampling = false; // TTL of config retrieved from remote config in hours.\n\n    this.configTimeToLive = 12;\n  }\n\n  SettingsService.prototype.getAppId = function () {\n    var appId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.appId;\n\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"no app id\"\n      /* NO_APP_ID */\n      );\n    }\n\n    return appId;\n  };\n\n  SettingsService.prototype.getProjectId = function () {\n    var projectId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.projectId;\n\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"no project id\"\n      /* NO_PROJECT_ID */\n      );\n    }\n\n    return projectId;\n  };\n\n  SettingsService.prototype.getApiKey = function () {\n    var apiKey = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.apiKey;\n\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"no api key\"\n      /* NO_API_KEY */\n      );\n    }\n\n    return apiKey;\n  };\n\n  SettingsService.prototype.getFlTransportFullUrl = function () {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  };\n\n  SettingsService.getInstance = function () {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n\n    return settingsServiceInstance;\n  };\n\n  return SettingsService;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar iid;\n\nfunction getIidPromise() {\n  var iidPromise = SettingsService.getInstance().installationsService.getId(); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n  iidPromise.then(function (iidVal) {\n    iid = iidVal;\n  });\n  return iidPromise;\n} // This method should be used after the iid is retrieved by getIidPromise method.\n\n\nfunction getIid() {\n  return iid;\n}\n\nfunction getAuthTokenPromise() {\n  var authTokenPromise = SettingsService.getInstance().installationsService.getToken(); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n  authTokenPromise.then(function (authTokenVal) {});\n  return authTokenPromise;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar VisibilityState;\n\n(function (VisibilityState) {\n  VisibilityState[VisibilityState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  VisibilityState[VisibilityState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n  VisibilityState[VisibilityState[\"HIDDEN\"] = 2] = \"HIDDEN\";\n})(VisibilityState || (VisibilityState = {}));\n\nvar RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nvar ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nvar MAX_ATTRIBUTE_NAME_LENGTH = 40;\nvar MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nfunction getServiceWorkerStatus() {\n  var navigator = Api.getInstance().navigator;\n\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return 2\n      /* CONTROLLED */\n      ;\n    } else {\n      return 3\n      /* UNCONTROLLED */\n      ;\n    }\n  } else {\n    return 1\n    /* UNSUPPORTED */\n    ;\n  }\n}\n\nfunction getVisibilityState() {\n  var document = Api.getInstance().document;\n  var visibilityState = document.visibilityState;\n\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nfunction getEffectiveConnectionType() {\n  var navigator = Api.getInstance().navigator;\n  var navigatorConnection = navigator.connection;\n  var effectiveType = navigatorConnection && navigatorConnection.effectiveType;\n\n  switch (effectiveType) {\n    case 'slow-2g':\n      return 1\n      /* CONNECTION_SLOW_2G */\n      ;\n\n    case '2g':\n      return 2\n      /* CONNECTION_2G */\n      ;\n\n    case '3g':\n      return 3\n      /* CONNECTION_3G */\n      ;\n\n    case '4g':\n      return 4\n      /* CONNECTION_4G */\n      ;\n\n    default:\n      return 0\n      /* UNKNOWN */\n      ;\n  }\n}\n\nfunction isValidCustomAttributeName(name) {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n\n  var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function (prefix) {\n    return name.startsWith(prefix);\n  });\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nfunction isValidCustomAttributeValue(value) {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar consoleLogger = new logger$1.Logger(SERVICE_NAME);\nconsoleLogger.logLevel = logger$1.LogLevel.INFO;\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar REMOTE_CONFIG_SDK_VERSION = '0.0.1'; // These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\n\nvar DEFAULT_CONFIGS = {\n  loggingEnabled: true,\n  shouldSendToFl: true\n}; // These values will be used if the remote config object is successfully\n// retrieved, but the config object state shows unspecified or no template.\n\nvar NO_TEMPLATE_CONFIGS = {\n  shouldSendToFl: false\n};\nvar FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nfunction getConfig(iid) {\n  var config = getStoredConfig();\n\n  if (config) {\n    processConfig(iid, config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid).then(function (config) {\n    return processConfig(iid, config);\n  }).then(function (config) {\n    return storeConfig(config);\n  },\n  /** Do nothing for error, use defaults set in settings service. */\n  function () {});\n}\n\nfunction getStoredConfig() {\n  var localStorage = Api.getInstance().localStorage;\n\n  if (!localStorage) {\n    return;\n  }\n\n  var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n\n  if (!configStringified) {\n    return;\n  }\n\n  try {\n    var configResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch (_a) {\n    return;\n  }\n}\n\nfunction storeConfig(config) {\n  var localStorage = Api.getInstance().localStorage;\n\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));\n}\n\nvar COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(iid) {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise().then(function (authToken) {\n    var projectId = SettingsService.getInstance().getProjectId();\n    var configEndPoint = \"https://firebaseremoteconfig.googleapis.com/v1/projects/\" + projectId + \"/namespaces/fireperf:fetch?key=\" + SettingsService.getInstance().getApiKey();\n    var request = new Request(configEndPoint, {\n      method: 'POST',\n      headers: {\n        Authorization: FIS_AUTH_PREFIX + \" \" + authToken\n      },\n\n      /* eslint-disable camelcase */\n      body: JSON.stringify({\n        app_instance_id: iid,\n        app_instance_id_token: authToken,\n        app_id: SettingsService.getInstance().getAppId(),\n        app_version: SDK_VERSION,\n        sdk_version: REMOTE_CONFIG_SDK_VERSION\n      })\n      /* eslint-enable camelcase */\n\n    });\n    return fetch(request).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } // In case response is not ok. This will be caught by catch.\n\n\n      throw ERROR_FACTORY.create(\"RC response not ok\"\n      /* RC_NOT_OK */\n      );\n    });\n  }).catch(function () {\n    consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n    return undefined;\n  });\n}\n/**\r\n * Processes config coming either from calling RC or from local storage.\r\n * This method only runs if call is successful or config in storage\r\n * is valid.\r\n */\n\n\nfunction processConfig(iid, config) {\n  if (!config) {\n    return config;\n  }\n\n  var settingsServiceInstance = SettingsService.getInstance();\n  var entries = config.entries || {};\n  var state = config.state;\n\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled = String(entries.fpr_enabled) === 'true';\n  } else {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } // Key from Remote Config has to be non-empty string, otherwsie use local value.\n\n\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } // If config object state indicates that no template has been set, that means it is new user of\n  // Performance Monitoring and should use the old log endpoint, because it is guaranteed to work.\n\n\n  if (state === undefined || state === 'INSTANCE_STATE_UNSPECIFIED' || state === 'NO_TEMPLATE') {\n    {\n      settingsServiceInstance.shouldSendToFl = NO_TEMPLATE_CONFIGS.shouldSendToFl;\n    }\n  } else if (entries.fpr_log_transport_web_percent) {\n    // If config object state doesn't indicate no template, it can only be UPDATE for now.\n    // - Performance Monitoring doesn't set etag in request, therefore state cannot be NO_CHANGE.\n    // - Sampling rate flags and master flag are required, therefore state cannot be EMPTY_CONFIG.\n    // If config object state is UPDATE and rollout flag is present, determine endpoint by iid.\n    settingsServiceInstance.shouldSendToFl = isDestFl(iid, Number(entries.fpr_log_transport_web_percent));\n  } else {\n    // If config object state is UPDATE and rollout flag is not present, that means rollout is\n    // complete and rollout flag is deprecated, therefore dispatch events to new transport endpoint.\n    settingsServiceInstance.shouldSendToFl = DEFAULT_CONFIGS.shouldSendToFl;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);\n  }\n\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);\n  } // Set the per session trace and network logging flags.\n\n\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);\n  return config;\n}\n\nfunction configValid(expiry) {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate) {\n  return Math.random() <= samplingRate;\n}\n/**\r\n * True if event should be sent to Fl transport endpoint rather than CC transport endpoint.\r\n * rolloutPercent is in range [0.0, 100.0].\r\n * @param iid Installation ID which identifies a web app installed on client.\r\n * @param rolloutPercent the possibility of this app sending events to Fl endpoint.\r\n * @return true if this installation should send events to Fl endpoint.\r\n */\n\n\nfunction isDestFl(iid, rolloutPercent) {\n  if (iid.length === 0) {\n    return false;\n  }\n\n  return getHashPercent(iid) < rolloutPercent;\n}\n/**\r\n * Generate integer value range in [0, 99]. Implementation from String.hashCode() in Java.\r\n * @param seed Same seed will generate consistent hash value using this algorithm.\r\n * @return Hash value in range [0, 99], generated from seed and hash algorithm.\r\n */\n\n\nfunction getHashPercent(seed) {\n  var hash = 0;\n\n  for (var i = 0; i < seed.length; i++) {\n    hash = (hash << 3) + hash - seed.charCodeAt(i);\n  }\n\n  hash = Math.abs(hash % 100);\n  return hash;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar initializationStatus = 1\n/* notInitialized */\n;\nvar initializationPromise;\n\nfunction getInitializationPromise() {\n  initializationStatus = 2\n  /* initializationPending */\n  ;\n  initializationPromise = initializationPromise || initializePerf();\n  return initializationPromise;\n}\n\nfunction isPerfInitialized() {\n  return initializationStatus === 3\n  /* initialized */\n  ;\n}\n\nfunction initializePerf() {\n  return getDocumentReadyComplete().then(function () {\n    return getIidPromise();\n  }).then(function (iid) {\n    return getConfig(iid);\n  }).then(function () {\n    return changeInitializationStatus();\n  }, function () {\n    return changeInitializationStatus();\n  });\n}\n/**\r\n * Returns a promise which resolves whenever the document readystate is complete or\r\n * immediately if it is called after page load complete.\r\n */\n\n\nfunction getDocumentReadyComplete() {\n  var document = Api.getInstance().document;\n  return new Promise(function (resolve) {\n    if (document && document.readyState !== 'complete') {\n      var handler_1 = function () {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler_1);\n          resolve();\n        }\n      };\n\n      document.addEventListener('readystatechange', handler_1);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus() {\n  initializationStatus = 3\n  /* initialized */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nvar INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000; // If end point does not work, the call will be tried for these many times.\n\nvar DEFAULT_REMAINING_TRIES = 3;\nvar remainingTries = DEFAULT_REMAINING_TRIES;\n/* eslint-enable camelcase */\n\nvar queue = [];\nvar isTransportSetup = false;\n\nfunction setupTransportService() {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\nfunction processQueue(timeOffset) {\n  setTimeout(function () {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    } // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n\n\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents() {\n  // Capture a snapshot of the queue and empty the \"official queue\".\n  var staged = tslib.__spreadArrays(queue);\n\n  queue = [];\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n\n  var log_event = staged.map(function (evt) {\n    return {\n      source_extension_json_proto3: evt.message,\n      event_time_ms: String(evt.eventTime)\n    };\n  });\n  var data = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1,\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event: log_event\n  };\n  /* eslint-enable camelcase */\n\n  postToEndpoint(data, staged).catch(function () {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = tslib.__spreadArrays(staged, queue);\n    remainingTries--;\n    consoleLogger.info(\"Tries left: \" + remainingTries + \".\");\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction postToEndpoint(data, staged) {\n  // Gradually rollout traffic from cc to transport using remote config.\n  if (SettingsService.getInstance().shouldSendToFl) {\n    return sendEventsToFl(data, staged);\n  } else {\n    return sendEventsToCc(data);\n  }\n}\n\nfunction sendEventsToFl(data, staged) {\n  return postToFlEndpoint(data).then(function (res) {\n    if (!res.ok) {\n      consoleLogger.info('Call to Firebase backend failed.');\n    }\n\n    return res.json();\n  }).then(function (res) {\n    // Find the next call wait time from the response.\n    var transportWait = Number(res.nextRequestWaitMillis);\n    var requestOffset = DEFAULT_SEND_INTERVAL_MS;\n\n    if (!isNaN(transportWait)) {\n      requestOffset = Math.max(transportWait, requestOffset);\n    } // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n    // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n\n\n    var logResponseDetails = res.logResponseDetails;\n\n    if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {\n      queue = tslib.__spreadArrays(staged, queue);\n      consoleLogger.info(\"Retry transport request later.\");\n    }\n\n    remainingTries = DEFAULT_REMAINING_TRIES; // Schedule the next process.\n\n    processQueue(requestOffset);\n  });\n}\n\nfunction sendEventsToCc(data) {\n  return fetch(SettingsService.getInstance().logEndPointUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  }).then(function (res) {\n    if (!res.ok) {\n      consoleLogger.info('Call to Firebase backend failed.');\n    }\n\n    return res.json();\n  }).then(function (res) {\n    var wait = Number(res.next_request_wait_millis); // Find the next call wait time from the response.\n\n    var requestOffset = isNaN(wait) ? DEFAULT_SEND_INTERVAL_MS : Math.max(DEFAULT_SEND_INTERVAL_MS, wait);\n    remainingTries = DEFAULT_REMAINING_TRIES; // Schedule the next process.\n\n    processQueue(requestOffset);\n  });\n}\n\nfunction postToFlEndpoint(data) {\n  var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt) {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(\"invalid cc log\"\n    /* INVALID_CC_LOG */\n    );\n  } // Add the new event to the queue.\n\n\n  queue = tslib.__spreadArrays(queue, [evt]);\n}\n/** Log handler for cc service to send the performance logs to the server. */\n\n\nfunction transportHandler( // eslint-disable-next-line @typescript-eslint/no-explicit-any\nserializer) {\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var message = serializer.apply(void 0, args);\n    addToQueue({\n      message: message,\n      eventTime: Date.now()\n    });\n  };\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/* eslint-enble camelcase */\n\n\nvar logger; // This method is not called before initialization.\n\nfunction sendLog(resource, resourceType) {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n\n  logger(resource, resourceType);\n}\n\nfunction logTrace(trace) {\n  var settingsService = SettingsService.getInstance(); // Do not log if trace is auto generated and instrumentation is disabled.\n\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  } // Do not log if trace is custom and data collection is disabled.\n\n\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  } // Do not log if required apis are not available.\n\n\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  } // Only log the page load auto traces if page is visible.\n\n\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise().then(function () {\n      return sendTraceLog(trace);\n    }, function () {\n      return sendTraceLog(trace);\n    });\n  }\n}\n\nfunction sendTraceLog(trace) {\n  if (getIid()) {\n    setTimeout(function () {\n      return sendLog(trace, 1\n      /* Trace */\n      );\n    }, 0);\n  }\n}\n\nfunction logNetworkRequest(networkRequest) {\n  var settingsService = SettingsService.getInstance(); // Do not log network requests if instrumentation is disabled.\n\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  } // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n\n\n  var networkRequestUrl = networkRequest.url; // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n\n  var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n\n  if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {\n    return;\n  }\n\n  if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {\n    return;\n  }\n\n  setTimeout(function () {\n    return sendLog(networkRequest, 0\n    /* NetworkRequest */\n    );\n  }, 0);\n}\n\nfunction serializer(resource, resourceType) {\n  if (resourceType === 0\n  /* NetworkRequest */\n  ) {\n    return serializeNetworkRequest(resource);\n  }\n\n  return serializeTrace(resource);\n}\n\nfunction serializeNetworkRequest(networkRequest) {\n  var networkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  var perfMetric = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace) {\n  var traceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n\n  var customAttributes = trace.getAttributes();\n\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  var perfMetric = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo() {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MAX_METRIC_NAME_LENGTH = 100;\nvar RESERVED_AUTO_PREFIX = '_';\nvar oobMetrics = [FIRST_PAINT_COUNTER_NAME, FIRST_CONTENTFUL_PAINT_COUNTER_NAME, FIRST_INPUT_DELAY_COUNTER_NAME];\n/**\r\n * Returns true if the metric is custom and does not start with reserved prefix, or if\r\n * the metric is one of out of the box page load trace metrics.\r\n */\n\nfunction isValidMetricName(name, traceName) {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n\n  return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name) > -1 || !name.startsWith(RESERVED_AUTO_PREFIX);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Trace =\n/** @class */\nfunction () {\n  /**\r\n   * @param name The name of the trace.\r\n   * @param isAuto If the trace is auto-instrumented.\r\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\r\n   * is only set when the trace is built for logging when the user directly uses the user timing\r\n   * api (performance.mark and performance.measure).\r\n   */\n  function Trace(name, isAuto, traceMeasureName) {\n    if (isAuto === void 0) {\n      isAuto = false;\n    }\n\n    this.name = name;\n    this.isAuto = isAuto;\n    this.state = 1\n    /* UNINITIALIZED */\n    ;\n    this.customAttributes = {};\n    this.counters = {};\n    this.api = Api.getInstance();\n    this.randomId = Math.floor(Math.random() * 1000000);\n\n    if (!this.isAuto) {\n      this.traceStartMark = TRACE_START_MARK_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n      this.traceStopMark = TRACE_STOP_MARK_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n      this.traceMeasure = traceMeasureName || TRACE_MEASURE_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n  /**\r\n   * Starts a trace. The measurement of the duration starts at this point.\r\n   */\n\n\n  Trace.prototype.start = function () {\n    if (this.state !== 1\n    /* UNINITIALIZED */\n    ) {\n      throw ERROR_FACTORY.create(\"trace started\"\n      /* TRACE_STARTED_BEFORE */\n      , {\n        traceName: this.name\n      });\n    }\n\n    this.api.mark(this.traceStartMark);\n    this.state = 2\n    /* RUNNING */\n    ;\n  };\n  /**\r\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\r\n   * is logged.\r\n   */\n\n\n  Trace.prototype.stop = function () {\n    if (this.state !== 2\n    /* RUNNING */\n    ) {\n      throw ERROR_FACTORY.create(\"trace stopped\"\n      /* TRACE_STOPPED_BEFORE */\n      , {\n        traceName: this.name\n      });\n    }\n\n    this.state = 3\n    /* TERMINATED */\n    ;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);\n    this.calculateTraceMetrics();\n    logTrace(this);\n  };\n  /**\r\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\r\n   * directly. No need to use start and stop methods.\r\n   * @param startTime Trace start time since epoch in millisec\r\n   * @param duration The duraction of the trace in millisec\r\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\r\n   */\n\n\n  Trace.prototype.record = function (startTime, duration, options) {\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n\n    if (options && options.attributes) {\n      this.customAttributes = tslib.__assign({}, options.attributes);\n    }\n\n    if (options && options.metrics) {\n      for (var _i = 0, _a = Object.keys(options.metrics); _i < _a.length; _i++) {\n        var metric = _a[_i];\n\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n\n    logTrace(this);\n  };\n  /**\r\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\r\n   * custom metric if one with the given name does not exist.\r\n   * @param counter Name of the custom metric\r\n   * @param num Increment by value\r\n   */\n\n\n  Trace.prototype.incrementMetric = function (counter, num) {\n    if (num === void 0) {\n      num = 1;\n    }\n\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, 0);\n    }\n\n    this.counters[counter] += num;\n  };\n  /**\r\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\r\n   * given name does not exist.\r\n   * @param counter Name of the custom metric\r\n   * @param num Set custom metric to this value\r\n   */\n\n\n  Trace.prototype.putMetric = function (counter, num) {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = num;\n    } else {\n      throw ERROR_FACTORY.create(\"invalid custom metric name\"\n      /* INVALID_CUSTOM_METRIC_NAME */\n      , {\n        customMetricName: counter\n      });\n    }\n  };\n  /**\r\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\r\n   * not exist will return zero.\r\n   * @param counter\r\n   */\n\n\n  Trace.prototype.getMetric = function (counter) {\n    return this.counters[counter] || 0;\n  };\n  /**\r\n   * Sets a custom attribute of a trace to a certain value.\r\n   * @param attr\r\n   * @param value\r\n   */\n\n\n  Trace.prototype.putAttribute = function (attr, value) {\n    var isValidName = isValidCustomAttributeName(attr);\n    var isValidValue = isValidCustomAttributeValue(value);\n\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    } // Throw appropriate error when the attribute name or value is invalid.\n\n\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(\"invalid attribute name\"\n      /* INVALID_ATTRIBUTE_NAME */\n      , {\n        attributeName: attr\n      });\n    }\n\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(\"invalid attribute value\"\n      /* INVALID_ATTRIBUTE_VALUE */\n      , {\n        attributeValue: value\n      });\n    }\n  };\n  /**\r\n   * Retrieves the value a custom attribute of a trace is set to.\r\n   * @param attr\r\n   */\n\n\n  Trace.prototype.getAttribute = function (attr) {\n    return this.customAttributes[attr];\n  };\n\n  Trace.prototype.removeAttribute = function (attr) {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n\n    delete this.customAttributes[attr];\n  };\n\n  Trace.prototype.getAttributes = function () {\n    return tslib.__assign({}, this.customAttributes);\n  };\n\n  Trace.prototype.setStartTime = function (startTime) {\n    this.startTimeUs = startTime;\n  };\n\n  Trace.prototype.setDuration = function (duration) {\n    this.durationUs = duration;\n  };\n  /**\r\n   * Calculates and assigns the duration and start time of the trace using the measure performance\r\n   * entry.\r\n   */\n\n\n  Trace.prototype.calculateTraceMetrics = function () {\n    var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);\n    }\n  };\n  /**\r\n   * @param navigationTimings A single element array which contains the navigationTIming object of\r\n   * the page load\r\n   * @param paintTimings A array which contains paintTiming object of the page load\r\n   * @param firstInputDelay First input delay in millisec\r\n   */\n\n\n  Trace.createOobTrace = function (navigationTimings, paintTimings, firstInputDelay) {\n    var route = Api.getInstance().getUrl();\n\n    if (!route) {\n      return;\n    }\n\n    var trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs); // navigationTimings includes only one element.\n\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));\n      trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));\n      trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));\n    }\n\n    var FIRST_PAINT = 'first-paint';\n    var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n\n    if (paintTimings) {\n      var firstPaint = paintTimings.find(function (paintObject) {\n        return paintObject.name === FIRST_PAINT;\n      });\n\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));\n      }\n\n      var firstContentfulPaint = paintTimings.find(function (paintObject) {\n        return paintObject.name === FIRST_CONTENTFUL_PAINT;\n      });\n\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));\n      }\n    }\n\n    logTrace(trace);\n  };\n\n  Trace.createUserTimingTrace = function (measureName) {\n    var trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  };\n\n  return Trace;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction createNetworkRequestEntry(entry) {\n  var performanceEntry = entry;\n\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n\n  var timeOrigin = Api.getInstance().getTimeOrigin();\n  var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);\n  var timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000) : undefined;\n  var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000); // Remove the query params from logged network request url.\n\n  var url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  var networkRequest = {\n    url: url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs: startTimeUs,\n    timeToResponseInitiatedUs: timeToResponseInitiatedUs,\n    timeToResponseCompletedUs: timeToResponseCompletedUs\n  };\n  logNetworkRequest(networkRequest);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar FID_WAIT_TIME_MS = 5000;\n\nfunction setupOobResources() {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  } // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n\n\n  setTimeout(function () {\n    return setupOobTraces();\n  }, 0);\n  setTimeout(function () {\n    return setupNetworkRequests();\n  }, 0);\n  setTimeout(function () {\n    return setupUserTimingTraces();\n  }, 0);\n}\n\nfunction setupNetworkRequests() {\n  var api = Api.getInstance();\n  var resources = api.getEntriesByType('resource');\n\n  for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n    var resource = resources_1[_i];\n    createNetworkRequestEntry(resource);\n  }\n\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces() {\n  var api = Api.getInstance();\n  var navigationTimings = api.getEntriesByType('navigation');\n  var paintTimings = api.getEntriesByType('paint'); // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var timeoutId_1 = setTimeout(function () {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId_1 = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay(function (fid) {\n      if (timeoutId_1) {\n        clearTimeout(timeoutId_1);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces() {\n  var api = Api.getInstance(); // Run through the measure performance entries collected up to this point.\n\n  var measures = api.getEntriesByType('measure');\n\n  for (var _i = 0, measures_1 = measures; _i < measures_1.length; _i++) {\n    var measure = measures_1[_i];\n    createUserTimingTrace(measure);\n  } // Setup an observer to capture the measures from this point on.\n\n\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure) {\n  var measureName = measure.name; // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n\n  if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {\n    return;\n  }\n\n  Trace.createUserTimingTrace(measureName);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PerformanceController =\n/** @class */\nfunction () {\n  function PerformanceController(app) {\n    this.app = app;\n\n    if (Api.getInstance().requiredApisAvailable()) {\n      setupTransportService();\n      getInitializationPromise().then(setupOobResources, setupOobResources);\n    } else {\n      consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');\n    }\n  }\n\n  PerformanceController.prototype.trace = function (name) {\n    return new Trace(name);\n  };\n\n  Object.defineProperty(PerformanceController.prototype, \"instrumentationEnabled\", {\n    get: function () {\n      return SettingsService.getInstance().instrumentationEnabled;\n    },\n    set: function (val) {\n      SettingsService.getInstance().instrumentationEnabled = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PerformanceController.prototype, \"dataCollectionEnabled\", {\n    get: function () {\n      return SettingsService.getInstance().dataCollectionEnabled;\n    },\n    set: function (val) {\n      SettingsService.getInstance().dataCollectionEnabled = val;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return PerformanceController;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nfunction registerPerformance(instance) {\n  var factoryMethod = function (app, installations) {\n    if (app.name !== DEFAULT_ENTRY_NAME) {\n      throw ERROR_FACTORY.create(\"FB not default\"\n      /* FB_NOT_DEFAULT */\n      );\n    }\n\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"no window\"\n      /* NO_WINDOW */\n      );\n    }\n\n    setupApi(window);\n    SettingsService.getInstance().firebaseAppInstance = app;\n    SettingsService.getInstance().installationsService = installations;\n    return new PerformanceController(app);\n  }; // Register performance with firebase-app.\n\n\n  instance.INTERNAL.registerComponent(new component.Component('performance', function (container) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate(); // The following call will always succeed because perf has `import '@firebase/installations'`\n\n    var installations = container.getProvider('installations').getImmediate();\n    return factoryMethod(app, installations);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n  instance.registerVersion(name, version);\n}\n\nregisterPerformance(firebase);\nexports.registerPerformance = registerPerformance;","map":{"version":3,"mappings":"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","names":["SDK_VERSION","version","TRACE_START_MARK_PREFIX","TRACE_STOP_MARK_PREFIX","TRACE_MEASURE_PREFIX","OOB_TRACE_PAGE_LOAD_PREFIX","FIRST_PAINT_COUNTER_NAME","FIRST_CONTENTFUL_PAINT_COUNTER_NAME","FIRST_INPUT_DELAY_COUNTER_NAME","CONFIG_LOCAL_STORAGE_KEY","CONFIG_EXPIRY_LOCAL_STORAGE_KEY","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","_a","ERROR_FACTORY","ErrorFactory","apiInstance","windowInstance","window","create","performance","PerformanceObserver","windowLocation","location","navigator","document","cookieEnabled","localStorage","perfMetrics","onFirstInputDelay","Api","href","split","name","mark","measureName","mark1","mark2","measure","type","getEntriesByType","getEntriesByName","timeOrigin","timing","navigationStart","fetch","Promise","entryType","callback","observer","getEntries","_i","entry","observe","entryTypes","undefined","setupApi","mergeStrings","part1","part2","sizeDiff","length","resultArray","i","push","charAt","join","settingsServiceInstance","SettingsService","appId","firebaseAppInstance","options","projectId","apiKey","flTransportEndpointUrl","concat","transportKey","iid","getIidPromise","iidPromise","getInstance","installationsService","getId","then","iidVal","getIid","getAuthTokenPromise","authTokenPromise","getToken","authTokenVal","VisibilityState","RESERVED_ATTRIBUTE_PREFIXES","ATTRIBUTE_FORMAT_REGEX","RegExp","MAX_ATTRIBUTE_NAME_LENGTH","MAX_ATTRIBUTE_VALUE_LENGTH","getServiceWorkerStatus","serviceWorker","controller","getVisibilityState","visibilityState","VISIBLE","HIDDEN","UNKNOWN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","isValidCustomAttributeName","matchesReservedPrefix","some","startsWith","prefix","match","isValidCustomAttributeValue","value","consoleLogger","Logger","logLevel","LogLevel","INFO","REMOTE_CONFIG_SDK_VERSION","DEFAULT_CONFIGS","loggingEnabled","shouldSendToFl","NO_TEMPLATE_CONFIGS","FIS_AUTH_PREFIX","getConfig","config","getStoredConfig","processConfig","resolve","getRemoteConfig","expiryString","getItem","configValid","configStringified","configResponse","JSON","parse","storeConfig","setItem","stringify","String","Date","now","configTimeToLive","COULD_NOT_GET_CONFIG_MSG","getProjectId","configEndPoint","getApiKey","request","Request","method","headers","Authorization","authToken","body","app_instance_id","app_instance_id_token","app_id","getAppId","app_version","sdk_version","response","ok","json","catch","info","entries","state","fpr_enabled","fpr_log_source","logSource","Number","fpr_log_endpoint_url","logEndPointUrl","fpr_log_transport_key","fpr_log_transport_web_percent","isDestFl","fpr_vc_network_request_sampling_rate","networkRequestsSamplingRate","fpr_vc_trace_sampling_rate","tracesSamplingRate","logTraceAfterSampling","shouldLogAfterSampling","logNetworkAfterSampling","expiry","samplingRate","Math","random","rolloutPercent","getHashPercent","seed","hash","charCodeAt","abs","initializationStatus","initializationPromise","getInitializationPromise","initializePerf","isPerfInitialized","getDocumentReadyComplete","readyState","handler_1","removeEventListener","addEventListener","changeInitializationStatus","DEFAULT_SEND_INTERVAL_MS","INITIAL_SEND_TIME_DELAY_MS","DEFAULT_REMAINING_TRIES","remainingTries","queue","isTransportSetup","setupTransportService","processQueue","timeOffset","setTimeout","dispatchQueueEvents","staged","log_event","map","source_extension_json_proto3","evt","message","event_time_ms","eventTime","data","request_time_ms","client_info","client_type","js_client_info","log_source","postToEndpoint","sendEventsToFl","sendEventsToCc","postToFlEndpoint","res","transportWait","nextRequestWaitMillis","requestOffset","isNaN","max","logResponseDetails","Array","isArray","responseAction","wait","next_request_wait_millis","flTransportFullUrl","getFlTransportFullUrl","addToQueue","transportHandler","serializer","args","logger","sendLog","resource","resourceType","logTrace","trace","settingsService","instrumentationEnabled","isAuto","dataCollectionEnabled","requiredApisAvailable","sendTraceLog","logNetworkRequest","networkRequest","networkRequestUrl","url","logEndpointUrl","flEndpointUrl","serializeNetworkRequest","serializeTrace","networkRequestMetric","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","traceMetric","is_auto","duration_us","durationUs","Object","keys","counters","customAttributes","getAttributes","custom_attributes","trace_metric","google_app_id","web_app_info","page_url","getUrl","service_worker_status","visibility_state","effective_connection_type","application_process_state","MAX_METRIC_NAME_LENGTH","RESERVED_AUTO_PREFIX","oobMetrics","isValidMetricName","traceName","indexOf","traceMeasureName","floor","traceStartMark","randomId","traceStopMark","traceMeasure","calculateTraceMetrics","Trace","api","startTime","duration","attributes","tslib","metrics","metric","counter","num","putMetric","customMetricName","attr","isValidName","isValidValue","attributeName","attributeValue","perfMeasureEntries","perfMeasureEntry","getTimeOrigin","navigationTimings","paintTimings","firstInputDelay","route","timeOriginUs","setStartTime","setDuration","domInteractive","domContentLoadedEventEnd","loadEventEnd","FIRST_PAINT","FIRST_CONTENTFUL_PAINT","firstPaint","find","firstContentfulPaint","createNetworkRequestEntry","performanceEntry","responseStart","responseEnd","transferSize","FID_WAIT_TIME_MS","setupOobResources","setupNetworkRequests","resources","setupObserver","setupOobTraces","timeoutId_1","createOobTrace","fid","clearTimeout","setupUserTimingTraces","measures","createUserTimingTrace","substring","app","PerformanceController","val","DEFAULT_ENTRY_NAME","registerPerformance","instance","factoryMethod","installations","INTERNAL","registerComponent","Component","container","getProvider","getImmediate","registerVersion","firebase"],"sources":["../src/constants.ts","../src/utils/errors.ts","../src/services/api_service.ts","../src/utils/string_merger.ts","../src/services/settings_service.ts","../src/services/iid_service.ts","../src/utils/attributes_utils.ts","../src/utils/console_logger.ts","../src/services/remote_config_service.ts","../src/services/initialization_service.ts","../src/services/transport_service.ts","../src/services/perf_logger.ts","../src/utils/metric_utils.ts","../src/resources/trace.ts","../src/resources/network_request.ts","../src/services/oob_resources_service.ts","../src/controllers/perf.ts","../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    perfMetrics?: { onFirstInputDelay: Function };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  readonly onFirstInputDelay?: Function;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (fetch && Promise && this.navigator && this.navigator.cookieEnabled) {\n      return true;\n    }\n    return false;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  shouldSendToFl = false;\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  firebaseAppInstance!: FirebaseApp;\n\n  installationsService!: FirebaseInstallations;\n\n  getAppId(): string {\n    const appId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n    }\n    return appId;\n  }\n\n  getProjectId(): string {\n    const projectId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n    }\n    return projectId;\n  }\n\n  getApiKey(): string {\n    const apiKey =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n    }\n    return apiKey;\n  }\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SettingsService } from './settings_service';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(): Promise<string> {\n  const iidPromise = SettingsService.getInstance().installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(): Promise<string> {\n  const authTokenPromise = SettingsService.getInstance().installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  shouldSendToFl?: boolean;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true,\n  shouldSendToFl: true\n};\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the config object state shows unspecified or no template.\nconst NO_TEMPLATE_CONFIGS: SecondaryConfig = {\n  shouldSendToFl: false\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(iid: string): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(iid, config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid)\n    .then(config => processConfig(iid, config))\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise()\n    .then(authToken => {\n      const projectId = SettingsService.getInstance().getProjectId();\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${SettingsService.getInstance().getApiKey()}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: SettingsService.getInstance().getAppId(),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  iid: string,\n  config: RemoteConfigResponse | undefined\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  const state = config.state;\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  // If config object state indicates that no template has been set, that means it is new user of\n  // Performance Monitoring and should use the old log endpoint, because it is guaranteed to work.\n  if (\n    state === undefined ||\n    state === 'INSTANCE_STATE_UNSPECIFIED' ||\n    state === 'NO_TEMPLATE'\n  ) {\n    if (NO_TEMPLATE_CONFIGS.shouldSendToFl !== undefined) {\n      settingsServiceInstance.shouldSendToFl =\n        NO_TEMPLATE_CONFIGS.shouldSendToFl;\n    }\n  } else if (entries.fpr_log_transport_web_percent) {\n    // If config object state doesn't indicate no template, it can only be UPDATE for now.\n    // - Performance Monitoring doesn't set etag in request, therefore state cannot be NO_CHANGE.\n    // - Sampling rate flags and master flag are required, therefore state cannot be EMPTY_CONFIG.\n    // If config object state is UPDATE and rollout flag is present, determine endpoint by iid.\n    settingsServiceInstance.shouldSendToFl = isDestFl(\n      iid,\n      Number(entries.fpr_log_transport_web_percent)\n    );\n  } else if (DEFAULT_CONFIGS.shouldSendToFl !== undefined) {\n    // If config object state is UPDATE and rollout flag is not present, that means rollout is\n    // complete and rollout flag is deprecated, therefore dispatch events to new transport endpoint.\n    settingsServiceInstance.shouldSendToFl = DEFAULT_CONFIGS.shouldSendToFl;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n\n/**\n * True if event should be sent to Fl transport endpoint rather than CC transport endpoint.\n * rolloutPercent is in range [0.0, 100.0].\n * @param iid Installation ID which identifies a web app installed on client.\n * @param rolloutPercent the possibility of this app sending events to Fl endpoint.\n * @return true if this installation should send events to Fl endpoint.\n */\nexport function isDestFl(iid: string, rolloutPercent: number): boolean {\n  if (iid.length === 0) {\n    return false;\n  }\n  return getHashPercent(iid) < rolloutPercent;\n}\n/**\n * Generate integer value range in [0, 99]. Implementation from String.hashCode() in Java.\n * @param seed Same seed will generate consistent hash value using this algorithm.\n * @return Hash value in range [0, 99], generated from seed and hash algorithm.\n */\nfunction getHashPercent(seed: string): number {\n  let hash = 0;\n  for (let i = 0; i < seed.length; i++) {\n    hash = (hash << 3) + hash - seed.charCodeAt(i);\n  }\n  hash = Math.abs(hash % 100);\n  return hash;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise = initializationPromise || initializePerf();\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise())\n    .then(iid => getConfig(iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Capture a snapshot of the queue and empty the \"official queue\".\n  const staged = [...queue];\n  queue = [];\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  postToEndpoint(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction postToEndpoint(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  // Gradually rollout traffic from cc to transport using remote config.\n  if (SettingsService.getInstance().shouldSendToFl) {\n    return sendEventsToFl(data, staged);\n  } else {\n    return sendEventsToCc(data);\n  }\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction sendEventsToCc(data: TransportBatchLogFormat): Promise<void> {\n  return fetch(SettingsService.getInstance().logEndPointUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  })\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      const wait = Number(res.next_request_wait_millis);\n      // Find the next call wait time from the response.\n      const requestOffset = isNaN(wait)\n        ? DEFAULT_SEND_INTERVAL_MS\n        : Math.max(DEFAULT_SEND_INTERVAL_MS, wait);\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise().then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (getIid()) {\n    setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n  }\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(): ApplicationInfo {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport { isValidMetricName } from '../utils/metric_utils';\nimport { PerformanceTrace } from '@firebase/performance-types';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metric of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist.\n   * @param counter Name of the custom metric\n   * @param num Increment by value\n   */\n  incrementMetric(counter: string, num = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, 0);\n    }\n    this.counters[counter] += num;\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist.\n   * @param counter Name of the custom metric\n   * @param num Set custom metric to this value\n   */\n  putMetric(counter: string, num: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = num;\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(measureName: string): void {\n    const trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(entry: PerformanceEntry): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(), 0);\n  setTimeout(() => setupNetworkRequests(), 0);\n  setTimeout(() => setupUserTimingTraces(), 0);\n}\n\nfunction setupNetworkRequests(): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces(): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure: PerformanceEntry): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Trace } from '../resources/trace';\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { consoleLogger } from '../utils/console_logger';\nimport { setupTransportService } from '../services/transport_service';\n\nexport class PerformanceController implements FirebasePerformance {\n  constructor(readonly app: FirebaseApp) {\n    if (Api.getInstance().requiredApisAvailable()) {\n      setupTransportService();\n      getInitializationPromise().then(setupOobResources, setupOobResources);\n    } else {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n    }\n  }\n\n  trace(name: string): Trace {\n    return new Trace(name);\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { PerformanceController } from './src/controllers/perf';\nimport { setupApi } from './src/services/api_service';\nimport { SettingsService } from './src/services/settings_service';\nimport { ERROR_FACTORY, ErrorCode } from './src/utils/errors';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { Component, ComponentType } from '@firebase/component';\nimport { FirebaseInstallations } from '@firebase/installations-types';\n\nimport { name, version } from './package.json';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport function registerPerformance(instance: FirebaseNamespace): void {\n  const factoryMethod = (\n    app: FirebaseApp,\n    installations: FirebaseInstallations\n  ): PerformanceController => {\n    if (app.name !== DEFAULT_ENTRY_NAME) {\n      throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n    }\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    setupApi(window);\n    SettingsService.getInstance().firebaseAppInstance = app;\n    SettingsService.getInstance().installationsService = installations;\n    return new PerformanceController(app);\n  };\n\n  // Register performance with firebase-app.\n  (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'performance',\n      container => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        // The following call will always succeed because perf has `import '@firebase/installations'`\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factoryMethod(app, installations);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterPerformance(firebase);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    performance?: {\n      (app?: FirebaseApp): FirebasePerformance;\n    };\n  }\n  interface FirebaseApp {\n    performance?(): FirebasePerformance;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}