{"ast":null,"code":"import firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { __assign, __awaiter, __generator } from 'tslib';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ANALYTICS_ID_FIELD = 'measurementId'; // Key to attach FID to in gtag params.\n\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\nvar GtagCommand;\n\n(function (GtagCommand) {\n  GtagCommand[\"EVENT\"] = \"event\";\n  GtagCommand[\"SET\"] = \"set\";\n  GtagCommand[\"CONFIG\"] = \"config\";\n})(GtagCommand || (GtagCommand = {}));\n/*\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n */\n\n\nvar EventName;\n\n(function (EventName) {\n  EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\n  EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\n  EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  /** @deprecated */\n\n  EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  EventName[\"EXCEPTION\"] = \"exception\";\n  EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\n  EventName[\"LOGIN\"] = \"login\";\n  EventName[\"PAGE_VIEW\"] = \"page_view\";\n  EventName[\"PURCHASE\"] = \"purchase\";\n  EventName[\"REFUND\"] = \"refund\";\n  EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  EventName[\"SCREEN_VIEW\"] = \"screen_view\";\n  EventName[\"SEARCH\"] = \"search\";\n  EventName[\"SELECT_CONTENT\"] = \"select_content\";\n  EventName[\"SELECT_ITEM\"] = \"select_item\";\n  EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\n  /** @deprecated */\n\n  EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  EventName[\"SHARE\"] = \"share\";\n  EventName[\"SIGN_UP\"] = \"sign_up\";\n  EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\n  EventName[\"VIEW_CART\"] = \"view_cart\";\n  EventName[\"VIEW_ITEM\"] = \"view_item\";\n  EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(EventName || (EventName = {}));\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\n\n\nfunction logEvent(gtagFunction, analyticsId, eventName, eventParams, options) {\n  var params = eventParams || {};\n\n  if (!options || !options.global) {\n    params = __assign(__assign({}, eventParams), {\n      'send_to': analyticsId\n    });\n  } // Workaround for http://b/141370449 - third argument cannot be undefined.\n\n\n  gtagFunction(GtagCommand.EVENT, eventName, params || {});\n} // TODO: Brad is going to add `screen_name` to GA Gold config parameter schema\n\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\n\n\nfunction setCurrentScreen(gtagFunction, analyticsId, screenName, options) {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, {\n      'screen_name': screenName\n    });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\n\n\nfunction setUserId(gtagFunction, analyticsId, id, options) {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, {\n      'user_id': id\n    });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\n\n\nfunction setUserProperties(gtagFunction, analyticsId, properties, options) {\n  if (options && options.global) {\n    var flatProperties = {};\n\n    for (var _i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\n      var key = _a[_i]; // use dot notation for merge behavior in gtag.js\n\n      flatProperties[\"user_properties.\" + key] = properties[key];\n    }\n\n    gtagFunction(GtagCommand.SET, flatProperties);\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\n\n\nfunction setAnalyticsCollectionEnabled(analyticsId, enabled) {\n  window[\"ga-disable-\" + analyticsId] = !enabled;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar logger = new Logger('@firebase/analytics');\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n */\n\nfunction initializeGAId(app, installations, gtagCore) {\n  return __awaiter(this, void 0, void 0, function () {\n    var fid;\n\n    var _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , installations.getId()];\n\n        case 1:\n          fid = _b.sent(); // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          gtagCore('js', new Date()); // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n\n          gtagCore(GtagCommand.CONFIG, app.options[ANALYTICS_ID_FIELD], (_a = {}, _a[GA_FID_KEY] = fid, // guard against developers accidentally setting properties with prefix `firebase_`\n          _a[ORIGIN_KEY] = 'firebase', _a.update = true, _a));\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction insertScriptTag(dataLayerName) {\n  var script = document.createElement('script'); // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  script.src = GTAG_URL + \"?l=\" + dataLayerName;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/** Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\")\r\n */\n\n\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n\n  return dataLayer;\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer\r\n * @param initializedIdPromisesMap Map of gaIds to their initialization promises\r\n */\n\n\nfunction wrapGtag(gtagCore, initializedIdPromisesMap) {\n  return function (command, idOrNameOrParams, gtagParams) {\n    // If event, check that relevant initialization promises have completed.\n    if (command === GtagCommand.EVENT) {\n      var initializationPromisesToWaitFor = []; // If there's a 'send_to' param, check if any ID specified matches\n      // a FID we have begun a fetch on.\n\n      if (gtagParams && gtagParams['send_to']) {\n        var gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.\n\n        if (!Array.isArray(gaSendToList)) {\n          gaSendToList = [gaSendToList];\n        }\n\n        for (var _i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\n          var sendToId = gaSendToList_1[_i];\n          var initializationPromise = initializedIdPromisesMap[sendToId]; // Groups will not be in the map.\n\n          if (initializationPromise) {\n            initializationPromisesToWaitFor.push(initializationPromise);\n          } else {\n            // There is an item in 'send_to' that is not associated\n            // directly with an FID, possibly a group.  Empty this array\n            // and let it get populated below.\n            initializationPromisesToWaitFor = [];\n            break;\n          }\n        }\n      } // This will be unpopulated if there was no 'send_to' field , or\n      // if not all entries in the 'send_to' field could be mapped to\n      // a FID. In these cases, wait on all pending initialization promises.\n\n\n      if (initializationPromisesToWaitFor.length === 0) {\n        for (var _a = 0, _b = Object.values(initializedIdPromisesMap); _a < _b.length; _a++) {\n          var idPromise = _b[_a];\n          initializationPromisesToWaitFor.push(idPromise);\n        }\n      } // Run core gtag function with args after all relevant initialization\n      // promises have been resolved.\n\n\n      Promise.all(initializationPromisesToWaitFor) // Workaround for http://b/141370449 - third argument cannot be undefined.\n      .then(function () {\n        return gtagCore(GtagCommand.EVENT, idOrNameOrParams, gtagParams || {});\n      }).catch(function (e) {\n        return logger.error(e);\n      });\n    } else if (command === GtagCommand.CONFIG) {\n      var initializationPromiseToWait = initializedIdPromisesMap[idOrNameOrParams] || Promise.resolve();\n      initializationPromiseToWait.then(function () {\n        gtagCore(GtagCommand.CONFIG, idOrNameOrParams, gtagParams);\n      }).catch(function (e) {\n        return logger.error(e);\n      });\n    } else {\n      // SET command.\n      // Splitting calls for CONFIG and SET to make it clear which signature\n      // Typescript is checking.\n      gtagCore(GtagCommand.SET, idOrNameOrParams);\n    }\n  };\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializedIdPromisesMap Map of gaId to initialization promises.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified)\r\n */\n\n\nfunction wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function () {\n    var _args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    } // Must push IArguments object, not an array.\n\n\n    window[dataLayerName].push(arguments);\n  }; // Replace it with existing one if found\n\n\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializedIdPromisesMap);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\n\n\nfunction findGtagScriptOnPage() {\n  var scriptTags = window.document.getElementsByTagName('script');\n\n  for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\n    var tag = _a[_i];\n\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _a;\n\nvar ERRORS = (_a = {}, _a[\"no-ga-id\"\n/* NO_GA_ID */\n] = \"\\\"\" + ANALYTICS_ID_FIELD + \"\\\" field is empty in \" + 'Firebase config. Firebase Analytics ' + 'requires this field to contain a valid measurement ID.', _a[\"already-exists\"\n/* ALREADY_EXISTS */\n] = 'A Firebase Analytics instance with the measurement ID ${id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each measurement ID.', _a[\"already-initialized\"\n/* ALREADY_INITIALIZED */\n] = 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.', _a[\"interop-component-reg-failed\"\n/* INTEROP_COMPONENT_REG_FAILED */\n] = 'Firebase Analytics Interop Component failed to instantiate', _a);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Maps gaId to FID fetch promises.\r\n */\n\nvar initializedIdPromisesMap = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\n\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\n\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\n\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\n\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\n\nvar globalInitDone = false;\n/**\r\n * For testing\r\n */\n\nfunction resetGlobalVars(newGlobalInitDone, newGaInitializedPromise) {\n  if (newGlobalInitDone === void 0) {\n    newGlobalInitDone = false;\n  }\n\n  if (newGaInitializedPromise === void 0) {\n    newGaInitializedPromise = {};\n  }\n\n  globalInitDone = newGlobalInitDone;\n  initializedIdPromisesMap = newGaInitializedPromise;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n/**\r\n * For testing\r\n */\n\n\nfunction getGlobalVars() {\n  return {\n    initializedIdPromisesMap: initializedIdPromisesMap\n  };\n}\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\n\n\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\"\n    /* ALREADY_INITIALIZED */\n    );\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\nfunction factory(app, installations) {\n  var analyticsId = app.options[ANALYTICS_ID_FIELD];\n\n  if (!analyticsId) {\n    throw ERROR_FACTORY.create(\"no-ga-id\"\n    /* NO_GA_ID */\n    );\n  }\n\n  if (initializedIdPromisesMap[analyticsId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\"\n    /* ALREADY_EXISTS */\n    , {\n      id: analyticsId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n\n    getOrCreateDataLayer(dataLayerName);\n\n    var _a = wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagName),\n        wrappedGtag = _a.wrappedGtag,\n        gtagCore = _a.gtagCore;\n\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  } // Async but non-blocking.\n\n\n  initializedIdPromisesMap[analyticsId] = initializeGAId(app, installations, gtagCoreFunction);\n  var analyticsInstance = {\n    app: app,\n    logEvent: function (eventName, eventParams, options) {\n      return logEvent(wrappedGtagFunction, analyticsId, eventName, eventParams, options);\n    },\n    setCurrentScreen: function (screenName, options) {\n      return setCurrentScreen(wrappedGtagFunction, analyticsId, screenName, options);\n    },\n    setUserId: function (id, options) {\n      return setUserId(wrappedGtagFunction, analyticsId, id, options);\n    },\n    setUserProperties: function (properties, options) {\n      return setUserProperties(wrappedGtagFunction, analyticsId, properties, options);\n    },\n    setAnalyticsCollectionEnabled: function (enabled) {\n      return setAnalyticsCollectionEnabled(analyticsId, enabled);\n    }\n  };\n  return analyticsInstance;\n}\n\nvar name = \"@firebase/analytics\";\nvar version = \"0.3.3\";\n/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Analytics.\r\n */\n\nvar ANALYTICS_TYPE = 'analytics';\n\nfunction registerAnalytics(instance) {\n  instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations').getImmediate();\n    return factory(app, installations);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    settings: settings,\n    EventName: EventName\n  }));\n  instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n  instance.registerVersion(name, version);\n\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\"\n      /* INTEROP_COMPONENT_REG_FAILED */\n      , {\n        reason: e\n      });\n    }\n  }\n}\n\nregisterAnalytics(firebase);\nexport { factory, getGlobalVars, registerAnalytics, resetGlobalVars, settings };","map":{"version":3,"mappings":"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","names":["ANALYTICS_ID_FIELD","GA_FID_KEY","ORIGIN_KEY","GTAG_URL","GtagCommand","EventName","logEvent","gtagFunction","analyticsId","eventName","eventParams","options","params","global","EVENT","setCurrentScreen","screenName","SET","CONFIG","update","setUserId","id","setUserProperties","properties","flatProperties","keys","_i","key","setAnalyticsCollectionEnabled","enabled","window","logger","Logger","initializeGAId","app","installations","gtagCore","getId","fid","_b","Date","_a","insertScriptTag","dataLayerName","script","document","createElement","src","async","head","appendChild","getOrCreateDataLayer","dataLayer","Array","isArray","wrapGtag","initializedIdPromisesMap","command","idOrNameOrParams","gtagParams","initializationPromisesToWaitFor","gaSendToList","sendToId","initializationPromise","push","length","values","idPromise","Promise","all","then","catch","error","e","initializationPromiseToWait","resolve","wrapOrCreateGtag","gtagFunctionName","_args","arguments","wrappedGtag","findGtagScriptOnPage","scriptTags","getElementsByTagName","tag","includes","ERRORS","ERROR_FACTORY","ErrorFactory","gtagName","gtagCoreFunction","wrappedGtagFunction","globalInitDone","resetGlobalVars","newGlobalInitDone","newGaInitializedPromise","getGlobalVars","settings","create","factory","analyticsInstance","ANALYTICS_TYPE","registerAnalytics","instance","INTERNAL","registerComponent","Component","container","getProvider","getImmediate","setServiceProps","internalFactory","registerVersion","name","version","analytics","reason","firebase"],"sources":["../src/constants.ts","../src/functions.ts","../src/logger.ts","../src/helpers.ts","../src/errors.ts","../src/factory.ts","../index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const ANALYTICS_ID_FIELD = 'measurementId';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n\n/*\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /** @deprecated */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport function logEvent(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  let params: EventParams | ControlParams = eventParams || {};\n  if (!options || !options.global) {\n    params = { ...eventParams, 'send_to': analyticsId };\n  }\n  // Workaround for http://b/141370449 - third argument cannot be undefined.\n  gtagFunction(GtagCommand.EVENT, eventName, params || {});\n}\n\n// TODO: Brad is going to add `screen_name` to GA Gold config parameter schema\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport function setCurrentScreen(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): void {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport function setUserId(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): void {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport function setUserProperties(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsId: string,\n  enabled: boolean\n): void {\n  window[`ga-disable-${analyticsId}`] = !enabled;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  DataLayer,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport {\n  GtagCommand,\n  ANALYTICS_ID_FIELD,\n  GA_FID_KEY,\n  ORIGIN_KEY,\n  GTAG_URL\n} from './constants';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { logger } from './logger';\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n */\nexport async function initializeGAId(\n  app: FirebaseApp,\n  installations: FirebaseInstallations,\n  gtagCore: Gtag\n): Promise<void> {\n  const fid = await installations.getId();\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js' as any, new Date());\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  gtagCore(GtagCommand.CONFIG, app.options[ANALYTICS_ID_FIELD]!, {\n    [GA_FID_KEY]: fid,\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    [ORIGIN_KEY]: 'firebase',\n    update: true\n  });\n}\n\nexport function insertScriptTag(dataLayerName: string): void {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/** Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\")\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer\n * @param initializedIdPromisesMap Map of gaIds to their initialization promises\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  initializedIdPromisesMap: { [gaId: string]: Promise<void> }\n): Function {\n  return (\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ) => {\n    // If event, check that relevant initialization promises have completed.\n    if (command === GtagCommand.EVENT) {\n      let initializationPromisesToWaitFor: Array<Promise<void>> = [];\n      // If there's a 'send_to' param, check if any ID specified matches\n      // a FID we have begun a fetch on.\n      if (gtagParams && gtagParams['send_to']) {\n        let gaSendToList: string | string[] = gtagParams['send_to'];\n        // Make it an array if is isn't, so it can be dealt with the same way.\n        if (!Array.isArray(gaSendToList)) {\n          gaSendToList = [gaSendToList];\n        }\n        for (const sendToId of gaSendToList) {\n          const initializationPromise = initializedIdPromisesMap[sendToId];\n          // Groups will not be in the map.\n          if (initializationPromise) {\n            initializationPromisesToWaitFor.push(initializationPromise);\n          } else {\n            // There is an item in 'send_to' that is not associated\n            // directly with an FID, possibly a group.  Empty this array\n            // and let it get populated below.\n            initializationPromisesToWaitFor = [];\n            break;\n          }\n        }\n      }\n\n      // This will be unpopulated if there was no 'send_to' field , or\n      // if not all entries in the 'send_to' field could be mapped to\n      // a FID. In these cases, wait on all pending initialization promises.\n      if (initializationPromisesToWaitFor.length === 0) {\n        for (const idPromise of Object.values(initializedIdPromisesMap)) {\n          initializationPromisesToWaitFor.push(idPromise);\n        }\n      }\n      // Run core gtag function with args after all relevant initialization\n      // promises have been resolved.\n      Promise.all(initializationPromisesToWaitFor)\n        // Workaround for http://b/141370449 - third argument cannot be undefined.\n        .then(() =>\n          gtagCore(\n            GtagCommand.EVENT,\n            idOrNameOrParams as string,\n            gtagParams || {}\n          )\n        )\n        .catch(e => logger.error(e));\n    } else if (command === GtagCommand.CONFIG) {\n      const initializationPromiseToWait =\n        initializedIdPromisesMap[idOrNameOrParams as string] ||\n        Promise.resolve();\n      initializationPromiseToWait\n        .then(() => {\n          gtagCore(GtagCommand.CONFIG, idOrNameOrParams as string, gtagParams);\n        })\n        .catch(e => logger.error(e));\n    } else {\n      // SET command.\n      // Splitting calls for CONFIG and SET to make it clear which signature\n      // Typescript is checking.\n      gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n    }\n  };\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializedIdPromisesMap Map of gaId to initialization promises.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified)\n */\nexport function wrapOrCreateGtag(\n  initializedIdPromisesMap: { [gaId: string]: Promise<void> },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function(..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializedIdPromisesMap);\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\nimport { ANALYTICS_ID_FIELD } from './constants';\n\nexport const enum AnalyticsError {\n  NO_GA_ID = 'no-ga-id',\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.NO_GA_ID]:\n    `\"${ANALYTICS_ID_FIELD}\" field is empty in ` +\n    'Firebase config. Firebase Analytics ' +\n    'requires this field to contain a valid measurement ID.',\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the measurement ID ${id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each measurement ID.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAnalytics,\n  Gtag,\n  SettingsOptions\n} from '@firebase/analytics-types';\nimport {\n  logEvent,\n  setCurrentScreen,\n  setUserId,\n  setUserProperties,\n  setAnalyticsCollectionEnabled\n} from './functions';\nimport {\n  initializeGAId,\n  insertScriptTag,\n  getOrCreateDataLayer,\n  wrapOrCreateGtag,\n  findGtagScriptOnPage\n} from './helpers';\nimport { ANALYTICS_ID_FIELD } from './constants';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInstallations } from '@firebase/installations-types';\n\n/**\n * Maps gaId to FID fetch promises.\n */\nlet initializedIdPromisesMap: { [gaId: string]: Promise<void> } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newGaInitializedPromise = {}\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializedIdPromisesMap = newGaInitializedPromise;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n */\nexport function getGlobalVars(): {\n  initializedIdPromisesMap: { [gaId: string]: Promise<void> };\n} {\n  return {\n    initializedIdPromisesMap\n  };\n}\n\n/**\n * This must be run before calling firebase.analytics() or it won't\n * have any effect.\n * @param options Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  installations: FirebaseInstallations\n): FirebaseAnalytics {\n  const analyticsId = app.options[ANALYTICS_ID_FIELD];\n  if (!analyticsId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_GA_ID);\n  }\n\n  if (initializedIdPromisesMap[analyticsId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: analyticsId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializedIdPromisesMap,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  initializedIdPromisesMap[analyticsId] = initializeGAId(\n    app,\n    installations,\n    gtagCoreFunction\n  );\n\n  const analyticsInstance: FirebaseAnalytics = {\n    app,\n    logEvent: (eventName, eventParams, options) =>\n      logEvent(\n        wrappedGtagFunction,\n        analyticsId,\n        eventName,\n        eventParams,\n        options\n      ),\n    setCurrentScreen: (screenName, options) =>\n      setCurrentScreen(wrappedGtagFunction, analyticsId, screenName, options),\n    setUserId: (id, options) =>\n      setUserId(wrappedGtagFunction, analyticsId, id, options),\n    setUserProperties: (properties, options) =>\n      setUserProperties(wrappedGtagFunction, analyticsId, properties, options),\n    setAnalyticsCollectionEnabled: enabled =>\n      setAnalyticsCollectionEnabled(analyticsId, enabled)\n  };\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseAnalytics } from '@firebase/analytics-types';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  factory,\n  settings,\n  resetGlobalVars,\n  getGlobalVars\n} from './src/factory';\nimport { EventName } from './src/constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './src/errors';\n\nimport { name, version } from './package.json';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\n/**\n * Type constant for Firebase Analytics.\n */\nconst ANALYTICS_TYPE = 'analytics';\nexport function registerAnalytics(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factory(app, installations);\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      settings,\n      EventName\n    })\n  );\n\n  instance.INTERNAL.registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  instance.registerVersion(name, version);\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nexport { factory, settings, resetGlobalVars, getGlobalVars };\n\nregisterAnalytics(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    analytics(app?: FirebaseApp): FirebaseAnalytics;\n  }\n  interface FirebaseApp {\n    analytics(): FirebaseAnalytics;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}