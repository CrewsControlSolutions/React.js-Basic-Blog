{"ast":null,"code":"var _jsxFileName = \"/Users/mikecrews/Documents/TechAcademy/GitHub/React.js/blog-project/src/components/PostForm.js\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Quill from \"react-quill\";\n\nconst PostForm = _ref => {\n  let {\n    post: propsPost,\n    addNewPost,\n    updatePost\n  } = _ref;\n  const [post, setPost] = useState({ ...propsPost\n  });\n  const [saved, setSaved] = useState(false);\n  const prevPostRef = useRef();\n  useEffect(() => {\n    prevPostRef.current = post;\n  }, [post]);\n  const prevPost = prevPostRef.current;\n  const quillRef = React.useRef();\n  useEffect(() => {\n    if (prevPost && quillRef.current) {\n      if (propsPost.id !== prevPost.id) {\n        setPost({ ...propsPost\n        });\n        quillRef.current.getEditor().setContents(``);\n      }\n    }\n  }, [prevPost, propsPost]);\n\n  const handlePostForm = event => {\n    event.preventDefault();\n\n    if (post.title) {\n      if (updatePost) {\n        updatePost(post);\n      } else {\n        addNewPost(post);\n      }\n\n      setSaved(true);\n    } else {\n      alert(\"Title required\");\n    }\n  };\n\n  if (saved === true) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"container\",\n    onSubmit: handlePostForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"Add a New Post\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"form-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, \"Title:\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    defaultValue: post.title,\n    id: \"form-title\",\n    value: post.title,\n    onChange: event => setPost({ ...post,\n      title: event.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"form-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Content:\")), /*#__PURE__*/React.createElement(Quill, {\n    ref: quillRef,\n    defaultValue: post.content,\n    onChange: (content, delta, source, editor) => {\n      setPost({ ...post,\n        content: editor.getContents()\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"Save\")));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/mikecrews/Documents/TechAcademy/GitHub/React.js/blog-project/src/components/PostForm.js"],"names":["React","useState","useEffect","useRef","Redirect","Quill","PostForm","post","propsPost","addNewPost","updatePost","setPost","saved","setSaved","prevPostRef","current","prevPost","quillRef","id","getEditor","setContents","handlePostForm","event","preventDefault","title","alert","target","value","content","delta","source","editor","getContents"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Quill from \"react-quill\";\n\nconst PostForm = ({ post: propsPost, addNewPost, updatePost }) => {\n  const [post, setPost] = useState({ ...propsPost });\n  const [saved, setSaved] = useState(false);\n\n  const prevPostRef = useRef();\n  useEffect(() => {\n    prevPostRef.current = post;\n  }, [post]);\n  const prevPost = prevPostRef.current;\n\n  const quillRef = React.useRef();\n  useEffect(() => {\n    if (prevPost && quillRef.current) {\n      if (propsPost.id !== prevPost.id) {\n        setPost({ ...propsPost });\n        quillRef.current.getEditor().setContents(``);\n      }\n    }\n  }, [prevPost, propsPost]);\n\n  const handlePostForm = (event) => {\n    event.preventDefault();\n    if (post.title) {\n      if (updatePost) {\n        updatePost(post);\n      } else {\n        addNewPost(post);\n      }\n      setSaved(true);\n    } else {\n      alert(\"Title required\");\n    }\n  };\n\n  if (saved === true) {\n    return <Redirect to=\"/\" />;\n  }\n  return (\n    <form className=\"container\" onSubmit={handlePostForm}>\n      <h1>Add a New Post</h1>\n      <p>\n        <label htmlFor=\"form-title\">Title:</label>\n        <br />\n        <input\n          defaultValue={post.title}\n          id=\"form-title\"\n          value={post.title}\n          onChange={(event) =>\n            setPost({\n              ...post,\n              title: event.target.value,\n            })\n          }\n        />\n      </p>\n      <p>\n        <label htmlFor=\"form-content\">Content:</label>\n      </p>\n      <Quill\n        ref={quillRef}\n        defaultValue={post.content}\n        onChange={(content, delta, source, editor) => {\n          setPost({\n            ...post,\n            content: editor.getContents(),\n          });\n        }}\n      />\n      <p>\n        <button type=\"submit\">Save</button>\n      </p>\n    </form>\n  );\n};\nexport default PostForm;\n"]},"metadata":{},"sourceType":"module"}