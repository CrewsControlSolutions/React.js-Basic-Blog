{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction tokenizeWithNewLines(str) {\n  var NewLine = '\\n';\n\n  if (str === NewLine) {\n    return [str];\n  }\n\n  var lines = str.split(NewLine);\n\n  if (lines.length === 1) {\n    return lines;\n  }\n\n  var lastIndex = lines.length - 1;\n  return lines.reduce(function (pv, line, ind) {\n    if (ind !== lastIndex) {\n      if (line !== '') {\n        pv = pv.concat(line, NewLine);\n      } else {\n        pv.push(NewLine);\n      }\n    } else if (line !== '') {\n      pv.push(line);\n    }\n\n    return pv;\n  }, []);\n}\n\nexports.tokenizeWithNewLines = tokenizeWithNewLines;","map":{"version":3,"sources":["/Users/mikecrews/Documents/TechAcademy/GitHub/React.js/blog-project/node_modules/quill-delta-to-html/dist/commonjs/helpers/string.js"],"names":["Object","defineProperty","exports","value","tokenizeWithNewLines","str","NewLine","lines","split","length","lastIndex","reduce","pv","line","ind","concat","push"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,SAASC,oBAAT,CAA8BC,GAA9B,EAAmC;AAC/B,MAAIC,OAAO,GAAG,IAAd;;AACA,MAAID,GAAG,KAAKC,OAAZ,EAAqB;AACjB,WAAO,CAACD,GAAD,CAAP;AACH;;AACD,MAAIE,KAAK,GAAGF,GAAG,CAACG,KAAJ,CAAUF,OAAV,CAAZ;;AACA,MAAIC,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;AACpB,WAAOF,KAAP;AACH;;AACD,MAAIG,SAAS,GAAGH,KAAK,CAACE,MAAN,GAAe,CAA/B;AACA,SAAOF,KAAK,CAACI,MAAN,CAAa,UAAUC,EAAV,EAAcC,IAAd,EAAoBC,GAApB,EAAyB;AACzC,QAAIA,GAAG,KAAKJ,SAAZ,EAAuB;AACnB,UAAIG,IAAI,KAAK,EAAb,EAAiB;AACbD,QAAAA,EAAE,GAAGA,EAAE,CAACG,MAAH,CAAUF,IAAV,EAAgBP,OAAhB,CAAL;AACH,OAFD,MAGK;AACDM,QAAAA,EAAE,CAACI,IAAH,CAAQV,OAAR;AACH;AACJ,KAPD,MAQK,IAAIO,IAAI,KAAK,EAAb,EAAiB;AAClBD,MAAAA,EAAE,CAACI,IAAH,CAAQH,IAAR;AACH;;AACD,WAAOD,EAAP;AACH,GAbM,EAaJ,EAbI,CAAP;AAcH;;AACDV,OAAO,CAACE,oBAAR,GAA+BA,oBAA/B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction tokenizeWithNewLines(str) {\n    var NewLine = '\\n';\n    if (str === NewLine) {\n        return [str];\n    }\n    var lines = str.split(NewLine);\n    if (lines.length === 1) {\n        return lines;\n    }\n    var lastIndex = lines.length - 1;\n    return lines.reduce(function (pv, line, ind) {\n        if (ind !== lastIndex) {\n            if (line !== '') {\n                pv = pv.concat(line, NewLine);\n            }\n            else {\n                pv.push(NewLine);\n            }\n        }\n        else if (line !== '') {\n            pv.push(line);\n        }\n        return pv;\n    }, []);\n}\nexports.tokenizeWithNewLines = tokenizeWithNewLines;\n"]},"metadata":{},"sourceType":"script"}