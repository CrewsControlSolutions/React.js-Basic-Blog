{"version":3,"sources":["context/UserContext.js","components/Header.js","components/Message.js","components/Posts.js","components/Post.js","components/PostForm.js","components/NotFound.js","components/Login.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","createContext","email","isAuthenticated","Header","props","useContext","user","onLogout","className","to","onClick","event","preventDefault","Message","type","saved","updated","deleted","Posts","posts","deletePost","length","key","map","post","slug","title","Post","contentHTML","QuillDeltaToHtmlConverter","content","ops","convert","dangerouslySetInnerHTML","__html","PostForm","propsPost","addNewPost","updatePost","useState","setPost","setSaved","prevPostRef","useRef","useEffect","current","prevPost","quillRef","React","getEditor","setContents","onSubmit","alert","htmlFor","defaultValue","value","onChange","target","ref","delta","source","editor","getContents","NotFound","Login","onLogin","setEmail","password","setPassword","name","disabled","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","useStorageState","localStorage","setPosts","message","setMessage","setUser","database","on","snapshot","val","newStatePosts","push","setFlashMessage","setTimeout","getNewSlugFromTitle","encodeURIComponent","toLowerCase","split","join","postsRef","update","window","confirm","remove","Provider","auth","signInWithEmailAndPassword","then","response","catch","error","console","signOut","exact","path","render","find","match","params","postSlug","component","Boolean","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c842622.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst UserContext = createContext({\n    email: ``,\n    isAuthenticated: false,\n});\nexport default UserContext;","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport UserContext from \"../context/UserContext\";\n\nconst Header = (props) => {\n    const { user, onLogout } = useContext(UserContext);\n\n    return (\n        <header className=\"App-header\">\n            <ul className=\"container\">\n                <li>\n                    <Link to=\"/\">My Site</Link>\n                </li>\n                {user.isAuthenticated ? (\n                    // utilize a <></> fragment wrapper in order to return single React element\n                    <>\n                        <li>\n                            <Link to=\"/new\">New Post</Link>\n                        </li>\n                        <li>\n                            <button\n                                className=\"linkLike\"\n                                onClick={(event) => {\n                                    event.preventDefault();\n                                    onLogout();\n                                }}\n                            >\n                                Logout\n                            </button>\n                        </li>\n                    </>\n                ) : (\n                    <li>\n                        <Link to=\"/login\">Login</Link>\n                    </li>\n                )}\n            </ul>\n        </header>\n    );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Message = ({ type }) => {\n  const messages = {\n    saved: \"Post has been saved!\",\n    updated: \"Post has been updated!\",\n    deleted: \"Post has been deleted.\"\n  };\n  return (\n    <div className={`App-message ${type}`}>\n      <p className=\"container\">\n        <strong>{messages[type]}</strong>\n      </p>\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport UserContext from \"../context/UserContext\";\n\nconst Posts = ({ posts, deletePost }) => {\n    const { user } = useContext(UserContext);\n\n    return (\n            <article className=\"posts container\">\n                <h1>Posts</h1>\n                <ul>\n                    {posts.length < 1 && <li key=\"empty\">No posts yet!</li>}\n                    {posts.map(post => (\n                        <li key={post.key}>\n                            <h2>\n                                <Link to={`/post/${post.slug}`}>{post.title}</Link>\n                            </h2>\n                            {user.isAuthenticated && (\n                                <p>\n                                    <Link to={`/edit/${post.slug}`}>Edit</Link>\n                                    {\" | \"}\n                                    <button\n                                        className = \"linkLike\"\n                                        onClick = {() => deletePost(post)}\n                                    >\n                                        Delete\n                                    </button>\n                                </p>\n                            )}\n                        </li>\n                    ))}\n                </ul>\n            </article>\n        );\n};\n\nexport default Posts;\n","import React from \"react\";\nimport { QuillDeltaToHtmlConverter } from \"quill-delta-to-html\";\n\nconst Post = ({ post }) => {\n  const converter = new QuillDeltaToHtmlConverter(post.content.ops, {});\n  const contentHTML = converter.convert();\n\n  return (\n    <article className=\"post container\">\n      <h1>{post.title}</h1>\n      <div\n        className=\"content\"\n        dangerouslySetInnerHTML={{ __html: contentHTML }}\n      />\n    </article>\n  );\n};\n\nexport default Post;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport Quill from \"react-quill\";\n\nconst PostForm = ({ post: propsPost, addNewPost, updatePost }) => {\n  const [post, setPost] = useState({ ...propsPost });\n  const [saved, setSaved] = useState(false);\n\n  const prevPostRef = useRef();\n  useEffect(() => {\n    prevPostRef.current = post;\n  }, [post]);\n  const prevPost = prevPostRef.current;\n\n  const quillRef = React.useRef();\n  useEffect(() => {\n    if (prevPost && quillRef.current) {\n      if (propsPost.key !== prevPost.key) {\n        setPost({ ...propsPost });\n        quillRef.current.getEditor().setContents(``);\n      }\n    }\n  }, [prevPost, propsPost]);\n\n  const handlePostForm = (event) => {\n    event.preventDefault();\n    if (post.title) {\n      if (updatePost) {\n        updatePost(post);\n      } else {\n        addNewPost(post);\n      }\n      setSaved(true);\n    }\n    else {\n      alert(\"Title required\");\n    }\n  };\n\n  if (saved === true) {\n    return <Redirect to=\"/\" />;\n  }\n  return (\n    <form className=\"container\" onSubmit={handlePostForm}>\n      <h1>Add a New Post</h1>\n      <p>\n        <label htmlFor=\"form-title\">Title:</label>\n        <br />\n        <input\n          defaultValue={post.title}\n          //changed from \"id\" to \"key\" below\n          key=\"form-title\"\n          value={post.title}\n          onChange={(event) =>\n            setPost({\n              ...post,\n              title: event.target.value,\n            })\n          }\n        />\n      </p>\n      <p>\n        <label htmlFor=\"form-content\">Content:</label>\n      </p>\n      <Quill\n        ref={quillRef}\n        defaultValue={post.content}\n        onChange={(content, delta, source, editor) => {\n          setPost({\n            ...post,\n            content: editor.getContents(),\n          });\n        }}\n      />\n      <p>\n        <button type=\"submit\">Save</button>\n      </p>\n    </form>\n  );\n};\nexport default PostForm;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NotFound = () => (\n  <article className=\"not-found container\">\n    <h1>404!</h1>\n    <p>\n      Content not found. <Link to=\"/\">Return to posts</Link>\n    </p>\n  </article>\n);\n\nexport default NotFound;\n","import React, { useState, useContext } from \"react\";\nimport UserContext from \"../context/UserContext\";\n\nconst Login = (props) => {\n    const { onLogin } = useContext(UserContext);\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const handleLogin = (event) => {\n        event.preventDefault();\n        onLogin(email, password);\n    };\n\n    return (\n        <form className=\"container\" name=\"login\" onSubmit={handleLogin}>\n            <p>\n                <label htmlFor=\"email\">Email:</label>\n                <input\n                    type=\"email\"\n                    onChange={(event) => setEmail(event.target.value)}\n                />\n            </p>\n            <p>\n                <label htmlFor=\"password\">Password:</label>\n                <input type=\"password\" onChange={(event) =>\n                    setPassword(event.target.value)}\n                />\n            </p>\n            <p>\n                <button type=\"submit\" disabled={!email && !password}>\n                    Login\n                </button>\n            </p>\n        </form>\n    );\n};\nexport default Login;","import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nimport database from './firebase';\n//import { initializeApp } from \"firebase/app\";\n\nconst config = {\n    apiKey: \"AIzaSyDG9UAcd8r6MrgejzWqDF4cTeVXJ_xWljE\",\n    authDomain: \"react-blog-demo-1.firebaseapp.com\",\n    databaseURL: \"https://react-blog-demo-1-default-rtdb.firebaseio.com\",\n    projectId: \"react-blog-demo-1\",\n    storageBucket: \"react-blog-demo-1.appspot.com\",\n    messagingSenderId: \"702257424356\",\n    appId: \"1:702257424356:web:0e3d95f0654cace51089f1\"\n};\n\nfirebase.initializeApp(config);\n//var database = firebase.database();\nexport default firebase;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { useStorageState } from \"react-storage-hooks\";\nimport UserContext from \"./context/UserContext\";\nimport Header from \"./components/Header\";\nimport Message from \"./components/Message\";\nimport Posts from \"./components/Posts\";\nimport Post from \"./components/Post\";\nimport PostForm from \"./components/PostForm\";\nimport NotFound from \"./components/NotFound\";\nimport Login from \"./components/Login\";\nimport firebase from \"./firebase\";\n\nimport \"./App.css\";\n\nconst App = (props) => {\n  const [posts, setPosts] = useStorageState(localStorage, `state-posts`, []);\n  const [message, setMessage] = useState(null);\n  const [user, setUser] = useStorageState(localStorage, \"state-user\", {});\n\n  useEffect(() => {\n      const postsRef = firebase.database().ref(\"posts\");\n      postsRef.on(\"value\", (snapshot) => {\n          const posts = snapshot.val();\n          const newStatePosts = [];\n          for (let post in posts) {\n              newStatePosts.push({\n                  key: post,\n                  slug: posts[post].slug,\n                  title: posts[post].title,\n                  content: posts[post].content,\n              });\n          }\n          setPosts(newStatePosts);\n      });\n  }, [setPosts]);\n\n  const setFlashMessage = (message) => {\n    setMessage(message);\n    setTimeout(() => {\n      setMessage(null);\n    }, 1600);\n  };\n\n  const getNewSlugFromTitle = (title) =>\n    encodeURIComponent(title.toLowerCase().split(\" \").join(\"-\"));\n\n  const addNewPost = (post) => {\n    const postsRef = firebase.database().ref(\"posts\");\n    post.slug = getNewSlugFromTitle(post.title);\n    delete post.key;\n    postsRef.push(post);\n    setFlashMessage(`saved`);\n  };\n\n  // const Push = (props) => {\n  //     firebase.database().ref(\"react-blog-demo-1-default-rtdb\").set({\n  //         title : \"This is a test.\",\n  //         contents : \"This is the content of the test.\",\n  //     }).catch(alert);\n  // }\n\n  const updatePost = (post) => {\n        const postRef = firebase.database().ref(\"posts/\" + post.key);\n        postRef.update({\n          slug: getNewSlugFromTitle(post.title),\n          title: post.title,\n          content: post.content,\n        });\n\n        // post.slug = getNewSlugFromTitle(post.title);\n        // const index = posts.findIndex((p) => p.key === post.key);\n        // const oldPosts = posts.slice(0, index).concat(posts.slice(index + 1));\n        // const updatedPosts = [...oldPosts, post].sort((a, b) => a.key - b.key);\n        // setPosts(updatedPosts);\n        setFlashMessage(`updated`);\n  };\n\n  const deletePost = (post) => {\n      if (window.confirm(\"Delete this post?\")) {\n          const postRef = firebase.database().ref(\"posts/\" + post.key);\n          postRef.remove();\n          // const updatedPosts = posts.filter((p) => p.key !== post.key);\n          // setPosts(updatedPosts);\n          setFlashMessage(`deleted`);\n      }\n  };\n\n  // This is the possible function that I am having trouble with. Specifically, I receive an error in the\n  // console when entering a correct username and password. (See my email for a valid username and password\n  // to try.) The other possible area that is causing this error could be something in the firebase.js\n  // file.\n  const onLogin = (email, password) => {\n      firebase\n          .auth()\n          .signInWithEmailAndPassword(email, password)\n          // .then(user => console.log(\"Logged in\"))\n          .then((response) => {\n              setUser({\n                  email: response.user[\"email\"],\n                  isAuthenticated: true,\n              });\n          })\n          .catch(error => console.error(error));\n  };\n\n  const onLogout = () => {\n      firebase\n          .auth()\n          .signOut()\n          .then(() => {\n              setUser({ isAuthenticated: false });\n          })\n          .catch((error) => console.error(error));\n  };\n\n    return (\n        <Router>\n            <UserContext.Provider value={{ user, onLogin, onLogout }}>\n                <div className=\"App\">\n                    <Header />\n                    {message && <Message type={message} />}\n                    <Switch>\n                        <Route exact path=\"/\" render={() => <Posts posts={posts} deletePost={deletePost} />} />\n                        <Route\n                            path=\"/post/:postSlug\"\n                            render={(props) => {\n                                const post = posts.find(\n                                    (post) => post.slug === props.match.params.postSlug\n                                );\n                                if (post) {\n                                    return <Post post={post} />;\n                                } else {\n                                    return <Redirect to=\"/\" />;\n                                }\n                            }}\n                        />\n                        <Route\n                            exact\n                            path=\"/login\"\n                            render={() =>\n                                !user.isAuthenticated ? <Login /> : <Redirect to=\"/\" />\n                            }\n                        />\n                        <Route\n                            exact\n                            path=\"/new\"\n                            render={() => (\n                                user.isAuthenticated ? (\n                                    <PostForm\n                                        addNewPost={addNewPost}\n                                        post={{ key: null, slug: \"\", title: \"\", content: \"\" }}\n                                    />\n                                ) : (\n                                    <Redirect to=\"/login\" />\n                                )\n                            )}\n                        />\n                        <Route\n                            path=\"/edit/:postSlug\"\n                            render={(props) => {\n                                const post = posts.find(\n                                    (post) => post.slug === props.match.params.postSlug\n                                );\n                                if (post) {\n                                    if (user.isAuthenticated) {\n                                        return <PostForm updatePost={updatePost} post={post} />;\n                                    } else {\n                                        return <Redirect to=\"/login\" />;\n                                    }\n                                } else {\n                                    return <Redirect to=\"/\" />;\n                                }\n                            }}\n                        />\n                        <Route component={NotFound} />\n                    </Switch>\n                </div>\n            </UserContext.Provider>\n        </Router>\n    );\n};\n\nexport default App;\n\n// previous Realtime Database rules (auto-configured)\n// {\n//     \"rules\": {\n//     \".read\": \"now < 1648447200000\",  // 2022-3-28\n//         \".write\": \"now < 1648447200000\",  // 2022-3-28\n// }\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}